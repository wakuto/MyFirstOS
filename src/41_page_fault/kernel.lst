     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    27                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
    28                              <1>     SP_TASK_3 equ STACK_BASE + (STACK_SIZE * 4)
    29                              <1> 
    30                              <1>     CR3_BASE equ 0x0010_5000    ; ページ変換テーブル タスク3用
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc rose
    98 00000000 ????????            <1>     .x0         resd 1      ; 左上座標
    99 00000004 ????????            <1>     .y0         resd 1      ; 
   100 00000008 ????????            <1>     .x1         resd 1      ; 右下座標
   101 0000000C ????????            <1>     .y1         resd 1      ;
   102                              <1> 
   103 00000010 ????????            <1>     .n          resd 1      ; 変数n
   104 00000014 ????????            <1>     .d          resd 1      ; 変数d
   105                              <1> 
   106                              <1>     ;描画色
   107 00000018 ????????            <1>     .color_x    resd 1      ; x軸
   108 0000001C ????????            <1>     .color_y    resd 1      ; y軸
   109 00000020 ????????            <1>     .color_z    resd 1      ; 枠
   110 00000024 ????????            <1>     .color_s    resd 1      ; 文字
   111 00000028 ????????            <1>     .color_f    resd 1      ; グラフ描画
   112 0000002C ????????            <1>     .color_b    resd 1      ; グラフ消去
   113                              <1> 
   114 00000030 <res 10h>           <1>     .title      resb 16     ; タイトル
   115                              <1> endstruc
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[50020000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[C0020000]        <1>  mov edi, %1
    67 0000001D B8[EE020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[C8020000]        <1>  mov edi, %1
    67 00000038 B8[C6030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                      set_desc GDT.tss_2, TSS_2       ; タスク2用TSSの設定
    63 0000004C 50                  <1>  push eax
    64 0000004D 57                  <1>  push edi
    65                              <1> 
    66 0000004E BF[D0020000]        <1>  mov edi, %1
    67 00000053 B8[9E040000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000058 66894702            <1>  mov [edi + 2], ax
    74 0000005C C1E810              <1>  shr eax, 16
    75 0000005F 884704              <1>  mov [edi + 4], al
    76 00000062 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000065 5F                  <1>  pop edi
    79 00000066 58                  <1>  pop eax
    25                                      set_desc GDT.tss_3, TSS_3       ; タスク3用TSSの設定
    63 00000067 50                  <1>  push eax
    64 00000068 57                  <1>  push edi
    65                              <1> 
    66 00000069 BF[D8020000]        <1>  mov edi, %1
    67 0000006E B8[76050000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000073 66894702            <1>  mov [edi + 2], ax
    74 00000077 C1E810              <1>  shr eax, 16
    75 0000007A 884704              <1>  mov [edi + 4], al
    76 0000007D 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000080 5F                  <1>  pop edi
    79 00000081 58                  <1>  pop eax
    26                                  
    27                                      ; コールゲートの設定
    28                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 00000082 50                  <1>  push eax
    84 00000083 57                  <1>  push edi
    85                              <1> 
    86 00000084 BF[E0020000]        <1>  mov edi, %1
    87 00000089 B8[0C130000]        <1>  mov eax, %2
    88                              <1> 
    89 0000008E 668907              <1>  mov [edi + 0], ax
    90 00000091 C1E810              <1>  shr eax, 16
    91 00000094 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 00000098 5F                  <1>  pop edi
    94 00000099 58                  <1>  pop eax
    29                                  
    30                                      ; LDTの設定
    31                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 0000009A 50                  <1>  push eax
    64 0000009B 57                  <1>  push edi
    65                              <1> 
    66 0000009C BF[B8020000]        <1>  mov edi, %1
    67 000000A1 B8[58020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 000000A6 66C7074700          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000AB 66894702            <1>  mov [edi + 2], ax
    74 000000AF C1E810              <1>  shr eax, 16
    75 000000B2 884704              <1>  mov [edi + 4], al
    76 000000B5 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000B8 5F                  <1>  pop edi
    79 000000B9 58                  <1>  pop eax
    32                                  
    33                                      ; GDTをロード(再設定)
    34 000000BA 0F0115[E8020000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    35                                  
    36                                      ; スタックの設定
    37 000000C1 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    38                                  
    39                                      ; タスクレジスタの初期化
    40 000000C6 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    41 000000CA 0F00D8                      ltr ax              ; タスクレジスタの設定
    42                                  
    43                                      ; 初期化
    44 000000CD E834100000                  cdecl init_int                  ; 割り込みベクタの初期化
    45 000000D2 E87E100000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    46 000000D7 E8D0050000                  cdecl init_page                 ; ページングの初期化
    47                                  
    48                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 000000DC 50                  <1>  push eax
    31 000000DD 57                  <1>  push edi
    32                              <1> 
    33 000000DE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000E3 B8[37110000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000E8 668907              <1>  mov [edi + 0], ax
    41 000000EB C1E810              <1>  shr eax, 16
    42 000000EE 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000F2 5F                  <1>  pop edi
    45 000000F3 58                  <1>  pop eax
    49                                      set_vect 0x07, int_nm           ; 割り込み処理の登録：デバイス使用不可例外
    30 000000F4 50                  <1>  push eax
    31 000000F5 57                  <1>  push edi
    32                              <1> 
    33 000000F6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000FB B8[A9130000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000100 668907              <1>  mov [edi + 0], ax
    41 00000103 C1E810              <1>  shr eax, 16
    42 00000106 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000010A 5F                  <1>  pop edi
    45 0000010B 58                  <1>  pop eax
    50                                      set_vect 0x0E, int_pf           ; 割り込み処理の登録：ページフォルト
    30 0000010C 50                  <1>  push eax
    31 0000010D 57                  <1>  push edi
    32                              <1> 
    33 0000010E BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000113 B8[02070000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000118 668907              <1>  mov [edi + 0], ax
    41 0000011B C1E810              <1>  shr eax, 16
    42 0000011E 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000122 5F                  <1>  pop edi
    45 00000123 58                  <1>  pop eax
    51                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 00000124 50                  <1>  push eax
    31 00000125 57                  <1>  push edi
    32                              <1> 
    33 00000126 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000012B B8[4E060000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000130 668907              <1>  mov [edi + 0], ax
    41 00000133 C1E810              <1>  shr eax, 16
    42 00000136 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000013A 5F                  <1>  pop edi
    45 0000013B 58                  <1>  pop eax
    52                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 0000013C 50                  <1>  push eax
    31 0000013D 57                  <1>  push edi
    32                              <1> 
    33 0000013E BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000143 B8[BD110000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000148 668907              <1>  mov [edi + 0], ax
    41 0000014B C1E810              <1>  shr eax, 16
    42 0000014E 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000152 5F                  <1>  pop edi
    45 00000153 58                  <1>  pop eax
    53                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 00000154 50                  <1>  push eax
    31 00000155 57                  <1>  push edi
    32                              <1> 
    33 00000156 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000015B B8[80110000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000160 668907              <1>  mov [edi + 0], ax
    41 00000163 C1E810              <1>  shr eax, 16
    42 00000166 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000016A 5F                  <1>  pop edi
    45 0000016B 58                  <1>  pop eax
    54                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 0000016C 50                  <1>  push eax
    31 0000016D 57                  <1>  push edi
    32                              <1> 
    33 0000016E BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000173 B8[3C130000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 00000178 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 0000017E 668907              <1>  mov [edi + 0], ax
    41 00000181 C1E810              <1>  shr eax, 16
    42 00000184 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000188 5F                  <1>  pop edi
    45 00000189 58                  <1>  pop eax
    55                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 0000018A 50                  <1>  push eax
    31 0000018B 57                  <1>  push edi
    32                              <1> 
    33 0000018C BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000191 B8[4A130000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 00000196 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 0000019C 668907              <1>  mov [edi + 0], ax
    41 0000019F C1E810              <1>  shr eax, 16
    42 000001A2 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001A6 5F                  <1>  pop edi
    45 000001A7 58                  <1>  pop eax
    56                                  
    57                                      ; デバイスの割り込み許可
    58 000001A8 6A10E8FA0F00006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    58 000001B1 C404               
    59 000001B3 E80C110000                  cdecl int_en_timer0             ; タイマー割り込み許可
    60                                  
    61                                      ; IMR（割り込みマスクレジスタ）の設定
    62                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 000001B8 B0F8                <1>  mov al, %2
    50 000001BA E621                <1>  out %1, al
    63                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 000001BC B0FE                <1>  mov al, %2
    50 000001BE E6A1                <1>  out %1, al
    64                                  
    65                                      ; ページングの有効化
    66 000001C0 B800501000                  mov eax, CR3_BASE
    67 000001C5 0F22D8                      mov cr3, eax                    ; ページテーブルの登録
    68                                  
    69 000001C8 0F20C0                      mov eax, cr0
    70 000001CB 0D00000080                  or eax, (1 << 31)               ; CR0 | PG      ページングを有効化
    71 000001D0 0F22C0                      mov cr0, eax
    72 000001D3 EB00                        jmp $ + 2                       ; パイプラインのクリア
    73                                  
    74 000001D5 FB                          sti                             ; 割り込み許可
    75                                  
    76 000001D6 6A0D6A3FE8BD090000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    76 000001DF 6683C408           
    77 000001E3 6A046A3FE8310A0000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    77 000001EC 6683C408           
    78 000001F0 68[38020000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    78 000001F8 00006A0E6A19E8DC09-
    78 00000201 00006683C410       
    79                                  
    80                                  
    81                                  
    82                                  .10L:
    83                                      ; 回転する棒の表示
    84 00000207 E8C7100000                  cdecl draw_rotation_bar
    85                                  
    86                                      ; キーコードの取得
    87 0000020C 68[4C020000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    87 00000212 [E4110000]E8E10F00-
    87 0000021A 006683C408         
    88 0000021F 83F800                      cmp eax, 0
    89 00000222 7412                        je .10E
    90                                  
    91                                      ; キーコードの表示
    92 00000224 68[E4110000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    92 0000022C 02E82F1000006683C4-
    92 00000235 0C                 
    93                                  
    94                                  .10E:
    95 00000236 EBCF                        jmp .10L
    96                                  
    97 00000238 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    97 00000241 65726E656C212000   
    98                                  
    99 00000249 00<rep 3h>              ALIGN 4, db 0
   100 0000024C 00000000                .int_key: dd 0
   101                                  
   102                                  ALIGN 4, db 0
   103 00000250 00000000                FONT_ADR: dd 0
   104 00000254 00000000                RTC_TIME: dd 0
   105                                  
   106                                  ; タスク
   107                                  %include "descriptor.s"
   108                              <1> ; ローカルディスクリプタテーブル
   109 00000258 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   110 00000260 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   111 00000268 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   112 00000270 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   113 00000278 FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   114 00000280 FFFF000000FACF00    <1> .cs_task_2: dq 0x00CFFA000000FFFF   ; CODE 4G
   115 00000288 FFFF000000F2CF00    <1> .ds_task_2: dq 0x00CFF2000000FFFF   ; DATA 4G
   116 00000290 FFFF000000FACF00    <1> .cs_task_3: dq 0x00CFFA000000FFFF   ; CODE 4G
   117 00000298 FFFF000000F2CF00    <1> .ds_task_3: dq 0x00CFF2000000FFFF   ; DATA 4G
   118                              <1> .end:
   119                              <1> 
   120                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   121                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   122                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   123                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   124                              <1> CS_TASK_2 equ (.cs_task_2 - LDT) | 4 | 3; タスク2用CSセレクタ
   125                              <1> DS_TASK_2 equ (.ds_task_2 - LDT) | 4 | 3; タスク2用DSセレクタ
   126                              <1> CS_TASK_3 equ (.cs_task_3 - LDT) | 4 | 3; タスク3用CSセレクタ
   127                              <1> DS_TASK_3 equ (.ds_task_3 - LDT) | 4 | 3; タスク3用DSセレクタ
   128                              <1> 
   129                              <1> LDT_LIMIT equ .end        - LDT - 1
   130                              <1> 
   131                              <1> ; グローバルディスクリプタテーブル
   132 000002A0 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   133 000002A8 FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   134 000002B0 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   135 000002B8 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   136 000002C0 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   137 000002C8 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   138 000002D0 6700000000890000    <1> .tss_2:     dq 0x0000890000000067   ; TSSディスクリプタ
   139 000002D8 6700000000890000    <1> .tss_3:     dq 0x0000890000000067   ; TSSディスクリプタ
   140 000002E0 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   141                              <1> .end:
   142                              <1> 
   143                              <1> CS_KERNEL equ .cs_kernel - GDT
   144                              <1> DS_KERNEL equ .ds_kernel - GDT
   145                              <1> SS_LDT    equ .ldt       - GDT
   146                              <1> SS_TASK_0 equ .tss_0     - GDT
   147                              <1> SS_TASK_1 equ .tss_1     - GDT
   148                              <1> SS_TASK_2 equ .tss_2     - GDT
   149                              <1> SS_TASK_3 equ .tss_3     - GDT
   150                              <1> SS_GATE_0 equ .call_gate - GDT
   151                              <1> 
   152 000002E8 4700                <1> GDTR: dw GDT.end - GDT - 1
   153 000002EA [A0020000]          <1>       dd GDT
   154                              <1> 
   155                              <1> ; TSS
   156                              <1> TSS_0:
   157 000002EE 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   158 000002F2 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   159 000002F6 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   160 000002FA 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   161 000002FE 00000000            <1> .ss1:       dd 0                    ;* 16:
   162 00000302 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   163 00000306 00000000            <1> .ss2:       dd 0                    ;* 24:
   164 0000030A 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   165 0000030E 00000000            <1> .eip:       dd 0                    ;  32:EIP
   166 00000312 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   167 00000316 00000000            <1> .eax:       dd 0                    ;  40:EAX
   168 0000031A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   169 0000031E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   170 00000322 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   171 00000326 00000000            <1> .esp:       dd 0                    ;  56:ESP
   172 0000032A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   173 0000032E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   174 00000332 00000000            <1> .edi:       dd 0                    ;  68:EDI
   175 00000336 00000000            <1> .es:        dd 0                    ;  72:ES
   176 0000033A 00000000            <1> .cs:        dd 0                    ;  76:CS
   177 0000033E 00000000            <1> .ss:        dd 0                    ;  80:SS
   178 00000342 00000000            <1> .ds:        dd 0                    ;  84:DS
   179 00000346 00000000            <1> .fs:        dd 0                    ;  88:FS
   180 0000034A 00000000            <1> .gs:        dd 0                    ;  92:GS
   181 0000034E 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   182 00000352 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   183 00000356 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   184                              <1> 
   185                              <1> TSS_1:
   186 000003C6 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   187 000003CA 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   188 000003CE 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   189 000003D2 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   190 000003D6 00000000            <1> .ss1:       dd 0                    ;* 16:
   191 000003DA 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   192 000003DE 00000000            <1> .ss2:       dd 0                    ;* 24:
   193 000003E2 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   194 000003E6 [73070000]          <1> .eip:       dd task_1               ;  32:EIP
   195 000003EA 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   196 000003EE 00000000            <1> .eax:       dd 0                    ;  40:EAX
   197 000003F2 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   198 000003F6 00000000            <1> .edx:       dd 0                    ;  48:EDX
   199 000003FA 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   200 000003FE 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   201 00000402 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   202 00000406 00000000            <1> .esi:       dd 0                    ;  64:ESI
   203 0000040A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   204 0000040E 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   205 00000412 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   206 00000416 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   207 0000041A 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   208 0000041E 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   209 00000422 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   210 00000426 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   211 0000042A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   212 0000042E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   213                              <1> 
   214                              <1> TSS_2:
   215 0000049E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   216 000004A2 003A1000            <1> .esp0:      dd SP_TASK_2 - 512      ;*  4:ESP0
   217 000004A6 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   218 000004AA 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   219 000004AE 00000000            <1> .ss1:       dd 0                    ;* 16:
   220 000004B2 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   221 000004B6 00000000            <1> .ss2:       dd 0                    ;* 24:
   222 000004BA 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   223 000004BE [A8070000]          <1> .eip:       dd task_2               ;  32:EIP
   224 000004C2 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   225 000004C6 00000000            <1> .eax:       dd 0                    ;  40:EAX
   226 000004CA 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   227 000004CE 00000000            <1> .edx:       dd 0                    ;  48:EDX
   228 000004D2 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   229 000004D6 003C1000            <1> .esp:       dd SP_TASK_2            ;  56:ESP
   230 000004DA 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   231 000004DE 00000000            <1> .esi:       dd 0                    ;  64:ESI
   232 000004E2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   233 000004E6 37000000            <1> .es:        dd DS_TASK_2            ;  72:ES
   234 000004EA 2F000000            <1> .cs:        dd CS_TASK_2            ;  76:CS
   235 000004EE 37000000            <1> .ss:        dd DS_TASK_2            ;  80:SS
   236 000004F2 37000000            <1> .ds:        dd DS_TASK_2            ;  84:DS
   237 000004F6 37000000            <1> .fs:        dd DS_TASK_2            ;  88:FS
   238 000004FA 37000000            <1> .gs:        dd DS_TASK_2            ;  92:GS
   239 000004FE 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   240 00000502 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   241 00000506 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   242                              <1> 
   243                              <1> TSS_3:
   244 00000576 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   245 0000057A 003E1000            <1> .esp0:      dd SP_TASK_3 - 512      ;*  4:ESP0
   246 0000057E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   247 00000582 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   248 00000586 00000000            <1> .ss1:       dd 0                    ;* 16:
   249 0000058A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   250 0000058E 00000000            <1> .ss2:       dd 0                    ;* 24:
   251 00000592 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   252 00000596 [7C080000]          <1> .eip:       dd task_3               ;  32:EIP
   253 0000059A 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   254 0000059E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   255 000005A2 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   256 000005A6 00000000            <1> .edx:       dd 0                    ;  48:EDX
   257 000005AA 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   258 000005AE 00401000            <1> .esp:       dd SP_TASK_3            ;  56:ESP
   259 000005B2 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   260 000005B6 00000000            <1> .esi:       dd 0                    ;  64:ESI
   261 000005BA 00000000            <1> .edi:       dd 0                    ;  68:EDI
   262 000005BE 47000000            <1> .es:        dd DS_TASK_3            ;  72:ES
   263 000005C2 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   264 000005C6 47000000            <1> .ss:        dd DS_TASK_3            ;  80:SS
   265 000005CA 47000000            <1> .ds:        dd DS_TASK_3            ;  84:DS
   266 000005CE 47000000            <1> .fs:        dd DS_TASK_3            ;  88:FS
   267 000005D2 47000000            <1> .gs:        dd DS_TASK_3            ;  92:GS
   268 000005D6 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   269 000005DA 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   270 000005DE 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   108                                  %include "modules/int_timer.s"
   109                              <1> int_timer:
   110 0000064E 60                  <1>     pushad
   111 0000064F 1E                  <1>     push ds
   112 00000650 06                  <1>     push es
   113                              <1> 
   114                              <1>     ; データ用セグメントの設定
   115 00000651 66B81000            <1>     mov ax, 0x0010
   116 00000655 8ED8                <1>     mov ds, ax
   117 00000657 8EC0                <1>     mov es, ax
   118                              <1> 
   119                              <1>     ; TICK
   120 00000659 FF05[A4060000]      <1>     inc dword [TIMER_COUNT]
   121                              <1> 
   122                              <1>     ; 割り込みフラグをクリア(EOI)
   123                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 0000065F B020                <2>  mov al, %2
    50 00000661 E620                <2>  out %1, al
   124                              <1> 
   125                              <1>     ; タスクの切り替え(task0 -> task1 -> task2 -> task0 -> ...)
   126 00000663 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   127 00000667 6683F820            <1>     cmp ax, SS_TASK_0   ; switch(ax)
   128 0000066B 7415                <1>     je .11L
   129 0000066D 6683F828            <1>     cmp ax, SS_TASK_1
   130 00000671 7418                <1>     je .12L
   131 00000673 6683F830            <1>     cmp ax, SS_TASK_2
   132 00000677 741B                <1>     je .13L
   133                              <1> 
   134 00000679 EA000000002000      <1>     jmp SS_TASK_0:0     ; default:
   135 00000680 EB1B                <1>     jmp .10E
   136                              <1> .11L:                   ; case SS_TASK_0:
   137 00000682 EA000000002800      <1>     jmp SS_TASK_1:0     ; タスク1に切り替え
   138 00000689 EB12                <1>     jmp .10E
   139                              <1> .12L:                   ; case SS_TASK_1:
   140 0000068B EA000000003000      <1>     jmp SS_TASK_2:0     ; タスク2に切り替え
   141 00000692 EB09                <1>     jmp .10E
   142                              <1> .13L:                   ; case SS_TASK_2:
   143 00000694 EA000000003800      <1>     jmp SS_TASK_3:0     ; タスク3に切り替え
   144 0000069B EB00                <1>     jmp .10E
   145                              <1> .10E:
   146                              <1> 
   147 0000069D 07                  <1>     pop es
   148 0000069E 1F                  <1>     pop ds
   149 0000069F 61                  <1>     popad
   150                              <1> 
   151 000006A0 CF                  <1>     iret
   152                              <1> 
   153 000006A1 00<rep 3h>          <1> ALIGN 4, db 0
   154 000006A4 0000000000000000    <1> TIMER_COUNT: dq 0
   155                              <1> 
   109                                  %include "modules/paging.s"
   110                              <1> init_page:
   111 000006AC 60                  <1>     pusha
   112                              <1> 
   113 000006AD 6800501000E8100000- <1>     cdecl page_set_4m, CR3_BASE ; ページ変換テーブルの作成 タスク3用
   113 000006B6 006683C404          <1>
   114 000006BB C7051C641000000000- <1>     mov [0x0010_6000 + 0x107 * 4], dword 0   ; 0x0010_7000をページ不在に設定
   114 000006C4 00                  <1>
   115                              <1> 
   116 000006C5 61                  <1>     popa
   117                              <1> 
   118 000006C6 C3                  <1>     ret
   119                              <1> 
   120                              <1> 
   121                              <1> page_set_4m:
   122 000006C7 55                  <1>     push ebp
   123 000006C8 89E5                <1>     mov ebp, esp
   124                              <1> 
   125 000006CA 60                  <1>     pusha
   126                              <1> 
   127                              <1>     ; ページディレクトリの作成
   128 000006CB FC                  <1>     cld                     ; dfをクリア (+方向)
   129 000006CC 8B7D08              <1>     mov edi, [ebp + 8]      ; EDI = ページディレクトリの先頭
   130 000006CF B800000000          <1>     mov eax, 0x00000000     ; EAX = 0   P = 0
   131 000006D4 B900040000          <1>     mov ecx, 1024           ; count = 1024
   132 000006D9 F3AB                <1>     rep stosd               ; while(ecx--) *(edi++) = eax;
   133                              <1> 
   134                              <1>     ; 先頭のエントリを設定
   135 000006DB 89F8                <1>     mov eax, edi            ; ページディレクトリの直後
   136 000006DD 2500F0FFFF          <1>     and eax, ~0x0000_0FFF   ; 物理アドレスの指定
   137 000006E2 83C807              <1>     or eax, 7               ; U/S R/W Pの許可
   138 000006E5 898700F0FFFF        <1>     mov [edi - (1024 * 4)], eax ; 先頭のエントリを設定
   139                              <1> 
   140                              <1>     ; ページングテーブルの設定(リニア)
   141 000006EB B807000000          <1>     mov eax, 0x00000007     ; 物理アドレスの指定とU/S R/W Pの許可
   142 000006F0 B900040000          <1>     mov ecx, 1024           ; count = 1024
   143                              <1> .10L:                       ; do {
   144 000006F5 AB                  <1>     stosd                   ;   *(edi++) = eax
   145 000006F6 0500100000          <1>     add eax, 0x00001000     ;   eax += 0x1000
   146 000006FB E2F8                <1>     loop .10L               ; } while(--count)
   147                              <1> 
   148 000006FD 61                  <1>     popa
   149                              <1> 
   150 000006FE 89EC                <1>     mov esp, ebp
   151 00000700 5D                  <1>     pop ebp
   152                              <1> 
   153 00000701 C3                  <1>     ret
   110                                  %include "modules/int_pf.s"
   111                              <1> int_pf:
   112 00000702 6687DB              <1>     xchg bx, bx
   113 00000705 55                  <1>     push ebp
   114 00000706 89E5                <1>     mov ebp, esp
   115                              <1> 
   116 00000708 60                  <1>     pusha
   117 00000709 1E                  <1>     push ds
   118 0000070A 06                  <1>     push es
   119                              <1> 
   120                              <1>     ; データ用セグメントセレクタの設定
   121 0000070B 66B81000            <1>     mov		ax, 0x0010
   122 0000070F 8ED8                <1>     mov		ds, ax
   123 00000711 8EC0                <1>     mov		es, ax
   124                              <1> 
   125                              <1>     ; 例外を生成したアドレスの確認
   126 00000713 0F20D0              <1>     mov eax, cr2            ; ページフォルトの際アクセスしようとしたアドレス
   127 00000716 2500F0FFFF          <1>     and eax, ~0x0FFF        ; 4KB 以内のアクセス
   128 0000071B 3D00701000          <1>     cmp eax, 0x0010_7000    ; if(アクセスしようとしたアドレス!=0x0010_7000) goto .10F
   129 00000720 7521                <1>     jne .10F
   130                              <1> 
   131 00000722 C7051C641000077010- <1>     mov [0x00106000 + 0x107 * 4], dword 0x00107007  ; ページの有効化
   131 0000072B 00                  <1>
   132 0000072C 6A4068[7C090000]68- <1>     cdecl memcpy, 0x0010_7000, DRAW_PARAM, rose_size; 描画パラメータのコピー
   132 00000734 00701000E8E50C0000- <1>
   132 0000073D 6683C40C            <1>
   133 00000741 EB15                <1>     jmp .10E
   134                              <1> 
   135                              <1> .10F:
   136                              <1>     ; スタックの調整
   137 00000743 83C404              <1>     add esp, 4      ; pop es
   138 00000746 83C404              <1>     add esp, 4      ; pop ds
   139 00000749 61                  <1>     popa
   140 0000074A 5D                  <1>     pop ebp
   141                              <1> 
   142                              <1>     ; タスク終了処理
   143 0000074B 9C                  <1>     pushf           ; EFLAGS
   144 0000074C 0E                  <1>     push cs         ; CS
   145 0000074D 68[C70F0000]        <1>     push int_stop   ; スタック表示処理
   146                              <1> 
   147 00000752 B8[62070000]        <1>     mov eax, .s0    ; 割り込み種別
   148 00000757 CF                  <1>     iret
   149                              <1> 
   150                              <1> .10E:
   151                              <1> 
   152 00000758 07                  <1>     pop es
   153 00000759 1F                  <1>     pop ds
   154 0000075A 61                  <1>     popa
   155                              <1> 
   156 0000075B 89EC                <1>     mov esp, ebp
   157 0000075D 5D                  <1>     pop ebp
   158                              <1> 
   159 0000075E 83C404              <1>     add esp, 4  ; エラーコードの破棄
   160 00000761 CF                  <1>     iret
   161                              <1> 
   162 00000762 203C20504147452046- <1> .s0 db " < PAGE FAULT > ", 0
   162 0000076B 41554C54203E2000    <1>
   111                                  %include "tasks/task_1.s"
   112                              <1> task_1:
   113                              <1>     ; 文字列の表示(コールゲート)
   114                              <1>     ;cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   115 00000773 68[A1070000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0 ; draw_str();
   115 0000077B 006A3FE85C04000066- <1>
   115 00000784 83C410              <1>
   116                              <1> 
   117                              <1> .10L:
   118                              <1>     ; 時刻の表示
   119 00000787 A1[54020000]        <1>     mov eax, [RTC_TIME]
   120 0000078C 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   120 00000795 48E8B70700006683C4- <1>
   120 0000079E 10                  <1>
   121                              <1> 
   122 0000079F EBE6                <1>     jmp .10L
   123                              <1> 
   124                              <1>     ; データ
   125 000007A1 5461736B2D3100      <1> .s0 db "Task-1", 0
   112                                  %include "tasks/task_2.s"
   113                              <1> task_2:
   114 000007A8 68[6E080000]6A076A- <1>     cdecl draw_str, 63, 1, 0x07, .s0
   114 000007B0 016A3FE82704000066- <1>
   114 000007B9 83C410              <1>
   115                              <1> 
   116 000007BC DB05[5C080000]      <1>     fild dword [.c1000]     ; st0 = [.c1000]
   117 000007C2 D9EB                <1>     fldpi           ; st0 = pi
   118 000007C4 DA35[60080000]      <1>     fidiv dword [.c180]     ; st0 /= [.c180]
   119 000007CA D9EB                <1>     fldpi
   120 000007CC DCC0                <1>     fadd st0, st0   ; st0 += st0
   121 000007CE D9EE                <1>     fldz            ; st0 = 0
   122                              <1>     ; st0   0
   123                              <1>     ; st1   2*pi
   124                              <1>     ; st2   pi/180
   125                              <1>     ; st3   1000
   126                              <1> 
   127                              <1> .10L:
   128 000007D0 D8C2                <1>     fadd st0, st2   ; st0 += st2
   129 000007D2 D9F8                <1>     fprem           ; st0 %= st1
   130 000007D4 D9C0                <1>     fld st0         ; st0をコピー
   131 000007D6 D9FE                <1>     fsin            ; st0 = sin(st0)
   132 000007D8 D8CC                <1>     fmul st0, st4   ; st0 *= 1000
   133 000007DA DF35[64080000]      <1>     fbstp [.bcd]
   134                              <1> 
   135 000007E0 A1[64080000]        <1>     mov eax, [.bcd]
   136 000007E5 89C3                <1>     mov ebx, eax
   137                              <1> 
   138 000007E7 250F0F0000          <1>     and eax, 0x0F0F ; 上位４ビットをマスク
   139 000007EC 0D30300000          <1>     or eax, 0x3030  ; 上位４ビットに0x3に設定
   140                              <1> 
   141 000007F1 C1EB04              <1>     shr ebx, 4
   142 000007F4 81E30F0F0000        <1>     and ebx, 0x0F0F ; 上位４ビットをマスク
   143 000007FA 81CB30300000        <1>     or ebx, 0x3030  ; 上位４ビットに0x3に設定
   144                              <1> 
   145 00000800 883D[76080000]      <1>     mov [.s2 + 0], bh   ; 1桁目
   146 00000806 8825[78080000]      <1>     mov [.s3 + 0], ah   ; 小数1桁目
   147 0000080C 881D[79080000]      <1>     mov [.s3 + 1], bl   ; 小数2桁目
   148 00000812 A2[7A080000]        <1>     mov [.s3 + 2], al   ; 小数3桁目
   149                              <1> 
   150 00000817 B807000000          <1>     mov eax, 7
   151 0000081C 0FA305[6D080000]    <1>     bt [.bcd + 9], eax  ; cf = .bcd+9 から7ビット目
   152 00000823 7209                <1>     jc .10F
   153                              <1> 
   154 00000825 C605[75080000]2B    <1>     mov [.s1 + 0], byte '+'
   155 0000082C EB07                <1>     jmp .10E
   156                              <1> .10F:
   157 0000082E C605[75080000]2D    <1>     mov [.s1 + 0], byte '-'
   158                              <1> .10E:
   159                              <1> 
   160 00000835 68[75080000]6A076A- <1>     cdecl draw_str, 72, 1, 0x07, .s1
   160 0000083D 016A48E89A03000066- <1>
   160 00000846 83C410              <1>
   161                              <1> 
   162                              <1>     ; ウェイト
   163 00000849 6A14E8B40B00006683- <1>     cdecl wait_tick, 20
   163 00000852 C404                <1>
   164                              <1> 
   165 00000854 E977FFFFFF          <1>     jmp .10L
   166                              <1> 
   167                              <1> 
   168 00000859 00<rep 3h>          <1> ALIGN 4, db 0
   169 0000085C E8030000            <1> .c1000: dd 1000
   170 00000860 B4000000            <1> .c180:  dd 180
   171 00000864 00<rep Ah>          <1> .bcd: times 10 db 0x00
   172 0000086E 5461736B2D3200      <1> .s0     db "Task-2", 0
   173 00000875 2D                  <1> .s1:    db "-"
   174 00000876 302E                <1> .s2:    db "0."
   175 00000878 30303000            <1> .s3:    db "000", 0
   113                                  %include "tasks/task_3.s"
   114                              <1> task_3:
   115 0000087C 89E5                <1>     mov ebp, esp
   116                              <1> 
   117 0000087E 6A00                <1>     push dword 0    ; x0    x座標原点
   118 00000880 6A00                <1>     push dword 0    ; y0    y座標原点
   119 00000882 6A00                <1>     push dword 0    ; x     x座標描画
   120 00000884 6A00                <1>     push dword 0    ; y     y座標描画
   121 00000886 6A00                <1>     push dword 0    ; r     角度
   122                              <1> 
   123                              <1>     ; 初期化
   124                              <1>     ;mov esi, DRAW_PARAM ; esi = 描画パラメータ
   125 00000888 BE00701000          <1>     mov esi, 0x0010_7000
   126                              <1> 
   127                              <1>     ; タイトル表示
   128 0000088D 8B06                <1>     mov eax, [esi + rose.x0]
   129 0000088F 8B5E04              <1>     mov ebx, [esi + rose.y0]
   130                              <1> 
   131 00000892 C1E803              <1>     shr eax, 3                      ; EAX = EAX /  8 x座標を文字位置に変換
   132 00000895 C1EB04              <1>     shr ebx, 4                      ; EBX = EBX / 16 y座標を文字位置に変換
   133 00000898 4B                  <1>     dec ebx                         ; 1文字分上に移動
   134 00000899 8B4E24              <1>     mov ecx, [esi + rose.color_s]   ; 文字色
   135 0000089C 8D5630              <1>     lea edx, [esi + rose.title]     ; タイトル
   136                              <1> 
   137 0000089F 52515350E837030000- <1>     cdecl draw_str, eax, ebx, ecx, edx
   137 000008A8 6683C410            <1>
   138                              <1> 
   139                              <1>     ; X軸の中点
   140 000008AC 8B06                <1>     mov eax, [esi + rose.x0]
   141 000008AE 8B5E08              <1>     mov ebx, [esi + rose.x1]
   142 000008B1 29C3                <1>     sub ebx, eax            ; ebx = x0 - x1
   143 000008B3 D1EB                <1>     shr ebx, 1              ; ebx /= 1
   144 000008B5 01C3                <1>     add ebx, eax            ; ebx += x0
   145 000008B7 895DFC              <1>     mov [ebp - 4], ebx      ; x0 = 原点
   146                              <1> 
   147                              <1>     ; Y軸の中点
   148 000008BA 8B4604              <1>     mov eax, [esi + rose.y0]
   149 000008BD 8B5E0C              <1>     mov ebx, [esi + rose.y1]
   150 000008C0 29C3                <1>     sub ebx, eax            ; ebx = y0 - y1
   151 000008C2 D1EB                <1>     shr ebx, 1              ; ebx /= 1
   152 000008C4 01C3                <1>     add ebx, eax            ; ebx += y0
   153 000008C6 895DF8              <1>     mov [ebp - 8], ebx      ; y0 = 原点
   154                              <1> 
   155                              <1>     ; X軸の描画
   156 000008C9 8B06                <1>     mov eax, [esi + rose.x0]
   157 000008CB 8B5DF8              <1>     mov ebx, [ebp - 8]
   158 000008CE 8B4E08              <1>     mov ecx, [esi + rose.x1]
   159                              <1> 
   160 000008D1 FF761853515350E895- <1>     cdecl draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   160 000008DA 0400006683C414      <1>
   161                              <1> 
   162                              <1>     ; Y軸の描画
   163 000008E1 8B4604              <1>     mov eax, [esi + rose.y0]
   164 000008E4 8B5DFC              <1>     mov ebx, [ebp - 4]
   165 000008E7 8B4E0C              <1>     mov ecx, [esi + rose.y1]
   166                              <1> 
   167 000008EA FF761C51535053E87C- <1>     cdecl draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   167 000008F3 0400006683C414      <1>
   168                              <1> 
   169                              <1>     ; 枠の描画
   170 000008FA 8B06                <1>     mov eax, [esi + rose.x0]
   171 000008FC 8B5E04              <1>     mov ebx, [esi + rose.y0]
   172 000008FF 8B4E08              <1>     mov ecx, [esi + rose.x1]
   173 00000902 8B560C              <1>     mov edx, [esi + rose.y1]
   174                              <1> 
   175 00000905 FF762052515350E810- <1>     cdecl draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   175 0000090E 0500006683C414      <1>
   176                              <1> 
   177                              <1>     ; 振幅をX軸の約95%とする
   178 00000915 8B4608              <1>     mov eax, [esi + rose.x1]
   179 00000918 2B06                <1>     sub eax, [esi + rose.x0]
   180 0000091A D1E8                <1>     shr eax, 1                  ; eax = 原点から右端の長さ
   181 0000091C 89C3                <1>     mov ebx, eax
   182 0000091E C1EB04              <1>     shr ebx, 4
   183 00000921 29D8                <1>     sub eax, ebx
   184                              <1> 
   185                              <1>     ; FPUの初期化（バラ曲線の初期化）
   186 00000923 FF7614FF761050E88D- <1>     cdecl fpu_rose_init            , eax            , dword [esi + rose.n]            , dword [esi + rose.d]
   186 0000092C 0000006683C40C      <1>
   190                              <1> 
   191                              <1>     ; メインループ
   192                              <1> .10L:
   193                              <1>     ; 座標計算
   194 00000933 8D5DF4              <1>     lea ebx, [ebp -12]  ; EBX = &x;
   195 00000936 8D4DF0              <1>     lea ecx, [ebp -16]  ; ECX = &y;
   196 00000939 8B45EC              <1>     mov eax, [ebp -20]  ; EAX = r;
   197                              <1> 
   198 0000093C 505153E89200000066- <1>     cdecl fpu_rose_update            , ebx            , ecx            , eax
   198 00000945 83C40C              <1>
   202                              <1> 
   203                              <1>     ; 角度更新(r = r % 36000)
   204 00000948 BA00000000          <1>     mov edx, 0
   205 0000094D 40                  <1>     inc eax
   206 0000094E BBA08C0000          <1>     mov ebx, 360 * 100
   207 00000953 F7F3                <1>     div ebx             ; EDX = EDX:EAX % EBX
   208 00000955 8955EC              <1>     mov [ebp -20], edx
   209                              <1> 
   210                              <1>     ; ドット描画
   211 00000958 8B4DF4              <1>     mov ecx, [ebp -12]  ; x座標
   212 0000095B 8B55F0              <1>     mov edx, [ebp -16]  ; y座標
   213                              <1> 
   214 0000095E 034DFC              <1>     add ecx, [ebp - 4]  ; x座標原点
   215 00000961 0355F8              <1>     add edx, [ebp - 8]  ; y座標原点
   216                              <1> 
   217 00000964 8B5E28              <1>     mov ebx, [esi + rose.color_f]   ; 表示色
   218 00000967 CD82                <1>     int 0x82            ; sys_call_82(表示色, X, Y)
   219                              <1> 
   220                              <1>     ; ウェイト
   221 00000969 6A02E8940A00006683- <1>     cdecl wait_tick, 2
   221 00000972 C404                <1>
   222                              <1> 
   223                              <1>     ; ドット描画(消去)
   224 00000974 8B5E2C              <1>     mov ebx, [esi + rose.color_b]   ; 背景色
   225 00000977 CD82                <1>     int 0x82           ; sys_call_82(表示色, X, Y)
   226                              <1> 
   227 00000979 EBB8                <1>     jmp .10L
   228                              <1> 
   229                              <1> 
   230 0000097B 00                  <1> ALIGN 4, db 0
   231                              <1> DRAW_PARAM:
   232                              <1>     istruc rose
   233 0000097C 10000000            <1>         at rose.x0,         dd  16
   234 00000980 20000000            <1>         at rose.y0,         dd  32
   235 00000984 A0010000            <1>         at rose.x1,         dd 416
   236 00000988 B0010000            <1>         at rose.y1,         dd 432
   237                              <1> 
   238 0000098C 02000000            <1>         at rose.n,          dd 2
   239 00000990 01000000            <1>         at rose.d,          dd 1
   240                              <1> 
   241 00000994 07000000            <1>         at rose.color_x,    dd 0x007
   242 00000998 07000000            <1>         at rose.color_y,    dd 0x007
   243 0000099C 0F000000            <1>         at rose.color_z,    dd 0x00F
   244 000009A0 0F030000            <1>         at rose.color_s,    dd 0x30F
   245 000009A4 0F000000            <1>         at rose.color_f,    dd 0x00F
   246 000009A8 03000000            <1>         at rose.color_b,    dd 0x003
   247                              <1> 
   248 000009AC 5461736B2D3300      <1>         at rose.title,      db "Task-3", 0
   249 000009B3 00<rep 9h>          <1>     iend
   250                              <1> 
   251                              <1> fpu_rose_init:
   252 000009BC 55                  <1>     push ebp
   253 000009BD 89E5                <1>     mov ebp, esp
   254                              <1> 
   255 000009BF 68B4000000          <1>     push dword 180
   256                              <1> 
   257 000009C4 D9EB                <1>     fldpi
   258 000009C6 DA75FC              <1>     fidiv dword [ebp - 4]   ; 180
   259 000009C9 DB450C              <1>     fild  dword [ebp +12]   ; n
   260 000009CC DA7510              <1>     fidiv dword [ebp +16]   ; d
   261 000009CF DB4508              <1>     fild  dword [ebp + 8]   ; A
   262                              <1> 
   263 000009D2 89EC                <1>     mov esp, ebp
   264 000009D4 5D                  <1>     pop ebp
   265                              <1> 
   266 000009D5 C3                  <1>     ret
   267                              <1> 
   268                              <1> fpu_rose_update:
   269                              <1> ; px: 計算したX座標を格納するアドレス
   270                              <1> ; py: 計算したY座標を格納するアドレス
   271                              <1> ; t:  角度
   272                              <1> 
   273 000009D6 55                  <1>     push ebp
   274 000009D7 89E5                <1>     mov ebp, esp
   275                              <1> 
   276 000009D9 50                  <1>     push eax
   277 000009DA 53                  <1>     push ebx
   278                              <1> 
   279 000009DB 8B4508              <1>     mov eax, [ebp +  8] ; eax = px
   280 000009DE 8B5D0C              <1>     mov ebx, [ebp + 12] ; ebx = py
   281                              <1> 
   282 000009E1 DB4510              <1>     fild dword [ebp +16]    ; t
   283 000009E4 D8CB                <1>     fmul st0, st3           ; st0 = t * r = θ
   284 000009E6 D9C0                <1>     fld st0
   285                              <1> 
   286 000009E8 D9FB                <1>     fsincos                 ; st0 = cos(st0)
   287                              <1>                             ; st1 = sin(st0)
   288                              <1>     
   289 000009EA D9CA                <1>     fxch st2                ; st0 <-> st2
   290 000009EC D8CC                <1>     fmul st0, st4           ; st0 = kθ
   291 000009EE D9FE                <1>     fsin                    ; st0 = sin(kθ)
   292 000009F0 D8CB                <1>     fmul st0, st3           ; st0 = Asin(kθ)
   293                              <1> 
   294                              <1>     ; st0 = Asin(kθ)
   295                              <1>     ; st1 = sin(θ)
   296                              <1>     ; st2 = cos(θ)
   297                              <1>     ; st3 = A
   298                              <1>     ; st4 = k
   299                              <1>     ; st5 = r
   300                              <1> 
   301 000009F2 D9CA                <1>     fxch st2                ; cosをst0に
   302 000009F4 D8CA                <1>     fmul st0, st2           ; st0 *= Asin(kθ)
   303 000009F6 DB18                <1>     fistp dword [eax]       ; st0を[eax]にpop
   304                              <1> 
   305 000009F8 DEC9                <1>     fmulp st1, st0          ; st1 *= st0; st0をpop
   306 000009FA D9E0                <1>     fchs                    ; st0 * (-1)
   307 000009FC DB1B                <1>     fistp dword [ebx]       ; st0を[ebx]にpop
   308                              <1> 
   309 000009FE 5B                  <1>     pop ebx
   310 000009FF 58                  <1>     pop eax
   311 00000A00 89EC                <1>     mov esp, ebp
   312 00000A02 5D                  <1>     pop ebp
   313                              <1> 
   314 00000A03 C3                  <1>     ret
   114                                  
   115                                  ; モジュール
   116                                  %include "../modules/protect/vga.s"
   117                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   118                              <1> ; plane: 読み込みプレーン
   119 00000A04 55                  <1>     push ebp
   120 00000A05 89E5                <1>     mov ebp, esp
   121                              <1> 
   122 00000A07 50                  <1>     push eax
   123 00000A08 52                  <1>     push edx
   124                              <1> 
   125                              <1> 
   126                              <1>     ; 読み込みプレーンの選択
   127 00000A09 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   128 00000A0C 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   129 00000A0F B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   130 00000A11 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   131 00000A15 66EF                <1>     out dx, ax
   132                              <1> 
   133 00000A17 5A                  <1>     pop edx
   134 00000A18 58                  <1>     pop eax
   135                              <1> 
   136 00000A19 89EC                <1>     mov esp, ebp
   137 00000A1B 5D                  <1>     pop ebp
   138                              <1> 
   139 00000A1C C3                  <1>     ret
   140                              <1> 
   141                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   142                              <1> ; plane 書き込みプレーン
   143 00000A1D 55                  <1>     push ebp
   144 00000A1E 89E5                <1>     mov ebp, esp
   145                              <1> 
   146 00000A20 6650                <1>     push ax
   147 00000A22 6652                <1>     push dx
   148                              <1> 
   149                              <1> 
   150                              <1>     ; 書き込みプレーンの選択
   151 00000A24 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   152 00000A27 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   153 00000A2A B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   154 00000A2C 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   155 00000A30 66EF                <1>     out dx, ax
   156                              <1> 
   157                              <1> 
   158 00000A32 665A                <1>     pop dx
   159 00000A34 6658                <1>     pop ax
   160                              <1> 
   161 00000A36 89EC                <1>     mov esp, ebp
   162 00000A38 5D                  <1>     pop ebp
   163                              <1> 
   164 00000A39 C3                  <1>     ret
   165                              <1> 
   166                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   167                              <1> ; font FONTアドレス
   168                              <1> ; vram VRAMアドレス
   169                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   170                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   171 00000A3A 55                  <1>     push ebp
   172 00000A3B 89E5                <1>     mov ebp, esp
   173                              <1>     
   174 00000A3D 50                  <1>     push eax
   175 00000A3E 53                  <1>     push ebx
   176 00000A3F 51                  <1>     push ecx
   177 00000A40 52                  <1>     push edx
   178 00000A41 57                  <1>     push edi
   179 00000A42 56                  <1>     push esi
   180                              <1> 
   181 00000A43 8B7508              <1>     mov esi, [ebp + 8]          ; font
   182 00000A46 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   183 00000A49 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   184 00000A4D 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   185                              <1>     ; bh = 背景色 bl = 前景色
   186                              <1> 
   187 00000A51 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   188 00000A53 0F94C6              <1>     setz dh         ; dh = zf
   189 00000A56 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   190                              <1> 
   191 00000A58 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   192 00000A5A 0F94C2              <1>     setz dl         ; dl = zf
   193 00000A5D FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   194                              <1> 
   195                              <1>     ; 16ドットフォントのコピー
   196 00000A5F FC                  <1>     cld             ; アドレス加算モード
   197                              <1> 
   198 00000A60 B910000000          <1>     mov ecx, 16
   199                              <1> .10L:
   200                              <1>     ; フォントマスクの作成
   201 00000A65 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   202 00000A66 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   203 00000A68 F6D4                <1>     not ah
   204                              <1> 
   205                              <1>     ; 前景色
   206 00000A6A 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   207                              <1> 
   208                              <1>     ; 背景色
   209 00000A6C F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   210 00000A72 7404                <1>     jz .11F
   211                              <1>     ; 透過on
   212 00000A74 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   213 00000A76 EB02                <1>     jmp .11E
   214                              <1> .11F:                   ; 透過off
   215 00000A78 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   216                              <1> .11E:
   217                              <1>     
   218                              <1>     ; 前景色と背景色を合成
   219 00000A7A 08E0                <1>     or al, ah           ; al = 背景 | 前景
   220                              <1> 
   221                              <1>     ; 新しい値を出力
   222 00000A7C 8807                <1>     mov [edi], al
   223                              <1> 
   224 00000A7E 83C750              <1>     add edi, 80      ; 1行すすめる
   225 00000A81 E2E2                <1>     loop .10L
   226                              <1> .10E:
   227                              <1> 
   228 00000A83 5E                  <1>     pop esi
   229 00000A84 5F                  <1>     pop edi
   230 00000A85 5A                  <1>     pop edx
   231 00000A86 59                  <1>     pop ecx
   232 00000A87 5B                  <1>     pop ebx
   233 00000A88 58                  <1>     pop eax
   234                              <1> 
   235 00000A89 89EC                <1>     mov esp, ebp
   236 00000A8B 5D                  <1>     pop ebp
   237                              <1> 
   238 00000A8C C3                  <1>     ret
   239                              <1> 
   240                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   241                              <1> ; bitデータ
   242                              <1> ; vram VRAMアドレス
   243                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   244                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   245 00000A8D 55                  <1>     push ebp
   246 00000A8E 89E5                <1>     mov ebp, esp
   247                              <1>     
   248 00000A90 50                  <1>     push eax
   249 00000A91 53                  <1>     push ebx
   250 00000A92 57                  <1>     push edi
   251                              <1> 
   252 00000A93 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   253 00000A96 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   254 00000A9A 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   255                              <1>     ; bl = 前景色
   256                              <1> 
   257                              <1>     ; 常に透過モード
   258 00000A9E 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   259 00000AA0 0F94C3              <1>     setz bl         ; dl = zf
   260 00000AA3 FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   261                              <1> 
   262                              <1>     ; マスク
   263 00000AA5 8A4508              <1>     mov al, [ebp + 8]   ; bit
   264 00000AA8 88C4                <1>     mov ah, al      ; ah ~= al
   265 00000AAA F6D4                <1>     not ah
   266                              <1> 
   267 00000AAC 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   268 00000AAE 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   269 00000AB0 08E0                <1>     or al, ah           ; 背景と前景を合成
   270 00000AB2 8807                <1>     mov [edi], al       ; プレーンに書き込み
   271                              <1>     
   272                              <1> 
   273 00000AB4 5F                  <1>     pop edi
   274 00000AB5 5B                  <1>     pop ebx
   275 00000AB6 58                  <1>     pop eax
   276                              <1> 
   277 00000AB7 89EC                <1>     mov esp, ebp
   278 00000AB9 5D                  <1>     pop ebp
   279                              <1> 
   280 00000ABA C3                  <1>     ret
   117                                  %include "../modules/protect/draw_char.s"
   118                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   119                              <1> ; col 列（0～79）
   120                              <1> ; row 行（0～29）
   121                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   122                              <1> ; ch 文字
   123                              <1> 
   124 00000ABB 55                  <1>     push ebp
   125 00000ABC 89E5                <1>     mov ebp, esp
   126                              <1> 
   127 00000ABE 50                  <1>     push eax
   128 00000ABF 53                  <1>     push ebx
   129 00000AC0 51                  <1>     push ecx
   130 00000AC1 52                  <1>     push edx
   131 00000AC2 56                  <1>     push esi
   132 00000AC3 57                  <1>     push edi
   133                              <1> 
   134                              <1> %ifdef USE_TEST_AND_SET
   135 00000AC4 68[980B0000]E88908- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   135 00000ACC 00006683C404        <1>
   136                              <1> %endif
   137                              <1> 
   138                              <1>     ; コピー元フォントアドレスを設定
   139 00000AD2 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   140 00000AD6 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   141 00000AD9 0335[50020000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   142                              <1> 
   143                              <1>     ; コピー先アドレスを取得
   144                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   145                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   146 00000ADF 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   147 00000AE2 C1E708              <1>     shl edi, 8
   148 00000AE5 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   149 00000AEC 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   150                              <1> 
   151                              <1>     ; 1文字分のフォントを出力
   152 00000AEF 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   153                              <1> 
   154                              <1>     ; 輝度I
   155 00000AF3 6A03E80AFFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   155 00000AFC C404                <1>
   156 00000AFE 6A08E818FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   156 00000B07 C404                <1>
   157 00000B09 536A085756E827FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   157 00000B12 FF6683C410          <1>
   158                              <1> 
   159                              <1>     ; 赤R
   160 00000B17 6A02E8E6FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   160 00000B20 C404                <1>
   161 00000B22 6A04E8F4FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   161 00000B2B C404                <1>
   162 00000B2D 536A045756E803FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   162 00000B36 FF6683C410          <1>
   163                              <1> 
   164                              <1>     ; 緑G
   165 00000B3B 6A01E8C2FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   165 00000B44 C404                <1>
   166 00000B46 6A02E8D0FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   166 00000B4F C404                <1>
   167 00000B51 536A025756E8DFFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   167 00000B5A FF6683C410          <1>
   168                              <1> 
   169                              <1>     ; 青B
   170 00000B5F 6A00E89EFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   170 00000B68 C404                <1>
   171 00000B6A 6A01E8ACFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   171 00000B73 C404                <1>
   172 00000B75 536A015756E8BBFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   172 00000B7E FF6683C410          <1>
   173                              <1> 
   174                              <1> %ifdef USE_TEST_AND_SET
   175 00000B83 C705[980B0000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   175 00000B8B 0000                <1>
   176                              <1> %endif
   177                              <1> 
   178 00000B8D 5F                  <1> 	pop		edi
   179 00000B8E 5E                  <1> 	pop		esi
   180 00000B8F 5A                  <1> 	pop		edx
   181 00000B90 59                  <1> 	pop		ecx
   182 00000B91 5B                  <1> 	pop		ebx
   183 00000B92 58                  <1> 	pop		eax
   184                              <1> 
   185 00000B93 89EC                <1>     mov esp, ebp
   186 00000B95 5D                  <1>     pop ebp
   187                              <1> 
   188 00000B96 C3                  <1>     ret
   189                              <1> 
   190                              <1> %ifdef USE_TEST_AND_SET
   191 00000B97 00                  <1> ALIGN 4, db 0
   192 00000B98 00000000            <1> IN_USE:  dd 0
   193                              <1> %endif
   118                                  %include "../modules/protect/draw_font.s"
   119                              <1> draw_font:  ; void draw_font(col, row);
   120                              <1> ; col 列
   121                              <1> ; row 行
   122 00000B9C 55                  <1>     push ebp
   123 00000B9D 89E5                <1>     mov ebp, esp
   124                              <1> 
   125 00000B9F 50                  <1>     push eax
   126 00000BA0 53                  <1>     push ebx
   127 00000BA1 51                  <1>     push ecx
   128 00000BA2 57                  <1>     push edi
   129 00000BA3 56                  <1>     push esi
   130                              <1> 
   131                              <1> 
   132 00000BA4 8B7508              <1>     mov esi, [ebp + 8]  ; x
   133 00000BA7 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   134                              <1> 
   135 00000BAA B900000000          <1>     mov ecx, 0
   136                              <1> .10L:
   137 00000BAF 81F900010000        <1>     cmp ecx, 256
   138 00000BB5 731F                <1>     jae .10E
   139                              <1> 
   140 00000BB7 89C8                <1>     mov eax, ecx
   141 00000BB9 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   142 00000BBC 01F0                <1>     add eax, esi    ; eax += x
   143                              <1> 
   144 00000BBE 89CB                <1>     mov ebx, ecx
   145 00000BC0 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   146 00000BC3 01FB                <1>     add ebx, edi    ; ebx += y
   147                              <1> 
   148 00000BC5 516A075350E8ECFEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   148 00000BCE FF6683C410          <1>
   149                              <1> 
   150 00000BD3 41                  <1>     inc ecx
   151 00000BD4 EBD9                <1>     jmp .10L
   152                              <1> .10E:
   153                              <1> 
   154 00000BD6 5E                  <1>     pop esi
   155 00000BD7 5F                  <1>     pop edi
   156 00000BD8 59                  <1>     pop ecx
   157 00000BD9 5B                  <1>     pop ebx
   158 00000BDA 58                  <1>     pop eax
   159                              <1> 
   160 00000BDB 89EC                <1>     mov esp, ebp
   161 00000BDD 5D                  <1>     pop ebp
   162                              <1> 
   163 00000BDE C3                  <1>     ret
   119                                  %include "../modules/protect/draw_str.s"
   120                              <1> draw_str:   ;void draw_str(col, row, color, p);
   121                              <1> ; col: 列
   122                              <1> ; row: 行
   123                              <1> ; color: 描画色
   124                              <1> ; p: 文字列のアドレス
   125 00000BDF 55                  <1>     push ebp
   126 00000BE0 89E5                <1>     mov ebp, esp
   127                              <1> 
   128 00000BE2 50                  <1>     push eax
   129 00000BE3 53                  <1>     push ebx
   130 00000BE4 51                  <1>     push ecx
   131 00000BE5 52                  <1>     push edx
   132 00000BE6 56                  <1>     push esi
   133                              <1> 
   134                              <1> 
   135 00000BE7 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   136 00000BEA 8B550C              <1>     mov edx, [ebp +12]  ; row
   137 00000BED 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   138 00000BF1 8B7514              <1>     mov esi, [ebp +20]  ; p
   139                              <1> 
   140 00000BF4 FC                  <1>     cld
   141                              <1> .10L:
   142 00000BF5 AC                  <1>     lodsb
   143 00000BF6 3C00                <1>     cmp al, 0
   144 00000BF8 741A                <1>     je .10E
   145                              <1> 
   146                              <1> %ifdef USE_SYSTEM_CALL
   147 00000BFA CD81                <1>     int 0x81
   148                              <1> %else
   149                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   150                              <1> %endif
   151                              <1> 
   152 00000BFC 41                  <1>     inc ecx
   153 00000BFD 83F950              <1>     cmp ecx, 80
   154 00000C00 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   155 00000C02 B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   156 00000C07 42                  <1>     inc edx
   157 00000C08 83FA1E              <1>     cmp edx, 30
   158 00000C0B 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   159 00000C0D BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   160                              <1> .12E:
   161 00000C12 EBE1                <1>     jmp .10L
   162                              <1> .10E:
   163                              <1> 
   164 00000C14 5E                  <1>     pop esi
   165 00000C15 5A                  <1>     pop edx
   166 00000C16 59                  <1>     pop ecx
   167 00000C17 5B                  <1>     pop ebx
   168 00000C18 58                  <1>     pop eax
   169                              <1> 
   170 00000C19 89EC                <1>     mov esp, ebp
   171 00000C1B 5D                  <1>     pop ebp
   172                              <1> 
   173 00000C1C C3                  <1>     ret
   120                                  %include "../modules/protect/draw_color_bar.s"
   121                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   122                              <1> ; col: 列
   123                              <1> ; row: 行
   124 00000C1D 55                  <1>     push ebp
   125 00000C1E 89E5                <1>     mov ebp, esp
   126                              <1> 
   127 00000C20 50                  <1>     push eax
   128 00000C21 53                  <1>     push ebx
   129 00000C22 51                  <1>     push ecx
   130 00000C23 52                  <1>     push edx
   131 00000C24 56                  <1>     push esi
   132 00000C25 57                  <1>     push edi
   133                              <1> 
   134                              <1> 
   135 00000C26 8B7508              <1>     mov esi, [ebp + 8]      ; x
   136 00000C29 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   137                              <1> 
   138                              <1>     ; カラーバーを表示
   139 00000C2C B900000000          <1>     mov ecx, 0
   140                              <1> .10L:
   141 00000C31 83F910              <1>     cmp ecx, 16
   142 00000C34 732E                <1>     jae .10E
   143                              <1> 
   144                              <1>     ; 一回で8文字
   145 00000C36 89C8                <1>     mov eax, ecx
   146 00000C38 83E001              <1>     and eax, 0x01
   147 00000C3B C1E003              <1>     shl eax, 3
   148 00000C3E 01F0                <1>     add eax, esi    ; col
   149                              <1> 
   150                              <1>     ; 2回に1回改行
   151 00000C40 89CB                <1>     mov ebx, ecx
   152 00000C42 D1EB                <1>     shr ebx, 1
   153 00000C44 01FB                <1>     add ebx, edi    ; row
   154                              <1> 
   155                              <1>     ; 背景色を2色見たら下位次の行
   156 00000C46 89CA                <1>     mov edx, ecx
   157 00000C48 D1E2                <1>     shl edx, 1
   158 00000C4A 8B92[770C0000]      <1>     mov edx, [.t0 + edx]    ; color
   159                              <1> 
   160 00000C50 68[6E0C0000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   160 00000C58 E882FFFFFF6683C410  <1>
   161                              <1> 
   162 00000C61 41                  <1>     inc ecx
   163 00000C62 EBCD                <1>     jmp .10L
   164                              <1> .10E:
   165                              <1> 
   166 00000C64 5F                  <1>     pop edi
   167 00000C65 5E                  <1>     pop esi
   168 00000C66 5A                  <1>     pop edx
   169 00000C67 59                  <1>     pop ecx
   170 00000C68 5B                  <1>     pop ebx
   171 00000C69 58                  <1>     pop eax
   172                              <1> 
   173 00000C6A 89EC                <1>     mov esp, ebp
   174 00000C6C 5D                  <1>     pop ebp
   175                              <1> 
   176 00000C6D C3                  <1>     ret
   177                              <1> 
   178                              <1> 
   179 00000C6E 202020202020202000  <1> .s0: db '        ', 0
   180                              <1> 
   181                              <1> .t0:
   182 00000C77 00000008            <1>     dw 0x0000, 0x0800
   183 00000C7B 00010009            <1>     dw 0x0100, 0x0900
   184 00000C7F 0002000A            <1>     dw 0x0200, 0x0A00
   185 00000C83 0003000B            <1>     dw 0x0300, 0x0B00
   186 00000C87 0004000C            <1>     dw 0x0400, 0x0C00
   187 00000C8B 0005000D            <1>     dw 0x0500, 0x0D00
   188 00000C8F 0006000E            <1>     dw 0x0600, 0x0E00
   189 00000C93 0007000F            <1>     dw 0x0700, 0x0F00
   121                                  %include "../modules/protect/draw_pixel.s"
   122                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   123                              <1> ; x: X座標
   124                              <1> ; y: Y座標
   125                              <1> ; color: 描画色
   126 00000C97 55                  <1>     push ebp
   127 00000C98 89E5                <1>     mov ebp, esp
   128                              <1> 
   129 00000C9A 50                  <1>     push eax
   130 00000C9B 53                  <1>     push ebx
   131 00000C9C 51                  <1>     push ecx
   132 00000C9D 57                  <1>     push edi
   133                              <1> 
   134                              <1> 
   135                              <1> 
   136                              <1>     ; y座標*80->y*(640/8)
   137 00000C9E 8B7D0C              <1>     mov edi, [ebp +12]
   138 00000CA1 C1E704              <1>     shl edi, 4
   139 00000CA4 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   140                              <1> 
   141                              <1>     ; x座標/8  8pixel単位の位置
   142 00000CAB 8B5D08              <1>     mov ebx, [ebp + 8]
   143 00000CAE 89D9                <1>     mov ecx, ebx
   144 00000CB0 C1EB03              <1>     shr ebx, 3
   145 00000CB3 01DF                <1>     add edi, ebx
   146                              <1> 
   147                              <1>     ; x座標を8で割った余りからビット位置を計算
   148                              <1>     ; 8pixel中の位置
   149                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   150 00000CB5 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   151 00000CB8 BB80000000          <1>     mov ebx, 0x80
   152 00000CBD D3EB                <1>     shr ebx, cl
   153                              <1> 
   154 00000CBF 8B4D10              <1>     mov ecx, [ebp +16]
   155                              <1> 
   156                              <1> %ifdef	USE_TEST_AND_SET
   157 00000CC2 68[980B0000]E88B06- <1> 	cdecl	test_and_set, IN_USE			    ; TEST_AND_SET(IN_USE); // リソースの空き待ち
   157 00000CCA 00006683C404        <1>
   158                              <1> %endif
   159                              <1> 
   160                              <1>     ; プレーンごとに出力
   161 00000CD0 6A03E82DFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   161 00000CD9 C404                <1>
   162 00000CDB 6A08E83BFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   162 00000CE4 C404                <1>
   163 00000CE6 516A085753E89DFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   163 00000CEF FF6683C410          <1>
   164                              <1> 
   165 00000CF4 6A02E809FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   165 00000CFD C404                <1>
   166 00000CFF 6A04E817FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   166 00000D08 C404                <1>
   167 00000D0A 516A045753E879FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   167 00000D13 FF6683C410          <1>
   168                              <1> 
   169 00000D18 6A01E8E5FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   169 00000D21 C404                <1>
   170 00000D23 6A02E8F3FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   170 00000D2C C404                <1>
   171 00000D2E 516A025753E855FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   171 00000D37 FF6683C410          <1>
   172                              <1> 
   173 00000D3C 6A00E8C1FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   173 00000D45 C404                <1>
   174 00000D47 6A01E8CFFCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   174 00000D50 C404                <1>
   175 00000D52 516A015753E831FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   175 00000D5B FF6683C410          <1>
   176                              <1> 
   177                              <1> %ifdef	USE_TEST_AND_SET
   178 00000D60 C705[980B0000]0000- <1> 	mov		[IN_USE], dword 0				    ; 変数のクリア
   178 00000D68 0000                <1>
   179                              <1> %endif
   180                              <1> 
   181 00000D6A 5F                  <1>     pop edi
   182 00000D6B 59                  <1>     pop ecx
   183 00000D6C 5B                  <1>     pop ebx
   184 00000D6D 58                  <1>     pop eax
   185                              <1> 
   186 00000D6E 89EC                <1>     mov esp, ebp
   187 00000D70 5D                  <1>     pop ebp
   188                              <1> 
   189 00000D71 C3                  <1>     ret
   122                                  %include "../modules/protect/draw_line.s"
   123                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   124                              <1> ; X0 始点のＸ座標
   125                              <1> ; Y0 始点のＹ座標
   126                              <1> ; X1 終点のX座標
   127                              <1> ; Y1 終点のY座標
   128                              <1> ; color 描画色
   129 00000D72 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   130 00000D73 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   131                              <1>                     ; ----------------
   132 00000D75 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   133 00000D77 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   134 00000D79 6A00                <1>     push dword 0    ;    -12| dx    = 0
   135 00000D7B 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   136 00000D7D 6A00                <1>     push dword 0    ;    -20| y0    = 0
   137 00000D7F 6A00                <1>     push dword 0    ;    -24| dy    = 0
   138 00000D81 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   139                              <1> 
   140 00000D83 50                  <1>     push eax        ;    -32| eax
   141 00000D84 53                  <1>     push ebx        ;    -36| ebx
   142 00000D85 51                  <1>     push ecx        ;    -40| ecx
   143 00000D86 52                  <1>     push edx        ;    -44| edx
   144 00000D87 56                  <1>     push esi        ;    -48| esi
   145 00000D88 57                  <1>     push edi        ;    -52| edi
   146                              <1>     ; espはebp-52?
   147                              <1> 
   148                              <1>     ; x0とx1の距離を計算
   149 00000D89 8B4508              <1>     mov eax, [ebp + 8]
   150 00000D8C 8B5D10              <1>     mov ebx, [ebp +16]
   151 00000D8F 29C3                <1>     sub ebx, eax
   152 00000D91 7D09                <1>     jge .10F
   153                              <1> 
   154 00000D93 F7DB                <1>     neg ebx
   155 00000D95 BEFFFFFFFF          <1>     mov esi, -1
   156 00000D9A EB05                <1>     jmp .10E
   157                              <1> .10F:
   158 00000D9C BE01000000          <1>     mov esi, 1
   159                              <1> .10E:
   160                              <1>     
   161                              <1>     ; y0とy1の距離を計算
   162 00000DA1 8B4D0C              <1>     mov ecx, [ebp +12]
   163 00000DA4 8B5514              <1>     mov edx, [ebp +20]
   164 00000DA7 29CA                <1>     sub edx, ecx
   165 00000DA9 7D09                <1>     jge .20F
   166                              <1> 
   167 00000DAB F7DA                <1>     neg edx
   168 00000DAD BFFFFFFFFF          <1>     mov edi, -1
   169 00000DB2 EB05                <1>     jmp .20E
   170                              <1> .20F:
   171 00000DB4 BF01000000          <1>     mov edi, 1
   172                              <1> .20E:
   173                              <1>     
   174                              <1>     ; x軸
   175 00000DB9 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   176 00000DBC 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   177 00000DBF 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   178                              <1> 
   179                              <1>     ; y軸
   180 00000DC2 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   181 00000DC5 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   182 00000DC8 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   183                              <1> 
   184                              <1> 
   185                              <1>     ; 基準軸を決める
   186 00000DCB 39D3                <1>     cmp ebx, edx
   187 00000DCD 7F08                <1>     jg .22F
   188                              <1>     
   189 00000DCF 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   190 00000DD2 8D7DF8              <1>     lea edi, [ebp - 8]
   191                              <1> 
   192 00000DD5 EB06                <1>     jmp .22E
   193                              <1> .22F:
   194                              <1>     
   195 00000DD7 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   196 00000DDA 8D7DEC              <1>     lea edi, [ebp -20]
   197                              <1> .22E:
   198                              <1> 
   199                              <1> ; 基準軸 esi
   200                              <1> ; 相対軸 edi
   201                              <1> 
   202                              <1>     ; 繰り返し回数（基準軸のドット数）
   203 00000DDD 8B4EFC              <1>     mov ecx, [esi - 4]
   204 00000DE0 83F900              <1>     cmp ecx, 0
   205 00000DE3 7505                <1>     jnz .30E
   206 00000DE5 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   207                              <1> .30E:
   208                              <1> 
   209                              <1>     ; 線を描画
   210                              <1> .50L:
   211                              <1> 
   212                              <1> %ifdef USE_SYSTEM_CALL
   213 00000DEA 89C8                <1>     mov eax, ecx
   214 00000DEC 8B4DF8              <1>     mov ecx, [ebp - 8]
   215 00000DEF 8B55EC              <1>     mov edx, [ebp -20]
   216 00000DF2 8B5D18              <1>     mov ebx, [ebp +24]
   217 00000DF5 CD82                <1>     int 0x82            ; sys_call()
   218 00000DF7 89C1                <1>     mov ecx, eax
   219                              <1> %else
   220                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   223                              <1> %endif
   224                              <1> 
   225                              <1>     ; 座標更新
   226                              <1> 
   227                              <1>     ; 基準軸の更新
   228 00000DF9 8B46F8              <1>     mov eax, [esi - 8]
   229 00000DFC 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   230                              <1> 
   231                              <1>     ; 相対軸の更新
   232 00000DFE 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   233 00000E01 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   234                              <1> 
   235 00000E04 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   236                              <1> 
   237 00000E07 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   238 00000E09 7C07                <1>     jl .52E
   239 00000E0B 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   240                              <1> 
   241 00000E0D 8B5FF8              <1>     mov ebx, [edi - 8]
   242 00000E10 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   243                              <1> .52E:
   244                              <1>     
   245 00000E12 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   246                              <1> 
   247 00000E15 E2D3                <1>     loop .50L
   248                              <1> .50E:
   249                              <1> 
   250                              <1> 
   251 00000E17 5F                  <1>     pop edi
   252 00000E18 5E                  <1>     pop esi
   253 00000E19 5A                  <1>     pop edx
   254 00000E1A 59                  <1>     pop ecx
   255 00000E1B 5B                  <1>     pop ebx
   256 00000E1C 58                  <1>     pop eax
   257                              <1> 
   258 00000E1D 89EC                <1>     mov esp, ebp
   259 00000E1F 5D                  <1>     pop ebp
   260                              <1> 
   261 00000E20 C3                  <1>     ret
   123                                  %include "../modules/protect/draw_rect.s"
   124                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   125 00000E21 55                  <1>     push ebp
   126 00000E22 89E5                <1>     mov ebp, esp
   127                              <1>     
   128 00000E24 50                  <1>     push eax
   129 00000E25 53                  <1>     push ebx
   130 00000E26 51                  <1>     push ecx
   131 00000E27 52                  <1>     push edx
   132 00000E28 56                  <1>     push esi
   133                              <1> 
   134 00000E29 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   135 00000E2C 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   136 00000E2F 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   137 00000E32 8B5514              <1>     mov edx, [ebp +20]  ; y1
   138 00000E35 8B7518              <1>     mov esi, [ebp +24]  ; color
   139                              <1> 
   140                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   141 00000E38 39C8                <1>     cmp eax, ecx
   142 00000E3A 7C01                <1>     jl .10E
   143 00000E3C 91                  <1>     xchg eax, ecx
   144                              <1> .10E:
   145 00000E3D 39D3                <1>     cmp ebx, edx
   146 00000E3F 7C02                <1>     jl .20E
   147 00000E41 87DA                <1>     xchg ebx, edx
   148                              <1> .20E:
   149                              <1> 
   150                              <1>     ; 矩形を描画
   151 00000E43 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   151 00000E4C FF6683C414          <1>
   152 00000E51 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   152 00000E5A FF6683C414          <1>
   153                              <1> 
   154 00000E5F 4A                  <1>     dec edx
   155 00000E60 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   155 00000E69 FF6683C414          <1>
   156 00000E6E 42                  <1>     inc edx
   157                              <1> 
   158 00000E6F 49                  <1>     dec ecx
   159 00000E70 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   159 00000E79 FF6683C414          <1>
   160                              <1> 
   161 00000E7E 5E                  <1>     pop esi
   162 00000E7F 5A                  <1>     pop edx
   163 00000E80 59                  <1>     pop ecx
   164 00000E81 5B                  <1>     pop ebx
   165 00000E82 58                  <1>     pop eax
   166                              <1>     
   167 00000E83 89EC                <1>     mov esp, ebp
   168 00000E85 5D                  <1>     pop ebp
   169                              <1> 
   170 00000E86 C3                  <1>     ret
   124                                  %include "../modules/protect/itoa.s"
   125                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   126                              <1> ; num   変換する値
   127                              <1> ; buff  保存先バッファアドレス
   128                              <1> ; size  保存先バッファサイズ
   129                              <1> ; radix 基数（2, 8, 10, 16)
   130                              <1> ; flags 
   131                              <1> ;   B2: 空白を'0'で埋める
   132                              <1> ;   B1: '+/-'記号を付加する
   133                              <1> ;   B0: 値を符号付き変数として扱う
   134                              <1> 
   135 00000E87 55                  <1>     push ebp
   136 00000E88 89E5                <1>     mov ebp, esp
   137                              <1> 
   138 00000E8A 50                  <1>     push eax
   139 00000E8B 53                  <1>     push ebx
   140 00000E8C 51                  <1>     push ecx
   141 00000E8D 52                  <1>     push edx
   142 00000E8E 56                  <1>     push esi
   143 00000E8F 57                  <1>     push edi
   144                              <1> 
   145                              <1> 
   146                              <1>     ; 引数取得
   147 00000E90 8B4508              <1>     mov eax, [ebp + 8]    ; num
   148 00000E93 8B750C              <1>     mov esi, [ebp +12]    ; size
   149 00000E96 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   150                              <1> 
   151 00000E99 89F7                <1>     mov edi, esi
   152 00000E9B 01CF                <1>     add edi, ecx
   153 00000E9D 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   154                              <1> 
   155 00000E9E 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   156                              <1> 
   157                              <1>     ; 符号付き判定
   158 00000EA1 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   159                              <1> .10Q:
   160 00000EA7 7408                <1>     je .10E         ; E=Exit
   161 00000EA9 83F800              <1>     cmp eax, 0
   162                              <1> .12Q:
   163 00000EAC 7D03                <1>     jge .12E
   164 00000EAE 83CB02              <1>     or ebx, 0b0010
   165                              <1> .12E:
   166                              <1> .10E:
   167                              <1> 
   168                              <1>     ; 符号出力判定
   169 00000EB1 F7C302000000        <1>     test ebx, 0b0010
   170                              <1> .20Q:
   171 00000EB7 7410                <1>     je .20E
   172 00000EB9 83F800              <1>     cmp eax, 0
   173                              <1> .22Q:
   174 00000EBC 7D07                <1>     jge .22F
   175 00000EBE F7D8                <1>     neg eax
   176 00000EC0 C6062D              <1>     mov [esi], byte '-'
   177 00000EC3 EB03                <1>     jmp .22E
   178                              <1> .22F:
   179                              <1>     
   180 00000EC5 C6062B              <1>     mov [esi], byte '+'
   181                              <1> .22E:
   182 00000EC8 49                  <1>     dec ecx
   183                              <1> .20E:
   184                              <1> 
   185                              <1>     ; ASCII変換
   186 00000EC9 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   187                              <1> .30L:
   188 00000ECC BA00000000          <1>     mov edx, 0
   189 00000ED1 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   190                              <1> 
   191 00000ED3 89D6                <1>     mov esi, edx
   192 00000ED5 8A96[FF0E0000]      <1>     mov dl, byte [.ascii + esi]
   193                              <1> 
   194 00000EDB 8817                <1>     mov [edi], dl
   195 00000EDD 4F                  <1>     dec edi
   196                              <1> 
   197 00000EDE 83F800              <1>     cmp eax, 0
   198 00000EE1 E0E9                <1>     loopnz .30L
   199                              <1> .30E:
   200                              <1> 
   201                              <1>     ; 空欄を埋める
   202 00000EE3 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   203                              <1> .40Q:
   204 00000EE6 740D                <1>     je .40E
   205 00000EE8 B020                <1>     mov al, ' '
   206 00000EEA 837D1804            <1>     cmp [ebp +24], dword 0b0100
   207                              <1> .42Q:
   208 00000EEE 7502                <1>     jne .42E
   209 00000EF0 B030                <1>     mov al, '0'
   210                              <1> .42E:
   211 00000EF2 FD                  <1>     std         ; dimention flag = 1(-方向)
   212 00000EF3 F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   213                              <1> .40E:
   214                              <1> 
   215 00000EF5 5F                  <1>     pop edi
   216 00000EF6 5E                  <1>     pop esi
   217 00000EF7 5A                  <1>     pop edx
   218 00000EF8 59                  <1>     pop ecx
   219 00000EF9 5B                  <1>     pop ebx
   220 00000EFA 58                  <1>     pop eax
   221                              <1> 
   222 00000EFB 89EC                <1>     mov esp, ebp
   223 00000EFD 5D                  <1>     pop ebp
   224                              <1> 
   225 00000EFE C3                  <1>     ret
   226                              <1> 
   227 00000EFF 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   227 00000F08 39414243444546      <1>
   125                                  %include "../modules/protect/rtc.s"
   126                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   127                              <1> ; dst: 保存先アドレス
   128                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   129 00000F0F 55                  <1>     push ebp
   130 00000F10 89E5                <1>     mov ebp, esp
   131                              <1> 
   132 00000F12 50                  <1>     push eax
   133 00000F13 53                  <1>     push ebx
   134                              <1> 
   135 00000F14 B00A                <1>     mov al, 0x0A    ; レジスタA
   136 00000F16 E670                <1>     out 0x70, al
   137 00000F18 E471                <1>     in al, 0x71
   138 00000F1A A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   139 00000F1C 7407                <1>     je .10F
   140 00000F1E B801000000          <1>     mov eax, 1      ; 更新中は失敗
   141 00000F23 EB27                <1>     jmp .10E
   142                              <1> .10F:
   143                              <1> 
   144 00000F25 B004                <1>     mov al, 0x04    ; 時
   145 00000F27 E670                <1>     out 0x70, al    ; レジスタ設定
   146 00000F29 E471                <1>     in al, 0x71     ; 時刻読み込み
   147                              <1> 
   148 00000F2B C1E008              <1>     shl eax, 8      ; alをahに退避
   149                              <1> 
   150 00000F2E B002                <1>     mov al, 0x02    ; 分
   151 00000F30 E670                <1>     out 0x70, al    ; レジスタ設定
   152 00000F32 E471                <1>     in al, 0x71     ; 時刻読み込み
   153                              <1> 
   154 00000F34 C1E008              <1>     shl eax, 8      ; alをahに退避
   155                              <1> 
   156 00000F37 B000                <1>     mov al, 0x00    ; 秒
   157 00000F39 E670                <1>     out 0x70, al    ; レジスタ設定
   158 00000F3B E471                <1>     in al, 0x71     ; 時刻読み込み
   159                              <1> 
   160 00000F3D 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   161                              <1> 
   162 00000F42 8B5D08              <1>     mov ebx, [ebp + 8]
   163 00000F45 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   164                              <1> 
   165 00000F47 B800000000          <1>     mov eax, 0
   166                              <1> .10E:
   167                              <1> 
   168 00000F4C 5B                  <1>     pop ebx
   169 00000F4D 58                  <1>     pop eax
   170                              <1> 
   171 00000F4E 89EC                <1>     mov esp, ebp
   172 00000F50 5D                  <1>     pop ebp
   173                              <1> 
   174 00000F51 C3                  <1>     ret
   126                                  %include "../modules/protect/draw_time.s"
   127                              <1> draw_time:  ; void draw_time(col, row, color, time);
   128                              <1> ; time 時刻データ
   129 00000F52 55                  <1>     push ebp
   130 00000F53 89E5                <1>     mov ebp, esp
   131                              <1> 
   132 00000F55 50                  <1>     push eax
   133 00000F56 53                  <1>     push ebx
   134                              <1>     
   135 00000F57 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   136                              <1> 
   137 00000F5A 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   138 00000F5D 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   138 00000F64 [C40F0000]53E819FF- <1>
   138 00000F6C FFFF6683C414        <1>
   139                              <1> 
   140 00000F72 88E3                <1>     mov bl, ah          ; 分だけ
   141 00000F74 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   141 00000F7B [C10F0000]53E802FF- <1>
   141 00000F83 FFFF6683C414        <1>
   142                              <1>     
   143 00000F89 C1E810              <1>     shr eax, 16         ; 時だけ
   144 00000F8C 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   144 00000F93 [BE0F0000]50E8EAFE- <1>
   144 00000F9B FFFF6683C414        <1>
   145                              <1> 
   146 00000FA1 68[BE0F0000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   146 00000FA9 FF750CFF7508E82BFC- <1>
   146 00000FB2 FFFF6683C410        <1>
   147                              <1> 
   148 00000FB8 5B                  <1>     pop ebx
   149 00000FB9 58                  <1>     pop eax
   150                              <1> 
   151 00000FBA 89EC                <1>     mov esp, ebp
   152 00000FBC 5D                  <1>     pop ebp
   153                              <1> 
   154 00000FBD C3                  <1>     ret
   155                              <1> 
   156 00000FBE 5A5A3A              <1> .hour: db "ZZ:"
   157 00000FC1 5A5A3A              <1> .min:  db "ZZ:"
   158 00000FC4 5A5A00              <1> .sec:  db "ZZ", 0
   127                                  %include "../modules/protect/interrupt.s"
   128                              <1> int_stop:
   129 00000FC7 FB                  <1>     sti ; 割り込みを許可
   130                              <1> 
   131                              <1>     ; EAXで示される文字列を表示
   132 00000FC8 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   132 00000FD1 19E808FCFFFF6683C4- <1>
   132 00000FDA 10                  <1>
   133                              <1> 
   134                              <1>     ; スタックのデータを文字列に変換
   135 00000FDB 8B0424              <1>     mov eax, [esp + 0]
   136 00000FDE 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   136 00000FE5 [A3100000]50E898FE- <1>
   136 00000FED FFFF6683C414        <1>
   137                              <1> 
   138 00000FF3 8B442404            <1>     mov eax, [esp + 4]
   139 00000FF7 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   139 00000FFE [B4100000]50E87FFE- <1>
   139 00001006 FFFF6683C414        <1>
   140                              <1> 
   141 0000100C 8B442408            <1>     mov eax, [esp + 8]
   142 00001010 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   142 00001017 [C5100000]50E866FE- <1>
   142 0000101F FFFF6683C414        <1>
   143                              <1> 
   144 00001025 8B44240C            <1>     mov eax, [esp +12]
   145 00001029 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   145 00001030 [D6100000]50E84DFE- <1>
   145 00001038 FFFF6683C414        <1>
   146                              <1> 
   147                              <1>     ; 文字列の表示
   148 0000103E 68[9C100000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   148 00001046 00006A106A19E88EFB- <1>
   148 0000104F FFFF6683C410        <1>
   149 00001055 68[AD100000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   149 0000105D 00006A116A19E877FB- <1>
   149 00001066 FFFF6683C410        <1>
   150 0000106C 68[BE100000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   150 00001074 00006A126A19E860FB- <1>
   150 0000107D FFFF6683C410        <1>
   151 00001083 68[CF100000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   151 0000108B 00006A136A19E849FB- <1>
   151 00001094 FFFF6683C410        <1>
   152                              <1> 
   153                              <1>     ; 無限ループ
   154 0000109A EBFE                <1>     jmp $
   155                              <1> 
   156 0000109C 4553502B20303A      <1> .s1 db "ESP+ 0:"
   157 000010A3 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   157 000010AC 00                  <1>
   158 000010AD 2020202B20343A      <1> .s2 db "   + 4:"
   159 000010B4 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   159 000010BD 00                  <1>
   160 000010BE 2020202B20383A      <1> .s3 db "   + 8:"
   161 000010C5 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   161 000010CE 00                  <1>
   162 000010CF 2020202B31323A      <1> .s4 db "   +12:"
   163 000010D6 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   163 000010DF 00                  <1>
   164                              <1> 
   165                              <1> int_default:
   166 000010E0 9C                  <1>     pushf       ; EFLAGS(IF==0)
   167 000010E1 0E                  <1>     push cs
   168 000010E2 68[C70F0000]        <1>     push int_stop
   169                              <1> 
   170 000010E7 B8[ED100000]        <1>     mov eax, .s0
   171 000010EC CF                  <1>     iret
   172                              <1> 
   173 000010ED 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   173 000010F6 50202020203E2000    <1>
   174                              <1> 
   175                              <1> 
   176                              <1> ; 割り込みベクタの初期化
   177 000010FE 90<rep 2h>          <1> ALIGN 4
   178 00001100 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   179 00001102 00001000            <1>       dd VECT_BASE      ; idt location
   180                              <1> 
   181                              <1> ; 割り込みテーブルを初期化
   182                              <1> init_int:
   183 00001106 50                  <1>     push eax
   184 00001107 53                  <1>     push ebx
   185 00001108 51                  <1>     push ecx
   186 00001109 57                  <1>     push edi
   187                              <1> 
   188                              <1>     ; 全ての割り込みにデフォルト処理を設定
   189 0000110A 8D05[E0100000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   190 00001110 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   191 00001115 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   192                              <1> 
   193 00001117 B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   194 0000111C BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   195                              <1> 
   196                              <1>     ; メモリに書き込み
   197                              <1> .10L:
   198 00001121 891F                <1>     mov [edi + 0], ebx
   199 00001123 894704              <1>     mov [edi + 4], eax
   200 00001126 83C708              <1>     add edi, 8
   201 00001129 E2F6                <1>     loop .10L
   202                              <1> 
   203                              <1>     ; 割り込みディスクリプタの設定
   204 0000112B 0F011D[00110000]    <1>     lidt [IDTR]
   205                              <1> 
   206 00001132 5F                  <1>     pop edi
   207 00001133 59                  <1>     pop ecx
   208 00001134 5B                  <1>     pop ebx
   209 00001135 58                  <1>     pop eax
   210                              <1> 
   211 00001136 C3                  <1>     ret
   212                              <1> 
   213                              <1> 
   214                              <1> int_zero_div:
   215 00001137 9C                  <1>     pushf
   216 00001138 0E                  <1>     push cs
   217 00001139 68[C70F0000]        <1>     push int_stop
   218                              <1> 
   219 0000113E B8[44110000]        <1>     mov eax, .s0
   220 00001143 CF                  <1>     iret
   221                              <1> 
   222 00001144 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   222 0000114D 44495620203E2000    <1>
   128                                  %include "../modules/protect/pic.s"
   129                              <1> init_pic:
   130 00001155 50                  <1>     push eax
   131                              <1> 
   132                              <1>     ; outp ポート, データ
   133                              <1> 
   134                              <1>     ; マスタの設定
   135                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 00001156 B011                <2>  mov al, %2
    50 00001158 E620                <2>  out %1, al
   136                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 0000115A B020                <2>  mov al, %2
    50 0000115C E621                <2>  out %1, al
   137                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 0000115E B004                <2>  mov al, %2
    50 00001160 E621                <2>  out %1, al
   138                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 00001162 B001                <2>  mov al, %2
    50 00001164 E621                <2>  out %1, al
   139                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 00001166 B0FF                <2>  mov al, %2
    50 00001168 E621                <2>  out %1, al
   140                              <1> 
   141                              <1>     ; スレーブの設定
   142                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 0000116A B011                <2>  mov al, %2
    50 0000116C E6A0                <2>  out %1, al
   143                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 0000116E B028                <2>  mov al, %2
    50 00001170 E6A1                <2>  out %1, al
   144                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 00001172 B002                <2>  mov al, %2
    50 00001174 E6A1                <2>  out %1, al
   145                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 00001176 B001                <2>  mov al, %2
    50 00001178 E6A1                <2>  out %1, al
   146                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 0000117A B0FF                <2>  mov al, %2
    50 0000117C E6A1                <2>  out %1, al
   147                              <1> 
   148 0000117E 58                  <1>     pop eax
   149                              <1> 
   150 0000117F C3                  <1>     ret
   129                                  %include "../modules/protect/int_rtc.s"
   130                              <1> int_rtc:
   131 00001180 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   132 00001181 1E                  <1>     push ds
   133 00001182 06                  <1>     push es
   134                              <1> 
   135                              <1>     ; データ用セグメントセレクタの設定
   136 00001183 66B81000            <1>     mov ax, 0x0010
   137 00001187 8ED8                <1>     mov ds, ax
   138 00001189 8EC0                <1>     mov es, ax
   139                              <1> 
   140                              <1>     ; RTCから時刻を取得
   141 0000118B 68[54020000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   141 00001193 FFFF6683C404        <1>
   142                              <1> 
   143                              <1>     ; RTCの割り込み要因を取得
   144                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 00001199 B00C                <2>  mov al, %2
    50 0000119B E670                <2>  out %1, al
   145 0000119D E471                <1>     in al, 0x71     ; RTCからデータを取得
   146                              <1> 
   147                              <1>     ; 割り込みフラグをクリア(EOI)
   148 0000119F B020                <1>     mov al, 0x20
   149 000011A1 E6A0                <1>     out 0xA0, al    ; スレーブ
   150 000011A3 E620                <1>     out 0x20, al    ; マスタ
   151                              <1> 
   152 000011A5 07                  <1>     pop es
   153 000011A6 1F                  <1>     pop ds
   154 000011A7 61                  <1>     popa
   155                              <1> 
   156 000011A8 CF                  <1>     iret        ; 割り込み処理の終了
   157                              <1> 
   158                              <1> rtc_int_en:
   159 000011A9 55                  <1>     push ebp
   160 000011AA 89E5                <1>     mov ebp, esp
   161 000011AC 50                  <1>     push eax
   162                              <1> 
   163                              <1>     ; 割り込み許可設定
   164                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 000011AD B00B                <2>  mov al, %2
    50 000011AF E670                <2>  out %1, al
   165                              <1> 
   166 000011B1 E471                <1>     in al, 0x71     ; RTCからデータを取得
   167 000011B3 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   168                              <1> 
   169 000011B6 E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   170                              <1> 
   171 000011B8 58                  <1>     pop eax
   172                              <1> 
   173 000011B9 89EC                <1>     mov esp, ebp
   174 000011BB 5D                  <1>     pop ebp
   175                              <1> 
   176 000011BC C3                  <1>     ret
   130                                  %include "../modules/protect/int_keyboard.s"
   131                              <1> int_keyboard:
   132 000011BD 60                  <1>     pusha
   133 000011BE 1E                  <1>     push ds
   134 000011BF 06                  <1>     push es
   135                              <1> 
   136                              <1>     ; データ用セグメントの設定
   137 000011C0 66B81000            <1>     mov ax, 0x0010
   138 000011C4 8ED8                <1>     mov ds, ax
   139 000011C6 8EC0                <1>     mov es, ax
   140                              <1> 
   141                              <1>     ; KBCのバッファ読み取り
   142 000011C8 E460                <1>     in al, 0x60
   143                              <1> 
   144                              <1>     ; キーコードの保存
   145 000011CA 5068[E4110000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   145 000011D2 0000006683C408      <1>
   146                              <1> 
   147                              <1>     ; 割り込み終了コマンド送信
   148                              <1>     outp 0x20, 0x20
    49 000011D9 B020                <2>  mov al, %2
    50 000011DB E620                <2>  out %1, al
   149                              <1> 
   150 000011DD 07                  <1>     pop es
   151 000011DE 1F                  <1>     pop ds
   152 000011DF 61                  <1>     popa
   153                              <1> 
   154 000011E0 CF                  <1>     iret
   155                              <1> 
   156 000011E1 00<rep 3h>          <1> ALIGN 4, db 0
   157 000011E4 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   131                                  %include "../modules/protect/ring_buff.s"
   132                              <1> ring_rd:        ; int ring_rd(buff, data);
   133                              <1> ; buff リングバッファ
   134                              <1> ; data 読み込んだデータの保存先アドレス
   135                              <1> ; 戻り値: データあり(0以外), データなし(0)
   136                              <1> 
   137 000011FC 55                  <1>     push ebp
   138 000011FD 89E5                <1>     mov ebp, esp
   139                              <1> 
   140 000011FF 50                  <1>     push eax
   141 00001200 53                  <1>     push ebx
   142 00001201 56                  <1>     push esi
   143 00001202 57                  <1>     push edi
   144                              <1> 
   145                              <1>     ; 引数取得
   146 00001203 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   147 00001206 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   148                              <1> 
   149                              <1>     ; 読み込み位置を確認
   150 00001209 B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   151 0000120E 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   152 00001210 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   153 00001213 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   154                              <1> 
   155 00001215 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   156                              <1> 
   157 00001219 8807                <1>     mov [edi], al
   158                              <1> 
   159 0000121B 43                  <1>     inc ebx ; 次の読み込み位置
   160 0000121C 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   161 0000121F 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   162                              <1> 
   163 00001221 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   164                              <1> .10E:
   165                              <1> 
   166 00001226 5F                  <1>     pop edi
   167 00001227 5E                  <1>     pop esi
   168 00001228 5B                  <1>     pop ebx
   169 00001229 58                  <1>     pop eax
   170                              <1> 
   171 0000122A 89EC                <1>     mov esp, ebp
   172 0000122C 5D                  <1>     pop ebp
   173                              <1> 
   174 0000122D C3                  <1>     ret
   175                              <1> 
   176                              <1> 
   177                              <1> ring_wr:    ; int ring_wr(buff, data);
   178                              <1> ; buff シリンダバッファ
   179                              <1> ; data 書き込むデータ
   180                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   181 0000122E 55                  <1>     push ebp
   182 0000122F 89E5                <1>     mov ebp, esp
   183                              <1> 
   184 00001231 50                  <1>     push eax
   185 00001232 53                  <1>     push ebx
   186 00001233 51                  <1>     push ecx
   187 00001234 56                  <1>     push esi
   188                              <1> 
   189 00001235 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   190                              <1> 
   191                              <1>     ; 書き込み位置を確認
   192 00001238 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   193 0000123D 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   194 00001240 89D9                <1>     mov ecx, ebx
   195 00001242 41                  <1>     inc ecx                         ; 次の書き込み位置
   196 00001243 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   197                              <1> 
   198                              <1>     ; バッファフルなら処理しない
   199 00001246 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   200 00001248 740F                <1>     je .10E
   201                              <1> 
   202 0000124A 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   203                              <1> 
   204 0000124D 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   205 00001251 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   206 00001254 B801000000          <1>     mov eax, 1  ; 戻り値 成功
   207                              <1> .10E:
   208                              <1> 
   209 00001259 5E                  <1>     pop esi
   210 0000125A 59                  <1>     pop ecx
   211 0000125B 5B                  <1>     pop ebx
   212 0000125C 58                  <1>     pop eax
   213                              <1> 
   214 0000125D 89EC                <1>     mov esp, ebp
   215 0000125F 5D                  <1>     pop ebp
   216                              <1> 
   217 00001260 C3                  <1>     ret
   218                              <1> 
   219                              <1> draw_key:
   220 00001261 55                  <1>     push ebp
   221 00001262 89E5                <1>     mov ebp, esp
   222                              <1> 
   223 00001264 50                  <1>     push eax
   224 00001265 53                  <1>     push ebx
   225 00001266 51                  <1>     push ecx
   226 00001267 52                  <1>     push edx
   227 00001268 56                  <1>     push esi
   228 00001269 57                  <1>     push edi
   229                              <1> 
   230                              <1> 
   231 0000126A 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   232 0000126D 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   233 00001270 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   234                              <1> 
   235                              <1>     ; リングバッファの情報を取得
   236 00001273 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   237 00001275 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   238 00001278 B910000000          <1>     mov ecx, RING_ITEM_SIZE
   239                              <1> 
   240                              <1> .10L:
   241 0000127D 4B                  <1>     dec ebx ; 読み込み位置
   242 0000127E 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   243 00001281 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   244                              <1> 
   245 00001284 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   245 0000128D 68[C0120000]50E8EF- <1>
   245 00001295 FBFFFF6683C414      <1>
   246 0000129C 68[C0120000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   246 000012A4 52E835F9FFFF6683C4- <1>
   246 000012AD 10                  <1>
   247                              <1> 
   248 000012AE 83C203              <1>     add edx, 3  ; 表示位置更新
   249 000012B1 E2CA                <1>     loop .10L
   250                              <1> .10E:
   251                              <1> 
   252 000012B3 5F                  <1>     pop edi
   253 000012B4 5E                  <1>     pop esi
   254 000012B5 5A                  <1>     pop edx
   255 000012B6 59                  <1>     pop ecx
   256 000012B7 5B                  <1>     pop ebx
   257 000012B8 58                  <1>     pop eax
   258                              <1> 
   259 000012B9 89EC                <1>     mov esp, ebp
   260 000012BB 5D                  <1>     pop ebp
   261                              <1> 
   262 000012BC C3                  <1>     ret
   263                              <1> 
   264 000012BD 00<rep 3h>          <1> ALIGN 4, db 0
   265 000012C0 2D2D2000            <1> .tmp db "-- ", 0
   132                                  %include "../modules/protect/timer.s"
   133                              <1> int_en_timer0:
   134 000012C4 50                  <1>     push eax
   135                              <1> 
   136                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 000012C5 B034                <2>  mov al, %2
    50 000012C7 E643                <2>  out %1, al
   137                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 000012C9 B09C                <2>  mov al, %2
    50 000012CB E640                <2>  out %1, al
   138                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 000012CD B02E                <2>  mov al, %2
    50 000012CF E640                <2>  out %1, al
   139                              <1> 
   140 000012D1 58                  <1>     pop eax
   141                              <1> 
   142 000012D2 C3                  <1>     ret
   133                                  %include "../modules/protect/draw_rotation_bar.s"
   134                              <1> draw_rotation_bar:
   135 000012D3 50                  <1>     push eax
   136                              <1> 
   137 000012D4 A1[A4060000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   138 000012D9 C1E804              <1>     shr eax, 4              ; eax /= 4
   139 000012DC 3B05[04130000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   140 000012E2 741E                <1>     je .10E
   141                              <1> 
   142 000012E4 A3[04130000]        <1>     mov [.index], eax       ; 前回値設定
   143 000012E9 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   144                              <1> 
   145 000012EC 8A80[08130000]      <1>     mov al, [.table + eax]  ; 文字表示
   146 000012F2 506A0F6A1D6A00E8BD- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   146 000012FB F7FFFF6683C410      <1>
   147                              <1> 
   148                              <1> .10E:
   149                              <1> 
   150 00001302 58                  <1>     pop eax
   151                              <1> 
   152 00001303 C3                  <1>     ret
   153                              <1> 
   154                              <1> ALIGN 4, db 0
   155 00001304 00000000            <1> .index: dd 0        ; 前回値
   156 00001308 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   134                                  %include "../modules/protect/call_gate.s"
   135                              <1> call_gate:
   136 0000130C 55                  <1>     push ebp
   137 0000130D 89E5                <1>     mov ebp, esp
   138                              <1> 
   139 0000130F 60                  <1>     pusha
   140 00001310 1E                  <1>     push ds
   141 00001311 06                  <1>     push es
   142                              <1> 
   143                              <1>     ; データ用セグメントの設定
   144 00001312 66B81000            <1>     mov ax, 0x0010
   145 00001316 8ED8                <1>     mov ds, ax
   146 00001318 8EC0                <1>     mov es, ax
   147                              <1> 
   148                              <1>     ; 文字を表示
   149 0000131A 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   150 0000131D 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   151 00001320 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   152 00001323 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   153 00001326 52515350E8B0F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   153 0000132F 6683C410            <1>
   154                              <1> 
   155 00001333 07                  <1>     pop es
   156 00001334 1F                  <1>     pop ds
   157 00001335 61                  <1>     popa
   158                              <1> 
   159 00001336 89EC                <1>     mov esp, ebp
   160 00001338 5D                  <1>     pop ebp
   161                              <1> 
   162                              <1>     ; コードセグメントセレクタの復帰と終了
   163 00001339 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   135                                  %include "../modules/protect/trap_gate.s"
   136                              <1> trap_gate_81:
   137                              <1>     ; 1文字出力
   138 0000133C 50535251E876F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   138 00001345 6683C410            <1>
   139                              <1> 
   140 00001349 CF                  <1>     iret
   141                              <1> 
   142                              <1> trap_gate_82:
   143                              <1>     ; 点の描画
   144 0000134A 535251E845F9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   144 00001353 83C40C              <1>
   145                              <1> 
   146 00001356 CF                  <1>     iret
   136                                  %include "../modules/protect/test_and_set.s"
   137                              <1> test_and_set:
   138 00001357 55                  <1>     push ebp
   139 00001358 89E5                <1>     mov ebp, esp
   140                              <1> 
   141 0000135A 50                  <1>     push eax
   142 0000135B 53                  <1>     push ebx
   143                              <1> 
   144                              <1>     ; テストアンドセット
   145 0000135C B800000000          <1>     mov eax, 0
   146 00001361 8B5D08              <1>     mov ebx, [ebp + 8]
   147                              <1> 
   148                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   149                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   150                              <1> .10L:
   151 00001364 F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   152 00001368 7307                <1>     jnc .10E
   153                              <1> 
   154                              <1> .12L:
   155 0000136A 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   156 0000136D 72FB                <1>     jc .12L
   157                              <1>     
   158 0000136F EBF3                <1>     jmp .10L
   159                              <1> .10E:
   160                              <1>     
   161 00001371 5B                  <1>     pop ebx
   162 00001372 58                  <1>     pop eax
   163                              <1> 
   164 00001373 89EC                <1>     mov esp, ebp
   165 00001375 5D                  <1>     pop ebp
   166                              <1> 
   167 00001376 C3                  <1>     ret
   137                                  %include "../modules/protect/int_nm.s"
   138                              <1> get_tss_base:
   139                              <1> ; EBX: TSSセレクタ
   140                              <1>     ; EAX = TSS base address
   141 00001377 8B83[A2020000]      <1>     mov eax, [GDT + ebx + 2]
   142 0000137D C1E008              <1>     shl eax, 8
   143 00001380 8A83[A7020000]      <1>     mov al, [GDT + ebx + 7]
   144 00001386 C1C808              <1>     ror eax, 8
   145                              <1> 
   146 00001389 C3                  <1>     ret
   147                              <1> 
   148                              <1> save_fpu_context:
   149 0000138A DD7068              <1>     fnsave [eax + 104]
   150 0000138D C780D4000000010000- <1>     mov [eax + 104 + 108], dword 1
   150 00001396 00                  <1>
   151                              <1> 
   152 00001397 C3                  <1>     ret
   153                              <1> 
   154                              <1> load_fpu_context:
   155 00001398 83B8D400000000      <1>     cmp [eax + 104 + 108], dword 0
   156 0000139F 7504                <1>     jne .10F    ; if(saved != 0) goto .10F
   157 000013A1 DBE3                <1>     fninit      ; FPU初期化
   158 000013A3 EB03                <1>     jmp .10E
   159                              <1> .10F:
   160 000013A5 DD6068              <1>     frstor [eax + 104]  ; FPUコンテキストを復帰
   161                              <1> .10E:
   162 000013A8 C3                  <1>     ret
   163                              <1> 
   164                              <1> int_nm:
   165 000013A9 60                  <1>     pusha
   166 000013AA 1E                  <1>     push ds
   167 000013AB 06                  <1>     push es
   168                              <1> 
   169 000013AC 66B81000            <1>     mov ax, DS_KERNEL
   170 000013B0 8ED8                <1>     mov ds, ax
   171 000013B2 8EC0                <1>     mov es, ax
   172                              <1> 
   173                              <1>     ; タスクスイッチフラグをクリア
   174 000013B4 0F06                <1>     clts    ; CR0.TS = 0
   175                              <1> 
   176                              <1>     ; 前回・今回FPUを使用するタスク
   177 000013B6 8B3D[00140000]      <1>     mov edi, [.last_tss]; edi = 前回FPUを使用したタスクのTSS
   178 000013BC 0F00CE              <1>     str esi             ; esi = 今回FPUを使用するタスクのTSS（trレジスタ）
   179 000013BF 83E6F8              <1>     and esi, ~0x0007    ; 特権レベルはいらないのでマスク
   180                              <1> 
   181                              <1>     ; 初回利用チェック
   182 000013C2 83FF00              <1>     cmp edi, 0          ; if(前回のタスク==0) goto .10F
   183 000013C5 7420                <1>     je .10F
   184                              <1> 
   185 000013C7 39FE                <1>     cmp esi, edi        ; if(前回のタスク==今回のタスク) goto .12E
   186 000013C9 741A                <1>     je .12E
   187                              <1> 
   188 000013CB FA                  <1>     cli
   189                              <1> 
   190                              <1>     ; 前回のFPUコンテキストを保存
   191 000013CC 89FB                <1>     mov ebx, edi
   192 000013CE E8A4FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   193 000013D3 E8B2FFFFFF          <1>     call save_fpu_context   ; void save_fpu_context(eax);
   194                              <1> 
   195                              <1>     ; 今回のFPUコンテキストを復帰
   196 000013D8 89F3                <1>     mov ebx, esi
   197 000013DA E898FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   198 000013DF E8B4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   199                              <1> 
   200 000013E4 FB                  <1>     sti
   201                              <1> .12E:
   202 000013E5 EB0E                <1>     jmp .10E
   203                              <1> .10F:
   204 000013E7 FA                  <1>     cli
   205                              <1> 
   206                              <1>     ; 今回のFPUコンテキストを復帰
   207 000013E8 89F3                <1>     mov ebx, esi
   208 000013EA E888FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   209 000013EF E8A4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   210                              <1> 
   211 000013F4 FB                  <1>     sti
   212                              <1> .10E:
   213                              <1> 
   214 000013F5 8935[00140000]      <1>     mov [.last_tss], esi
   215                              <1> 
   216 000013FB 07                  <1>     pop es
   217 000013FC 1F                  <1>     pop ds
   218 000013FD 61                  <1>     popa
   219                              <1> 
   220 000013FE CF                  <1>     iret
   221                              <1> 
   222 000013FF 00                  <1> ALIGN 4, db 0
   223 00001400 00000000            <1> .last_tss: dd 0
   138                                  %include "../modules/protect/wait_tick.s"
   139                              <1> wait_tick:
   140 00001404 55                  <1>     push ebp
   141 00001405 89E5                <1>     mov ebp, esp
   142                              <1> 
   143 00001407 50                  <1>     push eax
   144 00001408 51                  <1>     push ecx
   145                              <1> 
   146                              <1>     ; ウェイト
   147 00001409 8B4D08              <1>     mov ecx, [ebp + 8]      ; ECX = ウェイト回数
   148 0000140C A1[A4060000]        <1>     mov eax, [TIMER_COUNT]  ; EAX = TIMER
   149                              <1> 
   150                              <1> .10L:
   151 00001411 3905[A4060000]      <1>     cmp [TIMER_COUNT], eax  ; for(i=0; i < ecx; i++) while(TIMER == eax);
   152 00001417 74F8                <1>     je .10L
   153 00001419 40                  <1>     inc eax
   154 0000141A E2F5                <1>     loop .10L
   155                              <1> 
   156 0000141C 59                  <1>     pop ecx
   157 0000141D 58                  <1>     pop eax
   158                              <1> 
   159 0000141E 89EC                <1>     mov esp, ebp
   160 00001420 5D                  <1>     pop ebp
   161                              <1> 
   162 00001421 C3                  <1>     ret
   139                                  %include "../modules/protect/memcpy.s"
   140                              <1> memcpy:     ; void memcpy(src, dest, size);
   141 00001422 55                  <1>     push ebp
   142 00001423 89E5                <1>     mov ebp, esp
   143                              <1> 
   144 00001425 51                  <1>     push ecx
   145 00001426 56                  <1>     push esi
   146 00001427 57                  <1>     push edi
   147                              <1> 
   148 00001428 FC                  <1>     cld     ; clear direction flag
   149 00001429 8B7508              <1>     mov esi, [ebp + 8]    ; src
   150 0000142C 8B7D0C              <1>     mov edi, [ebp + 12]    ; dest
   151 0000142F 8B4D10              <1>     mov ecx, [ebp + 16]    ; size
   152                              <1> 
   153 00001432 F3A4                <1>     rep movsb
   154                              <1> 
   155 00001434 5F                  <1>     pop edi
   156 00001435 5E                  <1>     pop esi
   157 00001436 59                  <1>     pop ecx
   158                              <1> 
   159 00001437 89EC                <1>     mov esp, ebp
   160 00001439 5D                  <1>     pop ebp
   161                              <1> 
   162 0000143A C3                  <1>     ret
   140                                  
   141                                  ;パディング
   142 0000143B 00<rep BC5h>                times KERNEL_SIZE - ($ - $$) db 0
   143                                  

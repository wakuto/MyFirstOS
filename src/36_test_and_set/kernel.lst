     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[D4010000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[24020000]        <1>  mov edi, %1
    67 0000001D B8[42020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[2C020000]        <1>  mov edi, %1
    67 00000038 B8[AA020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                  
    25                                      ; コールゲートの設定
    26                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 0000004C 50                  <1>  push eax
    84 0000004D 57                  <1>  push edi
    85                              <1> 
    86 0000004E BF[34020000]        <1>  mov edi, %1
    87 00000053 B8[780C0000]        <1>  mov eax, %2
    88                              <1> 
    89 00000058 668907              <1>  mov [edi + 0], ax
    90 0000005B C1E810              <1>  shr eax, 16
    91 0000005E 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 00000062 5F                  <1>  pop edi
    94 00000063 58                  <1>  pop eax
    27                                  
    28                                      ; LDTの設定
    29                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 00000064 50                  <1>  push eax
    64 00000065 57                  <1>  push edi
    65                              <1> 
    66 00000066 BF[1C020000]        <1>  mov edi, %1
    67 0000006B B8[DC010000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 00000070 66C7072700          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000075 66894702            <1>  mov [edi + 2], ax
    74 00000079 C1E810              <1>  shr eax, 16
    75 0000007C 884704              <1>  mov [edi + 4], al
    76 0000007F 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000082 5F                  <1>  pop edi
    79 00000083 58                  <1>  pop eax
    30                                  
    31                                      ; GDTをロード(再設定)
    32 00000084 0F0115[3C020000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    33                                  
    34                                      ; スタックの設定
    35 0000008B BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    36                                  
    37                                      ; タスクレジスタの初期化
    38 00000090 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    39 00000094 0F00D8                      ltr ax              ; タスクレジスタの設定
    40                                  
    41                                      ; 初期化
    42 00000097 E8D6090000                  cdecl init_int                  ; 割り込みベクタの初期化
    43 0000009C E8200A0000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    44                                  
    45                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 000000A1 50                  <1>  push eax
    31 000000A2 57                  <1>  push edi
    32                              <1> 
    33 000000A3 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000A8 B8[A30A0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000AD 668907              <1>  mov [edi + 0], ax
    41 000000B0 C1E810              <1>  shr eax, 16
    42 000000B3 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000B7 5F                  <1>  pop edi
    45 000000B8 58                  <1>  pop eax
    46                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 000000B9 50                  <1>  push eax
    31 000000BA 57                  <1>  push edi
    32                              <1> 
    33 000000BB BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000C0 B8[12030000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000C5 668907              <1>  mov [edi + 0], ax
    41 000000C8 C1E810              <1>  shr eax, 16
    42 000000CB 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000CF 5F                  <1>  pop edi
    45 000000D0 58                  <1>  pop eax
    47                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 000000D1 50                  <1>  push eax
    31 000000D2 57                  <1>  push edi
    32                              <1> 
    33 000000D3 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000D8 B8[290B0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000DD 668907              <1>  mov [edi + 0], ax
    41 000000E0 C1E810              <1>  shr eax, 16
    42 000000E3 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000E7 5F                  <1>  pop edi
    45 000000E8 58                  <1>  pop eax
    48                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 000000E9 50                  <1>  push eax
    31 000000EA 57                  <1>  push edi
    32                              <1> 
    33 000000EB BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000F0 B8[EC0A0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000F5 668907              <1>  mov [edi + 0], ax
    41 000000F8 C1E810              <1>  shr eax, 16
    42 000000FB 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000FF 5F                  <1>  pop edi
    45 00000100 58                  <1>  pop eax
    49                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 00000101 50                  <1>  push eax
    31 00000102 57                  <1>  push edi
    32                              <1> 
    33 00000103 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000108 B8[A80C0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 0000010D 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000113 668907              <1>  mov [edi + 0], ax
    41 00000116 C1E810              <1>  shr eax, 16
    42 00000119 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000011D 5F                  <1>  pop edi
    45 0000011E 58                  <1>  pop eax
    50                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 0000011F 50                  <1>  push eax
    31 00000120 57                  <1>  push edi
    32                              <1> 
    33 00000121 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000126 B8[B60C0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 0000012B 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000131 668907              <1>  mov [edi + 0], ax
    41 00000134 C1E810              <1>  shr eax, 16
    42 00000137 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000013B 5F                  <1>  pop edi
    45 0000013C 58                  <1>  pop eax
    51                                  
    52                                      ; デバイスの割り込み許可
    53 0000013D 6A10E8D10900006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    53 00000146 C404               
    54                                  
    55                                      ; IMR（割り込みマスクレジスタ）の設定
    56                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 00000148 B0F8                <1>  mov al, %2
    50 0000014A E621                <1>  out %1, al
    57                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 0000014C B0FE                <1>  mov al, %2
    50 0000014E E6A1                <1>  out %1, al
    58                                  
    59 00000150 FB                          sti                             ; 割り込み許可
    60                                  
    61 00000151 6A0D6A3FE8C6030000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    61 0000015A 6683C408           
    62 0000015E 6A046A3FE83A040000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    62 00000167 6683C408           
    63 0000016B 68[BC010000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    63 00000173 00006A0E6A19E8E503-
    63 0000017C 00006683C410       
    64                                  
    65                                  
    66                                      ; タスクの呼び出し
    67                                      ;call SS_TASK_1:0
    68                                  
    69                                  
    70                                  .10L:
    71                                      ; タスクの呼び出し
    72 00000182 EA000000002800              jmp SS_TASK_1:0
    73                                  
    74                                      ; 回転する棒の表示
    75 00000189 E8B10A0000                  cdecl draw_rotation_bar
    76                                  
    77                                      ; キーコードの取得
    78 0000018E 68[D0010000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    78 00000194 [500B0000]E8CB0900-
    78 0000019C 006683C408         
    79 000001A1 83F800                      cmp eax, 0
    80 000001A4 7414                        je .10E
    81                                  
    82                                      ; キーコードの表示
    83 000001A6 68[500B0000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    83 000001AE 02E8190A00006683C4-
    83 000001B7 0C                 
    84                                  
    85 000001B8 EBC8                        jmp .10L
    86                                  .10E:
    87                                  
    88                                  
    89                                      ; 処理の終了
    90 000001BA EBFE                        jmp $
    91                                  
    92 000001BC 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    92 000001C5 65726E656C212000   
    93                                  
    94 000001CD 00<rep 3h>              ALIGN 4, db 0
    95 000001D0 00000000                .int_key: dd 0
    96                                  
    97                                  ALIGN 4, db 0
    98 000001D4 00000000                FONT_ADR: dd 0
    99 000001D8 00000000                RTC_TIME: dd 0
   100                                  
   101                                  ; タスク
   102                                  %include "descriptor.s"
   103                              <1> ; ローカルディスクリプタテーブル
   104 000001DC 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   105 000001E4 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   106 000001EC FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   107 000001F4 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   108 000001FC FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   109                              <1> .end:
   110                              <1> 
   111                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   112                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   113                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   114                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   115                              <1> 
   116                              <1> LDT_LIMIT equ .end        - LDT - 1
   117                              <1> 
   118                              <1> ; グローバルディスクリプタテーブル
   119 00000204 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   120 0000020C FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   121 00000214 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   122 0000021C 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   123 00000224 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   124 0000022C 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   125 00000234 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   126                              <1> .end:
   127                              <1> 
   128                              <1> CS_KERNEL equ .cs_kernel - GDT
   129                              <1> DS_KERNEL equ .ds_kernel - GDT
   130                              <1> SS_LDT    equ .ldt       - GDT
   131                              <1> SS_TASK_0 equ .tss_0     - GDT
   132                              <1> SS_TASK_1 equ .tss_1     - GDT
   133                              <1> SS_GATE_0 equ .call_gate - GDT
   134                              <1> 
   135 0000023C 3700                <1> GDTR: dw GDT.end - GDT - 1
   136 0000023E [04020000]          <1>       dd GDT
   137                              <1> 
   138                              <1> ; TSS
   139                              <1> TSS_0:
   140 00000242 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   141 00000246 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   142 0000024A 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   143 0000024E 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   144 00000252 00000000            <1> .ss1:       dd 0                    ;* 16:
   145 00000256 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   146 0000025A 00000000            <1> .ss2:       dd 0                    ;* 24:
   147 0000025E 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   148 00000262 00000000            <1> .eip:       dd 0                    ;  32:EIP
   149 00000266 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   150 0000026A 00000000            <1> .eax:       dd 0                    ;  40:EAX
   151 0000026E 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   152 00000272 00000000            <1> .edx:       dd 0                    ;  48:EDX
   153 00000276 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   154 0000027A 00000000            <1> .esp:       dd 0                    ;  56:ESP
   155 0000027E 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   156 00000282 00000000            <1> .esi:       dd 0                    ;  64:ESI
   157 00000286 00000000            <1> .edi:       dd 0                    ;  68:EDI
   158 0000028A 00000000            <1> .es:        dd 0                    ;  72:ES
   159 0000028E 00000000            <1> .cs:        dd 0                    ;  76:CS
   160 00000292 00000000            <1> .ss:        dd 0                    ;  80:SS
   161 00000296 00000000            <1> .ds:        dd 0                    ;  84:DS
   162 0000029A 00000000            <1> .fs:        dd 0                    ;  88:FS
   163 0000029E 00000000            <1> .gs:        dd 0                    ;  92:GS
   164 000002A2 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   165 000002A6 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   166                              <1> 
   167                              <1> TSS_1:
   168 000002AA 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   169 000002AE 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   170 000002B2 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   171 000002B6 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   172 000002BA 00000000            <1> .ss1:       dd 0                    ;* 16:
   173 000002BE 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   174 000002C2 00000000            <1> .ss2:       dd 0                    ;* 24:
   175 000002C6 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   176 000002CA [50030000]          <1> .eip:       dd task_1               ;  32:EIP
   177 000002CE 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   178 000002D2 00000000            <1> .eax:       dd 0                    ;  40:EAX
   179 000002D6 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   180 000002DA 00000000            <1> .edx:       dd 0                    ;  48:EDX
   181 000002DE 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   182 000002E2 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   183 000002E6 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   184 000002EA 00000000            <1> .esi:       dd 0                    ;  64:ESI
   185 000002EE 00000000            <1> .edi:       dd 0                    ;  68:EDI
   186 000002F2 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   187 000002F6 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   188 000002FA 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   189 000002FE 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   190 00000302 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   191 00000306 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   192 0000030A 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   193 0000030E 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   103                                  %include "modules/int_timer.s"
   104                              <1> int_timer:
   105 00000312 60                  <1>     pushad
   106 00000313 1E                  <1>     push ds
   107 00000314 06                  <1>     push es
   108                              <1> 
   109                              <1>     ; データ用セグメントの設定
   110 00000315 66B81000            <1>     mov ax, 0x0010
   111 00000319 8ED8                <1>     mov ds, ax
   112 0000031B 8EC0                <1>     mov es, ax
   113                              <1> 
   114                              <1>     ; TICK
   115 0000031D FF05[48030000]      <1>     inc dword [TIMER_COUNT]
   116                              <1> 
   117                              <1>     ; 割り込みフラグをクリア(EOI)
   118                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 00000323 B020                <2>  mov al, %2
    50 00000325 E620                <2>  out %1, al
   119                              <1> 
   120                              <1>     ; タスクの切り替え
   121 00000327 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   122 0000032B 6683F828            <1>     cmp ax, SS_TASK_1   ; switch(ax)
   123 0000032F 7409                <1>     je .11L
   124                              <1> 
   125 00000331 EA000000002800      <1>     jmp SS_TASK_1:0     ; default:
   126 00000338 EB09                <1>     jmp .10E
   127                              <1> .11L:                   ; case SS_TASK_1:
   128 0000033A EA000000002000      <1>     jmp SS_TASK_0:0
   129 00000341 EB00                <1>     jmp .10E
   130                              <1> .10E:
   131                              <1> 
   132 00000343 07                  <1>     pop es
   133 00000344 1F                  <1>     pop ds
   134 00000345 61                  <1>     popad
   135                              <1> 
   136 00000346 CF                  <1>     iret
   137                              <1> 
   138 00000347 00                  <1> ALIGN 4, db 0
   139 00000348 0000000000000000    <1> TIMER_COUNT: dq 0
   140                              <1> 
   104                                  %include "tasks/task_1.s"
   105                              <1> task_1:
   106                              <1>     ; 文字列の表示(コールゲート)
   107 00000350 68[80030000]6A076A- <1>     cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   107 00000358 006A3F9A0000000030- <1>
   107 00000361 006683C410          <1>
   108                              <1> 
   109                              <1> .10L:
   110                              <1>     ; 時刻の表示
   111 00000366 A1[D8010000]        <1>     mov eax, [RTC_TIME]
   112 0000036B 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   112 00000374 48E8440500006683C4- <1>
   112 0000037D 10                  <1>
   113                              <1> 
   114 0000037E EBE6                <1>     jmp .10L
   115                              <1> 
   116                              <1>     ; データ
   117 00000380 5461736B2D3100      <1> .s0 db "Task-1", 0
   105                                  
   106                                  ; モジュール
   107                                  %include "../modules/protect/vga.s"
   108                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   109                              <1> ; plane: 読み込みプレーン
   110 00000387 55                  <1>     push ebp
   111 00000388 89E5                <1>     mov ebp, esp
   112                              <1> 
   113 0000038A 6650                <1>     push ax
   114 0000038C 6652                <1>     push dx
   115                              <1> 
   116                              <1> 
   117                              <1>     ; 読み込みプレーンの選択
   118 0000038E 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   119 00000391 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   120 00000394 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   121 00000396 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   122 0000039A 66EF                <1>     out dx, ax
   123                              <1> 
   124 0000039C 665A                <1>     pop dx
   125 0000039E 6658                <1>     pop ax
   126                              <1> 
   127 000003A0 89EC                <1>     mov esp, ebp
   128 000003A2 5D                  <1>     pop ebp
   129                              <1> 
   130 000003A3 C3                  <1>     ret
   131                              <1> 
   132                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   133                              <1> ; plane 書き込みプレーン
   134 000003A4 55                  <1>     push ebp
   135 000003A5 89E5                <1>     mov ebp, esp
   136                              <1> 
   137 000003A7 6650                <1>     push ax
   138 000003A9 6652                <1>     push dx
   139                              <1> 
   140                              <1> 
   141                              <1>     ; 書き込みプレーンの選択
   142 000003AB 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   143 000003AE 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   144 000003B1 B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   145 000003B3 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   146 000003B7 66EF                <1>     out dx, ax
   147                              <1> 
   148                              <1> 
   149 000003B9 665A                <1>     pop dx
   150 000003BB 6658                <1>     pop ax
   151                              <1> 
   152 000003BD 89EC                <1>     mov esp, ebp
   153 000003BF 5D                  <1>     pop ebp
   154                              <1> 
   155 000003C0 C3                  <1>     ret
   156                              <1> 
   157                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   158                              <1> ; font FONTアドレス
   159                              <1> ; vram VRAMアドレス
   160                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   161                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   162 000003C1 55                  <1>     push ebp
   163 000003C2 89E5                <1>     mov ebp, esp
   164                              <1>     
   165 000003C4 50                  <1>     push eax
   166 000003C5 53                  <1>     push ebx
   167 000003C6 51                  <1>     push ecx
   168 000003C7 52                  <1>     push edx
   169 000003C8 57                  <1>     push edi
   170 000003C9 56                  <1>     push esi
   171                              <1> 
   172 000003CA 8B7508              <1>     mov esi, [ebp + 8]          ; font
   173 000003CD 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   174 000003D0 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   175 000003D4 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   176                              <1>     ; bh = 背景色 bl = 前景色
   177                              <1> 
   178 000003D8 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   179 000003DA 0F94C6              <1>     setz dh         ; dh = zf
   180 000003DD FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   181                              <1> 
   182 000003DF 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   183 000003E1 0F94C2              <1>     setz dl         ; dl = zf
   184 000003E4 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   185                              <1> 
   186                              <1>     ; 16ドットフォントのコピー
   187 000003E6 FC                  <1>     cld             ; アドレス加算モード
   188                              <1> 
   189 000003E7 B910000000          <1>     mov ecx, 16
   190                              <1> .10L:
   191                              <1>     ; フォントマスクの作成
   192 000003EC AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   193 000003ED 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   194 000003EF F6D4                <1>     not ah
   195                              <1> 
   196                              <1>     ; 前景色
   197 000003F1 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   198                              <1> 
   199                              <1>     ; 背景色
   200 000003F3 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   201 000003F9 7404                <1>     jz .11F
   202                              <1>     ; 透過on
   203 000003FB 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   204 000003FD EB02                <1>     jmp .11E
   205                              <1> .11F:                   ; 透過off
   206 000003FF 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   207                              <1> .11E:
   208                              <1>     
   209                              <1>     ; 前景色と背景色を合成
   210 00000401 08E0                <1>     or al, ah           ; al = 背景 | 前景
   211                              <1> 
   212                              <1>     ; 新しい値を出力
   213 00000403 8807                <1>     mov [edi], al
   214                              <1> 
   215 00000405 83C750              <1>     add edi, 80      ; 1行すすめる
   216 00000408 E2E2                <1>     loop .10L
   217                              <1> .10E:
   218                              <1> 
   219 0000040A 5E                  <1>     pop esi
   220 0000040B 5F                  <1>     pop edi
   221 0000040C 5A                  <1>     pop edx
   222 0000040D 59                  <1>     pop ecx
   223 0000040E 5B                  <1>     pop ebx
   224 0000040F 58                  <1>     pop eax
   225                              <1> 
   226 00000410 89EC                <1>     mov esp, ebp
   227 00000412 5D                  <1>     pop ebp
   228                              <1> 
   229 00000413 C3                  <1>     ret
   230                              <1> 
   231                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   232                              <1> ; bitデータ
   233                              <1> ; vram VRAMアドレス
   234                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   235                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   236 00000414 55                  <1>     push ebp
   237 00000415 89E5                <1>     mov ebp, esp
   238                              <1>     
   239 00000417 50                  <1>     push eax
   240 00000418 53                  <1>     push ebx
   241 00000419 52                  <1>     push edx
   242 0000041A 57                  <1>     push edi
   243                              <1> 
   244 0000041B 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   245 0000041E 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   246 00000422 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   247                              <1>     ; bl = 前景色
   248                              <1> 
   249                              <1>     ; 常に透過モード
   250 00000426 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   251 00000428 0F94C3              <1>     setz bl         ; dl = zf
   252 0000042B FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   253                              <1> 
   254                              <1>     ; マスク
   255 0000042D 8A4508              <1>     mov al, [ebp + 8]   ; bit
   256 00000430 88C4                <1>     mov ah, al      ; ah ~= al
   257 00000432 F6D4                <1>     not ah
   258                              <1> 
   259 00000434 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   260 00000436 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   261 00000438 08E0                <1>     or al, ah           ; 背景と前景を合成
   262 0000043A 8807                <1>     mov [edi], al       ; プレーンに書き込み
   263                              <1>     
   264                              <1> 
   265 0000043C 5F                  <1>     pop edi
   266 0000043D 5A                  <1>     pop edx
   267 0000043E 5B                  <1>     pop ebx
   268 0000043F 58                  <1>     pop eax
   269                              <1> 
   270 00000440 89EC                <1>     mov esp, ebp
   271 00000442 5D                  <1>     pop ebp
   272                              <1> 
   273 00000443 C3                  <1>     ret
   108                                  %include "../modules/protect/draw_char.s"
   109                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   110                              <1> ; col 列（0～79）
   111                              <1> ; row 行（0～29）
   112                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   113                              <1> ; ch 文字
   114                              <1> 
   115 00000444 55                  <1>     push ebp
   116 00000445 89E5                <1>     mov ebp, esp
   117                              <1> 
   118 00000447 53                  <1>     push ebx
   119 00000448 56                  <1>     push esi
   120 00000449 57                  <1>     push edi
   121                              <1> 
   122                              <1> %ifdef USE_TEST_AND_SET
   123 0000044A 68[1C050000]E86F08- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   123 00000452 00006683C404        <1>
   124                              <1> %endif
   125                              <1> 
   126                              <1>     ; コピー元フォントアドレスを設定
   127 00000458 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   128 0000045C C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   129 0000045F 0335[D4010000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   130                              <1> 
   131                              <1>     ; コピー先アドレスを取得
   132                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   133                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   134 00000465 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   135 00000468 C1E708              <1>     shl edi, 8
   136 0000046B 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   137 00000472 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   138                              <1> 
   139                              <1>     ; 1文字分のフォントを出力
   140 00000475 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   141                              <1> 
   142                              <1>     ; 輝度I
   143 00000479 6A03E807FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   143 00000482 C404                <1>
   144 00000484 6A08E819FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   144 0000048D C404                <1>
   145 0000048F 536A085756E828FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   145 00000498 FF6683C410          <1>
   146                              <1> 
   147                              <1>     ; 赤R
   148 0000049D 6A02E8E3FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   148 000004A6 C404                <1>
   149 000004A8 6A04E8F5FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   149 000004B1 C404                <1>
   150 000004B3 536A045756E804FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   150 000004BC FF6683C410          <1>
   151                              <1> 
   152                              <1>     ; 緑G
   153 000004C1 6A01E8BFFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   153 000004CA C404                <1>
   154 000004CC 6A02E8D1FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   154 000004D5 C404                <1>
   155 000004D7 536A025756E8E0FEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   155 000004E0 FF6683C410          <1>
   156                              <1> 
   157                              <1>     ; 青B
   158 000004E5 6A00E89BFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   158 000004EE C404                <1>
   159 000004F0 6A01E8ADFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   159 000004F9 C404                <1>
   160 000004FB 536A015756E8BCFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   160 00000504 FF6683C410          <1>
   161                              <1> 
   162                              <1> %ifdef USE_TEST_AND_SET
   163 00000509 C705[1C050000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   163 00000511 0000                <1>
   164                              <1> %endif
   165                              <1> 
   166 00000513 5F                  <1>     pop edi
   167 00000514 5E                  <1>     pop esi
   168 00000515 5B                  <1>     pop ebx
   169                              <1> 
   170 00000516 89EC                <1>     mov esp, ebp
   171 00000518 5D                  <1>     pop ebp
   172                              <1> 
   173 00000519 C3                  <1>     ret
   174                              <1> 
   175 0000051A 00<rep 2h>          <1> ALIGN 4, db 0
   176 0000051C 00000000            <1> IN_USE:  dd 0
   109                                  %include "../modules/protect/draw_font.s"
   110                              <1> draw_font:  ; void draw_font(col, row);
   111                              <1> ; col 列
   112                              <1> ; row 行
   113 00000520 55                  <1>     push ebp
   114 00000521 89E5                <1>     mov ebp, esp
   115                              <1> 
   116 00000523 50                  <1>     push eax
   117 00000524 53                  <1>     push ebx
   118 00000525 51                  <1>     push ecx
   119 00000526 57                  <1>     push edi
   120 00000527 56                  <1>     push esi
   121                              <1> 
   122                              <1> 
   123 00000528 8B7508              <1>     mov esi, [ebp + 8]  ; x
   124 0000052B 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   125                              <1> 
   126 0000052E B900000000          <1>     mov ecx, 0
   127                              <1> .10L:
   128 00000533 81F900010000        <1>     cmp ecx, 256
   129 00000539 731F                <1>     jae .10E
   130                              <1> 
   131 0000053B 89C8                <1>     mov eax, ecx
   132 0000053D 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   133 00000540 01F0                <1>     add eax, esi    ; eax += x
   134                              <1> 
   135 00000542 89CB                <1>     mov ebx, ecx
   136 00000544 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   137 00000547 01FB                <1>     add ebx, edi    ; ebx += y
   138                              <1> 
   139 00000549 516A075350E8F1FEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   139 00000552 FF6683C410          <1>
   140                              <1> 
   141 00000557 41                  <1>     inc ecx
   142 00000558 EBD9                <1>     jmp .10L
   143                              <1> .10E:
   144                              <1> 
   145 0000055A 5E                  <1>     pop esi
   146 0000055B 5F                  <1>     pop edi
   147 0000055C 59                  <1>     pop ecx
   148 0000055D 5B                  <1>     pop ebx
   149 0000055E 58                  <1>     pop eax
   150                              <1> 
   151 0000055F 89EC                <1>     mov esp, ebp
   152 00000561 5D                  <1>     pop ebp
   153                              <1> 
   154 00000562 C3                  <1>     ret
   110                                  %include "../modules/protect/draw_str.s"
   111                              <1> draw_str:   ;void draw_str(col, row, color, p);
   112                              <1> ; col: 列
   113                              <1> ; row: 行
   114                              <1> ; color: 描画色
   115                              <1> ; p: 文字列のアドレス
   116 00000563 55                  <1>     push ebp
   117 00000564 89E5                <1>     mov ebp, esp
   118                              <1> 
   119 00000566 50                  <1>     push eax
   120 00000567 53                  <1>     push ebx
   121 00000568 51                  <1>     push ecx
   122 00000569 52                  <1>     push edx
   123 0000056A 56                  <1>     push esi
   124                              <1> 
   125                              <1> 
   126 0000056B 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   127 0000056E 8B550C              <1>     mov edx, [ebp +12]  ; row
   128 00000571 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   129 00000575 8B7514              <1>     mov esi, [ebp +20]  ; p
   130                              <1> 
   131 00000578 FC                  <1>     cld
   132                              <1> .10L:
   133 00000579 AC                  <1>     lodsb
   134 0000057A 3C00                <1>     cmp al, 0
   135 0000057C 741A                <1>     je .10E
   136                              <1> 
   137                              <1> %ifdef USE_SYSTEM_CALL
   138 0000057E CD81                <1>     int 0x81
   139                              <1> %else
   140                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   141                              <1> %endif
   142                              <1> 
   143 00000580 41                  <1>     inc ecx
   144 00000581 83F950              <1>     cmp ecx, 80
   145 00000584 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   146 00000586 B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   147 0000058B 42                  <1>     inc edx
   148 0000058C 83FA1E              <1>     cmp edx, 30
   149 0000058F 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   150 00000591 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   151                              <1> .12E:
   152 00000596 EBE1                <1>     jmp .10L
   153                              <1> .10E:
   154                              <1> 
   155 00000598 5E                  <1>     pop esi
   156 00000599 5A                  <1>     pop edx
   157 0000059A 59                  <1>     pop ecx
   158 0000059B 5B                  <1>     pop ebx
   159 0000059C 58                  <1>     pop eax
   160                              <1> 
   161 0000059D 89EC                <1>     mov esp, ebp
   162 0000059F 5D                  <1>     pop ebp
   163                              <1> 
   164 000005A0 C3                  <1>     ret
   111                                  %include "../modules/protect/draw_color_bar.s"
   112                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   113                              <1> ; col: 列
   114                              <1> ; row: 行
   115 000005A1 55                  <1>     push ebp
   116 000005A2 89E5                <1>     mov ebp, esp
   117                              <1> 
   118 000005A4 50                  <1>     push eax
   119 000005A5 53                  <1>     push ebx
   120 000005A6 51                  <1>     push ecx
   121 000005A7 52                  <1>     push edx
   122 000005A8 56                  <1>     push esi
   123 000005A9 57                  <1>     push edi
   124                              <1> 
   125                              <1> 
   126 000005AA 8B7508              <1>     mov esi, [ebp + 8]      ; x
   127 000005AD 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   128                              <1> 
   129                              <1>     ; カラーバーを表示
   130 000005B0 B900000000          <1>     mov ecx, 0
   131                              <1> .10L:
   132 000005B5 83F910              <1>     cmp ecx, 16
   133 000005B8 732E                <1>     jae .10E
   134                              <1> 
   135                              <1>     ; 一回で8文字
   136 000005BA 89C8                <1>     mov eax, ecx
   137 000005BC 83E001              <1>     and eax, 0x01
   138 000005BF C1E003              <1>     shl eax, 3
   139 000005C2 01F0                <1>     add eax, esi    ; col
   140                              <1> 
   141                              <1>     ; 2回に1回改行
   142 000005C4 89CB                <1>     mov ebx, ecx
   143 000005C6 D1EB                <1>     shr ebx, 1
   144 000005C8 01FB                <1>     add ebx, edi    ; row
   145                              <1> 
   146                              <1>     ; 背景色を2色見たら下位次の行
   147 000005CA 89CA                <1>     mov edx, ecx
   148 000005CC D1E2                <1>     shl edx, 1
   149 000005CE 8B92[FB050000]      <1>     mov edx, [.t0 + edx]    ; color
   150                              <1> 
   151 000005D4 68[F2050000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   151 000005DC E882FFFFFF6683C410  <1>
   152                              <1> 
   153 000005E5 41                  <1>     inc ecx
   154 000005E6 EBCD                <1>     jmp .10L
   155                              <1> .10E:
   156                              <1> 
   157 000005E8 5F                  <1>     pop edi
   158 000005E9 5E                  <1>     pop esi
   159 000005EA 5A                  <1>     pop edx
   160 000005EB 59                  <1>     pop ecx
   161 000005EC 5B                  <1>     pop ebx
   162 000005ED 58                  <1>     pop eax
   163                              <1> 
   164 000005EE 89EC                <1>     mov esp, ebp
   165 000005F0 5D                  <1>     pop ebp
   166                              <1> 
   167 000005F1 C3                  <1>     ret
   168                              <1> 
   169                              <1> 
   170 000005F2 202020202020202000  <1> .s0: db '        ', 0
   171                              <1> 
   172                              <1> .t0:
   173 000005FB 00000008            <1>     dw 0x0000, 0x0800
   174 000005FF 00010009            <1>     dw 0x0100, 0x0900
   175 00000603 0002000A            <1>     dw 0x0200, 0x0A00
   176 00000607 0003000B            <1>     dw 0x0300, 0x0B00
   177 0000060B 0004000C            <1>     dw 0x0400, 0x0C00
   178 0000060F 0005000D            <1>     dw 0x0500, 0x0D00
   179 00000613 0006000E            <1>     dw 0x0600, 0x0E00
   180 00000617 0007000F            <1>     dw 0x0700, 0x0F00
   112                                  %include "../modules/protect/draw_pixel.s"
   113                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   114                              <1> ; x: X座標
   115                              <1> ; y: Y座標
   116                              <1> ; color: 描画色
   117 0000061B 55                  <1>     push ebp
   118 0000061C 89E5                <1>     mov ebp, esp
   119                              <1> 
   120 0000061E 50                  <1>     push eax
   121 0000061F 53                  <1>     push ebx
   122 00000620 51                  <1>     push ecx
   123 00000621 57                  <1>     push edi
   124                              <1> 
   125                              <1> 
   126                              <1> 
   127                              <1>     ; y座標*80->y*(640/8)
   128 00000622 8B7D0C              <1>     mov edi, [ebp +12]
   129 00000625 C1E704              <1>     shl edi, 4
   130 00000628 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   131                              <1> 
   132                              <1>     ; x座標/8  8pixel単位の位置
   133 0000062F 8B5D08              <1>     mov ebx, [ebp + 8]
   134 00000632 89D9                <1>     mov ecx, ebx
   135 00000634 C1EB03              <1>     shr ebx, 3
   136 00000637 01DF                <1>     add edi, ebx
   137                              <1> 
   138                              <1>     ; x座標を8で割った余りからビット位置を計算
   139                              <1>     ; 8pixel中の位置
   140                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   141 00000639 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   142 0000063C BB80000000          <1>     mov ebx, 0x80
   143 00000641 D3EB                <1>     shr ebx, cl
   144                              <1> 
   145 00000643 8B4D10              <1>     mov ecx, [ebp +16]
   146                              <1> 
   147                              <1>     ; プレーンごとに出力
   148 00000646 6A03E83AFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   148 0000064F C404                <1>
   149 00000651 6A08E84CFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   149 0000065A C404                <1>
   150 0000065C 516A085753E8AEFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   150 00000665 FF6683C410          <1>
   151                              <1> 
   152 0000066A 6A02E816FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   152 00000673 C404                <1>
   153 00000675 6A04E828FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   153 0000067E C404                <1>
   154 00000680 516A045753E88AFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   154 00000689 FF6683C410          <1>
   155                              <1> 
   156 0000068E 6A01E8F2FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   156 00000697 C404                <1>
   157 00000699 6A02E804FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   157 000006A2 C404                <1>
   158 000006A4 516A025753E866FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   158 000006AD FF6683C410          <1>
   159                              <1> 
   160 000006B2 6A00E8CEFCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   160 000006BB C404                <1>
   161 000006BD 6A01E8E0FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   161 000006C6 C404                <1>
   162 000006C8 516A015753E842FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   162 000006D1 FF6683C410          <1>
   163                              <1> 
   164 000006D6 5F                  <1>     pop edi
   165 000006D7 59                  <1>     pop ecx
   166 000006D8 5B                  <1>     pop ebx
   167 000006D9 58                  <1>     pop eax
   168                              <1> 
   169 000006DA 89EC                <1>     mov esp, ebp
   170 000006DC 5D                  <1>     pop ebp
   171                              <1> 
   172 000006DD C3                  <1>     ret
   113                                  %include "../modules/protect/draw_line.s"
   114                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   115                              <1> ; X0 始点のＸ座標
   116                              <1> ; Y0 始点のＹ座標
   117                              <1> ; X1 終点のX座標
   118                              <1> ; Y1 終点のY座標
   119                              <1> ; color 描画色
   120 000006DE 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   121 000006DF 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   122                              <1>                     ; ----------------
   123 000006E1 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   124 000006E3 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   125 000006E5 6A00                <1>     push dword 0    ;    -12| dx    = 0
   126 000006E7 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   127 000006E9 6A00                <1>     push dword 0    ;    -20| y0    = 0
   128 000006EB 6A00                <1>     push dword 0    ;    -24| dy    = 0
   129 000006ED 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   130                              <1> 
   131 000006EF 50                  <1>     push eax        ;    -32| eax
   132 000006F0 53                  <1>     push ebx        ;    -36| ebx
   133 000006F1 51                  <1>     push ecx        ;    -40| ecx
   134 000006F2 52                  <1>     push edx        ;    -44| edx
   135 000006F3 56                  <1>     push esi        ;    -48| esi
   136 000006F4 57                  <1>     push edi        ;    -52| edi
   137                              <1>     ; espはebp-52?
   138                              <1> 
   139                              <1>     ; x0とx1の距離を計算
   140 000006F5 8B4508              <1>     mov eax, [ebp + 8]
   141 000006F8 8B5D10              <1>     mov ebx, [ebp +16]
   142 000006FB 29C3                <1>     sub ebx, eax
   143 000006FD 7D09                <1>     jge .10F
   144                              <1> 
   145 000006FF F7DB                <1>     neg ebx
   146 00000701 BEFFFFFFFF          <1>     mov esi, -1
   147 00000706 EB05                <1>     jmp .10E
   148                              <1> .10F:
   149 00000708 BE01000000          <1>     mov esi, 1
   150                              <1> .10E:
   151                              <1>     
   152                              <1>     ; y0とy1の距離を計算
   153 0000070D 8B4D0C              <1>     mov ecx, [ebp +12]
   154 00000710 8B5514              <1>     mov edx, [ebp +20]
   155 00000713 29CA                <1>     sub edx, ecx
   156 00000715 7D09                <1>     jge .20F
   157                              <1> 
   158 00000717 F7DA                <1>     neg edx
   159 00000719 BFFFFFFFFF          <1>     mov edi, -1
   160 0000071E EB05                <1>     jmp .20E
   161                              <1> .20F:
   162 00000720 BF01000000          <1>     mov edi, 1
   163                              <1> .20E:
   164                              <1>     
   165                              <1>     ; x軸
   166 00000725 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   167 00000728 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   168 0000072B 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   169                              <1> 
   170                              <1>     ; y軸
   171 0000072E 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   172 00000731 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   173 00000734 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   174                              <1> 
   175                              <1> 
   176                              <1>     ; 基準軸を決める
   177 00000737 39D3                <1>     cmp ebx, edx
   178 00000739 7F08                <1>     jg .22F
   179                              <1>     
   180 0000073B 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   181 0000073E 8D7DF8              <1>     lea edi, [ebp - 8]
   182                              <1> 
   183 00000741 EB06                <1>     jmp .22E
   184                              <1> .22F:
   185                              <1>     
   186 00000743 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   187 00000746 8D7DEC              <1>     lea edi, [ebp -20]
   188                              <1> .22E:
   189                              <1> 
   190                              <1> ; 基準軸 esi
   191                              <1> ; 相対軸 edi
   192                              <1> 
   193                              <1>     ; 繰り返し回数（基準軸のドット数）
   194 00000749 8B4EFC              <1>     mov ecx, [esi - 4]
   195 0000074C 83F900              <1>     cmp ecx, 0
   196 0000074F 7505                <1>     jnz .30E
   197 00000751 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   198                              <1> .30E:
   199                              <1> 
   200                              <1>     ; 線を描画
   201                              <1> .50L:
   202                              <1> 
   203                              <1> %ifdef USE_SYSTEM_CALL
   204 00000756 89C8                <1>     mov eax, ecx
   205 00000758 8B4DF8              <1>     mov ecx, [ebp - 8]
   206 0000075B 8B55EC              <1>     mov edx, [ebp -20]
   207 0000075E 8B5D18              <1>     mov ebx, [ebp +24]
   208 00000761 CD82                <1>     int 0x82            ; sys_call()
   209 00000763 89C1                <1>     mov ecx, eax
   210                              <1> %else
   211                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   214                              <1> %endif
   215                              <1> 
   216                              <1>     ; 座標更新
   217                              <1> 
   218                              <1>     ; 基準軸の更新
   219 00000765 8B46F8              <1>     mov eax, [esi - 8]
   220 00000768 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   221                              <1> 
   222                              <1>     ; 相対軸の更新
   223 0000076A 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   224 0000076D 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   225                              <1> 
   226 00000770 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   227                              <1> 
   228 00000773 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   229 00000775 7C07                <1>     jl .52E
   230 00000777 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   231                              <1> 
   232 00000779 8B5FF8              <1>     mov ebx, [edi - 8]
   233 0000077C 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   234                              <1> .52E:
   235                              <1>     
   236 0000077E 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   237                              <1> 
   238 00000781 E2D3                <1>     loop .50L
   239                              <1> .50E:
   240                              <1> 
   241                              <1> 
   242 00000783 5F                  <1>     pop edi
   243 00000784 5E                  <1>     pop esi
   244 00000785 5A                  <1>     pop edx
   245 00000786 59                  <1>     pop ecx
   246 00000787 5B                  <1>     pop ebx
   247 00000788 58                  <1>     pop eax
   248                              <1> 
   249 00000789 89EC                <1>     mov esp, ebp
   250 0000078B 5D                  <1>     pop ebp
   251                              <1> 
   252 0000078C C3                  <1>     ret
   114                                  %include "../modules/protect/draw_rect.s"
   115                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   116 0000078D 55                  <1>     push ebp
   117 0000078E 89E5                <1>     mov ebp, esp
   118                              <1>     
   119 00000790 50                  <1>     push eax
   120 00000791 53                  <1>     push ebx
   121 00000792 51                  <1>     push ecx
   122 00000793 52                  <1>     push edx
   123 00000794 56                  <1>     push esi
   124                              <1> 
   125 00000795 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   126 00000798 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   127 0000079B 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   128 0000079E 8B5514              <1>     mov edx, [ebp +20]  ; y1
   129 000007A1 8B7518              <1>     mov esi, [ebp +24]  ; color
   130                              <1> 
   131                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   132 000007A4 39C8                <1>     cmp eax, ecx
   133 000007A6 7C01                <1>     jl .10E
   134 000007A8 91                  <1>     xchg eax, ecx
   135                              <1> .10E:
   136 000007A9 39D3                <1>     cmp ebx, edx
   137 000007AB 7C02                <1>     jl .20E
   138 000007AD 87DA                <1>     xchg ebx, edx
   139                              <1> .20E:
   140                              <1> 
   141                              <1>     ; 矩形を描画
   142 000007AF 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   142 000007B8 FF6683C414          <1>
   143 000007BD 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   143 000007C6 FF6683C414          <1>
   144                              <1> 
   145 000007CB 4A                  <1>     dec edx
   146 000007CC 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   146 000007D5 FF6683C414          <1>
   147 000007DA 42                  <1>     inc edx
   148                              <1> 
   149 000007DB 49                  <1>     dec ecx
   150 000007DC 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   150 000007E5 FF6683C414          <1>
   151                              <1> 
   152 000007EA 5E                  <1>     pop esi
   153 000007EB 5A                  <1>     pop edx
   154 000007EC 59                  <1>     pop ecx
   155 000007ED 5B                  <1>     pop ebx
   156 000007EE 58                  <1>     pop eax
   157                              <1>     
   158 000007EF 89EC                <1>     mov esp, ebp
   159 000007F1 5D                  <1>     pop ebp
   160                              <1> 
   161 000007F2 C3                  <1>     ret
   115                                  %include "../modules/protect/itoa.s"
   116                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   117                              <1> ; num   変換する値
   118                              <1> ; buff  保存先バッファアドレス
   119                              <1> ; size  保存先バッファサイズ
   120                              <1> ; radix 基数（2, 8, 10, 16)
   121                              <1> ; flags 
   122                              <1> ;   B2: 空白を'0'で埋める
   123                              <1> ;   B1: '+/-'記号を付加する
   124                              <1> ;   B0: 値を符号付き変数として扱う
   125                              <1> 
   126 000007F3 55                  <1>     push ebp
   127 000007F4 89E5                <1>     mov ebp, esp
   128                              <1> 
   129 000007F6 50                  <1>     push eax
   130 000007F7 53                  <1>     push ebx
   131 000007F8 51                  <1>     push ecx
   132 000007F9 52                  <1>     push edx
   133 000007FA 56                  <1>     push esi
   134 000007FB 57                  <1>     push edi
   135                              <1> 
   136                              <1> 
   137                              <1>     ; 引数取得
   138 000007FC 8B4508              <1>     mov eax, [ebp + 8]    ; num
   139 000007FF 8B750C              <1>     mov esi, [ebp +12]    ; size
   140 00000802 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   141                              <1> 
   142 00000805 89F7                <1>     mov edi, esi
   143 00000807 01CF                <1>     add edi, ecx
   144 00000809 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   145                              <1> 
   146 0000080A 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   147                              <1> 
   148                              <1>     ; 符号付き判定
   149 0000080D F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   150                              <1> .10Q:
   151 00000813 7408                <1>     je .10E         ; E=Exit
   152 00000815 83F800              <1>     cmp eax, 0
   153                              <1> .12Q:
   154 00000818 7D03                <1>     jge .12E
   155 0000081A 83CB02              <1>     or ebx, 0b0010
   156                              <1> .12E:
   157                              <1> .10E:
   158                              <1> 
   159                              <1>     ; 符号出力判定
   160 0000081D F7C302000000        <1>     test ebx, 0b0010
   161                              <1> .20Q:
   162 00000823 7410                <1>     je .20E
   163 00000825 83F800              <1>     cmp eax, 0
   164                              <1> .22Q:
   165 00000828 7D07                <1>     jge .22F
   166 0000082A F7D8                <1>     neg eax
   167 0000082C C6062D              <1>     mov [esi], byte '-'
   168 0000082F EB03                <1>     jmp .22E
   169                              <1> .22F:
   170                              <1>     
   171 00000831 C6062B              <1>     mov [esi], byte '+'
   172                              <1> .22E:
   173 00000834 49                  <1>     dec ecx
   174                              <1> .20E:
   175                              <1> 
   176                              <1>     ; ASCII変換
   177 00000835 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   178                              <1> .30L:
   179 00000838 BA00000000          <1>     mov edx, 0
   180 0000083D F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   181                              <1> 
   182 0000083F 89D6                <1>     mov esi, edx
   183 00000841 8A96[6B080000]      <1>     mov dl, byte [.ascii + esi]
   184                              <1> 
   185 00000847 8817                <1>     mov [edi], dl
   186 00000849 4F                  <1>     dec edi
   187                              <1> 
   188 0000084A 83F800              <1>     cmp eax, 0
   189 0000084D E0E9                <1>     loopnz .30L
   190                              <1> .30E:
   191                              <1> 
   192                              <1>     ; 空欄を埋める
   193 0000084F 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   194                              <1> .40Q:
   195 00000852 740D                <1>     je .40E
   196 00000854 B020                <1>     mov al, ' '
   197 00000856 837D1804            <1>     cmp [ebp +24], dword 0b0100
   198                              <1> .42Q:
   199 0000085A 7502                <1>     jne .42E
   200 0000085C B030                <1>     mov al, '0'
   201                              <1> .42E:
   202 0000085E FD                  <1>     std         ; dimention flag = 1(-方向)
   203 0000085F F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   204                              <1> .40E:
   205                              <1> 
   206 00000861 5F                  <1>     pop edi
   207 00000862 5E                  <1>     pop esi
   208 00000863 5A                  <1>     pop edx
   209 00000864 59                  <1>     pop ecx
   210 00000865 5B                  <1>     pop ebx
   211 00000866 58                  <1>     pop eax
   212                              <1> 
   213 00000867 89EC                <1>     mov esp, ebp
   214 00000869 5D                  <1>     pop ebp
   215                              <1> 
   216 0000086A C3                  <1>     ret
   217                              <1> 
   218 0000086B 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   218 00000874 39414243444546      <1>
   116                                  %include "../modules/protect/rtc.s"
   117                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   118                              <1> ; dst: 保存先アドレス
   119                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   120 0000087B 55                  <1>     push ebp
   121 0000087C 89E5                <1>     mov ebp, esp
   122                              <1> 
   123 0000087E 50                  <1>     push eax
   124 0000087F 53                  <1>     push ebx
   125                              <1> 
   126 00000880 B00A                <1>     mov al, 0x0A    ; レジスタA
   127 00000882 E670                <1>     out 0x70, al
   128 00000884 E471                <1>     in al, 0x71
   129 00000886 A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   130 00000888 7407                <1>     je .10F
   131 0000088A B801000000          <1>     mov eax, 1      ; 更新中は失敗
   132 0000088F EB27                <1>     jmp .10E
   133                              <1> .10F:
   134                              <1> 
   135 00000891 B004                <1>     mov al, 0x04    ; 時
   136 00000893 E670                <1>     out 0x70, al    ; レジスタ設定
   137 00000895 E471                <1>     in al, 0x71     ; 時刻読み込み
   138                              <1> 
   139 00000897 C1E008              <1>     shl eax, 8      ; alをahに退避
   140                              <1> 
   141 0000089A B002                <1>     mov al, 0x02    ; 分
   142 0000089C E670                <1>     out 0x70, al    ; レジスタ設定
   143 0000089E E471                <1>     in al, 0x71     ; 時刻読み込み
   144                              <1> 
   145 000008A0 C1E008              <1>     shl eax, 8      ; alをahに退避
   146                              <1> 
   147 000008A3 B000                <1>     mov al, 0x00    ; 秒
   148 000008A5 E670                <1>     out 0x70, al    ; レジスタ設定
   149 000008A7 E471                <1>     in al, 0x71     ; 時刻読み込み
   150                              <1> 
   151 000008A9 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   152                              <1> 
   153 000008AE 8B5D08              <1>     mov ebx, [ebp + 8]
   154 000008B1 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   155                              <1> 
   156 000008B3 B800000000          <1>     mov eax, 0
   157                              <1> .10E:
   158                              <1> 
   159 000008B8 5B                  <1>     pop ebx
   160 000008B9 58                  <1>     pop eax
   161                              <1> 
   162 000008BA 89EC                <1>     mov esp, ebp
   163 000008BC 5D                  <1>     pop ebp
   164                              <1> 
   165 000008BD C3                  <1>     ret
   117                                  %include "../modules/protect/draw_time.s"
   118                              <1> draw_time:  ; void draw_time(col, row, color, time);
   119                              <1> ; time 時刻データ
   120 000008BE 55                  <1>     push ebp
   121 000008BF 89E5                <1>     mov ebp, esp
   122                              <1> 
   123 000008C1 50                  <1>     push eax
   124 000008C2 53                  <1>     push ebx
   125                              <1>     
   126 000008C3 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   127                              <1> 
   128 000008C6 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   129 000008C9 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   129 000008D0 [30090000]53E819FF- <1>
   129 000008D8 FFFF6683C414        <1>
   130                              <1> 
   131 000008DE 88E3                <1>     mov bl, ah          ; 分だけ
   132 000008E0 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   132 000008E7 [2D090000]53E802FF- <1>
   132 000008EF FFFF6683C414        <1>
   133                              <1>     
   134 000008F5 C1E810              <1>     shr eax, 16         ; 時だけ
   135 000008F8 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   135 000008FF [2A090000]50E8EAFE- <1>
   135 00000907 FFFF6683C414        <1>
   136                              <1> 
   137 0000090D 68[2A090000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   137 00000915 FF750CFF7508E843FC- <1>
   137 0000091E FFFF6683C410        <1>
   138                              <1> 
   139 00000924 5B                  <1>     pop ebx
   140 00000925 58                  <1>     pop eax
   141                              <1> 
   142 00000926 89EC                <1>     mov esp, ebp
   143 00000928 5D                  <1>     pop ebp
   144                              <1> 
   145 00000929 C3                  <1>     ret
   146                              <1> 
   147 0000092A 5A5A3A              <1> .hour: db "ZZ:"
   148 0000092D 5A5A3A              <1> .min:  db "ZZ:"
   149 00000930 5A5A00              <1> .sec:  db "ZZ", 0
   118                                  %include "../modules/protect/interrupt.s"
   119                              <1> int_stop:
   120 00000933 FB                  <1>     sti ; 割り込みを許可
   121                              <1> 
   122                              <1>     ; EAXで示される文字列を表示
   123 00000934 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   123 0000093D 19E820FCFFFF6683C4- <1>
   123 00000946 10                  <1>
   124                              <1> 
   125                              <1>     ; スタックのデータを文字列に変換
   126 00000947 8B0424              <1>     mov eax, [esp + 0]
   127 0000094A 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   127 00000951 [0F0A0000]50E898FE- <1>
   127 00000959 FFFF6683C414        <1>
   128                              <1> 
   129 0000095F 8B442404            <1>     mov eax, [esp + 4]
   130 00000963 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   130 0000096A [200A0000]50E87FFE- <1>
   130 00000972 FFFF6683C414        <1>
   131                              <1> 
   132 00000978 8B442408            <1>     mov eax, [esp + 8]
   133 0000097C 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   133 00000983 [310A0000]50E866FE- <1>
   133 0000098B FFFF6683C414        <1>
   134                              <1> 
   135 00000991 8B44240C            <1>     mov eax, [esp +12]
   136 00000995 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   136 0000099C [420A0000]50E84DFE- <1>
   136 000009A4 FFFF6683C414        <1>
   137                              <1> 
   138                              <1>     ; 文字列の表示
   139 000009AA 68[080A0000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   139 000009B2 00006A106A19E8A6FB- <1>
   139 000009BB FFFF6683C410        <1>
   140 000009C1 68[190A0000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   140 000009C9 00006A116A19E88FFB- <1>
   140 000009D2 FFFF6683C410        <1>
   141 000009D8 68[2A0A0000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   141 000009E0 00006A126A19E878FB- <1>
   141 000009E9 FFFF6683C410        <1>
   142 000009EF 68[3B0A0000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   142 000009F7 00006A136A19E861FB- <1>
   142 00000A00 FFFF6683C410        <1>
   143                              <1> 
   144                              <1>     ; 無限ループ
   145 00000A06 EBFE                <1>     jmp $
   146                              <1> 
   147 00000A08 4553502B20303A      <1> .s1 db "ESP+ 0:"
   148 00000A0F 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   148 00000A18 00                  <1>
   149 00000A19 2020202B20343A      <1> .s2 db "   + 4:"
   150 00000A20 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   150 00000A29 00                  <1>
   151 00000A2A 2020202B20383A      <1> .s3 db "   + 8:"
   152 00000A31 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   152 00000A3A 00                  <1>
   153 00000A3B 2020202B31323A      <1> .s4 db "   +12:"
   154 00000A42 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   154 00000A4B 00                  <1>
   155                              <1> 
   156                              <1> int_default:
   157 00000A4C 9C                  <1>     pushf       ; EFLAGS(IF==0)
   158 00000A4D 0E                  <1>     push cs
   159 00000A4E 68[33090000]        <1>     push int_stop
   160                              <1> 
   161 00000A53 B8[590A0000]        <1>     mov eax, .s0
   162 00000A58 CF                  <1>     iret
   163                              <1> 
   164 00000A59 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   164 00000A62 50202020203E2000    <1>
   165                              <1> 
   166                              <1> 
   167                              <1> ; 割り込みベクタの初期化
   168 00000A6A 90<rep 2h>          <1> ALIGN 4
   169 00000A6C FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   170 00000A6E 00001000            <1>       dd VECT_BASE      ; idt location
   171                              <1> 
   172                              <1> ; 割り込みテーブルを初期化
   173                              <1> init_int:
   174 00000A72 50                  <1>     push eax
   175 00000A73 53                  <1>     push ebx
   176 00000A74 51                  <1>     push ecx
   177 00000A75 57                  <1>     push edi
   178                              <1> 
   179                              <1>     ; 全ての割り込みにデフォルト処理を設定
   180 00000A76 8D05[4C0A0000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   181 00000A7C BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   182 00000A81 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   183                              <1> 
   184 00000A83 B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   185 00000A88 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   186                              <1> 
   187                              <1>     ; メモリに書き込み
   188                              <1> .10L:
   189 00000A8D 891F                <1>     mov [edi + 0], ebx
   190 00000A8F 894704              <1>     mov [edi + 4], eax
   191 00000A92 83C708              <1>     add edi, 8
   192 00000A95 E2F6                <1>     loop .10L
   193                              <1> 
   194                              <1>     ; 割り込みディスクリプタの設定
   195 00000A97 0F011D[6C0A0000]    <1>     lidt [IDTR]
   196                              <1> 
   197 00000A9E 5F                  <1>     pop edi
   198 00000A9F 59                  <1>     pop ecx
   199 00000AA0 5B                  <1>     pop ebx
   200 00000AA1 58                  <1>     pop eax
   201                              <1> 
   202 00000AA2 C3                  <1>     ret
   203                              <1> 
   204                              <1> 
   205                              <1> int_zero_div:
   206 00000AA3 9C                  <1>     pushf
   207 00000AA4 0E                  <1>     push cs
   208 00000AA5 68[33090000]        <1>     push int_stop
   209                              <1> 
   210 00000AAA B8[B00A0000]        <1>     mov eax, .s0
   211 00000AAF CF                  <1>     iret
   212                              <1> 
   213 00000AB0 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   213 00000AB9 44495620203E2000    <1>
   119                                  %include "../modules/protect/pic.s"
   120                              <1> init_pic:
   121 00000AC1 50                  <1>     push eax
   122                              <1> 
   123                              <1>     ; outp ポート, データ
   124                              <1> 
   125                              <1>     ; マスタの設定
   126                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 00000AC2 B011                <2>  mov al, %2
    50 00000AC4 E620                <2>  out %1, al
   127                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 00000AC6 B020                <2>  mov al, %2
    50 00000AC8 E621                <2>  out %1, al
   128                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 00000ACA B004                <2>  mov al, %2
    50 00000ACC E621                <2>  out %1, al
   129                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 00000ACE B001                <2>  mov al, %2
    50 00000AD0 E621                <2>  out %1, al
   130                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 00000AD2 B0FF                <2>  mov al, %2
    50 00000AD4 E621                <2>  out %1, al
   131                              <1> 
   132                              <1>     ; スレーブの設定
   133                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 00000AD6 B011                <2>  mov al, %2
    50 00000AD8 E6A0                <2>  out %1, al
   134                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 00000ADA B028                <2>  mov al, %2
    50 00000ADC E6A1                <2>  out %1, al
   135                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 00000ADE B002                <2>  mov al, %2
    50 00000AE0 E6A1                <2>  out %1, al
   136                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 00000AE2 B001                <2>  mov al, %2
    50 00000AE4 E6A1                <2>  out %1, al
   137                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 00000AE6 B0FF                <2>  mov al, %2
    50 00000AE8 E6A1                <2>  out %1, al
   138                              <1> 
   139 00000AEA 58                  <1>     pop eax
   140                              <1> 
   141 00000AEB C3                  <1>     ret
   120                                  %include "../modules/protect/int_rtc.s"
   121                              <1> int_rtc:
   122 00000AEC 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   123 00000AED 1E                  <1>     push ds
   124 00000AEE 06                  <1>     push es
   125                              <1> 
   126                              <1>     ; データ用セグメントセレクタの設定
   127 00000AEF 66B81000            <1>     mov ax, 0x0010
   128 00000AF3 8ED8                <1>     mov ds, ax
   129 00000AF5 8EC0                <1>     mov es, ax
   130                              <1> 
   131                              <1>     ; RTCから時刻を取得
   132 00000AF7 68[D8010000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   132 00000AFF FFFF6683C404        <1>
   133                              <1> 
   134                              <1>     ; RTCの割り込み要因を取得
   135                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 00000B05 B00C                <2>  mov al, %2
    50 00000B07 E670                <2>  out %1, al
   136 00000B09 E471                <1>     in al, 0x71     ; RTCからデータを取得
   137                              <1> 
   138                              <1>     ; 割り込みフラグをクリア(EOI)
   139 00000B0B B020                <1>     mov al, 0x20
   140 00000B0D E6A0                <1>     out 0xA0, al    ; スレーブ
   141 00000B0F E620                <1>     out 0x20, al    ; マスタ
   142                              <1> 
   143 00000B11 07                  <1>     pop es
   144 00000B12 1F                  <1>     pop ds
   145 00000B13 61                  <1>     popa
   146                              <1> 
   147 00000B14 CF                  <1>     iret        ; 割り込み処理の終了
   148                              <1> 
   149                              <1> rtc_int_en:
   150 00000B15 55                  <1>     push ebp
   151 00000B16 89E5                <1>     mov ebp, esp
   152 00000B18 50                  <1>     push eax
   153                              <1> 
   154                              <1>     ; 割り込み許可設定
   155                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 00000B19 B00B                <2>  mov al, %2
    50 00000B1B E670                <2>  out %1, al
   156                              <1> 
   157 00000B1D E471                <1>     in al, 0x71     ; RTCからデータを取得
   158 00000B1F 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   159                              <1> 
   160 00000B22 E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   161                              <1> 
   162 00000B24 58                  <1>     pop eax
   163                              <1> 
   164 00000B25 89EC                <1>     mov esp, ebp
   165 00000B27 5D                  <1>     pop ebp
   166                              <1> 
   167 00000B28 C3                  <1>     ret
   121                                  %include "../modules/protect/int_keyboard.s"
   122                              <1> int_keyboard:
   123 00000B29 60                  <1>     pusha
   124 00000B2A 1E                  <1>     push ds
   125 00000B2B 06                  <1>     push es
   126                              <1> 
   127                              <1>     ; データ用セグメントの設定
   128 00000B2C 66B81000            <1>     mov ax, 0x0010
   129 00000B30 8ED8                <1>     mov ds, ax
   130 00000B32 8EC0                <1>     mov es, ax
   131                              <1> 
   132                              <1>     ; KBCのバッファ読み取り
   133 00000B34 E460                <1>     in al, 0x60
   134                              <1> 
   135                              <1>     ; キーコードの保存
   136 00000B36 5068[500B0000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   136 00000B3E 0000006683C408      <1>
   137                              <1> 
   138                              <1>     ; 割り込み終了コマンド送信
   139                              <1>     outp 0x20, 0x20
    49 00000B45 B020                <2>  mov al, %2
    50 00000B47 E620                <2>  out %1, al
   140                              <1> 
   141 00000B49 07                  <1>     pop es
   142 00000B4A 1F                  <1>     pop ds
   143 00000B4B 61                  <1>     popa
   144                              <1> 
   145 00000B4C CF                  <1>     iret
   146                              <1> 
   147 00000B4D 00<rep 3h>          <1> ALIGN 4, db 0
   148 00000B50 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   122                                  %include "../modules/protect/ring_buff.s"
   123                              <1> ring_rd:        ; int ring_rd(buff, data);
   124                              <1> ; buff リングバッファ
   125                              <1> ; data 読み込んだデータの保存先アドレス
   126                              <1> ; 戻り値: データあり(0以外), データなし(0)
   127                              <1> 
   128 00000B68 55                  <1>     push ebp
   129 00000B69 89E5                <1>     mov ebp, esp
   130                              <1> 
   131 00000B6B 50                  <1>     push eax
   132 00000B6C 53                  <1>     push ebx
   133 00000B6D 56                  <1>     push esi
   134 00000B6E 57                  <1>     push edi
   135                              <1> 
   136                              <1>     ; 引数取得
   137 00000B6F 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   138 00000B72 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   139                              <1> 
   140                              <1>     ; 読み込み位置を確認
   141 00000B75 B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   142 00000B7A 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   143 00000B7C 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   144 00000B7F 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   145                              <1> 
   146 00000B81 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   147                              <1> 
   148 00000B85 8807                <1>     mov [edi], al
   149                              <1> 
   150 00000B87 43                  <1>     inc ebx ; 次の読み込み位置
   151 00000B88 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   152 00000B8B 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   153                              <1> 
   154 00000B8D B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   155                              <1> .10E:
   156                              <1> 
   157 00000B92 5F                  <1>     pop edi
   158 00000B93 5E                  <1>     pop esi
   159 00000B94 5B                  <1>     pop ebx
   160 00000B95 58                  <1>     pop eax
   161                              <1> 
   162 00000B96 89EC                <1>     mov esp, ebp
   163 00000B98 5D                  <1>     pop ebp
   164                              <1> 
   165 00000B99 C3                  <1>     ret
   166                              <1> 
   167                              <1> 
   168                              <1> ring_wr:    ; int ring_wr(buff, data);
   169                              <1> ; buff シリンダバッファ
   170                              <1> ; data 書き込むデータ
   171                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   172 00000B9A 55                  <1>     push ebp
   173 00000B9B 89E5                <1>     mov ebp, esp
   174                              <1> 
   175 00000B9D 50                  <1>     push eax
   176 00000B9E 53                  <1>     push ebx
   177 00000B9F 51                  <1>     push ecx
   178 00000BA0 56                  <1>     push esi
   179                              <1> 
   180 00000BA1 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   181                              <1> 
   182                              <1>     ; 書き込み位置を確認
   183 00000BA4 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   184 00000BA9 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   185 00000BAC 89D9                <1>     mov ecx, ebx
   186 00000BAE 41                  <1>     inc ecx                         ; 次の書き込み位置
   187 00000BAF 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   188                              <1> 
   189                              <1>     ; バッファフルなら処理しない
   190 00000BB2 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   191 00000BB4 740F                <1>     je .10E
   192                              <1> 
   193 00000BB6 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   194                              <1> 
   195 00000BB9 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   196 00000BBD 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   197 00000BC0 B801000000          <1>     mov eax, 1  ; 戻り値 成功
   198                              <1> .10E:
   199                              <1> 
   200 00000BC5 5E                  <1>     pop esi
   201 00000BC6 59                  <1>     pop ecx
   202 00000BC7 5B                  <1>     pop ebx
   203 00000BC8 58                  <1>     pop eax
   204                              <1> 
   205 00000BC9 89EC                <1>     mov esp, ebp
   206 00000BCB 5D                  <1>     pop ebp
   207                              <1> 
   208 00000BCC C3                  <1>     ret
   209                              <1> 
   210                              <1> draw_key:
   211 00000BCD 55                  <1>     push ebp
   212 00000BCE 89E5                <1>     mov ebp, esp
   213                              <1> 
   214 00000BD0 50                  <1>     push eax
   215 00000BD1 53                  <1>     push ebx
   216 00000BD2 51                  <1>     push ecx
   217 00000BD3 52                  <1>     push edx
   218 00000BD4 56                  <1>     push esi
   219 00000BD5 57                  <1>     push edi
   220                              <1> 
   221                              <1> 
   222 00000BD6 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   223 00000BD9 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   224 00000BDC 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   225                              <1> 
   226                              <1>     ; リングバッファの情報を取得
   227 00000BDF 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   228 00000BE1 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   229 00000BE4 B910000000          <1>     mov ecx, RING_ITEM_SIZE
   230                              <1> 
   231                              <1> .10L:
   232 00000BE9 4B                  <1>     dec ebx ; 読み込み位置
   233 00000BEA 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   234 00000BED 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   235                              <1> 
   236 00000BF0 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   236 00000BF9 68[2C0C0000]50E8EF- <1>
   236 00000C01 FBFFFF6683C414      <1>
   237 00000C08 68[2C0C0000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   237 00000C10 52E84DF9FFFF6683C4- <1>
   237 00000C19 10                  <1>
   238                              <1> 
   239 00000C1A 83C203              <1>     add edx, 3  ; 表示位置更新
   240 00000C1D E2CA                <1>     loop .10L
   241                              <1> .10E:
   242                              <1> 
   243 00000C1F 5F                  <1>     pop edi
   244 00000C20 5E                  <1>     pop esi
   245 00000C21 5A                  <1>     pop edx
   246 00000C22 59                  <1>     pop ecx
   247 00000C23 5B                  <1>     pop ebx
   248 00000C24 58                  <1>     pop eax
   249                              <1> 
   250 00000C25 89EC                <1>     mov esp, ebp
   251 00000C27 5D                  <1>     pop ebp
   252                              <1> 
   253 00000C28 C3                  <1>     ret
   254                              <1> 
   255 00000C29 00<rep 3h>          <1> ALIGN 4, db 0
   256 00000C2C 2D2D2000            <1> .tmp db "-- ", 0
   123                                  %include "../modules/protect/timer.s"
   124                              <1> int_en_timer0:
   125 00000C30 50                  <1>     push eax
   126                              <1> 
   127                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 00000C31 B034                <2>  mov al, %2
    50 00000C33 E643                <2>  out %1, al
   128                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 00000C35 B09C                <2>  mov al, %2
    50 00000C37 E640                <2>  out %1, al
   129                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 00000C39 B02E                <2>  mov al, %2
    50 00000C3B E640                <2>  out %1, al
   130                              <1> 
   131 00000C3D 58                  <1>     pop eax
   132                              <1> 
   133 00000C3E C3                  <1>     ret
   124                                  %include "../modules/protect/draw_rotation_bar.s"
   125                              <1> draw_rotation_bar:
   126 00000C3F 50                  <1>     push eax
   127                              <1> 
   128 00000C40 A1[48030000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   129 00000C45 C1E804              <1>     shr eax, 4              ; eax /= 4
   130 00000C48 3B05[700C0000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   131 00000C4E 741E                <1>     je .10E
   132                              <1> 
   133 00000C50 A3[700C0000]        <1>     mov [.index], eax       ; 前回値設定
   134 00000C55 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   135                              <1> 
   136 00000C58 8A80[740C0000]      <1>     mov al, [.table + eax]  ; 文字表示
   137 00000C5E 506A0F6A1D6A00E8DA- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   137 00000C67 F7FFFF6683C410      <1>
   138                              <1> 
   139                              <1> .10E:
   140                              <1> 
   141 00000C6E 58                  <1>     pop eax
   142                              <1> 
   143 00000C6F C3                  <1>     ret
   144                              <1> 
   145                              <1> ALIGN 4, db 0
   146 00000C70 00000000            <1> .index: dd 0        ; 前回値
   147 00000C74 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   125                                  %include "../modules/protect/call_gate.s"
   126                              <1> call_gate:
   127 00000C78 55                  <1>     push ebp
   128 00000C79 89E5                <1>     mov ebp, esp
   129                              <1> 
   130 00000C7B 60                  <1>     pusha
   131 00000C7C 1E                  <1>     push ds
   132 00000C7D 06                  <1>     push es
   133                              <1> 
   134                              <1>     ; データ用セグメントの設定
   135 00000C7E 66B81000            <1>     mov ax, 0x0010
   136 00000C82 8ED8                <1>     mov ds, ax
   137 00000C84 8EC0                <1>     mov es, ax
   138                              <1> 
   139                              <1>     ; 文字を表示
   140 00000C86 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   141 00000C89 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   142 00000C8C 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   143 00000C8F 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   144 00000C92 52515350E8C8F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   144 00000C9B 6683C410            <1>
   145                              <1> 
   146 00000C9F 07                  <1>     pop es
   147 00000CA0 1F                  <1>     pop ds
   148 00000CA1 61                  <1>     popa
   149                              <1> 
   150 00000CA2 89EC                <1>     mov esp, ebp
   151 00000CA4 5D                  <1>     pop ebp
   152                              <1> 
   153                              <1>     ; コードセグメントセレクタの復帰と終了
   154 00000CA5 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   126                                  %include "../modules/protect/trap_gate.s"
   127                              <1> trap_gate_81:
   128                              <1>     ; 1文字出力
   129 00000CA8 50535251E893F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   129 00000CB1 6683C410            <1>
   130                              <1> 
   131 00000CB5 CF                  <1>     iret
   132                              <1> 
   133                              <1> trap_gate_82:
   134                              <1>     ; 点の描画
   135 00000CB6 535251E85DF9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   135 00000CBF 83C40C              <1>
   136                              <1> 
   137 00000CC2 CF                  <1>     iret
   127                                  %include "../modules/protect/test_and_set.s"
   128                              <1> test_and_set:
   129 00000CC3 55                  <1>     push ebp
   130 00000CC4 89E5                <1>     mov ebp, esp
   131                              <1> 
   132 00000CC6 50                  <1>     push eax
   133 00000CC7 53                  <1>     push ebx
   134                              <1> 
   135                              <1>     ; テストアンドセット
   136 00000CC8 B800000000          <1>     mov eax, 0
   137 00000CCD 8B5D08              <1>     mov ebx, [ebp + 8]
   138                              <1> 
   139                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   140                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   141                              <1> .10L:
   142 00000CD0 F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   143 00000CD4 7307                <1>     jnc .10E
   144                              <1> 
   145                              <1> .12L:
   146 00000CD6 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   147 00000CD9 72FB                <1>     jc .12L
   148                              <1>     
   149 00000CDB EBF3                <1>     jmp .10L
   150                              <1> .10E:
   151                              <1>     
   152 00000CDD 5B                  <1>     pop ebx
   153 00000CDE 58                  <1>     pop eax
   154                              <1> 
   155 00000CDF 89EC                <1>     mov esp, ebp
   156 00000CE1 5D                  <1>     pop ebp
   157                              <1> 
   158 00000CE2 C3                  <1>     ret
   128                                  
   129                                  ;パディング
   130 00000CE3 00<rep 131Dh>               times KERNEL_SIZE - ($ - $$) db 0
   131                                  

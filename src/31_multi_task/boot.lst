     1                                  ; mem map
     2                                  ; ------------+-------------------------
     3                                  ; 0x0000_0000 | システム領域
     4                                  ; ------------+-------------------------
     5                                  ; 0x0000_7C00 | ブートコード
     6                                  ; ------------+-------------------------
     7                                  ; 0x0000_9C00 | カーネル（一次読み込み）
     8                                  ; ------------+-------------------------
     9                                  ; 0x0010_1000 | カーネル（最終読み込み）
    10                                  ; ------------+-------------------------
    11                                  
    12                                  ; マクロ
    13                                  %include "../include/macro.s"   ; C言語と同等の関数呼び出し
    14                              <1> ; C言語と同等の関数呼び出し
    15                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
    16                              <1> 
    17                              <1>     %rep %0 - 1         ; 引数の数-1回
    18                              <1>         push %{-1:-1}   ; 一番最後の引数
    19                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    20                              <1>     %endrep
    21                              <1>     %rotate -1      ; 回転をもとに戻す
    22                              <1> 
    23                              <1>     call %1         ; 第１引数を呼び出し
    24                              <1> 
    25                              <1>     %if 1 < %0
    26                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    27                              <1>     %endif
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> struc drive
    31 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    32 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    33 00000004 ????                <1>     .head resw 1    ; ヘッド
    34 00000006 ????                <1>     .sect resw 1    ; セクタ
    35                              <1> endstruc
    36                              <1> 
    37                              <1> %macro set_vect 1-*
    38                              <1>         push eax
    39                              <1>         push edi
    40                              <1> 
    41                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    42                              <1>         mov eax, %2
    43                              <1> 
    44                              <1>     %if 3 == %0
    45                              <1>         mov [edi + 4], %3               ; フラグ
    46                              <1>     %endif
    47                              <1> 
    48                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    49                              <1>         shr eax, 16
    50                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    51                              <1> 
    52                              <1>         pop edi
    53                              <1>         pop eax
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro outp 2
    57                              <1>     mov al, %2
    58                              <1>     out %1, al
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %define RING_ITEM_SIZE (1 << 4)
    62                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    63                              <1> 
    64                              <1> struc ring_buff
    65 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    66 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    67 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    68                              <1> endstruc
    69                              <1> 
    70                              <1> %macro set_desc 2-*
    71                              <1>         push eax
    72                              <1>         push edi
    73                              <1> 
    74                              <1>         mov edi, %1     ; ディスクリプタアドレス
    75                              <1>         mov eax, %2     ; ベースアドレス
    76                              <1> 
    77                              <1>     %if 3 == %0
    78                              <1>         mov [edi + 0], %3   ; リミット
    79                              <1>     %endif
    80                              <1> 
    81                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    82                              <1>         shr eax, 16
    83                              <1>         mov [edi + 4], al   ; ベース([23:16])
    84                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    85                              <1> 
    86                              <1>         pop edi
    87                              <1>         pop eax
    88                              <1> %endmacro
    14                                  %include "../include/define.s"  ; 各種定数の宣言
    15                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
    16                              <1> 
    17                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
    18                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
    19                              <1> 
    20                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    21                              <1> 
    22                              <1>     E820_RECORD_SIZE equ 20
    23                              <1> 
    24                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    25                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    26                              <1> 
    27                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    28                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    29                              <1> 
    30                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    31                              <1> 
    32                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    33                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    34                              <1> 
    35                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    36                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    15                                  
    16                                      ORG BOOT_LOAD           ; ロードアドレスをアセンブラに指示
    17                                  
    18                                  entry:
    19 00000000 EB58                        jmp ipl      ; jump to ipl
    20                                  
    21                                      ; BPB(BIOS Parameter Block
    22 00000002 90<rep 58h>                 times 90 - ($ - $$) db 0x90
    23                                  
    24                                  
    25                                      ; IPL(Initial Program Loader)
    26                                  ipl:
    27 0000005A FA                          cli         ; clear interrupu flag 割込み禁止
    28                                  
    29                                  
    30 0000005B B80000                      mov ax, 0x0000
    31 0000005E 8ED8                        mov ds, ax
    32 00000060 8EC0                        mov es, ax
    33 00000062 8ED0                        mov ss, ax
    34 00000064 BC007C                      mov sp, BOOT_LOAD
    35                                      
    36 00000067 FB                          sti         ; set interrupt flag 割り込み許可
    37                                  
    38 00000068 8816[B800]                  mov [BOOT + drive.no], dl    ; ブートドライブの番号(DL)を保存
    39                                  
    40 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0
    40 00000074 02                 
    41                                  
    42                                      ; 残りのセクタをすべて読み込む
    43 00000075 BB0F00                      mov bx, BOOT_SECT - 1           ; bx: 残りのブートセクタ数
    44 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; cx: 次のロードアドレス
    45                                  
    46 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx    ; ax = read_chs(BOOT, bx, cx);
    46 00000083 83C406             
    47                                  
    48 00000086 39D8                        cmp ax, bx
    49                                  .10Q:
    50 00000088 740C                        jz .10E                 ; 読み込んだセクタ数==読み込むセクタ数
    51                                  .10T:
    52 0000008A 68[A600]E8300083C4-         cdecl puts, .e0         ; 失敗
    52 00000092 02                 
    53 00000093 E84900                      call reboot             ; 戻ってこない
    54                                  .10E:
    55                                      ; 次のステージへ
    56 00000096 E90906                      jmp stage_2
    57                                  
    58                                  
    59                                  ; Data
    60 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0x00
    60 000000A2 2E0A0D00           
    61 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    61 000000AF 746F72207265616400 
    62                                  
    63                                  ALIGN 2, db 0
    64                                  BOOT:           ; ブートドライブ関係の情報
    65                                      istruc drive    ; struct driveを宣言
    66 000000B8 0000                            at drive.no, dw 0       ; ドライブ番号
    67 000000BA 0000                            at drive.cyln, dw 0     ; C:シリンダ
    68 000000BC 0000                            at drive.head, dw 0     ; H:ヘッド
    69 000000BE 0200                            at drive.sect, dw 2     ; S:セクタ
    70                                      iend
    71                                  
    72                                  ; モジュール
    73                                  %include "../modules/real/puts.s"
    74                              <1> puts:       ; void puts(str);
    75 000000C0 55                  <1>     push bp
    76 000000C1 89E5                <1>     mov bp, sp
    77                              <1> 
    78 000000C3 50                  <1>     push ax
    79 000000C4 53                  <1>     push bx
    80 000000C5 56                  <1>     push si
    81                              <1> 
    82 000000C6 8B7604              <1>     mov si, [bp + 4]    ; si=文字列のアドレス
    83                              <1> 
    84 000000C9 B40E                <1>     mov ah, 0x0E
    85 000000CB BB0000              <1>     mov bx, 0x0000
    86 000000CE FC                  <1>     cld
    87                              <1> 
    88                              <1> .10L:
    89 000000CF AC                  <1>     lodsb
    90                              <1> 
    91 000000D0 3C00                <1>     cmp al, 0x00
    92 000000D2 7404                <1>     je .10E
    93                              <1> 
    94 000000D4 CD10                <1>     int 0x10
    95 000000D6 EBF7                <1>     jmp .10L
    96                              <1> 
    97                              <1> .10E:
    98 000000D8 5E                  <1>     pop si
    99 000000D9 5B                  <1>     pop bx
   100 000000DA 58                  <1>     pop ax
   101                              <1> 
   102 000000DB 89EC                <1>     mov sp, bp
   103 000000DD 5D                  <1>     pop bp
   104                              <1> 
   105 000000DE C3                  <1>     ret
    74                                  %include "../modules/real/reboot.s"
    75                              <1> reboot:
    76 000000DF 68[FB00]E8DBFF83C4- <1>     cdecl puts, .s0
    76 000000E7 02                  <1>
    77                              <1> 
    78                              <1> .10L:
    79 000000E8 B410                <1>     mov ah, 0x10
    80 000000EA CD16                <1>     int 0x16
    81                              <1> 
    82 000000EC 3C20                <1>     cmp al, ' '
    83 000000EE 75F8                <1>     jne .10L
    84                              <1> 
    85 000000F0 68[1901]E8CAFF83C4- <1>     cdecl puts, .s1
    85 000000F8 02                  <1>
    86                              <1> 
    87 000000F9 CD19                <1>     int 0x19
    88                              <1> 
    89 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    89 00000104 414345206B65792074- <1>
    89 0000010D 6F207265626F6F742E- <1>
    89 00000116 2E2E00              <1>
    90 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    75                                  %include "../modules/real/read_chs.s"
    76                              <1> read_chs:           ; int read_chs(drive, sect, dst);
    77                              <1> ; drive: drive構造体のアドレス
    78                              <1> ; sect:  読み出しセクタ数
    79                              <1> ; dst:   読み出し先アドレス
    80                              <1> ; 戻り値:読み込んだセクタ数
    81 0000011E 55                  <1>     push bp
    82 0000011F 89E5                <1>     mov bp, sp
    83 00000121 6A03                <1>     push 3          ; リトライ回数
    84 00000123 6A00                <1>     push 0          ; 読み込みセクタ数
    85                              <1> 
    86 00000125 53                  <1>     push bx
    87 00000126 51                  <1>     push cx
    88 00000127 52                  <1>     push dx
    89 00000128 06                  <1>     push es
    90 00000129 56                  <1>     push si
    91                              <1> 
    92                              <1>     ; 処理開始
    93 0000012A 8B7604              <1>     mov si, [bp + 4]    ; drive パラメータバッファ
    94                              <1>     
    95                              <1>     ; cxレジスタの設定
    96 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]
    97 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]
    98 00000133 C0E106              <1>     shl cl, 6
    99 00000136 0A4C06              <1>     or cl, [si + drive.sect]
   100                              <1> 
   101                              <1>     ; セクタ読み込み
   102 00000139 8A7404              <1>     mov dh, [si + drive.head];ヘッド番号
   103 0000013C 8A14                <1>     mov dl, [si + drive.no] ; ドライブ番号
   104 0000013E B80000              <1>     mov ax, 0x0000          ; 初期化
   105 00000141 8EC0                <1>     mov es, ax              ; セグメント
   106 00000143 8B5E08              <1>     mov bx, [bp + 8]        ; コピー先
   107                              <1> .10L:
   108                              <1> 
   109 00000146 B402                <1>     mov ah, 0x02        ; セクタ読み込み
   110 00000148 8A4606              <1>     mov al, [bp + 6]    ; 読み込みセクタ数
   111 0000014B CD13                <1>     int 0x13
   112 0000014D 7304                <1>     jnc .11E            ; if(success) goto .11E
   113                              <1> 
   114 0000014F B000                <1>     mov al, 0           ; failed, 読み込んだセクタ数=0
   115 00000151 EB0C                <1>     jmp .10E
   116                              <1> .11E:
   117                              <1>     
   118 00000153 3C00                <1>     cmp al, 0
   119 00000155 7508                <1>     jne .10E            ; if(読み込んだセクタ != 0) goto .10E
   120                              <1>     
   121 00000157 B80000              <1>     mov ax, 0
   122 0000015A FF4EFE              <1>     dec word [bp - 2]   ; retry--
   123 0000015D 75E7                <1>     jnz .10L            ; if(retry != 0) goto .10L
   124                              <1> .10E:
   125 0000015F B400                <1>     mov ah, 0           ; ステータス情報を破棄
   126                              <1> 
   127 00000161 5E                  <1>     pop si
   128 00000162 07                  <1>     pop es
   129 00000163 5A                  <1>     pop dx
   130 00000164 59                  <1>     pop cx
   131 00000165 5B                  <1>     pop bx
   132                              <1> 
   133 00000166 89EC                <1>     mov sp, bp
   134 00000168 5D                  <1>     pop bp
   135                              <1> 
   136 00000169 C3                  <1>     ret
    76                                  
    77 0000016A 00<rep 94h>                 times 510 - ($ - $$) db 0x00
    78 000001FE 55AA                        db 0x55, 0xAA
    79                                  
    80                                  ; リアルモード時に取得した情報
    81                                  FONT:       ; フォントデータ
    82 00000200 0000                    .seg: dw 0
    83 00000202 0000                    .off: dw 0
    84                                  ACPI_DATA:  ; ACPI data
    85 00000204 00000000                .adr: dd 0  ; ACPI data address
    86 00000208 00000000                .len: dd 0  ; ACPI data length
    87                                  
    88                                  ; モジュール（512バイトに入らなかった分）
    89                                  %include "../modules/real/itoa.s"
    90                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
    91                              <1> ; num   変換する値
    92                              <1> ; buff  保存先バッファアドレス
    93                              <1> ; size  保存先バッファサイズ
    94                              <1> ; radix 基数（2, 8, 10, 16)
    95                              <1> ; flags 
    96                              <1> ;   B2: 空白を'0'で埋める
    97                              <1> ;   B1: '+/-'記号を付加する
    98                              <1> ;   B0: 値を符号付き変数として扱う
    99                              <1> 
   100 0000020C 55                  <1>     push bp
   101 0000020D 89E5                <1>     mov bp, sp
   102                              <1> 
   103 0000020F 50                  <1>     push ax
   104 00000210 53                  <1>     push bx
   105 00000211 51                  <1>     push cx
   106 00000212 52                  <1>     push dx
   107 00000213 56                  <1>     push si
   108 00000214 57                  <1>     push di
   109                              <1> 
   110                              <1> 
   111 00000215 8B4604              <1>     mov ax, [bp + 4]    ; num
   112 00000218 8B4E08              <1>     mov cx, [bp + 8]    ; size
   113 0000021B 8B7606              <1>     mov si, [bp + 6]    ; buff
   114                              <1> 
   115 0000021E 89F7                <1>     mov di, si
   116 00000220 01CF                <1>     add di, cx
   117 00000222 4F                  <1>     dec di              ; di = &si[cx-1]
   118                              <1> 
   119 00000223 8B5E0C              <1>     mov bx, word [bp + 12]   ; flags
   120                              <1> 
   121                              <1>     ; 符号付き判定
   122 00000226 F7C30100            <1>     test bx, 0b0001     ; 論理積を計算、0ならZFをセット
   123                              <1> .10Q:
   124 0000022A 7408                <1>     je .10E         ; E=Exit
   125 0000022C 83F800              <1>     cmp ax, 0
   126                              <1> .12Q:
   127 0000022F 7D03                <1>     jge .12E
   128 00000231 83CB02              <1>     or bx, 0b0010
   129                              <1> .12E:
   130                              <1> .10E:
   131                              <1> 
   132                              <1>     ; 符号出力判定
   133 00000234 F7C30200            <1>     test bx, 0b0010
   134                              <1> .20Q:
   135 00000238 7410                <1>     je .20E
   136 0000023A 83F800              <1>     cmp ax, 0
   137                              <1> .22Q:
   138 0000023D 7D07                <1>     jge .22F
   139 0000023F F7D8                <1>     neg ax
   140 00000241 C6042D              <1>     mov [si], byte '-'
   141 00000244 EB03                <1>     jmp .22E
   142                              <1> .22F:
   143                              <1>     
   144 00000246 C6042B              <1>     mov [si], byte '+'
   145                              <1> .22E:
   146 00000249 49                  <1>     dec cx
   147                              <1> .20E:
   148                              <1> 
   149                              <1>     ; ASCII変換
   150 0000024A 8B5E0A              <1>     mov bx, [bp + 10]   ; radix(基数)
   151                              <1> .30L:
   152 0000024D BA0000              <1>     mov dx, 0
   153 00000250 F7F3                <1>     div bx      ; 商：ax, あまり: dx
   154                              <1> 
   155 00000252 89D6                <1>     mov si, dx
   156 00000254 8A94[7C02]          <1>     mov dl, byte [.ascii + si]
   157                              <1> 
   158 00000258 8815                <1>     mov [di], dl
   159 0000025A 4F                  <1>     dec di
   160                              <1> 
   161 0000025B 83F800              <1>     cmp ax, 0
   162 0000025E E0ED                <1>     loopnz .30L
   163                              <1> .30E:
   164                              <1> 
   165 00000260 83F900              <1>     cmp cx, 0
   166                              <1> .40Q:
   167 00000263 740D                <1>     je .40E
   168 00000265 B020                <1>     mov al, ' '
   169 00000267 837E0C04            <1>     cmp [bp + 12], word 0b0100
   170                              <1> .42Q:
   171 0000026B 7502                <1>     jne .42E
   172 0000026D B030                <1>     mov al, '0'
   173                              <1> .42E:
   174 0000026F FD                  <1>     std         ; dimention flag = 1(-方向)
   175 00000270 F3AA                <1>     rep stosb   ; while (--cx) *di-- = al;
   176                              <1> .40E:
   177                              <1> 
   178 00000272 5F                  <1>     pop di
   179 00000273 5E                  <1>     pop si
   180 00000274 5A                  <1>     pop dx
   181 00000275 59                  <1>     pop cx
   182 00000276 5B                  <1>     pop bx
   183 00000277 58                  <1>     pop ax
   184                              <1> 
   185 00000278 89EC                <1>     mov sp, bp
   186 0000027A 5D                  <1>     pop bp
   187                              <1> 
   188 0000027B C3                  <1>     ret
   189                              <1> 
   190 0000027C 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   190 00000285 39414243444546      <1>
    90                                  %include "../modules/real/get_drive_param.s"
    91                              <1> get_drive_param:    ; int get_drive_param(drive);
    92                              <1> ; drive: drive構造体のアドレス
    93                              <1> ;        no 対象となるドライブ番号（BIOSから渡された起動ドライブ）
    94                              <1> ; 戻り値: 成功（0以外） 失敗（0）
    95                              <1> 
    96 0000028C 55                  <1>     push bp
    97 0000028D 89E5                <1>     mov bp, sp
    98                              <1> 
    99 0000028F 53                  <1>     push bx
   100 00000290 51                  <1>     push cx
   101 00000291 06                  <1>     push es
   102 00000292 56                  <1>     push si
   103 00000293 57                  <1>     push di
   104                              <1> 
   105                              <1>     ; 処理開始
   106 00000294 8B7604              <1>     mov si, [bp + 4]        ; si = バッファ
   107                              <1> 
   108 00000297 B80000              <1>     mov ax, 0               ; Disk Base Table Pointerの初期化
   109 0000029A 8EC0                <1>     mov es, ax              ; es = di = 0
   110 0000029C 89C7                <1>     mov di, ax
   111                              <1> 
   112 0000029E B408                <1>     mov ah, 0x08            ; ah = ドライブパラメータの取得
   113 000002A0 8A14                <1>     mov dl, [si + drive.no] ; dl = ドライブ番号
   114 000002A2 CD13                <1>     int 0x13
   115                              <1> 
   116                              <1> .10Q:
   117 000002A4 721B                <1>     jc .10F
   118                              <1> .10T:       ; 成功
   119 000002A6 88C8                <1>     mov al, cl
   120 000002A8 83E03F              <1>     and ax, 0x3f    ; alの下位6ビット セクタ数のみ有効
   121                              <1> 
   122 000002AB C0E906              <1>     shr cl, 6       ; cl = シリンダ上位2ビット
   123                              <1>                     ; ch = シリンダ下位8ビット
   124 000002AE C1C908              <1>     ror cx, 8       ; chとclを交換、cx = シリンダ
   125 000002B1 41                  <1>     inc cx          ; 1始まりに変換
   126                              <1> 
   127 000002B2 0FB6DE              <1>     movzx bx, dh    ; bx = ヘッド数 ゼロ拡張
   128 000002B5 43                  <1>     inc bx          ; 1はじまりに変換
   129                              <1> 
   130                              <1>     ; cx = シリンダ
   131                              <1>     ; bx = ヘッド
   132                              <1>     ; ax = セクタ
   133 000002B6 894C02              <1>     mov [si + drive.cyln], cx
   134 000002B9 895C04              <1>     mov [si + drive.head], bx
   135 000002BC 894406              <1>     mov [si + drive.sect], ax
   136                              <1> 
   137 000002BF EB03                <1>     jmp .10E
   138                              <1> 
   139                              <1> .10F:       ; 失敗
   140 000002C1 B80000              <1>     mov ax, 0
   141                              <1>     
   142                              <1> .10E:
   143                              <1>     
   144 000002C4 5F                  <1>     pop di
   145 000002C5 5E                  <1>     pop si
   146 000002C6 07                  <1>     pop es
   147 000002C7 59                  <1>     pop cx
   148 000002C8 5B                  <1>     pop bx
   149                              <1> 
   150 000002C9 89EC                <1>     mov sp, bp
   151 000002CB 5D                  <1>     pop bp
   152                              <1> 
   153 000002CC C3                  <1>     ret
    91                                  %include "../modules/real/get_font_adr.s"
    92                              <1> get_font_adr:   ; void get_font_adr(adr)
    93                              <1> ; adr: フォントアドレス格納位置
    94 000002CD 55                  <1>     push bp
    95 000002CE 89E5                <1>     mov bp, sp
    96                              <1> 
    97 000002D0 50                  <1>     push ax
    98 000002D1 53                  <1>     push bx
    99 000002D2 51                  <1>     push cx
   100 000002D3 52                  <1>     push dx
   101 000002D4 56                  <1>     push si
   102 000002D5 06                  <1>     push es
   103 000002D6 55                  <1>     push bp
   104                              <1> 
   105 000002D7 8B7604              <1>     mov si, [bp + 4]    ; si = adr
   106                              <1>     
   107 000002DA B83011              <1>     mov ax, 0x1130      ; フォントアドレスの取得
   108 000002DD B706                <1>     mov bh, 0x06        ; 8x16のフォント
   109 000002DF CD10                <1>     int 0x10
   110                              <1> .10Q:
   111 000002E1 7207                <1>     jc .10F
   112                              <1> .10T:   ; 成功
   113 000002E3 8C04                <1>     mov [si + 0], es    ; adr[0] = セグメント
   114 000002E5 896C02              <1>     mov [si + 2], bp    ; adr[1] = オフセット
   115 000002E8 EB0C                <1>     jmp .10E
   116                              <1> .10F:   ; 失敗
   117 000002EA 68[0103]E8D0FD83C4- <1>     cdecl puts, .e0
   117 000002F2 02                  <1>
   118 000002F3 E8E9FD              <1>     call reboot
   119                              <1> .10E:
   120 000002F6 5D                  <1>     pop bp
   121 000002F7 07                  <1>     pop es
   122 000002F8 5E                  <1>     pop si
   123 000002F9 5A                  <1>     pop dx
   124 000002FA 59                  <1>     pop cx
   125 000002FB 5B                  <1>     pop bx
   126 000002FC 58                  <1>     pop ax
   127                              <1> 
   128 000002FD 89EC                <1>     mov sp, bp
   129 000002FF 5D                  <1>     pop bp
   130                              <1> 
   131 00000300 C3                  <1>     ret
   132                              <1> 
   133 00000301 43616E277420676574- <1> .e0 db "Can't get font data.", 0
   133 0000030A 20666F6E7420646174- <1>
   133 00000313 612E00              <1>
    92                                  %include "../modules/real/get_mem_info.s"
    93                              <1> get_mem_info:   ; void get_mem_info(void)
    94                              <1> ; ACPIテーブルが含まれるメモリ領域をグローバルラベルACPI_DATAに保存する
    95 00000316 6650                <1>     push eax
    96 00000318 6653                <1>     push ebx
    97 0000031A 6651                <1>     push ecx
    98 0000031C 6652                <1>     push edx
    99 0000031E 56                  <1>     push si
   100 0000031F 57                  <1>     push di
   101 00000320 55                  <1>     push bp
   102                              <1> 
   103 00000321 BD0000              <1>     mov bp, 0
   104 00000324 66BB00000000        <1>     mov ebx, 0
   105                              <1> 
   106 0000032A 68[4C04]E890FD83C4- <1>     cdecl puts, .s4
   106 00000332 02                  <1>
   107 00000333 68[D403]E887FD83C4- <1>     cdecl puts, .s0
   107 0000033B 02                  <1>
   108                              <1> .10L:
   109 0000033C 66B820E80000        <1>     mov eax, 0x0000E820
   110 00000342 66B914000000        <1>     mov ecx, E820_RECORD_SIZE
   111 00000348 66BA50414D53        <1>     mov edx, 'PAMS'
   112 0000034E BF[C003]            <1>     mov di, .b0
   113 00000351 CD15                <1>     int 0x15
   114                              <1> 
   115 00000353 663D50414D53        <1>     cmp eax, 'PAMS'             ; BIOSが対応しているかの確認
   116 00000359 7402                <1>     je .12E
   117 0000035B EB4C                <1>     jmp .10E
   118                              <1> .12E:   ; 対応してる
   119 0000035D 7302                <1>     jnc .14E
   120 0000035F EB48                <1>     jmp .10E
   121                              <1> .14E:   ; 成功
   122                              <1>     ; 1レコード分のメモリ情報を表示
   123 00000361 57E8FB0083C402      <1>     cdecl put_mem_info, di
   124                              <1> 
   125                              <1>     ; ACPI dataのアドレスを取得
   126 00000368 668B4510            <1>     mov eax, [di + 16]          ; データタイプを参照
   127 0000036C 6683F803            <1>     cmp eax, 3                  ; data type = 3（ACPI)
   128 00000370 750F                <1>     jne .15E
   129                              <1> 
   130 00000372 668B05              <1>     mov eax, [di + 0]           ; レコードのベースアドレス
   131 00000375 66A3[0402]          <1>     mov [ACPI_DATA.adr], eax
   132                              <1> 
   133 00000379 668B4508            <1>     mov eax, [di + 8]           ; Length
   134 0000037D 66A3[0802]          <1>     mov [ACPI_DATA.len], eax
   135                              <1> 
   136                              <1> .15E:
   137                              <1>     
   138 00000381 6683FB00            <1>     cmp ebx, 0                  ; 最終データだったら.16Eへ
   139 00000385 741C                <1>     jz .16E
   140                              <1> 
   141 00000387 45                  <1>     inc bp
   142 00000388 83E507              <1>     and bp, 0x07                ; 表示ライン数が0x07を超えてなければ.16Eへ
   143 0000038B 7516                <1>     jnz .16E
   144                              <1> 
   145                              <1>     ; 中断メッセージ
   146 0000038D 68[3404]E82DFD83C4- <1>     cdecl puts, .s2
   146 00000395 02                  <1>
   147 00000396 B410                <1>     mov ah, 0x10
   148 00000398 CD16                <1>     int 0x16
   149                              <1> 
   150 0000039A 68[3F04]E820FD83C4- <1>     cdecl puts, .s3
   150 000003A2 02                  <1>
   151                              <1> 
   152                              <1> .16E:
   153                              <1> 
   154 000003A3 6683FB00            <1>     cmp ebx, 0                  ; 最終データじゃなかったらループ
   155 000003A7 7593                <1>     jne .10L
   156                              <1> 
   157                              <1> .10E:
   158 000003A9 68[0404]E811FD83C4- <1>     cdecl puts, .s1
   158 000003B1 02                  <1>
   159                              <1> 
   160 000003B2 5D                  <1>     pop bp
   161 000003B3 5F                  <1>     pop di
   162 000003B4 5E                  <1>     pop si
   163 000003B5 665A                <1>     pop edx
   164 000003B7 6659                <1>     pop ecx
   165 000003B9 665B                <1>     pop ebx
   166 000003BB 6658                <1>     pop eax
   167                              <1> 
   168 000003BD C3                  <1>     ret
   169                              <1> 
   170                              <1> 
   171 000003BE 00<rep 2h>          <1> ALIGN 4, db 0
   172 000003C0 00<rep 14h>         <1> .b0: times E820_RECORD_SIZE db 0
   173 000003D4 20426173655F5F5F5F- <1> .s0: db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   173 000003DD 5F5F5F5F5F5F5F5F5F- <1>
   173 000003E6 204C656E6774685F5F- <1>
   173 000003EF 5F5F5F5F5F5F5F5F5F- <1>
   173 000003F8 20547970655F5F5F5F- <1>
   173 00000401 0A0D00              <1>
   174 00000404 205F5F5F5F5F5F5F5F- <1> .s1: db " _________________ _________________ ________", 0x0A, 0x0D, 0
   174 0000040D 5F5F5F5F5F5F5F5F5F- <1>
   174 00000416 205F5F5F5F5F5F5F5F- <1>
   174 0000041F 5F5F5F5F5F5F5F5F5F- <1>
   174 00000428 205F5F5F5F5F5F5F5F- <1>
   174 00000431 0A0D00              <1>
   175 00000434 203C6D6F72652E2E2E- <1> .s2: db " <more...>", 0
   175 0000043D 3E00                <1>
   176 0000043F 0D2020202020202020- <1> .s3: db 0x0D, "          ", 0x0D, 0
   176 00000448 20200D00            <1>
   177 0000044C 2045383230204D656D- <1> .s4: db " E820 Memory Map:", 0x0A, 0x0D, 0
   177 00000455 6F7279204D61703A0A- <1>
   177 0000045E 0D00                <1>
   178                              <1> 
   179                              <1> 
   180                              <1> 
   181                              <1> put_mem_info:   ; void put_mem_info(adr);
   182                              <1> ; adr メモリ情報を参照するアドレス
   183                              <1>     
   184 00000460 55                  <1>     push bp
   185 00000461 89E5                <1>     mov bp, sp
   186                              <1> 
   187 00000463 53                  <1>     push bx
   188 00000464 56                  <1>     push si
   189                              <1> 
   190 00000465 8B7604              <1>     mov si, [bp + 4]
   191                              <1> 
   192                              <1>     ; レコード全20ビットを文字に変換し出力
   193                              <1>     ; Base(64bit)
   194 00000468 6A046A106A0468-     <1>     cdecl itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   194 0000046F [3F05]FF7406E895FD- <1>
   194 00000477 83C40A              <1>
   195 0000047A 6A046A106A0468-     <1>     cdecl itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   195 00000481 [4305]FF7404E883FD- <1>
   195 00000489 83C40A              <1>
   196 0000048C 6A046A106A0468-     <1>     cdecl itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   196 00000493 [4805]FF7402E871FD- <1>
   196 0000049B 83C40A              <1>
   197 0000049E 6A046A106A0468-     <1>     cdecl itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   197 000004A5 [4C05]FF34E860FD83- <1>
   197 000004AD C40A                <1>
   198                              <1> 
   199                              <1>     ; Length(64bit)
   200 000004AF 6A046A106A0468-     <1>     cdecl itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
   200 000004B6 [5105]FF740EE84EFD- <1>
   200 000004BE 83C40A              <1>
   201 000004C1 6A046A106A0468-     <1>     cdecl itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
   201 000004C8 [5505]FF740CE83CFD- <1>
   201 000004D0 83C40A              <1>
   202 000004D3 6A046A106A0468-     <1>     cdecl itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
   202 000004DA [5A05]FF740AE82AFD- <1>
   202 000004E2 83C40A              <1>
   203 000004E5 6A046A106A0468-     <1>     cdecl itoa, word [si +  8], .p5 + 4, 4, 16, 0b0100
   203 000004EC [5E05]FF7408E818FD- <1>
   203 000004F4 83C40A              <1>
   204                              <1> 
   205                              <1>     ; Type(32bit)
   206 000004F7 6A046A106A0468-     <1>     cdecl itoa, word [si + 18], .p6 + 0, 4, 16, 0b0100
   206 000004FE [6305]FF7412E806FD- <1>
   206 00000506 83C40A              <1>
   207 00000509 6A046A106A0468-     <1>     cdecl itoa, word [si + 16], .p6 + 4, 4, 16, 0b0100
   207 00000510 [6705]FF7410E8F4FC- <1>
   207 00000518 83C40A              <1>
   208                              <1> 
   209 0000051B 68[3E05]E89FFB83C4- <1>     cdecl puts, .s1
   209 00000523 02                  <1>
   210                              <1> 
   211                              <1>     ; タイプの情報を文字列で表示
   212 00000524 8B5C10              <1>     mov bx, [si + 16]
   213 00000527 83E307              <1>     and bx, 0x07            ; bxの下位3ビットがタイプ
   214 0000052A D1E3                <1>     shl bx, 1
   215 0000052C 81C3[C005]          <1>     add bx, .t0
   216 00000530 FF37E88BFB83C402    <1>     cdecl puts, word [bx]   ; .t0からのオフセット
   217                              <1> 
   218 00000538 5E                  <1>     pop si
   219 00000539 5B                  <1>     pop bx
   220                              <1>     
   221 0000053A 89EC                <1>     mov sp, bp
   222 0000053C 5D                  <1>     pop bp
   223                              <1> 
   224 0000053D C3                  <1>     ret
   225                              <1> 
   226 0000053E 20                  <1> .s1: db " "
   227 0000053F 5A5A5A5A5A5A5A5A5F  <1> .p2: db "ZZZZZZZZ_"
   228 00000548 5A5A5A5A5A5A5A5A20  <1> .p3: db "ZZZZZZZZ "
   229 00000551 5A5A5A5A5A5A5A5A5F  <1> .p4: db "ZZZZZZZZ_"
   230 0000055A 5A5A5A5A5A5A5A5A20  <1> .p5: db "ZZZZZZZZ "
   231 00000563 5A5A5A5A5A5A5A5A00  <1> .p6: db "ZZZZZZZZ", 0
   232                              <1> 
   233 0000056C 2028556E6B6E6F776E- <1> .s4: db " (Unknown)", 0x0A, 0x0D, 0
   233 00000575 290A0D00            <1>
   234 00000579 2028757361626C6529- <1> .s5: db " (usable)", 0x0A, 0x0D, 0
   234 00000582 0A0D00              <1>
   235 00000585 202872657365727665- <1> .s6: db " (reserved)", 0x0A, 0x0D, 0
   235 0000058E 64290A0D00          <1>
   236 00000593 202841435049206461- <1> .s7: db " (ACPI data)", 0x0A, 0x0D, 0
   236 0000059C 7461290A0D00        <1>
   237 000005A2 202841435049204E56- <1> .s8: db " (ACPI NVS)", 0x0A, 0x0D, 0
   237 000005AB 53290A0D00          <1>
   238 000005B0 2028626164206D656D- <1> .s9: db " (bad memory)", 0x0A, 0x0D, 0
   238 000005B9 6F7279290A0D00      <1>
   239                              <1> 
   240 000005C0 [6C05][7905][8505]- <1> .t0: dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   240 000005C6 [9305][A205][B005]- <1>
   240 000005CC [6C05][6C05]        <1>
    93                                  %include "../modules/real/kbc.s"
    94                              <1> KBC_Data_Write:     ; int KBC_Data_Write(data);
    95                              <1> ; data: 書き込みデータ
    96                              <1> ; 返り値 成功（0以外）失敗（0）
    97 000005D0 55                  <1>     push bp
    98 000005D1 89E5                <1>     mov bp, sp
    99                              <1> 
   100 000005D3 51                  <1>     push cx
   101                              <1> 
   102 000005D4 B90300              <1>     mov cx, 3
   103                              <1> .10L:
   104 000005D7 E464                <1>     in al, 0x64     ; al = input(0x64) KBCステータス
   105 000005D9 A802                <1>     test al, 0x02   ; zf = al & 0x02   書き込み可能か？ zf != 0のときに書き込める
   106 000005DB E0FA                <1>     loopnz .10L
   107                              <1> 
   108 000005DD 83F900              <1>     cmp cx, 0       ; タイムアウトしたらgoto .20E
   109 000005E0 7405                <1>     jz .20E
   110                              <1> 
   111 000005E2 8A4604              <1>     mov al, [bp + 4]    ; 引数をkbcに書き込み
   112 000005E5 E660                <1>     out 0x60, al
   113                              <1> 
   114                              <1> .20E:
   115 000005E7 89C8                <1>     mov ax, cx      ; 残り試行回数が返り値
   116                              <1> 
   117 000005E9 59                  <1>     pop cx
   118                              <1> 
   119 000005EA 89EC                <1>     mov sp, bp
   120 000005EC 5D                  <1>     pop bp
   121                              <1> 
   122 000005ED C3                  <1>     ret
   123                              <1> 
   124                              <1> 
   125                              <1> KBC_Data_Read:      ; int KBC_Data_read(data);
   126                              <1> ; data 読み込みデータ格納アドレス
   127                              <1> ; 返り値 成功（0以外）失敗（0）
   128 000005EE 55                  <1>     push bp
   129 000005EF 89E5                <1>     mov bp, sp
   130                              <1> 
   131 000005F1 50                  <1>     push ax
   132 000005F2 51                  <1>     push cx
   133 000005F3 57                  <1>     push di
   134                              <1> 
   135 000005F4 B90300              <1>     mov cx, 3
   136                              <1> .10L:
   137 000005F7 E464                <1>     in al, 0x64
   138 000005F9 A801                <1>     test al, 0x01       ; 出力バッファフルを確認 zf == 1 のときに読み込める
   139 000005FB E1FA                <1>     loopz .10L
   140                              <1> 
   141 000005FD 83F900              <1>     cmp cx, 0   ; タイム・アウトしたらgoto .20E
   142 00000600 7409                <1>     jz .20E
   143                              <1> 
   144 00000602 B400                <1>     mov ah, 0x00
   145 00000604 E460                <1>     in al, 0x60
   146                              <1> 
   147 00000606 8B7E04              <1>     mov di, [bp + 4]
   148 00000609 8905                <1>     mov [di + 0], ax
   149                              <1> 
   150                              <1> .20E:
   151 0000060B 89C8                <1>     mov ax, cx
   152                              <1> 
   153 0000060D 5F                  <1>     pop di
   154 0000060E 59                  <1>     pop cx
   155 0000060F 58                  <1>     pop ax
   156                              <1> 
   157 00000610 89EC                <1>     mov sp, bp
   158 00000612 5D                  <1>     pop bp
   159                              <1> 
   160 00000613 C3                  <1>     ret
   161                              <1> 
   162                              <1> 
   163                              <1> KBC_Cmd_Write:      ; int KBC_Cmd_Write(cmd);
   164                              <1> ; cmd: 書き込みコマンド
   165                              <1> ; 返り値 成功（0以外）失敗（0）
   166 00000614 55                  <1>     push bp
   167 00000615 89E5                <1>     mov bp, sp
   168                              <1> 
   169 00000617 51                  <1>     push cx
   170                              <1> 
   171 00000618 B90300              <1>     mov cx, 3
   172                              <1> .10L:
   173 0000061B E464                <1>     in al, 0x64     ; al = input(0x64) KBCステータス
   174 0000061D A802                <1>     test al, 0x02   ; zf = al & 0x02   書き込み可能か？ zf != 0のときに書き込める
   175 0000061F E0FA                <1>     loopnz .10L
   176                              <1> 
   177 00000621 83F900              <1>     cmp cx, 0       ; タイムアウトしたらgoto .20E
   178 00000624 7405                <1>     jz .20E
   179                              <1> 
   180 00000626 8A4604              <1>     mov al, [bp + 4]    ; 引数をkbcに書き込み
   181 00000629 E664                <1>     out 0x64, al
   182                              <1> 
   183                              <1> .20E:
   184 0000062B 89C8                <1>     mov ax, cx      ; 残り試行回数が返り値
   185                              <1> 
   186 0000062D 59                  <1>     pop cx
   187                              <1> 
   188 0000062E 89EC                <1>     mov sp, bp
   189 00000630 5D                  <1>     pop bp
   190                              <1> 
   191 00000631 C3                  <1>     ret
    94                                  %include "../modules/real/read_lba.s"
    95                              <1> read_lba:   ; int read_lba(drive, lba, sect, dst);
    96                              <1> ; drive drive構造体のアドレス（ドライブパラメータが格納されている）
    97                              <1> ; lba LBA
    98                              <1> ; sect 読み出しセクタ数
    99                              <1> ; dst 読み出し先アドレス
   100                              <1> ; 戻り値 読み込んだセクタ数
   101                              <1> 
   102 00000632 55                  <1>     push bp
   103 00000633 89E5                <1>     mov bp, sp
   104                              <1> 
   105 00000635 50                  <1>     push ax
   106 00000636 56                  <1>     push si
   107                              <1> 
   108 00000637 8B7604              <1>     mov si, [bp + 4]        ; si = ドライブ情報
   109                              <1> 
   110                              <1>     ; LBA->CHS変換
   111 0000063A 8B4606              <1>     mov ax, [bp + 6]
   112 0000063D 5068[6106]56E82400- <1>     cdecl lba_chs, si, .chs, ax ; lba_chs(drive, .chs, AX);
   112 00000645 83C406              <1>
   113                              <1> 
   114                              <1>     ; ドライブ番号のコピー
   115 00000648 8A04                <1>     mov al, [si + drive.no]
   116 0000064A A2[6106]            <1>     mov [.chs + drive.no], al   ; ドライブ番号保存
   117                              <1> 
   118                              <1>     ; セクタの読み込み
   119 0000064D FF760AFF760868-     <1>     cdecl read_chs, .chs, word [bp + 8], word [bp + 10] ; ax = read_chs(.chs, セクタ数 , ofs);
   119 00000654 [6106]E8C5FA83C406  <1>
   120                              <1> 
   121 0000065C 5E                  <1>     pop si
   122                              <1> 
   123 0000065D 89EC                <1>     mov sp, bp
   124 0000065F 5D                  <1>     pop bp
   125                              <1> 
   126 00000660 C3                  <1>     ret
   127                              <1> 
   128 00000661 00<rep 8h>          <1> .chs: times drive_size  db 0        ; 読み込みセクタに関する情報
    95                                  %include "../modules/real/lba_chs.s"
    96                              <1> lba_chs:    ; lba_chs(drive, drive_chs, lba);
    97                              <1> ; drive drive構造体のアドレス（ドライブパラメータが格納されている）
    98                              <1> ; drv_chs drive構造体のアドレス（変換後のシリンダ番号、ヘッド番号、セクタ番号を保存する）
    99                              <1> ; lba LBA
   100                              <1> ; 戻り値 成功(0以外) 失敗(0)
   101 00000669 55                  <1>     push bp
   102 0000066A 89E5                <1>     mov bp, sp
   103                              <1> 
   104 0000066C 53                  <1>     push bx
   105 0000066D 52                  <1>     push dx
   106 0000066E 56                  <1>     push si
   107 0000066F 57                  <1>     push di
   108                              <1> 
   109                              <1> 
   110 00000670 8B7604              <1>     mov si, [bp + 4]            ; driveバッファ
   111 00000673 8B7E06              <1>     mov di, [bp + 6]            ; drv_chsバッファ
   112                              <1> 
   113 00000676 8A4404              <1>     mov al, [si + drive.head]   ; al = 最大ヘッド数
   114 00000679 F66406              <1>     mul byte [si + drive.sect]  ; ax = 最大ヘッド数 * 最大セクタ数
   115 0000067C 89C3                <1>     mov bx, ax                  ; bx = シリンダあたりのセクタ数
   116                              <1> 
   117 0000067E BA0000              <1>     mov dx, 0                   ; dx = lba(上位2byte)
   118 00000681 8B4608              <1>     mov ax, [bp + 8]            ; ax = lba(下位2byte)
   119 00000684 F7F3                <1>     div bx                      ; dx = dx:ax % bx   あまり
   120                              <1>                                 ; ax = dx:ax / bx   シリンダ番号
   121 00000686 894502              <1>     mov [di + drive.cyln], ax   ; drv_chs.cyln = シリンダ番号
   122                              <1> 
   123 00000689 89D0                <1>     mov ax, dx                  ; ax = あまり
   124 0000068B F67406              <1>     div byte [si + drive.sect]  ; ah = ax % 最大セクタ数    // セクタ番号
   125                              <1>                                 ; al = ax / 最大セクタ数    // シリンダ番号
   126                              <1> 
   127 0000068E 0FB6D4              <1>     movzx dx, ah                ; dx = セクタ番号
   128 00000691 42                  <1>     inc dx                      ; １始まりにする
   129                              <1> 
   130 00000692 B400                <1>     mov ah, 0x00                ; ax = ヘッド位置(0x00:al)
   131                              <1> 
   132 00000694 894504              <1>     mov [di + drive.head], ax   ; drv_chs.head = ヘッド番号
   133 00000697 895506              <1>     mov [di + drive.sect], dx   ; drv_chs.sect = セクタ番号
   134                              <1> 
   135 0000069A 5F                  <1>     pop di
   136 0000069B 5E                  <1>     pop si
   137 0000069C 5A                  <1>     pop dx
   138 0000069D 5B                  <1>     pop bx
   139                              <1> 
   140 0000069E 89EC                <1>     mov sp, bp
   141 000006A0 5D                  <1>     pop bp
   142                              <1> 
   143 000006A1 C3                  <1>     ret
    96                                  
    97                                  ; ブート処理の第２ステージ
    98                                  stage_2:
    99 000006A2 68[5F07]E818FA83C4-         cdecl puts, .s0
    99 000006AA 02                 
   100                                  
   101                                      ; ドライブ情報を取得
   102 000006AB 68[B800]E8DBFB83C4-         cdecl get_drive_param, BOOT
   102 000006B3 02                 
   103 000006B4 83F800                      cmp ax, 0
   104                                  .10Q:
   105 000006B7 750C                        jne .10E
   106                                  .10T:   ; 失敗
   107 000006B9 68[4407]E801FA83C4-         cdecl puts, .e0
   107 000006C1 02                 
   108 000006C2 E81AFA                      call reboot
   109                                  
   110                                  .10E:   ; 成功
   111                                      ; ドライブ情報を表示
   112 000006C5 A1[B800]                    mov ax, [BOOT + drive.no]
   113 000006C8 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
   113 000006CF [2507]50E837FB83C4-
   113 000006D7 0A                 
   114 000006D8 A1[BA00]                    mov ax, [BOOT + drive.cyln]
   115 000006DB 6A046A106A0468-             cdecl itoa, ax, .p2, 4, 16, 0b0100
   115 000006E2 [2D07]50E824FB83C4-
   115 000006EA 0A                 
   116 000006EB A1[BC00]                    mov ax, [BOOT + drive.head]
   117 000006EE 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
   117 000006F5 [3707]50E811FB83C4-
   117 000006FD 0A                 
   118 000006FE A1[BE00]                    mov ax, [BOOT + drive.sect]
   119 00000701 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
   119 00000708 [3F07]50E8FEFA83C4-
   119 00000710 0A                 
   120 00000711 68[1C07]E8A9F983C4-         cdecl puts, .s1
   120 00000719 02                 
   121                                      
   122                                      ; 次のステージへ
   123 0000071A EB52                        jmp stage_3rd
   124                                  
   125 0000071C 2044726976653A3078      .s1 db " Drive:0x"
   126 00000725 20202C20433A3078        .p1 db "  , C:0x"
   127 0000072D 202020202C20483A30-     .p2 db "    , H:0x"
   127 00000736 78                 
   128 00000737 20202C20533A3078        .p3 db "  , S:0x"
   129 0000073F 20200A0D00              .p4 db "  ", 0x0A, 0x0D, 0
   130                                  
   131 00000744 43616E277420676574-     .e0 db "Can't get drive parameter.", 0
   131 0000074D 206472697665207061-
   131 00000756 72616D657465722E00 
   132                                  
   133                                  ; Data
   134 0000075F 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   134 00000768 2E2E2E0A0D00       
   135                                  
   136                                  ; ブート処理の第３ステージ
   137                                  stage_3rd:
   138                                      ; 文字列を表示
   139 0000076E 68[EB07]E84CF983C4-         cdecl puts, .s0
   139 00000776 02                 
   140                                  
   141 00000777 68[0002]E850FB83C4-         cdecl get_font_adr, FONT    ; BIOSのフォントアドレスを取得
   141 0000077F 02                 
   142                                  
   143                                      ; フォントアドレスの表示
   144 00000780 6A046A106A0468-             cdecl itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   144 00000787 [0808]FF36[0002]E8-
   144 0000078E 7CFA83C40A         
   145 00000793 6A046A106A0468-             cdecl itoa, word [FONT.off], .p2, 4, 16, 0b0100
   145 0000079A [0D08]FF36[0202]E8-
   145 000007A1 69FA83C40A         
   146 000007A6 68[FA07]E814F983C4-         cdecl puts, .s1
   146 000007AE 02                 
   147                                  
   148                                      ; メモリ情報の取得と表示
   149 000007AF E864FB                      cdecl get_mem_info              ; get_mem_info()
   150                                  
   151 000007B2 66A1[0402]                  mov eax, [ACPI_DATA.adr]
   152 000007B6 6683F800                    cmp eax, 0                      ; if(eax == 0) goto .10E
   153 000007BA 742D                        je .10E
   154                                  
   155 000007BC 6A046A106A0468-             cdecl itoa, ax, .p4, 4, 16, 0b0100  ; 下位１６ビットを変換
   155 000007C3 [2608]50E843FA83C4-
   155 000007CB 0A                 
   156 000007CC 66C1E810                    shr eax, 16
   157 000007D0 6A046A106A0468-             cdecl itoa, ax, .p3, 4, 16, 0b0100  ; 上位１６ビットを変換
   157 000007D7 [2208]50E82FFA83C4-
   157 000007DF 0A                 
   158                                  
   159 000007E0 68[1708]E8DAF883C4-         cdecl puts, .s2
   159 000007E8 02                 
   160                                  .10E:
   161                                      
   162                                      ; 次のステージへ
   163 000007E9 EB42                        jmp stage_4
   164                                  
   165                                  
   166                                  ; データ
   167 000007EB 337264207374616765-     .s0 db "3rd stage...", 0x0A, 0x0D, 0
   167 000007F4 2E2E2E0A0D00       
   168 000007FA 20466F6E7420416464-     .s1 db " Font Address="
   168 00000803 726573733D         
   169 00000808 5A5A5A5A3A              .p1 db "ZZZZ:"
   170 0000080D 5A5A5A5A0A0D00          .p2 db "ZZZZ", 0x0A, 0x0D, 0
   171 00000814 0A0D00                      db 0x0A, 0x0D, 0
   172                                  
   173 00000817 204143504920646174-     .s2 db " ACPI data="
   173 00000820 613D               
   174 00000822 5A5A5A5A                .p3 db "ZZZZ"
   175 00000826 5A5A5A5A0A0D00          .p4 db "ZZZZ", 0x0A, 0x0D, 0
   176                                  
   177                                  
   178                                  ; ブート処理の第４ステージ
   179                                  stage_4:
   180 0000082D 68[0109]E88DF883C4-         cdecl puts, .s0
   180 00000835 02                 
   181                                  
   182                                      ; A20ゲート有効化
   183 00000836 FA                          cli                         ; 割込み禁止
   184 00000837 68AD00E8D7FD83C402          cdecl KBC_Cmd_Write, 0xAD   ; キーボード無効化
   185 00000840 68D000E8CEFD83C402          cdecl KBC_Cmd_Write, 0xD0   ; 出力ポート読み出しコマンド
   186 00000849 68[4A09]E89FFD83C4-         cdecl KBC_Data_Read, .key   ; 出力ポートデータ
   186 00000851 02                 
   187                                  
   188 00000852 8A1E[4A09]                  mov bl, [.key]
   189 00000856 80CB02                      or bl, 0x02         ; A20ゲート有効化
   190                                  
   191 00000859 68D100E8B5FD83C402          cdecl KBC_Cmd_Write, 0xD1   ; 出力ポート書き込みコマンド
   192 00000862 53E86AFD83C402              cdecl KBC_Data_Write, bx    ; 出力ポートデータ
   193                                  
   194 00000869 68AE00E8A5FD83C402          cdecl KBC_Cmd_Write, 0xAE   ; キーボード有効化
   195 00000872 FB                          sti                         ; 割り込み許可
   196                                  
   197 00000873 68[1009]E847F883C4-         cdecl puts, .s1
   197 0000087B 02                 
   198                                  
   199                                      ; キーボードLEDのテスト
   200 0000087C 68[2509]E83EF883C4-         cdecl puts, .s2
   200 00000884 02                 
   201                                      
   202 00000885 BB0000                      mov bx, 0
   203                                  .10L: 
   204 00000888 B400                        mov ah, 0x00    ; キー入力
   205 0000088A CD16                        int 0x16        ; al = keyinput()
   206                                  
   207                                      ; 1～3以外のキーを押すとループ終了
   208 0000088C 3C31                        cmp al, '1'
   209 0000088E 7266                        jb .10E
   210                                  
   211 00000890 3C33                        cmp al, '3'
   212 00000892 7762                        ja .10E
   213                                  
   214                                      ; 0x31～0x33を 0～2に変換
   215 00000894 88C1                        mov cl, al
   216 00000896 FEC9                        dec cl
   217 00000898 80E103                      and cl, 0x03
   218 0000089B B80100                      mov ax, 0x0001  ; マスクを0～2ビットシフト
   219 0000089E D3E0                        shl ax, cl
   220 000008A0 31C3                        xor bx, ax      ; 押されたらLEDの状態を反転
   221                                  
   222                                      ; LEDコマンドの送信
   223 000008A2 FA                          cli             ; 割込み禁止
   224                                  
   225 000008A3 68AD00E86BFD83C402          cdecl KBC_Cmd_Write, 0xAD   ; キーボード無効化
   226                                  
   227 000008AC 68ED00E81EFD83C402          cdecl KBC_Data_Write, 0xED  ; LEDコマンド
   228 000008B5 68[4A09]E833FD83C4-         cdecl KBC_Data_Read, .key   ; Ack受信
   228 000008BD 02                 
   229                                  
   230 000008BE 803E[4A09]FA                cmp [.key], byte 0xFA       ; Ack受け取れなかったらgoto .11F
   231 000008C3 7509                        jne .11F
   232                                  
   233 000008C5 53E807FD83C402              cdecl KBC_Data_Write, bx    ; 受け取れたらLEDデータ出力
   234 000008CC EB1C                        jmp .11E
   235                                  .11F:   ; Ack失敗
   236 000008CE 6A046A106A0268-             cdecl itoa, word [.key], .e1, 2, 16, 0b0100
   236 000008D5 [4609]FF36[4A09]E8-
   236 000008DC 2EF983C40A         
   237 000008E1 68[4509]E8D9F783C4-         cdecl puts, .e0
   237 000008E9 02                 
   238                                  .11E:   ; Ack成功
   239 000008EA 68AE00E824FD83C402          cdecl KBC_Cmd_Write, 0xAE   ; キーボード有効化
   240                                  
   241 000008F3 FB                          sti             ; 割り込み許可
   242                                  
   243 000008F4 EB92                        jmp .10L
   244                                  .10E:
   245 000008F6 68[3B09]E8C4F783C4-         cdecl puts, .s3
   245 000008FE 02                 
   246                                  
   247                                      ; 次のステージへ移行
   248 000008FF EB4B                        jmp stage_5
   249                                  
   250                                  
   251 00000901 347468207374616765-     .s0: db "4th stage...", 0x0A, 0x0D, 0
   251 0000090A 2E2E2E0A0D00       
   252 00000910 204132302047617465-     .s1: db " A20 Gate Enabled.", 0x0A, 0x0D, 0
   252 00000919 20456E61626C65642E-
   252 00000922 0A0D00             
   253 00000925 204B6579626F617264-     .s2: db " Keyboard LED Test...", 0
   253 0000092E 204C45442054657374-
   253 00000937 2E2E2E00           
   254 0000093B 2028646F6E65290A0D-     .s3: db " (done)", 0x0A, 0x0D, 0
   254 00000944 00                 
   255 00000945 5B                      .e0: db "["
   256 00000946 5A5A5D00                .e1: db "ZZ]", 0
   257                                  
   258 0000094A 0000                    .key: dw 0
   259                                  
   260                                  
   261                                  ; ブート処理の第５ステージ
   262                                  stage_5:
   263 0000094C 68[7809]E86EF783C4-         cdecl puts, .s0
   263 00000954 02                 
   264                                  
   265                                      ; カーネルを読み込む
   266 00000955 68009C6A106A1068-           cdecl read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   266 0000095D [B800]E8D0FC83C408 
   267 00000965 83F810                      cmp ax, KERNEL_SECT     
   268                                  .10Q:
   269 00000968 740C                        jz .10E                 ; if(読み込みセクタ数 == 読み込んだセクタ数) goto .10E
   270                                  .10T:
   271 0000096A 68[8709]E850F783C4-         cdecl puts, .e0
   271 00000972 02                 
   272 00000973 E869F7                      call reboot
   273                                  .10E:
   274                                      ; 次のステージへ
   275 00000976 EB29                        jmp stage_6
   276                                  
   277 00000978 357468207374616765-     .s0: db "5th stage...", 0x0A, 0x0D, 0
   277 00000981 2E2E2E0A0D00       
   278 00000987 204661696C75726520-     .e0: db " Failure load kernel...", 0x0A, 0x0D, 0
   278 00000990 6C6F6164206B65726E-
   278 00000999 656C2E2E2E0A0D00   
   279                                  
   280                                  ; ブート処理の第６ステージ
   281                                  stage_6:
   282 000009A1 68[B909]E819F783C4-         cdecl puts, .s0
   282 000009A9 02                 
   283                                  
   284                                      ; ユーザーからの入力待ち
   285                                  .10L:
   286 000009AA B400                        mov ah, 0x00        ; キー入力待ち
   287 000009AC CD16                        int 0x16
   288 000009AE 3C20                        cmp al, ' '         ; if(input != ' ') goto .10L
   289 000009B0 75F8                        jne .10L
   290                                  
   291                                      ; ビデオモードの設定
   292 000009B2 B81200                      mov ax, 0x0012
   293 000009B5 CD10                        int 0x10
   294                                  
   295                                      ; 次のステージへ
   296 000009B7 EB5B                        jmp stage_7
   297                                  
   298 000009B9 367468207374616765-     .s0: db "6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   298 000009C2 2E2E2E0A0D0A0D     
   299 000009C9 205B50757368205350-          db " [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0
   299 000009D2 414345206B65792074-
   299 000009DB 6F2070726F74656374-
   299 000009E4 206D6F64652E2E2E5D-
   299 000009ED 0A0D00             
   300                                  
   301                                  
   302                                  ; GLOBAL DESCRIPTOR TABLE
   303                                  ; セグメントディスクリプタの配列
   304                                  ALIGN 4, db 0
   305 000009F0 0000000000000000        GDT: dq 0x00_0_0_0_0_000000_0000   ; NULL
   306 000009F8 FFFF0000009ACF00        .cs: dq 0x00_C_F_9_A_000000_FFFF   ; CODE 4G
   307 00000A00 FFFF00000092CF00        .ds: dq 0x00_C_F_9_2_000000_FFFF   ; DATA 4G
   308                                  .gdt_end:
   309                                  
   310                                  ; セレクタ
   311                                  SEL_CODE equ .cs - GDT       ; コード用セレクタ
   312                                  SEL_DATA equ .ds - GDT       ; データ用セレクタ
   313                                  
   314                                  ; GDT(Global Descriptor Table)
   315 00000A08 1700                    GDTR: dw GDT.gdt_end - GDT - 1  ; ディスクリプタテーブルのリミット
   316 00000A0A [F0090000]                    dd GDT                    ; ディスクリプタテーブルのアドレス
   317                                  
   318                                  ; IDT(Interrupt Descriptor Table) 割込み禁止のため
   319 00000A0E 0000                    IDTR: dw 0          ; IDTリミット
   320 00000A10 00000000                      dd 0          ; IDTアドレス
   321                                  
   322                                  
   323                                  ; ブート処理の第７ステージ
   324                                  stage_7:
   325 00000A14 FA                          cli
   326                                  
   327                                      ; ディスクリプタテーブルをロード
   328 00000A15 0F0116[080A]                lgdt [GDTR]                 ; gdtレジスタにグローバルディスクリプタテーブルをロード
   329 00000A1A 0F011E[0E0A]                lidt [IDTR]                 ; ldtレジスタに割り込みディスクリプタテーブルをロード
   330                                  
   331                                      ; プロテクトモードに移行
   332 00000A1F 0F20C0                      mov eax, cr0
   333 00000A22 83C801                      or ax, 1                     ; cr0レジスタのpe(protect enable)をセット
   334 00000A25 0F22C0                      mov cr0, eax
   335                                  
   336                                      ; プロテクトモードに移行したのでパイプラインの命令は破棄したい
   337 00000A28 EB00                        jmp $ + 2                   ; パイプラインのクリア
   338                                  
   339                                      ; セグメント間ジャンプ
   340                                  [BITS 32]                       ; これ移行32ビットコードを生成
   341 00000A2A 66                          DB 0x66                     ; セグメントサイズオーバーライドプレフィックス！！！（かっこいい）
   342 00000A2B EA[320A0000]0800            jmp SEL_CODE:CODE_32
   343                                  
   344                                  
   345                                  ; 32ビットコード開始
   346                                  CODE_32:        
   347                                      ; セレクタを初期化
   348                                      ; 各種セグメントレジスタにデータセグメントディスクリプタのオフセットを設定
   349 00000A32 66B81000                    mov ax, SEL_DATA
   350 00000A36 8ED8                        mov ds, ax
   351 00000A38 8EC0                        mov es, ax
   352 00000A3A 8EE0                        mov fs, ax
   353 00000A3C 8EE8                        mov gs, ax
   354 00000A3E 8ED0                        mov ss, ax
   355                                  
   356                                      ; カーネル部をコピー
   357 00000A40 B900080000                  mov ecx, (KERNEL_SIZE) / 4      ; 4バイトずつコピー
   358 00000A45 BE009C0000                  mov esi, BOOT_END               ; カーネル部の先頭アドレス(0x0000_9C00)
   359 00000A4A BF00101000                  mov edi, KERNEL_LOAD            ; カーネルのロード位置(0x0010_1000)
   360 00000A4F FC                          cld                             ; DFクリア（＋方向）
   361 00000A50 F3A5                        rep movsd                       ; while(--ecx) *edi++ = *esi++;
   362                                  
   363                                      ; カーネル処理に移行
   364 00000A52 E9(00101000)                jmp KERNEL_LOAD                 ; カーネルの先頭にジャンプ
   365                                  
   366                                  ; パディング(このファイルは8kBとする）
   367 00000A57 00<rep 15A9h>               times BOOT_SIZE - ($ - $$) db 0 ; 8kB

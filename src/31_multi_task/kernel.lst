     1                                  %include "../include/define.s"
     2                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     3                              <1> 
     4                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     5                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     6                              <1> 
     7                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
     8                              <1> 
     9                              <1>     E820_RECORD_SIZE equ 20
    10                              <1> 
    11                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    12                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    13                              <1> 
    14                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    15                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    16                              <1> 
    17                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    18                              <1> 
    19                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    20                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    21                              <1> 
    22                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    23                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
     2                                  %include "../include/macro.s"
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
    25                              <1> 
    26                              <1> %macro set_vect 1-*
    27                              <1>         push eax
    28                              <1>         push edi
    29                              <1> 
    30                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    31                              <1>         mov eax, %2
    32                              <1> 
    33                              <1>     %if 3 == %0
    34                              <1>         mov [edi + 4], %3               ; フラグ
    35                              <1>     %endif
    36                              <1> 
    37                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    38                              <1>         shr eax, 16
    39                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    40                              <1> 
    41                              <1>         pop edi
    42                              <1>         pop eax
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro outp 2
    46                              <1>     mov al, %2
    47                              <1>     out %1, al
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %define RING_ITEM_SIZE (1 << 4)
    51                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    52                              <1> 
    53                              <1> struc ring_buff
    54 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    55 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    56 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    57                              <1> endstruc
    58                              <1> 
    59                              <1> %macro set_desc 2-*
    60                              <1>         push eax
    61                              <1>         push edi
    62                              <1> 
    63                              <1>         mov edi, %1     ; ディスクリプタアドレス
    64                              <1>         mov eax, %2     ; ベースアドレス
    65                              <1> 
    66                              <1>     %if 3 == %0
    67                              <1>         mov [edi + 0], %3   ; リミット
    68                              <1>     %endif
    69                              <1> 
    70                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    71                              <1>         shr eax, 16
    72                              <1>         mov [edi + 4], al   ; ベース([23:16])
    73                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    74                              <1> 
    75                              <1>         pop edi
    76                              <1>         pop eax
    77                              <1> %endmacro
     3                                  
     4                                      ORG KERNEL_LOAD
     5                                  
     6                                  [BITS 32]   ; 32bitコードを生成
     7                                  
     8                                  ; エントリポイント
     9                                  kernel:
    10                                      ; フォントアドレスを取得
    11 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    12 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    13 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    14 0000000C C1E004                      shl eax, 4
    15 0000000F 01D8                        add eax, ebx
    16 00000011 A3[80010000]                mov [FONT_ADR], eax
    17                                  
    18                                      ; TSSディスクリプタの設定
    19                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    60 00000016 50                  <1>  push eax
    61 00000017 57                  <1>  push edi
    62                              <1> 
    63 00000018 BF[D0010000]        <1>  mov edi, %1
    64 0000001D B8[E6010000]        <1>  mov eax, %2
    65                              <1> 
    66                              <1>  %if 3 == %0
    67                              <1>  mov [edi + 0], %3
    68                              <1>  %endif
    69                              <1> 
    70 00000022 66894702            <1>  mov [edi + 2], ax
    71 00000026 C1E810              <1>  shr eax, 16
    72 00000029 884704              <1>  mov [edi + 4], al
    73 0000002C 886707              <1>  mov [edi + 7], ah
    74                              <1> 
    75 0000002F 5F                  <1>  pop edi
    76 00000030 58                  <1>  pop eax
    20                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    60 00000031 50                  <1>  push eax
    61 00000032 57                  <1>  push edi
    62                              <1> 
    63 00000033 BF[D8010000]        <1>  mov edi, %1
    64 00000038 B8[4E020000]        <1>  mov eax, %2
    65                              <1> 
    66                              <1>  %if 3 == %0
    67                              <1>  mov [edi + 0], %3
    68                              <1>  %endif
    69                              <1> 
    70 0000003D 66894702            <1>  mov [edi + 2], ax
    71 00000041 C1E810              <1>  shr eax, 16
    72 00000044 884704              <1>  mov [edi + 4], al
    73 00000047 886707              <1>  mov [edi + 7], ah
    74                              <1> 
    75 0000004A 5F                  <1>  pop edi
    76 0000004B 58                  <1>  pop eax
    21                                  
    22                                      ; LDTの設定
    23                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    60 0000004C 50                  <1>  push eax
    61 0000004D 57                  <1>  push edi
    62                              <1> 
    63 0000004E BF[C8010000]        <1>  mov edi, %1
    64 00000053 B8[88010000]        <1>  mov eax, %2
    65                              <1> 
    66                              <1>  %if 3 == %0
    67 00000058 66C7072700          <1>  mov [edi + 0], %3
    68                              <1>  %endif
    69                              <1> 
    70 0000005D 66894702            <1>  mov [edi + 2], ax
    71 00000061 C1E810              <1>  shr eax, 16
    72 00000064 884704              <1>  mov [edi + 4], al
    73 00000067 886707              <1>  mov [edi + 7], ah
    74                              <1> 
    75 0000006A 5F                  <1>  pop edi
    76 0000006B 58                  <1>  pop eax
    24                                  
    25                                      ; GDTをロード(再設定)
    26 0000006C 0F0115[E0010000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    27                                  
    28                                      ; スタックの設定
    29 00000073 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    30                                  
    31                                      ; タスクレジスタの初期化
    32 00000078 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    33 0000007C 0F00D8                      ltr ax              ; タスクレジスタの設定
    34                                  
    35                                      ; 初期化
    36 0000007F E886090000                  cdecl init_int                  ; 割り込みベクタの初期化
    37 00000084 E8D0090000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    38                                  
    39                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    27 00000089 50                  <1>  push eax
    28 0000008A 57                  <1>  push edi
    29                              <1> 
    30 0000008B BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 00000090 B8[3B0A0000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 00000095 668907              <1>  mov [edi + 0], ax
    38 00000098 C1E810              <1>  shr eax, 16
    39 0000009B 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 0000009F 5F                  <1>  pop edi
    42 000000A0 58                  <1>  pop eax
    40                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    27 000000A1 50                  <1>  push eax
    28 000000A2 57                  <1>  push edi
    29                              <1> 
    30 000000A3 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 000000A8 B8[B6020000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 000000AD 668907              <1>  mov [edi + 0], ax
    38 000000B0 C1E810              <1>  shr eax, 16
    39 000000B3 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 000000B7 5F                  <1>  pop edi
    42 000000B8 58                  <1>  pop eax
    41                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    27 000000B9 50                  <1>  push eax
    28 000000BA 57                  <1>  push edi
    29                              <1> 
    30 000000BB BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 000000C0 B8[C10A0000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 000000C5 668907              <1>  mov [edi + 0], ax
    38 000000C8 C1E810              <1>  shr eax, 16
    39 000000CB 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 000000CF 5F                  <1>  pop edi
    42 000000D0 58                  <1>  pop eax
    42                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    27 000000D1 50                  <1>  push eax
    28 000000D2 57                  <1>  push edi
    29                              <1> 
    30 000000D3 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 000000D8 B8[840A0000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 000000DD 668907              <1>  mov [edi + 0], ax
    38 000000E0 C1E810              <1>  shr eax, 16
    39 000000E3 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 000000E7 5F                  <1>  pop edi
    42 000000E8 58                  <1>  pop eax
    43                                  
    44                                      ; デバイスの割り込み許可
    45 000000E9 6A10E8BD0900006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    45 000000F2 C404               
    46                                  
    47                                      ; IMR（割り込みマスクレジスタ）の設定
    48                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    46 000000F4 B0F8                <1>  mov al, %2
    47 000000F6 E621                <1>  out %1, al
    49                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    46 000000F8 B0FE                <1>  mov al, %2
    47 000000FA E6A1                <1>  out %1, al
    50                                  
    51 000000FC FB                          sti                             ; 割り込み許可
    52                                  
    53 000000FD 6A0D6A3FE8A5030000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    53 00000106 6683C408           
    54 0000010A 6A046A3FE824040000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    54 00000113 6683C408           
    55 00000117 68[68010000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    55 0000011F 00006A0E6A19E8C403-
    55 00000128 00006683C410       
    56                                  
    57                                  
    58                                      ; タスクの呼び出し
    59                                      ;call SS_TASK_1:0
    60                                  
    61                                  
    62                                  .10L:
    63                                      ; タスクの呼び出し
    64 0000012E EA000000002800              jmp SS_TASK_1:0
    65                                  
    66                                      ; 回転する棒の表示
    67 00000135 E89D0A0000                  cdecl draw_rotation_bar
    68                                  
    69                                      ; キーコードの取得
    70 0000013A 68[7C010000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    70 00000140 [E80A0000]E8B70900-
    70 00000148 006683C408         
    71 0000014D 83F800                      cmp eax, 0
    72 00000150 7414                        je .10E
    73                                  
    74                                      ; キーコードの表示
    75 00000152 68[E80A0000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    75 0000015A 02E8050A00006683C4-
    75 00000163 0C                 
    76                                  
    77 00000164 EBC8                        jmp .10L
    78                                  .10E:
    79                                  
    80                                  
    81                                      ; 処理の終了
    82 00000166 EBFE                        jmp $
    83                                  
    84 00000168 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    84 00000171 65726E656C212000   
    85                                  
    86 00000179 00<rep 3h>              ALIGN 4, db 0
    87 0000017C 00000000                .int_key: dd 0
    88                                  
    89                                  ALIGN 4, db 0
    90 00000180 00000000                FONT_ADR: dd 0
    91 00000184 00000000                RTC_TIME: dd 0
    92                                  
    93                                  ; タスク
    94                                  %include "descriptor.s"
    95                              <1> ; ローカルディスクリプタテーブル
    96 00000188 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
    97 00000190 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
    98 00000198 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
    99 000001A0 FFFF0000009ACF00    <1> .cs_task_1: dq 0x00CF9A000000FFFF   ; CODE 4G
   100 000001A8 FFFF00000092CF00    <1> .ds_task_1: dq 0x00CF92000000FFFF   ; DATA 4G
   101                              <1> .end:
   102                              <1> 
   103                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   104                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   105                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4    ; タスク1用CSセレクタ
   106                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4    ; タスク1用DSセレクタ
   107                              <1> 
   108                              <1> LDT_LIMIT equ .end        - LDT - 1
   109                              <1> 
   110                              <1> ; グローバルディスクリプタテーブル
   111 000001B0 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   112 000001B8 FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   113 000001C0 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   114 000001C8 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   115 000001D0 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   116 000001D8 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   117                              <1> .end:
   118                              <1> 
   119                              <1> CS_KERNEL equ .cs_kernel - GDT
   120                              <1> DS_KERNEL equ .ds_kernel - GDT
   121                              <1> SS_LDT    equ .ldt       - GDT
   122                              <1> SS_TASK_0 equ .tss_0     - GDT
   123                              <1> SS_TASK_1 equ .tss_1     - GDT
   124                              <1> 
   125 000001E0 2F00                <1> GDTR: dw GDT.end - GDT - 1
   126 000001E2 [B0010000]          <1>       dd GDT
   127                              <1> 
   128                              <1> ; TSS
   129                              <1> TSS_0:
   130 000001E6 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   131 000001EA 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   132 000001EE 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   133 000001F2 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   134 000001F6 00000000            <1> .ss1:       dd 0                    ;* 16:
   135 000001FA 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   136 000001FE 00000000            <1> .ss2:       dd 0                    ;* 24:
   137 00000202 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   138 00000206 00000000            <1> .eip:       dd 0                    ;  32:EIP
   139 0000020A 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   140 0000020E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   141 00000212 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   142 00000216 00000000            <1> .edx:       dd 0                    ;  48:EDX
   143 0000021A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   144 0000021E 00000000            <1> .esp:       dd 0                    ;  56:ESP
   145 00000222 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   146 00000226 00000000            <1> .esi:       dd 0                    ;  64:ESI
   147 0000022A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   148 0000022E 00000000            <1> .es:        dd 0                    ;  72:ES
   149 00000232 00000000            <1> .cs:        dd 0                    ;  76:CS
   150 00000236 00000000            <1> .ss:        dd 0                    ;  80:SS
   151 0000023A 00000000            <1> .ds:        dd 0                    ;  84:DS
   152 0000023E 00000000            <1> .fs:        dd 0                    ;  88:FS
   153 00000242 00000000            <1> .gs:        dd 0                    ;  92:GS
   154 00000246 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   155 0000024A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   156                              <1> 
   157                              <1> TSS_1:
   158 0000024E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   159 00000252 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   160 00000256 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   161 0000025A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   162 0000025E 00000000            <1> .ss1:       dd 0                    ;* 16:
   163 00000262 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   164 00000266 00000000            <1> .ss2:       dd 0                    ;* 24:
   165 0000026A 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   166 0000026E [F4020000]          <1> .eip:       dd task_1               ;  32:EIP
   167 00000272 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   168 00000276 00000000            <1> .eax:       dd 0                    ;  40:EAX
   169 0000027A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   170 0000027E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   171 00000282 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   172 00000286 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   173 0000028A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   174 0000028E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   175 00000292 00000000            <1> .edi:       dd 0                    ;  68:EDI
   176 00000296 24000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   177 0000029A 1C000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   178 0000029E 24000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   179 000002A2 24000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   180 000002A6 24000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   181 000002AA 24000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   182 000002AE 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   183 000002B2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
    95                                  %include "modules/int_timer.s"
    96                              <1> int_timer:
    97 000002B6 60                  <1>     pushad
    98 000002B7 1E                  <1>     push ds
    99 000002B8 06                  <1>     push es
   100                              <1> 
   101                              <1>     ; データ用セグメントの設定
   102 000002B9 66B81000            <1>     mov ax, 0x0010
   103 000002BD 8ED8                <1>     mov ds, ax
   104 000002BF 8EC0                <1>     mov es, ax
   105                              <1> 
   106                              <1>     ; TICK
   107 000002C1 FF05[EC020000]      <1>     inc dword [TIMER_COUNT]
   108                              <1> 
   109                              <1>     ; 割り込みフラグをクリア(EOI)
   110                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    46 000002C7 B020                <2>  mov al, %2
    47 000002C9 E620                <2>  out %1, al
   111                              <1> 
   112                              <1>     ; タスクの切り替え
   113 000002CB 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   114 000002CF 6683F828            <1>     cmp ax, SS_TASK_1   ; switch(ax)
   115 000002D3 7409                <1>     je .11L
   116                              <1> 
   117 000002D5 EA000000002800      <1>     jmp SS_TASK_1:0     ; default:
   118 000002DC EB09                <1>     jmp .10E
   119                              <1> .11L:                   ; case SS_TASK_1:
   120 000002DE EA000000002000      <1>     jmp SS_TASK_0:0
   121 000002E5 EB00                <1>     jmp .10E
   122                              <1> .10E:
   123                              <1> 
   124 000002E7 07                  <1>     pop es
   125 000002E8 1F                  <1>     pop ds
   126 000002E9 61                  <1>     popad
   127                              <1> 
   128 000002EA CF                  <1>     iret
   129                              <1> 
   130 000002EB 00                  <1> ALIGN 4, db 0
   131 000002EC 0000000000000000    <1> TIMER_COUNT: dq 0
   132                              <1> 
    96                                  %include "tasks/task_1.s"
    97                              <1> task_1:
    98                              <1>     ; 文字列の表示
    99 000002F4 68[29030000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0
    99 000002FC 006A3FE8EA01000066- <1>
    99 00000305 83C410              <1>
   100                              <1> 
   101                              <1> .10L:
   102                              <1>     ; 時刻の表示
   103 00000308 A1[84010000]        <1>     mov eax, [RTC_TIME]
   104 0000030D 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   104 00000316 48E83B0500006683C4- <1>
   104 0000031F 10                  <1>
   105                              <1> 
   106                              <1>     ; タスク呼び出し
   107 00000320 EA000000002000      <1>     jmp SS_TASK_0:0
   108                              <1> 
   109 00000327 EBDF                <1>     jmp .10L
   110                              <1> 
   111                              <1>     ; データ
   112 00000329 5461736B2D3100      <1> .s0 db "Task-1", 0
    97                                  
    98                                  ; モジュール
    99                                  %include "../modules/protect/vga.s"
   100                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   101                              <1> ; plane: 読み込みプレーン
   102 00000330 55                  <1>     push ebp
   103 00000331 89E5                <1>     mov ebp, esp
   104                              <1> 
   105 00000333 6650                <1>     push ax
   106 00000335 6652                <1>     push dx
   107                              <1> 
   108                              <1> 
   109                              <1>     ; 読み込みプレーンの選択
   110 00000337 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   111 0000033A 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   112 0000033D B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   113 0000033F 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   114 00000343 66EF                <1>     out dx, ax
   115                              <1> 
   116 00000345 665A                <1>     pop dx
   117 00000347 6658                <1>     pop ax
   118                              <1> 
   119 00000349 89EC                <1>     mov esp, ebp
   120 0000034B 5D                  <1>     pop ebp
   121                              <1> 
   122 0000034C C3                  <1>     ret
   123                              <1> 
   124                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   125                              <1> ; plane 書き込みプレーン
   126 0000034D 55                  <1>     push ebp
   127 0000034E 89E5                <1>     mov ebp, esp
   128                              <1> 
   129 00000350 6650                <1>     push ax
   130 00000352 6652                <1>     push dx
   131                              <1> 
   132                              <1> 
   133                              <1>     ; 書き込みプレーンの選択
   134 00000354 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   135 00000357 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   136 0000035A B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   137 0000035C 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   138 00000360 66EF                <1>     out dx, ax
   139                              <1> 
   140                              <1> 
   141 00000362 665A                <1>     pop dx
   142 00000364 6658                <1>     pop ax
   143                              <1> 
   144 00000366 89EC                <1>     mov esp, ebp
   145 00000368 5D                  <1>     pop ebp
   146                              <1> 
   147 00000369 C3                  <1>     ret
   148                              <1> 
   149                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   150                              <1> ; font FONTアドレス
   151                              <1> ; vram VRAMアドレス
   152                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   153                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   154 0000036A 55                  <1>     push ebp
   155 0000036B 89E5                <1>     mov ebp, esp
   156                              <1>     
   157 0000036D 50                  <1>     push eax
   158 0000036E 53                  <1>     push ebx
   159 0000036F 51                  <1>     push ecx
   160 00000370 52                  <1>     push edx
   161 00000371 57                  <1>     push edi
   162 00000372 56                  <1>     push esi
   163                              <1> 
   164 00000373 8B7508              <1>     mov esi, [ebp + 8]          ; font
   165 00000376 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   166 00000379 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   167 0000037D 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   168                              <1>     ; bh = 背景色 bl = 前景色
   169                              <1> 
   170 00000381 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   171 00000383 0F94C6              <1>     setz dh         ; dh = zf
   172 00000386 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   173                              <1> 
   174 00000388 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   175 0000038A 0F94C2              <1>     setz dl         ; dl = zf
   176 0000038D FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   177                              <1> 
   178                              <1>     ; 16ドットフォントのコピー
   179 0000038F FC                  <1>     cld             ; アドレス加算モード
   180                              <1> 
   181 00000390 B910000000          <1>     mov ecx, 16
   182                              <1> .10L:
   183                              <1>     ; フォントマスクの作成
   184 00000395 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   185 00000396 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   186 00000398 F6D4                <1>     not ah
   187                              <1> 
   188                              <1>     ; 前景色
   189 0000039A 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   190                              <1> 
   191                              <1>     ; 背景色
   192 0000039C F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   193 000003A2 7404                <1>     jz .11F
   194                              <1>     ; 透過on
   195 000003A4 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   196 000003A6 EB02                <1>     jmp .11E
   197                              <1> .11F:                   ; 透過off
   198 000003A8 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   199                              <1> .11E:
   200                              <1>     
   201                              <1>     ; 前景色と背景色を合成
   202 000003AA 08E0                <1>     or al, ah           ; al = 背景 | 前景
   203                              <1> 
   204                              <1>     ; 新しい値を出力
   205 000003AC 8807                <1>     mov [edi], al
   206                              <1> 
   207 000003AE 83C750              <1>     add edi, 80      ; 1行すすめる
   208 000003B1 E2E2                <1>     loop .10L
   209                              <1> .10E:
   210                              <1> 
   211 000003B3 5E                  <1>     pop esi
   212 000003B4 5F                  <1>     pop edi
   213 000003B5 5A                  <1>     pop edx
   214 000003B6 59                  <1>     pop ecx
   215 000003B7 5B                  <1>     pop ebx
   216 000003B8 58                  <1>     pop eax
   217                              <1> 
   218 000003B9 89EC                <1>     mov esp, ebp
   219 000003BB 5D                  <1>     pop ebp
   220                              <1> 
   221 000003BC C3                  <1>     ret
   222                              <1> 
   223                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   224                              <1> ; bitデータ
   225                              <1> ; vram VRAMアドレス
   226                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   227                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   228 000003BD 55                  <1>     push ebp
   229 000003BE 89E5                <1>     mov ebp, esp
   230                              <1>     
   231 000003C0 50                  <1>     push eax
   232 000003C1 53                  <1>     push ebx
   233 000003C2 52                  <1>     push edx
   234 000003C3 57                  <1>     push edi
   235                              <1> 
   236 000003C4 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   237 000003C7 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   238 000003CB 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   239                              <1>     ; bl = 前景色
   240                              <1> 
   241                              <1>     ; 常に透過モード
   242 000003CF 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   243 000003D1 0F94C3              <1>     setz bl         ; dl = zf
   244 000003D4 FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   245                              <1> 
   246                              <1>     ; マスク
   247 000003D6 8A4508              <1>     mov al, [ebp + 8]   ; bit
   248 000003D9 88C4                <1>     mov ah, al      ; ah ~= al
   249 000003DB F6D4                <1>     not ah
   250                              <1> 
   251 000003DD 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   252 000003DF 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   253 000003E1 08E0                <1>     or al, ah           ; 背景と前景を合成
   254 000003E3 8807                <1>     mov [edi], al       ; プレーンに書き込み
   255                              <1>     
   256                              <1> 
   257 000003E5 5F                  <1>     pop edi
   258 000003E6 5A                  <1>     pop edx
   259 000003E7 5B                  <1>     pop ebx
   260 000003E8 58                  <1>     pop eax
   261                              <1> 
   262 000003E9 89EC                <1>     mov esp, ebp
   263 000003EB 5D                  <1>     pop ebp
   264                              <1> 
   265 000003EC C3                  <1>     ret
   100                                  %include "../modules/protect/draw_char.s"
   101                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   102                              <1> ; col 列（0～79）
   103                              <1> ; row 行（0～29）
   104                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   105                              <1> ; ch 文字
   106                              <1> 
   107 000003ED 55                  <1>     push ebp
   108 000003EE 89E5                <1>     mov ebp, esp
   109                              <1> 
   110 000003F0 53                  <1>     push ebx
   111 000003F1 56                  <1>     push esi
   112 000003F2 57                  <1>     push edi
   113                              <1> 
   114                              <1>     ; コピー元フォントアドレスを設定
   115 000003F3 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   116 000003F7 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   117 000003FA 0335[80010000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   118                              <1> 
   119                              <1>     ; コピー先アドレスを取得
   120                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   121                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   122 00000400 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   123 00000403 C1E708              <1>     shl edi, 8
   124 00000406 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   125 0000040D 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   126                              <1> 
   127                              <1>     ; 1文字分のフォントを出力
   128 00000410 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   129                              <1> 
   130                              <1>     ; 輝度I
   131 00000414 6A03E815FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   131 0000041D C404                <1>
   132 0000041F 6A08E827FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   132 00000428 C404                <1>
   133 0000042A 536A085756E836FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   133 00000433 FF6683C410          <1>
   134                              <1> 
   135                              <1>     ; 赤R
   136 00000438 6A02E8F1FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   136 00000441 C404                <1>
   137 00000443 6A04E803FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   137 0000044C C404                <1>
   138 0000044E 536A045756E812FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   138 00000457 FF6683C410          <1>
   139                              <1> 
   140                              <1>     ; 緑G
   141 0000045C 6A01E8CDFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   141 00000465 C404                <1>
   142 00000467 6A02E8DFFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   142 00000470 C404                <1>
   143 00000472 536A025756E8EEFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   143 0000047B FF6683C410          <1>
   144                              <1> 
   145                              <1>     ; 青B
   146 00000480 6A00E8A9FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   146 00000489 C404                <1>
   147 0000048B 6A01E8BBFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   147 00000494 C404                <1>
   148 00000496 536A015756E8CAFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   148 0000049F FF6683C410          <1>
   149                              <1> 
   150 000004A4 5F                  <1>     pop edi
   151 000004A5 5E                  <1>     pop esi
   152 000004A6 5B                  <1>     pop ebx
   153                              <1> 
   154 000004A7 89EC                <1>     mov esp, ebp
   155 000004A9 5D                  <1>     pop ebp
   156                              <1> 
   157 000004AA C3                  <1>     ret
   101                                  %include "../modules/protect/draw_font.s"
   102                              <1> draw_font:  ; void draw_font(col, row);
   103                              <1> ; col 列
   104                              <1> ; row 行
   105 000004AB 55                  <1>     push ebp
   106 000004AC 89E5                <1>     mov ebp, esp
   107                              <1> 
   108 000004AE 50                  <1>     push eax
   109 000004AF 53                  <1>     push ebx
   110 000004B0 51                  <1>     push ecx
   111 000004B1 57                  <1>     push edi
   112 000004B2 56                  <1>     push esi
   113                              <1> 
   114                              <1> 
   115 000004B3 8B7508              <1>     mov esi, [ebp + 8]  ; x
   116 000004B6 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   117                              <1> 
   118 000004B9 B900000000          <1>     mov ecx, 0
   119                              <1> .10L:
   120 000004BE 81F900010000        <1>     cmp ecx, 256
   121 000004C4 731F                <1>     jae .10E
   122                              <1> 
   123 000004C6 89C8                <1>     mov eax, ecx
   124 000004C8 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   125 000004CB 01F0                <1>     add eax, esi    ; eax += x
   126                              <1> 
   127 000004CD 89CB                <1>     mov ebx, ecx
   128 000004CF C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   129 000004D2 01FB                <1>     add ebx, edi    ; ebx += y
   130                              <1> 
   131 000004D4 516A075350E80FFFFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   131 000004DD FF6683C410          <1>
   132                              <1> 
   133 000004E2 41                  <1>     inc ecx
   134 000004E3 EBD9                <1>     jmp .10L
   135                              <1> .10E:
   136                              <1> 
   137 000004E5 5E                  <1>     pop esi
   138 000004E6 5F                  <1>     pop edi
   139 000004E7 59                  <1>     pop ecx
   140 000004E8 5B                  <1>     pop ebx
   141 000004E9 58                  <1>     pop eax
   142                              <1> 
   143 000004EA 89EC                <1>     mov esp, ebp
   144 000004EC 5D                  <1>     pop ebp
   145                              <1> 
   146 000004ED C3                  <1>     ret
   102                                  %include "../modules/protect/draw_str.s"
   103                              <1> draw_str:   ;void draw_str(col, row, color, p);
   104                              <1> ; col: 列
   105                              <1> ; row: 行
   106                              <1> ; color: 描画色
   107                              <1> ; p: 文字列のアドレス
   108 000004EE 55                  <1>     push ebp
   109 000004EF 89E5                <1>     mov ebp, esp
   110                              <1> 
   111 000004F1 50                  <1>     push eax
   112 000004F2 53                  <1>     push ebx
   113 000004F3 51                  <1>     push ecx
   114 000004F4 52                  <1>     push edx
   115 000004F5 56                  <1>     push esi
   116                              <1> 
   117                              <1> 
   118 000004F6 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   119 000004F9 8B550C              <1>     mov edx, [ebp +12]  ; row
   120 000004FC 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   121 00000500 8B7514              <1>     mov esi, [ebp +20]  ; p
   122                              <1> 
   123 00000503 FC                  <1>     cld
   124                              <1> .10L:
   125 00000504 AC                  <1>     lodsb
   126 00000505 3C00                <1>     cmp al, 0
   127 00000507 7425                <1>     je .10E
   128                              <1> 
   129 00000509 50535251E8DBFEFFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   129 00000512 6683C410            <1>
   130                              <1> 
   131 00000516 41                  <1>     inc ecx
   132 00000517 83F950              <1>     cmp ecx, 80
   133 0000051A 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   134 0000051C B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   135 00000521 42                  <1>     inc edx
   136 00000522 83FA1E              <1>     cmp edx, 30
   137 00000525 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   138 00000527 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   139                              <1> .12E:
   140 0000052C EBD6                <1>     jmp .10L
   141                              <1> .10E:
   142                              <1> 
   143 0000052E 5E                  <1>     pop esi
   144 0000052F 5A                  <1>     pop edx
   145 00000530 59                  <1>     pop ecx
   146 00000531 5B                  <1>     pop ebx
   147 00000532 58                  <1>     pop eax
   148                              <1> 
   149 00000533 89EC                <1>     mov esp, ebp
   150 00000535 5D                  <1>     pop ebp
   151                              <1> 
   152 00000536 C3                  <1>     ret
   103                                  %include "../modules/protect/draw_color_bar.s"
   104                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   105                              <1> ; col: 列
   106                              <1> ; row: 行
   107 00000537 55                  <1>     push ebp
   108 00000538 89E5                <1>     mov ebp, esp
   109                              <1> 
   110 0000053A 50                  <1>     push eax
   111 0000053B 53                  <1>     push ebx
   112 0000053C 51                  <1>     push ecx
   113 0000053D 52                  <1>     push edx
   114 0000053E 56                  <1>     push esi
   115 0000053F 57                  <1>     push edi
   116                              <1> 
   117                              <1> 
   118 00000540 8B7508              <1>     mov esi, [ebp + 8]      ; x
   119 00000543 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   120                              <1> 
   121                              <1>     ; カラーバーを表示
   122 00000546 B900000000          <1>     mov ecx, 0
   123                              <1> .10L:
   124 0000054B 83F910              <1>     cmp ecx, 16
   125 0000054E 732E                <1>     jae .10E
   126                              <1> 
   127                              <1>     ; 一回で8文字
   128 00000550 89C8                <1>     mov eax, ecx
   129 00000552 83E001              <1>     and eax, 0x01
   130 00000555 C1E003              <1>     shl eax, 3
   131 00000558 01F0                <1>     add eax, esi    ; col
   132                              <1> 
   133                              <1>     ; 2回に1回改行
   134 0000055A 89CB                <1>     mov ebx, ecx
   135 0000055C D1EB                <1>     shr ebx, 1
   136 0000055E 01FB                <1>     add ebx, edi    ; row
   137                              <1> 
   138                              <1>     ; 背景色を2色見たら下位次の行
   139 00000560 89CA                <1>     mov edx, ecx
   140 00000562 D1E2                <1>     shl edx, 1
   141 00000564 8B92[91050000]      <1>     mov edx, [.t0 + edx]    ; color
   142                              <1> 
   143 0000056A 68[88050000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   143 00000572 E877FFFFFF6683C410  <1>
   144                              <1> 
   145 0000057B 41                  <1>     inc ecx
   146 0000057C EBCD                <1>     jmp .10L
   147                              <1> .10E:
   148                              <1> 
   149 0000057E 5F                  <1>     pop edi
   150 0000057F 5E                  <1>     pop esi
   151 00000580 5A                  <1>     pop edx
   152 00000581 59                  <1>     pop ecx
   153 00000582 5B                  <1>     pop ebx
   154 00000583 58                  <1>     pop eax
   155                              <1> 
   156 00000584 89EC                <1>     mov esp, ebp
   157 00000586 5D                  <1>     pop ebp
   158                              <1> 
   159 00000587 C3                  <1>     ret
   160                              <1> 
   161                              <1> 
   162 00000588 202020202020202000  <1> .s0: db '        ', 0
   163                              <1> 
   164                              <1> .t0:
   165 00000591 00000008            <1>     dw 0x0000, 0x0800
   166 00000595 00010009            <1>     dw 0x0100, 0x0900
   167 00000599 0002000A            <1>     dw 0x0200, 0x0A00
   168 0000059D 0003000B            <1>     dw 0x0300, 0x0B00
   169 000005A1 0004000C            <1>     dw 0x0400, 0x0C00
   170 000005A5 0005000D            <1>     dw 0x0500, 0x0D00
   171 000005A9 0006000E            <1>     dw 0x0600, 0x0E00
   172 000005AD 0007000F            <1>     dw 0x0700, 0x0F00
   104                                  %include "../modules/protect/draw_pixel.s"
   105                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   106                              <1> ; x: X座標
   107                              <1> ; y: Y座標
   108                              <1> ; color: 描画色
   109 000005B1 55                  <1>     push ebp
   110 000005B2 89E5                <1>     mov ebp, esp
   111                              <1> 
   112 000005B4 50                  <1>     push eax
   113 000005B5 53                  <1>     push ebx
   114 000005B6 51                  <1>     push ecx
   115 000005B7 57                  <1>     push edi
   116                              <1> 
   117                              <1> 
   118                              <1> 
   119                              <1>     ; y座標*80->y*(640/8)
   120 000005B8 8B7D0C              <1>     mov edi, [ebp +12]
   121 000005BB C1E704              <1>     shl edi, 4
   122 000005BE 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   123                              <1> 
   124                              <1>     ; x座標/8  8pixel単位の位置
   125 000005C5 8B5D08              <1>     mov ebx, [ebp + 8]
   126 000005C8 89D9                <1>     mov ecx, ebx
   127 000005CA C1EB03              <1>     shr ebx, 3
   128 000005CD 01DF                <1>     add edi, ebx
   129                              <1> 
   130                              <1>     ; x座標を8で割った余りからビット位置を計算
   131                              <1>     ; 8pixel中の位置
   132                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   133 000005CF 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   134 000005D2 BB80000000          <1>     mov ebx, 0x80
   135 000005D7 D3EB                <1>     shr ebx, cl
   136                              <1> 
   137 000005D9 8B4D10              <1>     mov ecx, [ebp +16]
   138                              <1> 
   139                              <1>     ; プレーンごとに出力
   140 000005DC 6A03E84DFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   140 000005E5 C404                <1>
   141 000005E7 6A08E85FFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   141 000005F0 C404                <1>
   142 000005F2 516A085753E8C1FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   142 000005FB FF6683C410          <1>
   143                              <1> 
   144 00000600 6A02E829FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   144 00000609 C404                <1>
   145 0000060B 6A04E83BFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   145 00000614 C404                <1>
   146 00000616 516A045753E89DFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   146 0000061F FF6683C410          <1>
   147                              <1> 
   148 00000624 6A01E805FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   148 0000062D C404                <1>
   149 0000062F 6A02E817FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   149 00000638 C404                <1>
   150 0000063A 516A025753E879FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   150 00000643 FF6683C410          <1>
   151                              <1> 
   152 00000648 6A00E8E1FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   152 00000651 C404                <1>
   153 00000653 6A01E8F3FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   153 0000065C C404                <1>
   154 0000065E 516A015753E855FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   154 00000667 FF6683C410          <1>
   155                              <1> 
   156 0000066C 5F                  <1>     pop edi
   157 0000066D 59                  <1>     pop ecx
   158 0000066E 5B                  <1>     pop ebx
   159 0000066F 58                  <1>     pop eax
   160                              <1> 
   161 00000670 89EC                <1>     mov esp, ebp
   162 00000672 5D                  <1>     pop ebp
   163                              <1> 
   164 00000673 C3                  <1>     ret
   105                                  %include "../modules/protect/draw_line.s"
   106                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   107                              <1> ; X0 始点のＸ座標
   108                              <1> ; Y0 始点のＹ座標
   109                              <1> ; X1 終点のX座標
   110                              <1> ; Y1 終点のY座標
   111                              <1> ; color 描画色
   112 00000674 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   113 00000675 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   114                              <1>                     ; ----------------
   115 00000677 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   116 00000679 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   117 0000067B 6A00                <1>     push dword 0    ;    -12| dx    = 0
   118 0000067D 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   119 0000067F 6A00                <1>     push dword 0    ;    -20| y0    = 0
   120 00000681 6A00                <1>     push dword 0    ;    -24| dy    = 0
   121 00000683 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   122                              <1> 
   123 00000685 50                  <1>     push eax        ;    -32| eax
   124 00000686 53                  <1>     push ebx        ;    -36| ebx
   125 00000687 51                  <1>     push ecx        ;    -40| ecx
   126 00000688 52                  <1>     push edx        ;    -44| edx
   127 00000689 56                  <1>     push esi        ;    -48| esi
   128 0000068A 57                  <1>     push edi        ;    -52| edi
   129                              <1>     ; espはebp-52?
   130                              <1> 
   131                              <1>     ; x0とx1の距離を計算
   132 0000068B 8B4508              <1>     mov eax, [ebp + 8]
   133 0000068E 8B5D10              <1>     mov ebx, [ebp +16]
   134 00000691 29C3                <1>     sub ebx, eax
   135 00000693 7D09                <1>     jge .10F
   136                              <1> 
   137 00000695 F7DB                <1>     neg ebx
   138 00000697 BEFFFFFFFF          <1>     mov esi, -1
   139 0000069C EB05                <1>     jmp .10E
   140                              <1> .10F:
   141 0000069E BE01000000          <1>     mov esi, 1
   142                              <1> .10E:
   143                              <1>     
   144                              <1>     ; y0とy1の距離を計算
   145 000006A3 8B4D0C              <1>     mov ecx, [ebp +12]
   146 000006A6 8B5514              <1>     mov edx, [ebp +20]
   147 000006A9 29CA                <1>     sub edx, ecx
   148 000006AB 7D09                <1>     jge .20F
   149                              <1> 
   150 000006AD F7DA                <1>     neg edx
   151 000006AF BFFFFFFFFF          <1>     mov edi, -1
   152 000006B4 EB05                <1>     jmp .20E
   153                              <1> .20F:
   154 000006B6 BF01000000          <1>     mov edi, 1
   155                              <1> .20E:
   156                              <1>     
   157                              <1>     ; x軸
   158 000006BB 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   159 000006BE 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   160 000006C1 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   161                              <1> 
   162                              <1>     ; y軸
   163 000006C4 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   164 000006C7 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   165 000006CA 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   166                              <1> 
   167                              <1> 
   168                              <1>     ; 基準軸を決める
   169 000006CD 39D3                <1>     cmp ebx, edx
   170 000006CF 7F08                <1>     jg .22F
   171                              <1>     
   172 000006D1 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   173 000006D4 8D7DF8              <1>     lea edi, [ebp - 8]
   174                              <1> 
   175 000006D7 EB06                <1>     jmp .22E
   176                              <1> .22F:
   177                              <1>     
   178 000006D9 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   179 000006DC 8D7DEC              <1>     lea edi, [ebp -20]
   180                              <1> .22E:
   181                              <1> 
   182                              <1> ; 基準軸 esi
   183                              <1> ; 相対軸 edi
   184                              <1> 
   185                              <1>     ; 繰り返し回数（基準軸のドット数）
   186 000006DF 8B4EFC              <1>     mov ecx, [esi - 4]
   187 000006E2 83F900              <1>     cmp ecx, 0
   188 000006E5 7505                <1>     jnz .30E
   189 000006E7 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   190                              <1> .30E:
   191                              <1> 
   192                              <1>     ; 線を描画
   193                              <1> .50L:
   194                              <1> 
   195 000006EC FF7518FF75ECFF75F8- <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   195 000006F5 E8B7FEFFFF6683C40C  <1>
   198                              <1> 
   199                              <1>     ; 座標更新
   200                              <1> 
   201                              <1>     ; 基準軸の更新
   202 000006FE 8B46F8              <1>     mov eax, [esi - 8]
   203 00000701 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   204                              <1> 
   205                              <1>     ; 相対軸の更新
   206 00000703 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   207 00000706 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   208                              <1> 
   209 00000709 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   210                              <1> 
   211 0000070C 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   212 0000070E 7C07                <1>     jl .52E
   213 00000710 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   214                              <1> 
   215 00000712 8B5FF8              <1>     mov ebx, [edi - 8]
   216 00000715 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   217                              <1> .52E:
   218                              <1>     
   219 00000717 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   220                              <1> 
   221 0000071A E2D0                <1>     loop .50L
   222                              <1> .50E:
   223                              <1> 
   224                              <1> 
   225 0000071C 5F                  <1>     pop edi
   226 0000071D 5E                  <1>     pop esi
   227 0000071E 5A                  <1>     pop edx
   228 0000071F 59                  <1>     pop ecx
   229 00000720 5B                  <1>     pop ebx
   230 00000721 58                  <1>     pop eax
   231                              <1>     ; espはebp-28?
   232                              <1> 
   233                              <1>     ; ↓これいらないの？
   234                              <1>     ; pop (tmp_reg)
   235                              <1>     ; pop (tmp_reg)
   236                              <1>     ; pop (tmp_reg)
   237                              <1>     ; pop (tmp_reg)
   238                              <1>     ; pop (tmp_reg)
   239                              <1>     ; pop (tmp_reg)
   240                              <1>     ; pop (tmp_reg)
   241                              <1>     ; もしくはsub esp, 56とか？
   242                              <1> 
   243                              <1>     ; espはebp?
   244 00000722 89EC                <1>     mov esp, ebp
   245 00000724 5D                  <1>     pop ebp
   246                              <1> 
   247 00000725 C3                  <1>     ret
   106                                  %include "../modules/protect/draw_rect.s"
   107                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   108 00000726 55                  <1>     push ebp
   109 00000727 89E5                <1>     mov ebp, esp
   110                              <1>     
   111 00000729 50                  <1>     push eax
   112 0000072A 53                  <1>     push ebx
   113 0000072B 51                  <1>     push ecx
   114 0000072C 52                  <1>     push edx
   115 0000072D 56                  <1>     push esi
   116                              <1> 
   117 0000072E 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   118 00000731 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   119 00000734 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   120 00000737 8B5514              <1>     mov edx, [ebp +20]  ; y1
   121 0000073A 8B7518              <1>     mov esi, [ebp +24]  ; color
   122                              <1> 
   123                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   124 0000073D 39C8                <1>     cmp eax, ecx
   125 0000073F 7C01                <1>     jl .10E
   126 00000741 91                  <1>     xchg eax, ecx
   127                              <1> .10E:
   128 00000742 39D3                <1>     cmp ebx, edx
   129 00000744 7C02                <1>     jl .20E
   130 00000746 87DA                <1>     xchg ebx, edx
   131                              <1> .20E:
   132                              <1> 
   133                              <1>     ; 矩形を描画
   134 00000748 5653515350E822FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   134 00000751 FF6683C414          <1>
   135 00000756 5652505350E814FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   135 0000075F FF6683C414          <1>
   136                              <1> 
   137 00000764 4A                  <1>     dec edx
   138 00000765 5652515250E805FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   138 0000076E FF6683C414          <1>
   139 00000773 42                  <1>     inc edx
   140                              <1> 
   141 00000774 49                  <1>     dec ecx
   142 00000775 5652515351E8F5FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   142 0000077E FF6683C414          <1>
   143                              <1> 
   144 00000783 5E                  <1>     pop esi
   145 00000784 5A                  <1>     pop edx
   146 00000785 59                  <1>     pop ecx
   147 00000786 5B                  <1>     pop ebx
   148 00000787 58                  <1>     pop eax
   149                              <1>     
   150 00000788 89EC                <1>     mov esp, ebp
   151 0000078A 5D                  <1>     pop ebp
   152                              <1> 
   153 0000078B C3                  <1>     ret
   107                                  %include "../modules/protect/itoa.s"
   108                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   109                              <1> ; num   変換する値
   110                              <1> ; buff  保存先バッファアドレス
   111                              <1> ; size  保存先バッファサイズ
   112                              <1> ; radix 基数（2, 8, 10, 16)
   113                              <1> ; flags 
   114                              <1> ;   B2: 空白を'0'で埋める
   115                              <1> ;   B1: '+/-'記号を付加する
   116                              <1> ;   B0: 値を符号付き変数として扱う
   117                              <1> 
   118 0000078C 55                  <1>     push ebp
   119 0000078D 89E5                <1>     mov ebp, esp
   120                              <1> 
   121 0000078F 50                  <1>     push eax
   122 00000790 53                  <1>     push ebx
   123 00000791 51                  <1>     push ecx
   124 00000792 52                  <1>     push edx
   125 00000793 56                  <1>     push esi
   126 00000794 57                  <1>     push edi
   127                              <1> 
   128                              <1> 
   129                              <1>     ; 引数取得
   130 00000795 8B4508              <1>     mov eax, [ebp + 8]    ; num
   131 00000798 8B750C              <1>     mov esi, [ebp +12]    ; size
   132 0000079B 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   133                              <1> 
   134 0000079E 89F7                <1>     mov edi, esi
   135 000007A0 01CF                <1>     add edi, ecx
   136 000007A2 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   137                              <1> 
   138 000007A3 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   139                              <1> 
   140                              <1>     ; 符号付き判定
   141 000007A6 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   142                              <1> .10Q:
   143 000007AC 7408                <1>     je .10E         ; E=Exit
   144 000007AE 83F800              <1>     cmp eax, 0
   145                              <1> .12Q:
   146 000007B1 7D03                <1>     jge .12E
   147 000007B3 83CB02              <1>     or ebx, 0b0010
   148                              <1> .12E:
   149                              <1> .10E:
   150                              <1> 
   151                              <1>     ; 符号出力判定
   152 000007B6 F7C302000000        <1>     test ebx, 0b0010
   153                              <1> .20Q:
   154 000007BC 7410                <1>     je .20E
   155 000007BE 83F800              <1>     cmp eax, 0
   156                              <1> .22Q:
   157 000007C1 7D07                <1>     jge .22F
   158 000007C3 F7D8                <1>     neg eax
   159 000007C5 C6062D              <1>     mov [esi], byte '-'
   160 000007C8 EB03                <1>     jmp .22E
   161                              <1> .22F:
   162                              <1>     
   163 000007CA C6062B              <1>     mov [esi], byte '+'
   164                              <1> .22E:
   165 000007CD 49                  <1>     dec ecx
   166                              <1> .20E:
   167                              <1> 
   168                              <1>     ; ASCII変換
   169 000007CE 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   170                              <1> .30L:
   171 000007D1 BA00000000          <1>     mov edx, 0
   172 000007D6 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   173                              <1> 
   174 000007D8 89D6                <1>     mov esi, edx
   175 000007DA 8A96[04080000]      <1>     mov dl, byte [.ascii + esi]
   176                              <1> 
   177 000007E0 8817                <1>     mov [edi], dl
   178 000007E2 4F                  <1>     dec edi
   179                              <1> 
   180 000007E3 83F800              <1>     cmp eax, 0
   181 000007E6 E0E9                <1>     loopnz .30L
   182                              <1> .30E:
   183                              <1> 
   184                              <1>     ; 空欄を埋める
   185 000007E8 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   186                              <1> .40Q:
   187 000007EB 740D                <1>     je .40E
   188 000007ED B020                <1>     mov al, ' '
   189 000007EF 837D1804            <1>     cmp [ebp +24], dword 0b0100
   190                              <1> .42Q:
   191 000007F3 7502                <1>     jne .42E
   192 000007F5 B030                <1>     mov al, '0'
   193                              <1> .42E:
   194 000007F7 FD                  <1>     std         ; dimention flag = 1(-方向)
   195 000007F8 F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   196                              <1> .40E:
   197                              <1> 
   198 000007FA 5F                  <1>     pop edi
   199 000007FB 5E                  <1>     pop esi
   200 000007FC 5A                  <1>     pop edx
   201 000007FD 59                  <1>     pop ecx
   202 000007FE 5B                  <1>     pop ebx
   203 000007FF 58                  <1>     pop eax
   204                              <1> 
   205 00000800 89EC                <1>     mov esp, ebp
   206 00000802 5D                  <1>     pop ebp
   207                              <1> 
   208 00000803 C3                  <1>     ret
   209                              <1> 
   210 00000804 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   210 0000080D 39414243444546      <1>
   108                                  %include "../modules/protect/rtc.s"
   109                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   110                              <1> ; dst: 保存先アドレス
   111                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   112 00000814 55                  <1>     push ebp
   113 00000815 89E5                <1>     mov ebp, esp
   114                              <1> 
   115 00000817 50                  <1>     push eax
   116 00000818 53                  <1>     push ebx
   117                              <1> 
   118 00000819 B00A                <1>     mov al, 0x0A    ; レジスタA
   119 0000081B E670                <1>     out 0x70, al
   120 0000081D E471                <1>     in al, 0x71
   121 0000081F A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   122 00000821 7407                <1>     je .10F
   123 00000823 B801000000          <1>     mov eax, 1      ; 更新中は失敗
   124 00000828 EB27                <1>     jmp .10E
   125                              <1> .10F:
   126                              <1> 
   127 0000082A B004                <1>     mov al, 0x04    ; 時
   128 0000082C E670                <1>     out 0x70, al    ; レジスタ設定
   129 0000082E E471                <1>     in al, 0x71     ; 時刻読み込み
   130                              <1> 
   131 00000830 C1E008              <1>     shl eax, 8      ; alをahに退避
   132                              <1> 
   133 00000833 B002                <1>     mov al, 0x02    ; 分
   134 00000835 E670                <1>     out 0x70, al    ; レジスタ設定
   135 00000837 E471                <1>     in al, 0x71     ; 時刻読み込み
   136                              <1> 
   137 00000839 C1E008              <1>     shl eax, 8      ; alをahに退避
   138                              <1> 
   139 0000083C B000                <1>     mov al, 0x00    ; 秒
   140 0000083E E670                <1>     out 0x70, al    ; レジスタ設定
   141 00000840 E471                <1>     in al, 0x71     ; 時刻読み込み
   142                              <1> 
   143 00000842 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   144                              <1> 
   145 00000847 8B5D08              <1>     mov ebx, [ebp + 8]
   146 0000084A 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   147                              <1> 
   148 0000084C B800000000          <1>     mov eax, 0
   149                              <1> .10E:
   150                              <1> 
   151 00000851 5B                  <1>     pop ebx
   152 00000852 58                  <1>     pop eax
   153                              <1> 
   154 00000853 89EC                <1>     mov esp, ebp
   155 00000855 5D                  <1>     pop ebp
   156                              <1> 
   157 00000856 C3                  <1>     ret
   109                                  %include "../modules/protect/draw_time.s"
   110                              <1> draw_time:  ; void draw_time(col, row, color, time);
   111                              <1> ; time 時刻データ
   112 00000857 55                  <1>     push ebp
   113 00000858 89E5                <1>     mov ebp, esp
   114                              <1> 
   115 0000085A 50                  <1>     push eax
   116 0000085B 53                  <1>     push ebx
   117                              <1>     
   118 0000085C 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   119                              <1> 
   120 0000085F 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   121 00000862 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   121 00000869 [C9080000]53E819FF- <1>
   121 00000871 FFFF6683C414        <1>
   122                              <1> 
   123 00000877 88E3                <1>     mov bl, ah          ; 分だけ
   124 00000879 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   124 00000880 [C6080000]53E802FF- <1>
   124 00000888 FFFF6683C414        <1>
   125                              <1>     
   126 0000088E C1E810              <1>     shr eax, 16         ; 時だけ
   127 00000891 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   127 00000898 [C3080000]50E8EAFE- <1>
   127 000008A0 FFFF6683C414        <1>
   128                              <1> 
   129 000008A6 68[C3080000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   129 000008AE FF750CFF7508E835FC- <1>
   129 000008B7 FFFF6683C410        <1>
   130                              <1> 
   131 000008BD 5B                  <1>     pop ebx
   132 000008BE 58                  <1>     pop eax
   133                              <1> 
   134 000008BF 89EC                <1>     mov esp, ebp
   135 000008C1 5D                  <1>     pop ebp
   136                              <1> 
   137 000008C2 C3                  <1>     ret
   138                              <1> 
   139 000008C3 5A5A3A              <1> .hour: db "ZZ:"
   140 000008C6 5A5A3A              <1> .min:  db "ZZ:"
   141 000008C9 5A5A00              <1> .sec:  db "ZZ", 0
   110                                  %include "../modules/protect/interrupt.s"
   111                              <1> int_stop:
   112 000008CC FB                  <1>     sti ; 割り込みを許可
   113                              <1> 
   114                              <1>     ; EAXで示される文字列を表示
   115 000008CD 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   115 000008D6 19E812FCFFFF6683C4- <1>
   115 000008DF 10                  <1>
   116                              <1> 
   117                              <1>     ; スタックのデータを文字列に変換
   118 000008E0 8B0424              <1>     mov eax, [esp + 0]
   119 000008E3 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   119 000008EA [A8090000]50E898FE- <1>
   119 000008F2 FFFF6683C414        <1>
   120                              <1> 
   121 000008F8 8B442404            <1>     mov eax, [esp + 4]
   122 000008FC 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   122 00000903 [B9090000]50E87FFE- <1>
   122 0000090B FFFF6683C414        <1>
   123                              <1> 
   124 00000911 8B442408            <1>     mov eax, [esp + 8]
   125 00000915 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   125 0000091C [CA090000]50E866FE- <1>
   125 00000924 FFFF6683C414        <1>
   126                              <1> 
   127 0000092A 8B44240C            <1>     mov eax, [esp +12]
   128 0000092E 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   128 00000935 [DB090000]50E84DFE- <1>
   128 0000093D FFFF6683C414        <1>
   129                              <1> 
   130                              <1>     ; 文字列の表示
   131 00000943 68[A1090000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   131 0000094B 00006A106A19E898FB- <1>
   131 00000954 FFFF6683C410        <1>
   132 0000095A 68[B2090000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   132 00000962 00006A116A19E881FB- <1>
   132 0000096B FFFF6683C410        <1>
   133 00000971 68[C3090000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   133 00000979 00006A126A19E86AFB- <1>
   133 00000982 FFFF6683C410        <1>
   134 00000988 68[D4090000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   134 00000990 00006A136A19E853FB- <1>
   134 00000999 FFFF6683C410        <1>
   135                              <1> 
   136                              <1>     ; 無限ループ
   137 0000099F EBFE                <1>     jmp $
   138                              <1> 
   139 000009A1 4553502B20303A      <1> .s1 db "ESP+ 0:"
   140 000009A8 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   140 000009B1 00                  <1>
   141 000009B2 2020202B20343A      <1> .s2 db "   + 4:"
   142 000009B9 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   142 000009C2 00                  <1>
   143 000009C3 2020202B20383A      <1> .s3 db "   + 8:"
   144 000009CA 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   144 000009D3 00                  <1>
   145 000009D4 2020202B31323A      <1> .s4 db "   +12:"
   146 000009DB 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   146 000009E4 00                  <1>
   147                              <1> 
   148                              <1> int_default:
   149 000009E5 9C                  <1>     pushf       ; EFLAGS(IF==0)
   150 000009E6 0E                  <1>     push cs
   151 000009E7 68[CC080000]        <1>     push int_stop
   152                              <1> 
   153 000009EC B8[F2090000]        <1>     mov eax, .s0
   154 000009F1 CF                  <1>     iret
   155                              <1> 
   156 000009F2 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   156 000009FB 50202020203E2000    <1>
   157                              <1> 
   158                              <1> 
   159                              <1> ; 割り込みベクタの初期化
   160 00000A03 90                  <1> ALIGN 4
   161 00000A04 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   162 00000A06 00001000            <1>       dd VECT_BASE      ; idt location
   163                              <1> 
   164                              <1> ; 割り込みテーブルを初期化
   165                              <1> init_int:
   166 00000A0A 50                  <1>     push eax
   167 00000A0B 53                  <1>     push ebx
   168 00000A0C 51                  <1>     push ecx
   169 00000A0D 57                  <1>     push edi
   170                              <1> 
   171                              <1>     ; 全ての割り込みにデフォルト処理を設定
   172 00000A0E 8D05[E5090000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   173 00000A14 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   174 00000A19 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   175                              <1> 
   176 00000A1B B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   177 00000A20 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   178                              <1> 
   179                              <1>     ; メモリに書き込み
   180                              <1> .10L:
   181 00000A25 891F                <1>     mov [edi + 0], ebx
   182 00000A27 894704              <1>     mov [edi + 4], eax
   183 00000A2A 83C708              <1>     add edi, 8
   184 00000A2D E2F6                <1>     loop .10L
   185                              <1> 
   186                              <1>     ; 割り込みディスクリプタの設定
   187 00000A2F 0F011D[040A0000]    <1>     lidt [IDTR]
   188                              <1> 
   189 00000A36 5F                  <1>     pop edi
   190 00000A37 59                  <1>     pop ecx
   191 00000A38 5B                  <1>     pop ebx
   192 00000A39 58                  <1>     pop eax
   193                              <1> 
   194 00000A3A C3                  <1>     ret
   195                              <1> 
   196                              <1> 
   197                              <1> int_zero_div:
   198 00000A3B 9C                  <1>     pushf
   199 00000A3C 0E                  <1>     push cs
   200 00000A3D 68[CC080000]        <1>     push int_stop
   201                              <1> 
   202 00000A42 B8[480A0000]        <1>     mov eax, .s0
   203 00000A47 CF                  <1>     iret
   204                              <1> 
   205 00000A48 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   205 00000A51 44495620203E2000    <1>
   111                                  %include "../modules/protect/pic.s"
   112                              <1> init_pic:
   113 00000A59 50                  <1>     push eax
   114                              <1> 
   115                              <1>     ; outp ポート, データ
   116                              <1> 
   117                              <1>     ; マスタの設定
   118                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    46 00000A5A B011                <2>  mov al, %2
    47 00000A5C E620                <2>  out %1, al
   119                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    46 00000A5E B020                <2>  mov al, %2
    47 00000A60 E621                <2>  out %1, al
   120                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    46 00000A62 B004                <2>  mov al, %2
    47 00000A64 E621                <2>  out %1, al
   121                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    46 00000A66 B001                <2>  mov al, %2
    47 00000A68 E621                <2>  out %1, al
   122                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    46 00000A6A B0FF                <2>  mov al, %2
    47 00000A6C E621                <2>  out %1, al
   123                              <1> 
   124                              <1>     ; スレーブの設定
   125                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    46 00000A6E B011                <2>  mov al, %2
    47 00000A70 E6A0                <2>  out %1, al
   126                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    46 00000A72 B028                <2>  mov al, %2
    47 00000A74 E6A1                <2>  out %1, al
   127                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    46 00000A76 B002                <2>  mov al, %2
    47 00000A78 E6A1                <2>  out %1, al
   128                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    46 00000A7A B001                <2>  mov al, %2
    47 00000A7C E6A1                <2>  out %1, al
   129                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    46 00000A7E B0FF                <2>  mov al, %2
    47 00000A80 E6A1                <2>  out %1, al
   130                              <1> 
   131 00000A82 58                  <1>     pop eax
   132                              <1> 
   133 00000A83 C3                  <1>     ret
   112                                  %include "../modules/protect/int_rtc.s"
   113                              <1> int_rtc:
   114 00000A84 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   115 00000A85 1E                  <1>     push ds
   116 00000A86 06                  <1>     push es
   117                              <1> 
   118                              <1>     ; データ用セグメントセレクタの設定
   119 00000A87 66B81000            <1>     mov ax, 0x0010
   120 00000A8B 8ED8                <1>     mov ds, ax
   121 00000A8D 8EC0                <1>     mov es, ax
   122                              <1> 
   123                              <1>     ; RTCから時刻を取得
   124 00000A8F 68[84010000]E87BFD- <1>     cdecl rtc_get_time, RTC_TIME
   124 00000A97 FFFF6683C404        <1>
   125                              <1> 
   126                              <1>     ; RTCの割り込み要因を取得
   127                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    46 00000A9D B00C                <2>  mov al, %2
    47 00000A9F E670                <2>  out %1, al
   128 00000AA1 E471                <1>     in al, 0x71     ; RTCからデータを取得
   129                              <1> 
   130                              <1>     ; 割り込みフラグをクリア(EOI)
   131 00000AA3 B020                <1>     mov al, 0x20
   132 00000AA5 E6A0                <1>     out 0xA0, al    ; スレーブ
   133 00000AA7 E620                <1>     out 0x20, al    ; マスタ
   134                              <1> 
   135 00000AA9 07                  <1>     pop es
   136 00000AAA 1F                  <1>     pop ds
   137 00000AAB 61                  <1>     popa
   138                              <1> 
   139 00000AAC CF                  <1>     iret        ; 割り込み処理の終了
   140                              <1> 
   141                              <1> rtc_int_en:
   142 00000AAD 55                  <1>     push ebp
   143 00000AAE 89E5                <1>     mov ebp, esp
   144 00000AB0 50                  <1>     push eax
   145                              <1> 
   146                              <1>     ; 割り込み許可設定
   147                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    46 00000AB1 B00B                <2>  mov al, %2
    47 00000AB3 E670                <2>  out %1, al
   148                              <1> 
   149 00000AB5 E471                <1>     in al, 0x71     ; RTCからデータを取得
   150 00000AB7 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   151                              <1> 
   152 00000ABA E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   153                              <1> 
   154 00000ABC 58                  <1>     pop eax
   155                              <1> 
   156 00000ABD 89EC                <1>     mov esp, ebp
   157 00000ABF 5D                  <1>     pop ebp
   158                              <1> 
   159 00000AC0 C3                  <1>     ret
   113                                  %include "../modules/protect/int_keyboard.s"
   114                              <1> int_keyboard:
   115 00000AC1 60                  <1>     pusha
   116 00000AC2 1E                  <1>     push ds
   117 00000AC3 06                  <1>     push es
   118                              <1> 
   119                              <1>     ; データ用セグメントの設定
   120 00000AC4 66B81000            <1>     mov ax, 0x0010
   121 00000AC8 8ED8                <1>     mov ds, ax
   122 00000ACA 8EC0                <1>     mov es, ax
   123                              <1> 
   124                              <1>     ; KBCのバッファ読み取り
   125 00000ACC E460                <1>     in al, 0x60
   126                              <1> 
   127                              <1>     ; キーコードの保存
   128 00000ACE 5068[E80A0000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   128 00000AD6 0000006683C408      <1>
   129                              <1> 
   130                              <1>     ; 割り込み終了コマンド送信
   131                              <1>     outp 0x20, 0x20
    46 00000ADD B020                <2>  mov al, %2
    47 00000ADF E620                <2>  out %1, al
   132                              <1> 
   133 00000AE1 07                  <1>     pop es
   134 00000AE2 1F                  <1>     pop ds
   135 00000AE3 61                  <1>     popa
   136                              <1> 
   137 00000AE4 CF                  <1>     iret
   138                              <1> 
   139 00000AE5 00<rep 3h>          <1> ALIGN 4, db 0
   140 00000AE8 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   114                                  %include "../modules/protect/ring_buff.s"
   115                              <1> ring_rd:        ; int ring_rd(buff, data);
   116                              <1> ; buff リングバッファ
   117                              <1> ; data 読み込んだデータの保存先アドレス
   118                              <1> ; 戻り値: データあり(0以外), データなし(0)
   119                              <1> 
   120 00000B00 55                  <1>     push ebp
   121 00000B01 89E5                <1>     mov ebp, esp
   122                              <1> 
   123 00000B03 50                  <1>     push eax
   124 00000B04 53                  <1>     push ebx
   125 00000B05 56                  <1>     push esi
   126 00000B06 57                  <1>     push edi
   127                              <1> 
   128                              <1>     ; 引数取得
   129 00000B07 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   130 00000B0A 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   131                              <1> 
   132                              <1>     ; 読み込み位置を確認
   133 00000B0D B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   134 00000B12 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   135 00000B14 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   136 00000B17 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   137                              <1> 
   138 00000B19 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   139                              <1> 
   140 00000B1D 8807                <1>     mov [edi], al
   141                              <1> 
   142 00000B1F 43                  <1>     inc ebx ; 次の読み込み位置
   143 00000B20 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   144 00000B23 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   145                              <1> 
   146 00000B25 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   147                              <1> .10E:
   148                              <1> 
   149 00000B2A 5F                  <1>     pop edi
   150 00000B2B 5E                  <1>     pop esi
   151 00000B2C 5B                  <1>     pop ebx
   152 00000B2D 58                  <1>     pop eax
   153                              <1> 
   154 00000B2E 89EC                <1>     mov esp, ebp
   155 00000B30 5D                  <1>     pop ebp
   156                              <1> 
   157 00000B31 C3                  <1>     ret
   158                              <1> 
   159                              <1> 
   160                              <1> ring_wr:    ; int ring_wr(buff, data);
   161                              <1> ; buff シリンダバッファ
   162                              <1> ; data 書き込むデータ
   163                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   164 00000B32 55                  <1>     push ebp
   165 00000B33 89E5                <1>     mov ebp, esp
   166                              <1> 
   167 00000B35 50                  <1>     push eax
   168 00000B36 53                  <1>     push ebx
   169 00000B37 51                  <1>     push ecx
   170 00000B38 56                  <1>     push esi
   171                              <1> 
   172 00000B39 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   173                              <1> 
   174                              <1>     ; 書き込み位置を確認
   175 00000B3C B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   176 00000B41 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   177 00000B44 89D9                <1>     mov ecx, ebx
   178 00000B46 41                  <1>     inc ecx                         ; 次の書き込み位置
   179 00000B47 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   180                              <1> 
   181                              <1>     ; バッファフルなら処理しない
   182 00000B4A 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   183 00000B4C 740F                <1>     je .10E
   184                              <1> 
   185 00000B4E 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   186                              <1> 
   187 00000B51 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   188 00000B55 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   189 00000B58 B801000000          <1>     mov eax, 1  ; 戻り値 成功
   190                              <1> .10E:
   191                              <1> 
   192 00000B5D 5E                  <1>     pop esi
   193 00000B5E 59                  <1>     pop ecx
   194 00000B5F 5B                  <1>     pop ebx
   195 00000B60 58                  <1>     pop eax
   196                              <1> 
   197 00000B61 89EC                <1>     mov esp, ebp
   198 00000B63 5D                  <1>     pop ebp
   199                              <1> 
   200 00000B64 C3                  <1>     ret
   201                              <1> 
   202                              <1> draw_key:
   203 00000B65 55                  <1>     push ebp
   204 00000B66 89E5                <1>     mov ebp, esp
   205                              <1> 
   206 00000B68 50                  <1>     push eax
   207 00000B69 53                  <1>     push ebx
   208 00000B6A 51                  <1>     push ecx
   209 00000B6B 52                  <1>     push edx
   210 00000B6C 56                  <1>     push esi
   211 00000B6D 57                  <1>     push edi
   212                              <1> 
   213                              <1> 
   214 00000B6E 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   215 00000B71 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   216 00000B74 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   217                              <1> 
   218                              <1>     ; リングバッファの情報を取得
   219 00000B77 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   220 00000B79 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   221 00000B7C B910000000          <1>     mov ecx, RING_ITEM_SIZE
   222                              <1> 
   223                              <1> .10L:
   224 00000B81 4B                  <1>     dec ebx ; 読み込み位置
   225 00000B82 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   226 00000B85 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   227                              <1> 
   228 00000B88 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   228 00000B91 68[C40B0000]50E8F0- <1>
   228 00000B99 FBFFFF6683C414      <1>
   229 00000BA0 68[C40B0000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   229 00000BA8 52E840F9FFFF6683C4- <1>
   229 00000BB1 10                  <1>
   230                              <1> 
   231 00000BB2 83C203              <1>     add edx, 3  ; 表示位置更新
   232 00000BB5 E2CA                <1>     loop .10L
   233                              <1> .10E:
   234                              <1> 
   235 00000BB7 5F                  <1>     pop edi
   236 00000BB8 5E                  <1>     pop esi
   237 00000BB9 5A                  <1>     pop edx
   238 00000BBA 59                  <1>     pop ecx
   239 00000BBB 5B                  <1>     pop ebx
   240 00000BBC 58                  <1>     pop eax
   241                              <1> 
   242 00000BBD 89EC                <1>     mov esp, ebp
   243 00000BBF 5D                  <1>     pop ebp
   244                              <1> 
   245 00000BC0 C3                  <1>     ret
   246                              <1> 
   247 00000BC1 00<rep 3h>          <1> ALIGN 4, db 0
   248 00000BC4 2D2D2000            <1> .tmp db "-- ", 0
   115                                  %include "../modules/protect/timer.s"
   116                              <1> int_en_timer0:
   117 00000BC8 50                  <1>     push eax
   118                              <1> 
   119                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    46 00000BC9 B034                <2>  mov al, %2
    47 00000BCB E643                <2>  out %1, al
   120                              <1>     outp 0x40, 0x9C             ; 下位バイト
    46 00000BCD B09C                <2>  mov al, %2
    47 00000BCF E640                <2>  out %1, al
   121                              <1>     outp 0x40, 0x2E             ; 上位バイト
    46 00000BD1 B02E                <2>  mov al, %2
    47 00000BD3 E640                <2>  out %1, al
   122                              <1> 
   123 00000BD5 58                  <1>     pop eax
   124                              <1> 
   125 00000BD6 C3                  <1>     ret
   116                                  %include "../modules/protect/draw_rotation_bar.s"
   117                              <1> draw_rotation_bar:
   118 00000BD7 50                  <1>     push eax
   119                              <1> 
   120 00000BD8 A1[EC020000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   121 00000BDD C1E804              <1>     shr eax, 4              ; eax /= 4
   122 00000BE0 3B05[080C0000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   123 00000BE6 741E                <1>     je .10E
   124                              <1> 
   125 00000BE8 A3[080C0000]        <1>     mov [.index], eax       ; 前回値設定
   126 00000BED 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   127                              <1> 
   128 00000BF0 8A80[0C0C0000]      <1>     mov al, [.table + eax]  ; 文字表示
   129 00000BF6 506A0F6A1D6A00E8EB- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   129 00000BFF F7FFFF6683C410      <1>
   130                              <1> 
   131                              <1> .10E:
   132                              <1> 
   133 00000C06 58                  <1>     pop eax
   134                              <1> 
   135 00000C07 C3                  <1>     ret
   136                              <1> 
   137                              <1> ALIGN 4, db 0
   138 00000C08 00000000            <1> .index: dd 0        ; 前回値
   139 00000C0C 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   117                                  
   118                                  ;パディング
   119 00000C10 00<rep 13F0h>               times KERNEL_SIZE - ($ - $$) db 0
   120                                  

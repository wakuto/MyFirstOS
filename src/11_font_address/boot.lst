     1                                  ; マクロ
     2                                  %include "../include/macro.s"   ; C言語と同等の関数呼び出し
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
     3                                  %include "../include/define.s"  ; 各種定数の宣言
     4                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
     5                              <1> 
     6                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     7                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     8                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートプログラムのセクタ数
     4                                  
     5                                      ORG BOOT_LOAD           ; ロードアドレスをアセンブラに指示
     6                                  
     7                                  entry:
     8 00000000 EB58                        jmp ipl      ; jump to ipl
     9                                  
    10                                      ; BPB(BIOS Parameter Block
    11 00000002 90<rep 58h>                 times 90 - ($ - $$) db 0x90
    12                                  
    13                                  
    14                                      ; IPL(Initial Program Loader)
    15                                  ipl:
    16 0000005A FA                          cli         ; clear interrupu flag 割込み禁止
    17                                  
    18                                  
    19 0000005B B80000                      mov ax, 0x0000
    20 0000005E 8ED8                        mov ds, ax
    21 00000060 8EC0                        mov es, ax
    22 00000062 8ED0                        mov ss, ax
    23 00000064 BC007C                      mov sp, BOOT_LOAD
    24                                      
    25 00000067 FB                          sti         ; set interrupt flag 割り込み許可
    26                                  
    27 00000068 8816[B800]                  mov [BOOT + drive.no], dl    ; ブートドライブの番号(DL)を保存
    28                                  
    29 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0
    29 00000074 02                 
    30                                  
    31                                      ; 残りのセクタをすべて読み込む
    32 00000075 BB0F00                      mov bx, BOOT_SECT - 1           ; bx: 残りのブートセクタ数
    33 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; cx: 次のロードアドレス
    34                                  
    35 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx    ; ax = read_chs(BOOT, bx, cx);
    35 00000083 83C406             
    36                                  
    37 00000086 39D8                        cmp ax, bx
    38                                  .10Q:
    39 00000088 740C                        jz .10E                 ; 読み込んだセクタ数==読み込むセクタ数
    40                                  .10T:
    41 0000008A 68[A600]E8300083C4-         cdecl puts, .e0         ; 失敗
    41 00000092 02                 
    42 00000093 E84900                      call reboot             ; 戻ってこない
    43                                  .10E:
    44                                      ; 次のステージへ
    45 00000096 E97502                      jmp stage_2
    46                                  
    47                                  
    48                                  ; Data
    49 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0x00
    49 000000A2 2E0A0D00           
    50 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    50 000000AF 746F72207265616400 
    51                                  
    52                                  ALIGN 2, db 0
    53                                  BOOT:           ; ブートドライブ関係の情報
    54                                      istruc drive    ; struct driveを宣言
    55 000000B8 0000                            at drive.no, dw 0       ; ドライブ番号
    56 000000BA 0000                            at drive.cyln, dw 0     ; C:シリンダ
    57 000000BC 0000                            at drive.head, dw 0     ; H:ヘッド
    58 000000BE 0200                            at drive.sect, dw 2     ; S:セクタ
    59                                      iend
    60                                  
    61                                  ; モジュール
    62                                  %include "../modules/real/puts.s"
    63                              <1> puts:       ; void puts(str);
    64 000000C0 55                  <1>     push bp
    65 000000C1 89E5                <1>     mov bp, sp
    66                              <1> 
    67 000000C3 50                  <1>     push ax
    68 000000C4 53                  <1>     push bx
    69 000000C5 56                  <1>     push si
    70                              <1> 
    71 000000C6 8B7604              <1>     mov si, [bp + 4]    ; si=文字列のアドレス
    72                              <1> 
    73 000000C9 B40E                <1>     mov ah, 0x0E
    74 000000CB BB0000              <1>     mov bx, 0x0000
    75 000000CE FC                  <1>     cld
    76                              <1> 
    77                              <1> .10L:
    78 000000CF AC                  <1>     lodsb
    79                              <1> 
    80 000000D0 3C00                <1>     cmp al, 0x00
    81 000000D2 7404                <1>     je .10E
    82                              <1> 
    83 000000D4 CD10                <1>     int 0x10
    84 000000D6 EBF7                <1>     jmp .10L
    85                              <1> 
    86                              <1> .10E:
    87 000000D8 5E                  <1>     pop si
    88 000000D9 5B                  <1>     pop bx
    89 000000DA 58                  <1>     pop ax
    90                              <1> 
    91 000000DB 89EC                <1>     mov sp, bp
    92 000000DD 5D                  <1>     pop bp
    93                              <1> 
    94 000000DE C3                  <1>     ret
    63                                  %include "../modules/real/reboot.s"
    64                              <1> reboot:
    65 000000DF 68[FB00]E8DBFF83C4- <1>     cdecl puts, .s0
    65 000000E7 02                  <1>
    66                              <1> 
    67                              <1> .10L:
    68 000000E8 B410                <1>     mov ah, 0x10
    69 000000EA CD16                <1>     int 0x16
    70                              <1> 
    71 000000EC 3C20                <1>     cmp al, ' '
    72 000000EE 75F8                <1>     jne .10L
    73                              <1> 
    74 000000F0 68[1901]E8CAFF83C4- <1>     cdecl puts, .s1
    74 000000F8 02                  <1>
    75                              <1> 
    76 000000F9 CD19                <1>     int 0x19
    77                              <1> 
    78 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    78 00000104 414345206B65792074- <1>
    78 0000010D 6F207265626F6F742E- <1>
    78 00000116 2E2E00              <1>
    79 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    64                                  %include "../modules/real/read_chs.s"
    65                              <1> read_chs:           ; int read_chs(drive, sect, dst);
    66                              <1> ; drive: drive構造体のアドレス
    67                              <1> ; sect:  読み出しセクタ数
    68                              <1> ; dst:   読み出し先アドレス
    69                              <1> ; 戻り値:読み込んだセクタ数
    70 0000011E 55                  <1>     push bp
    71 0000011F 89E5                <1>     mov bp, sp
    72 00000121 6A03                <1>     push 3          ; リトライ回数
    73 00000123 6A00                <1>     push 0          ; 読み込みセクタ数
    74                              <1> 
    75 00000125 53                  <1>     push bx
    76 00000126 51                  <1>     push cx
    77 00000127 52                  <1>     push dx
    78 00000128 06                  <1>     push es
    79 00000129 56                  <1>     push si
    80                              <1> 
    81                              <1>     ; 処理開始
    82 0000012A 8B7604              <1>     mov si, [bp + 4]    ; drive パラメータバッファ
    83                              <1>     
    84                              <1>     ; cxレジスタの設定
    85 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]
    86 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]
    87 00000133 C0E106              <1>     shl cl, 6
    88 00000136 0A4C06              <1>     or cl, [si + drive.sect]
    89                              <1> 
    90                              <1>     ; セクタ読み込み
    91 00000139 8A7404              <1>     mov dh, [si + drive.head];ヘッド番号
    92 0000013C 8A14                <1>     mov dl, [si + drive.no] ; ドライブ番号
    93 0000013E B80000              <1>     mov ax, 0x0000          ; 初期化
    94 00000141 8EC0                <1>     mov es, ax              ; セグメント
    95 00000143 8B5E08              <1>     mov bx, [bp + 8]        ; コピー先
    96                              <1> .10L:
    97                              <1> 
    98 00000146 B402                <1>     mov ah, 0x02        ; セクタ読み込み
    99 00000148 8A4606              <1>     mov al, [bp + 6]    ; 読み込みセクタ数
   100 0000014B CD13                <1>     int 0x13
   101 0000014D 7304                <1>     jnc .11E            ; if(success) goto .11E
   102                              <1> 
   103 0000014F B000                <1>     mov al, 0           ; failed, 読み込んだセクタ数=0
   104 00000151 EB0C                <1>     jmp .10E
   105                              <1> .11E:
   106                              <1>     
   107 00000153 3C00                <1>     cmp al, 0
   108 00000155 7508                <1>     jne .10E            ; if(読み込んだセクタ != 0) goto .10E
   109                              <1>     
   110 00000157 B80000              <1>     mov ax, 0
   111 0000015A FF4EFE              <1>     dec word [bp - 2]   ; retry--
   112 0000015D 75E7                <1>     jnz .10L            ; if(retry != 0) goto .10L
   113                              <1> .10E:
   114 0000015F B400                <1>     mov ah, 0           ; ステータス情報を破棄
   115                              <1> 
   116 00000161 5E                  <1>     pop si
   117 00000162 07                  <1>     pop es
   118 00000163 5A                  <1>     pop dx
   119 00000164 59                  <1>     pop cx
   120 00000165 5B                  <1>     pop bx
   121                              <1> 
   122 00000166 89EC                <1>     mov sp, bp
   123 00000168 5D                  <1>     pop bp
   124                              <1> 
   125 00000169 C3                  <1>     ret
    65                                  
    66 0000016A 00<rep 94h>                 times 510 - ($ - $$) db 0x00
    67 000001FE 55AA                        db 0x55, 0xAA
    68                                  
    69                                  ; リアルモード時に取得した情報
    70                                  FONT:       ; フォントデータ
    71 00000200 0000                    .seg: dw 0
    72 00000202 0000                    .off: dw 0
    73                                  
    74                                  ; モジュール（512バイトに入らなかった分）
    75                                  %include "../modules/real/itoa.s"
    76                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
    77                              <1> ; num   変換する値
    78                              <1> ; buff  保存先バッファアドレス
    79                              <1> ; size  保存先バッファサイズ
    80                              <1> ; radix 基数（2, 8, 10, 16)
    81                              <1> ; flags 
    82                              <1> ;   B2: 空白を'0'で埋める
    83                              <1> ;   B1: '+/-'記号を付加する
    84                              <1> ;   B0: 値を符号付き変数として扱う
    85                              <1> 
    86 00000204 55                  <1>     push bp
    87 00000205 89E5                <1>     mov bp, sp
    88                              <1> 
    89 00000207 50                  <1>     push ax
    90 00000208 53                  <1>     push bx
    91 00000209 51                  <1>     push cx
    92 0000020A 52                  <1>     push dx
    93 0000020B 56                  <1>     push si
    94 0000020C 57                  <1>     push di
    95                              <1> 
    96                              <1> 
    97 0000020D 8B4604              <1>     mov ax, [bp + 4]    ; num
    98 00000210 8B4E08              <1>     mov cx, [bp + 8]    ; size
    99 00000213 8B7606              <1>     mov si, [bp + 6]    ; buff
   100                              <1> 
   101 00000216 89F7                <1>     mov di, si
   102 00000218 01CF                <1>     add di, cx
   103 0000021A 4F                  <1>     dec di              ; di = &si[cx-1]
   104                              <1> 
   105 0000021B 8B5E0C              <1>     mov bx, word [bp + 12]   ; flags
   106                              <1> 
   107                              <1>     ; 符号付き判定
   108 0000021E F7C30100            <1>     test bx, 0b0001     ; 論理積を計算、0ならZFをセット
   109                              <1> .10Q:
   110 00000222 7408                <1>     je .10E         ; E=Exit
   111 00000224 83F800              <1>     cmp ax, 0
   112                              <1> .12Q:
   113 00000227 7D03                <1>     jge .12E
   114 00000229 83CB02              <1>     or bx, 0b0010
   115                              <1> .12E:
   116                              <1> .10E:
   117                              <1> 
   118                              <1>     ; 符号出力判定
   119 0000022C F7C30200            <1>     test bx, 0b0010
   120                              <1> .20Q:
   121 00000230 7410                <1>     je .20E
   122 00000232 83F800              <1>     cmp ax, 0
   123                              <1> .22Q:
   124 00000235 7D07                <1>     jge .22F
   125 00000237 F7D8                <1>     neg ax
   126 00000239 C6042D              <1>     mov [si], byte '-'
   127 0000023C EB03                <1>     jmp .22E
   128                              <1> .22F:
   129                              <1>     
   130 0000023E C6042B              <1>     mov [si], byte '+'
   131                              <1> .22E:
   132 00000241 49                  <1>     dec cx
   133                              <1> .20E:
   134                              <1> 
   135                              <1>     ; ASCII変換
   136 00000242 8B5E0A              <1>     mov bx, [bp + 10]   ; radix(基数)
   137                              <1> .30L:
   138 00000245 BA0000              <1>     mov dx, 0
   139 00000248 F7F3                <1>     div bx      ; 商：ax, あまり: dx
   140                              <1> 
   141 0000024A 89D6                <1>     mov si, dx
   142 0000024C 8A94[7402]          <1>     mov dl, byte [.ascii + si]
   143                              <1> 
   144 00000250 8815                <1>     mov [di], dl
   145 00000252 4F                  <1>     dec di
   146                              <1> 
   147 00000253 83F800              <1>     cmp ax, 0
   148 00000256 E0ED                <1>     loopnz .30L
   149                              <1> .30E:
   150                              <1> 
   151 00000258 83F900              <1>     cmp cx, 0
   152                              <1> .40Q:
   153 0000025B 740D                <1>     je .40E
   154 0000025D B020                <1>     mov al, ' '
   155 0000025F 837E0C04            <1>     cmp [bp + 12], word 0b0100
   156                              <1> .42Q:
   157 00000263 7502                <1>     jne .42E
   158 00000265 B030                <1>     mov al, '0'
   159                              <1> .42E:
   160 00000267 FD                  <1>     std         ; dimention flag = 1(-方向)
   161 00000268 F3AA                <1>     rep stosb   ; while (--cx) *di-- = al;
   162                              <1> .40E:
   163                              <1> 
   164 0000026A 5F                  <1>     pop di
   165 0000026B 5E                  <1>     pop si
   166 0000026C 5A                  <1>     pop dx
   167 0000026D 59                  <1>     pop cx
   168 0000026E 5B                  <1>     pop bx
   169 0000026F 58                  <1>     pop ax
   170                              <1> 
   171 00000270 89EC                <1>     mov sp, bp
   172 00000272 5D                  <1>     pop bp
   173                              <1> 
   174 00000273 C3                  <1>     ret
   175                              <1> 
   176 00000274 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   176 0000027D 39414243444546      <1>
    76                                  %include "../modules/real/get_drive_param.s"
    77                              <1> get_drive_param:    ; int get_drive_param(drive);
    78                              <1> ; drive: drive構造体のアドレス
    79                              <1> ;        no 対象となるドライブ番号（BIOSから渡された起動ドライブ）
    80                              <1> ; 戻り値: 成功（0以外） 失敗（0）
    81                              <1> 
    82 00000284 55                  <1>     push bp
    83 00000285 89E5                <1>     mov bp, sp
    84                              <1> 
    85 00000287 53                  <1>     push bx
    86 00000288 51                  <1>     push cx
    87 00000289 06                  <1>     push es
    88 0000028A 56                  <1>     push si
    89 0000028B 57                  <1>     push di
    90                              <1> 
    91                              <1>     ; 処理開始
    92 0000028C 8B7604              <1>     mov si, [bp + 4]        ; si = バッファ
    93                              <1> 
    94 0000028F B80000              <1>     mov ax, 0               ; Disk Base Table Pointerの初期化
    95 00000292 8EC0                <1>     mov es, ax              ; es = di = 0
    96 00000294 89C7                <1>     mov di, ax
    97                              <1> 
    98 00000296 B408                <1>     mov ah, 0x08            ; ah = ドライブパラメータの取得
    99 00000298 8A14                <1>     mov dl, [si + drive.no] ; dl = ドライブ番号
   100 0000029A CD13                <1>     int 0x13
   101                              <1> 
   102                              <1> .10Q:
   103 0000029C 721B                <1>     jc .10F
   104                              <1> .10T:       ; 成功
   105 0000029E 88C8                <1>     mov al, cl
   106 000002A0 83E03F              <1>     and ax, 0x3f    ; alの下位6ビット セクタ数のみ有効
   107                              <1> 
   108 000002A3 C0E906              <1>     shr cl, 6       ; cl = シリンダ上位2ビット
   109                              <1>                     ; ch = シリンダ下位8ビット
   110 000002A6 C1C908              <1>     ror cx, 8       ; chとclを交換、cx = シリンダ
   111 000002A9 41                  <1>     inc cx          ; 1始まりに変換
   112                              <1> 
   113 000002AA 0FB6DE              <1>     movzx bx, dh    ; bx = ヘッド数 ゼロ拡張
   114 000002AD 43                  <1>     inc bx          ; 1はじまりに変換
   115                              <1> 
   116                              <1>     ; cx = シリンダ
   117                              <1>     ; bx = ヘッド
   118                              <1>     ; ax = セクタ
   119 000002AE 894C02              <1>     mov [si + drive.cyln], cx
   120 000002B1 895C04              <1>     mov [si + drive.head], bx
   121 000002B4 894406              <1>     mov [si + drive.sect], ax
   122                              <1> 
   123 000002B7 EB03                <1>     jmp .10E
   124                              <1> 
   125                              <1> .10F:       ; 失敗
   126 000002B9 B80000              <1>     mov ax, 0
   127                              <1>     
   128                              <1> .10E:
   129                              <1>     
   130 000002BC 5F                  <1>     pop di
   131 000002BD 5E                  <1>     pop si
   132 000002BE 07                  <1>     pop es
   133 000002BF 59                  <1>     pop cx
   134 000002C0 5B                  <1>     pop bx
   135                              <1> 
   136 000002C1 89EC                <1>     mov sp, bp
   137 000002C3 5D                  <1>     pop bp
   138                              <1> 
   139 000002C4 C3                  <1>     ret
    77                                  %include "../modules/real/get_font_adr.s"
    78                              <1> get_font_adr:   ; void get_font_adr(adr)
    79                              <1> ; adr: フォントアドレス格納位置
    80 000002C5 55                  <1>     push bp
    81 000002C6 89E5                <1>     mov bp, sp
    82                              <1> 
    83 000002C8 50                  <1>     push ax
    84 000002C9 53                  <1>     push bx
    85 000002CA 51                  <1>     push cx
    86 000002CB 52                  <1>     push dx
    87 000002CC 56                  <1>     push si
    88 000002CD 06                  <1>     push es
    89 000002CE 55                  <1>     push bp
    90                              <1> 
    91 000002CF 8B7604              <1>     mov si, [bp + 4]    ; si = adr
    92                              <1>     
    93 000002D2 B83011              <1>     mov ax, 0x1130      ; フォントアドレスの取得
    94 000002D5 B706                <1>     mov bh, 0x06        ; 8x16のフォント
    95 000002D7 CD10                <1>     int 0x10
    96                              <1> .10Q:
    97 000002D9 7207                <1>     jc .10F
    98                              <1> .10T:   ; 成功
    99 000002DB 8C04                <1>     mov [si + 0], es    ; adr[0] = セグメント
   100 000002DD 896C02              <1>     mov [si + 2], bp    ; adr[1] = オフセット
   101 000002E0 EB0C                <1>     jmp .10E
   102                              <1> .10F:   ; 失敗
   103 000002E2 68[F902]E8D8FD83C4- <1>     cdecl puts, .e0
   103 000002EA 02                  <1>
   104 000002EB E8F1FD              <1>     call reboot
   105                              <1> .10E:
   106 000002EE 5D                  <1>     pop bp
   107 000002EF 07                  <1>     pop es
   108 000002F0 5E                  <1>     pop si
   109 000002F1 5A                  <1>     pop dx
   110 000002F2 59                  <1>     pop cx
   111 000002F3 5B                  <1>     pop bx
   112 000002F4 58                  <1>     pop ax
   113                              <1> 
   114 000002F5 89EC                <1>     mov sp, bp
   115 000002F7 5D                  <1>     pop bp
   116                              <1> 
   117 000002F8 C3                  <1>     ret
   118                              <1> 
   119 000002F9 43616E277420676574- <1> .e0 db "Can't get font data.", 0
   119 00000302 20666F6E7420646174- <1>
   119 0000030B 612E00              <1>
    78                                  
    79                                  ; ブート処理の第２ステージ
    80                                  stage_2:
    81 0000030E 68[CB03]E8ACFD83C4-         cdecl puts, .s0
    81 00000316 02                 
    82                                  
    83                                      ; ドライブ情報を取得
    84 00000317 68[B800]E867FF83C4-         cdecl get_drive_param, BOOT
    84 0000031F 02                 
    85 00000320 83F800                      cmp ax, 0
    86                                  .10Q:
    87 00000323 750C                        jne .10E
    88                                  .10T:   ; 失敗
    89 00000325 68[B003]E895FD83C4-         cdecl puts, .e0
    89 0000032D 02                 
    90 0000032E E8AEFD                      call reboot
    91                                  
    92                                  .10E:   ; 成功
    93                                      ; ドライブ情報を表示
    94 00000331 A1[B800]                    mov ax, [BOOT + drive.no]
    95 00000334 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
    95 0000033B [9103]50E8C3FE83C4-
    95 00000343 0A                 
    96 00000344 A1[BA00]                    mov ax, [BOOT + drive.cyln]
    97 00000347 6A046A106A0468-             cdecl itoa, ax, .p2, 4, 16, 0b0100
    97 0000034E [9903]50E8B0FE83C4-
    97 00000356 0A                 
    98 00000357 A1[BC00]                    mov ax, [BOOT + drive.head]
    99 0000035A 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
    99 00000361 [A303]50E89DFE83C4-
    99 00000369 0A                 
   100 0000036A A1[BE00]                    mov ax, [BOOT + drive.sect]
   101 0000036D 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
   101 00000374 [AB03]50E88AFE83C4-
   101 0000037C 0A                 
   102 0000037D 68[8803]E83DFD83C4-         cdecl puts, .s1
   102 00000385 02                 
   103                                      
   104                                      ; 次のステージへ
   105 00000386 EB52                        jmp stage_3rd
   106                                  
   107 00000388 2044726976653A3078      .s1 db " Drive:0x"
   108 00000391 20202C20433A3078        .p1 db "  , C:0x"
   109 00000399 202020202C20483A30-     .p2 db "    , H:0x"
   109 000003A2 78                 
   110 000003A3 20202C20533A3078        .p3 db "  , S:0x"
   111 000003AB 20200A0D00              .p4 db "  ", 0x0A, 0x0D, 0
   112                                  
   113 000003B0 43616E277420676574-     .e0 db "Can't get drive parameter.", 0
   113 000003B9 206472697665207061-
   113 000003C2 72616D657465722E00 
   114                                  
   115                                  ; Data
   116 000003CB 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   116 000003D4 2E2E2E0A0D00       
   117                                  
   118                                  ; ブート処理の第３ステージ
   119                                  stage_3rd:
   120                                      ; 文字列を表示
   121 000003DA 68[1D04]E8E0FC83C4-         cdecl puts, .s0
   121 000003E2 02                 
   122                                  
   123 000003E3 68[0002]E8DCFE83C4-         cdecl get_font_adr, FONT    ; BIOSのフォントアドレスを取得
   123 000003EB 02                 
   124                                  
   125                                      ; フォントアドレスの表示
   126 000003EC 6A046A106A0468-             cdecl itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   126 000003F3 [3A04]FF36[0002]E8-
   126 000003FA 08FE83C40A         
   127 000003FF 6A046A106A0468-             cdecl itoa, word [FONT.off], .p2, 4, 16, 0b0100
   127 00000406 [3F04]FF36[0202]E8-
   127 0000040D F5FD83C40A         
   128 00000412 68[2C04]E8A8FC83C4-         cdecl puts, .s1
   128 0000041A 02                 
   129                                  
   130 0000041B EBFE                        jmp $
   131                                  
   132 0000041D 337264207374616765-     .s0 db "3rd stage...", 0x0A, 0x0D, 0
   132 00000426 2E2E2E0A0D00       
   133 0000042C 20466F6E7420416464-     .s1 db " Font Address="
   133 00000435 726573733D         
   134 0000043A 5A5A5A5A3A              .p1 db "ZZZZ:"
   135 0000043F 5A5A5A5A0A0D00          .p2 db "ZZZZ", 0x0A, 0x0D, 0
   136 00000446 0A0D00                      db 0x0A, 0x0D, 0
   137                                  
   138                                  ; パディング(このファイルは8kBとする）
   139 00000449 00<rep 1BB7h>               times BOOT_SIZE - ($ - $$) db 0 ; 8kB

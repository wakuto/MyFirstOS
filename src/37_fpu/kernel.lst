     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    27                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[00020000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[60020000]        <1>  mov edi, %1
    67 0000001D B8[86020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[68020000]        <1>  mov edi, %1
    67 00000038 B8[5E030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                      set_desc GDT.tss_2, TSS_2       ; タスク2用TSSの設定
    63 0000004C 50                  <1>  push eax
    64 0000004D 57                  <1>  push edi
    65                              <1> 
    66 0000004E BF[70020000]        <1>  mov edi, %1
    67 00000053 B8[36040000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000058 66894702            <1>  mov [edi + 2], ax
    74 0000005C C1E810              <1>  shr eax, 16
    75 0000005F 884704              <1>  mov [edi + 4], al
    76 00000062 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000065 5F                  <1>  pop edi
    79 00000066 58                  <1>  pop eax
    25                                  
    26                                      ; コールゲートの設定
    27                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 00000067 50                  <1>  push eax
    84 00000068 57                  <1>  push edi
    85                              <1> 
    86 00000069 BF[78020000]        <1>  mov edi, %1
    87 0000006E B8[540F0000]        <1>  mov eax, %2
    88                              <1> 
    89 00000073 668907              <1>  mov [edi + 0], ax
    90 00000076 C1E810              <1>  shr eax, 16
    91 00000079 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 0000007D 5F                  <1>  pop edi
    94 0000007E 58                  <1>  pop eax
    28                                  
    29                                      ; LDTの設定
    30                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 0000007F 50                  <1>  push eax
    64 00000080 57                  <1>  push edi
    65                              <1> 
    66 00000081 BF[58020000]        <1>  mov edi, %1
    67 00000086 B8[08020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 0000008B 66C7073700          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000090 66894702            <1>  mov [edi + 2], ax
    74 00000094 C1E810              <1>  shr eax, 16
    75 00000097 884704              <1>  mov [edi + 4], al
    76 0000009A 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000009D 5F                  <1>  pop edi
    79 0000009E 58                  <1>  pop eax
    31                                  
    32                                      ; GDTをロード(再設定)
    33 0000009F 0F0115[80020000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    34                                  
    35                                      ; スタックの設定
    36 000000A6 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    37                                  
    38                                      ; タスクレジスタの初期化
    39 000000AB 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    40 000000AF 0F00D8                      ltr ax              ; タスクレジスタの設定
    41                                  
    42                                      ; 初期化
    43 000000B2 E8970C0000                  cdecl init_int                  ; 割り込みベクタの初期化
    44 000000B7 E8E10C0000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    45                                  
    46                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 000000BC 50                  <1>  push eax
    31 000000BD 57                  <1>  push edi
    32                              <1> 
    33 000000BE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000C3 B8[7F0D0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000C8 668907              <1>  mov [edi + 0], ax
    41 000000CB C1E810              <1>  shr eax, 16
    42 000000CE 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000D2 5F                  <1>  pop edi
    45 000000D3 58                  <1>  pop eax
    47                                      set_vect 0x07, int_nm           ; 割り込み処理の登録：デバイス使用不可例外
    30 000000D4 50                  <1>  push eax
    31 000000D5 57                  <1>  push edi
    32                              <1> 
    33 000000D6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000DB B8[F10F0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000E0 668907              <1>  mov [edi + 0], ax
    41 000000E3 C1E810              <1>  shr eax, 16
    42 000000E6 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000EA 5F                  <1>  pop edi
    45 000000EB 58                  <1>  pop eax
    48                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 000000EC 50                  <1>  push eax
    31 000000ED 57                  <1>  push edi
    32                              <1> 
    33 000000EE BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000F3 B8[0E050000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000F8 668907              <1>  mov [edi + 0], ax
    41 000000FB C1E810              <1>  shr eax, 16
    42 000000FE 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000102 5F                  <1>  pop edi
    45 00000103 58                  <1>  pop eax
    49                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 00000104 50                  <1>  push eax
    31 00000105 57                  <1>  push edi
    32                              <1> 
    33 00000106 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000010B B8[050E0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000110 668907              <1>  mov [edi + 0], ax
    41 00000113 C1E810              <1>  shr eax, 16
    42 00000116 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000011A 5F                  <1>  pop edi
    45 0000011B 58                  <1>  pop eax
    50                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 0000011C 50                  <1>  push eax
    31 0000011D 57                  <1>  push edi
    32                              <1> 
    33 0000011E BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000123 B8[C80D0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000128 668907              <1>  mov [edi + 0], ax
    41 0000012B C1E810              <1>  shr eax, 16
    42 0000012E 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000132 5F                  <1>  pop edi
    45 00000133 58                  <1>  pop eax
    51                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 00000134 50                  <1>  push eax
    31 00000135 57                  <1>  push edi
    32                              <1> 
    33 00000136 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000013B B8[840F0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 00000140 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000146 668907              <1>  mov [edi + 0], ax
    41 00000149 C1E810              <1>  shr eax, 16
    42 0000014C 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000150 5F                  <1>  pop edi
    45 00000151 58                  <1>  pop eax
    52                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 00000152 50                  <1>  push eax
    31 00000153 57                  <1>  push edi
    32                              <1> 
    33 00000154 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000159 B8[920F0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 0000015E 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000164 668907              <1>  mov [edi + 0], ax
    41 00000167 C1E810              <1>  shr eax, 16
    42 0000016A 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000016E 5F                  <1>  pop edi
    45 0000016F 58                  <1>  pop eax
    53                                  
    54                                      ; デバイスの割り込み許可
    55 00000170 6A10E87A0C00006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    55 00000179 C404               
    56                                  
    57                                      ; IMR（割り込みマスクレジスタ）の設定
    58                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 0000017B B0F8                <1>  mov al, %2
    50 0000017D E621                <1>  out %1, al
    59                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 0000017F B0FE                <1>  mov al, %2
    50 00000181 E6A1                <1>  out %1, al
    60                                  
    61 00000183 FB                          sti                             ; 割り込み許可
    62                                  
    63 00000184 6A0D6A3FE86F060000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    63 0000018D 6683C408           
    64 00000191 6A046A3FE8E3060000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    64 0000019A 6683C408           
    65 0000019E 68[E8010000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    65 000001A6 00006A0E6A19E88E06-
    65 000001AF 00006683C410       
    66                                  
    67                                  
    68                                  
    69                                  .10L:
    70                                      ; 回転する棒の表示
    71 000001B5 E8610D0000                  cdecl draw_rotation_bar
    72                                  
    73                                      ; キーコードの取得
    74 000001BA 68[FC010000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    74 000001C0 [2C0E0000]E87B0C00-
    74 000001C8 006683C408         
    75 000001CD 83F800                      cmp eax, 0
    76 000001D0 7414                        je .10E
    77                                  
    78                                      ; キーコードの表示
    79 000001D2 68[2C0E0000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    79 000001DA 02E8C90C00006683C4-
    79 000001E3 0C                 
    80                                  
    81 000001E4 EBCF                        jmp .10L
    82                                  .10E:
    83                                  
    84                                  
    85                                      ; 処理の終了
    86 000001E6 EBFE                        jmp $
    87                                  
    88 000001E8 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    88 000001F1 65726E656C212000   
    89                                  
    90 000001F9 00<rep 3h>              ALIGN 4, db 0
    91 000001FC 00000000                .int_key: dd 0
    92                                  
    93                                  ALIGN 4, db 0
    94 00000200 00000000                FONT_ADR: dd 0
    95 00000204 00000000                RTC_TIME: dd 0
    96                                  
    97                                  ; タスク
    98                                  %include "descriptor.s"
    99                              <1> ; ローカルディスクリプタテーブル
   100 00000208 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   101 00000210 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   102 00000218 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   103 00000220 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   104 00000228 FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   105 00000230 FFFF000000FACF00    <1> .cs_task_2: dq 0x00CFFA000000FFFF   ; CODE 4G
   106 00000238 FFFF000000F2CF00    <1> .ds_task_2: dq 0x00CFF2000000FFFF   ; DATA 4G
   107                              <1> .end:
   108                              <1> 
   109                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   110                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   111                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   112                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   113                              <1> CS_TASK_2 equ (.cs_task_2 - LDT) | 4 | 3; タスク2用CSセレクタ
   114                              <1> DS_TASK_2 equ (.ds_task_2 - LDT) | 4 | 3; タスク2用DSセレクタ
   115                              <1> 
   116                              <1> LDT_LIMIT equ .end        - LDT - 1
   117                              <1> 
   118                              <1> ; グローバルディスクリプタテーブル
   119 00000240 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   120 00000248 FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   121 00000250 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   122 00000258 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   123 00000260 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   124 00000268 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   125 00000270 6700000000890000    <1> .tss_2:     dq 0x0000890000000067   ; TSSディスクリプタ
   126 00000278 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   127                              <1> .end:
   128                              <1> 
   129                              <1> CS_KERNEL equ .cs_kernel - GDT
   130                              <1> DS_KERNEL equ .ds_kernel - GDT
   131                              <1> SS_LDT    equ .ldt       - GDT
   132                              <1> SS_TASK_0 equ .tss_0     - GDT
   133                              <1> SS_TASK_1 equ .tss_1     - GDT
   134                              <1> SS_TASK_2 equ .tss_2     - GDT
   135                              <1> SS_GATE_0 equ .call_gate - GDT
   136                              <1> 
   137 00000280 3F00                <1> GDTR: dw GDT.end - GDT - 1
   138 00000282 [40020000]          <1>       dd GDT
   139                              <1> 
   140                              <1> ; TSS
   141                              <1> TSS_0:
   142 00000286 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   143 0000028A 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   144 0000028E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   145 00000292 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   146 00000296 00000000            <1> .ss1:       dd 0                    ;* 16:
   147 0000029A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   148 0000029E 00000000            <1> .ss2:       dd 0                    ;* 24:
   149 000002A2 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   150 000002A6 00000000            <1> .eip:       dd 0                    ;  32:EIP
   151 000002AA 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   152 000002AE 00000000            <1> .eax:       dd 0                    ;  40:EAX
   153 000002B2 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   154 000002B6 00000000            <1> .edx:       dd 0                    ;  48:EDX
   155 000002BA 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   156 000002BE 00000000            <1> .esp:       dd 0                    ;  56:ESP
   157 000002C2 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   158 000002C6 00000000            <1> .esi:       dd 0                    ;  64:ESI
   159 000002CA 00000000            <1> .edi:       dd 0                    ;  68:EDI
   160 000002CE 00000000            <1> .es:        dd 0                    ;  72:ES
   161 000002D2 00000000            <1> .cs:        dd 0                    ;  76:CS
   162 000002D6 00000000            <1> .ss:        dd 0                    ;  80:SS
   163 000002DA 00000000            <1> .ds:        dd 0                    ;  84:DS
   164 000002DE 00000000            <1> .fs:        dd 0                    ;  88:FS
   165 000002E2 00000000            <1> .gs:        dd 0                    ;  92:GS
   166 000002E6 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   167 000002EA 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   168 000002EE 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   169                              <1> 
   170                              <1> TSS_1:
   171 0000035E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   172 00000362 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   173 00000366 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   174 0000036A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   175 0000036E 00000000            <1> .ss1:       dd 0                    ;* 16:
   176 00000372 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   177 00000376 00000000            <1> .ss2:       dd 0                    ;* 24:
   178 0000037A 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   179 0000037E [5C050000]          <1> .eip:       dd task_1               ;  32:EIP
   180 00000382 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   181 00000386 00000000            <1> .eax:       dd 0                    ;  40:EAX
   182 0000038A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   183 0000038E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   184 00000392 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   185 00000396 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   186 0000039A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   187 0000039E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   188 000003A2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   189 000003A6 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   190 000003AA 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   191 000003AE 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   192 000003B2 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   193 000003B6 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   194 000003BA 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   195 000003BE 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   196 000003C2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   197 000003C6 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   198                              <1> 
   199                              <1> TSS_2:
   200 00000436 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   201 0000043A 003A1000            <1> .esp0:      dd SP_TASK_2 - 512      ;*  4:ESP0
   202 0000043E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   203 00000442 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   204 00000446 00000000            <1> .ss1:       dd 0                    ;* 16:
   205 0000044A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   206 0000044E 00000000            <1> .ss2:       dd 0                    ;* 24:
   207 00000452 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   208 00000456 [91050000]          <1> .eip:       dd task_2               ;  32:EIP
   209 0000045A 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   210 0000045E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   211 00000462 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   212 00000466 00000000            <1> .edx:       dd 0                    ;  48:EDX
   213 0000046A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   214 0000046E 003C1000            <1> .esp:       dd SP_TASK_2            ;  56:ESP
   215 00000472 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   216 00000476 00000000            <1> .esi:       dd 0                    ;  64:ESI
   217 0000047A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   218 0000047E 37000000            <1> .es:        dd DS_TASK_2            ;  72:ES
   219 00000482 2F000000            <1> .cs:        dd CS_TASK_2            ;  76:CS
   220 00000486 37000000            <1> .ss:        dd DS_TASK_2            ;  80:SS
   221 0000048A 37000000            <1> .ds:        dd DS_TASK_2            ;  84:DS
   222 0000048E 37000000            <1> .fs:        dd DS_TASK_2            ;  88:FS
   223 00000492 37000000            <1> .gs:        dd DS_TASK_2            ;  92:GS
   224 00000496 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   225 0000049A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   226 0000049E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
    99                                  %include "modules/int_timer.s"
   100                              <1> int_timer:
   101 0000050E 60                  <1>     pushad
   102 0000050F 1E                  <1>     push ds
   103 00000510 06                  <1>     push es
   104                              <1> 
   105                              <1>     ; データ用セグメントの設定
   106 00000511 66B81000            <1>     mov ax, 0x0010
   107 00000515 8ED8                <1>     mov ds, ax
   108 00000517 8EC0                <1>     mov es, ax
   109                              <1> 
   110                              <1>     ; TICK
   111 00000519 FF05[54050000]      <1>     inc dword [TIMER_COUNT]
   112                              <1> 
   113                              <1>     ; 割り込みフラグをクリア(EOI)
   114                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 0000051F B020                <2>  mov al, %2
    50 00000521 E620                <2>  out %1, al
   115                              <1> 
   116                              <1>     ; タスクの切り替え(task0 -> task1 -> task2 -> task0 -> ...)
   117 00000523 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   118 00000527 6683F820            <1>     cmp ax, SS_TASK_0   ; switch(ax)
   119 0000052B 740F                <1>     je .11L
   120 0000052D 6683F828            <1>     cmp ax, SS_TASK_1
   121 00000531 7412                <1>     je .12L
   122                              <1> 
   123 00000533 EA000000002000      <1>     jmp SS_TASK_0:0     ; default:
   124 0000053A EB12                <1>     jmp .10E
   125                              <1> .11L:                   ; case SS_TASK_0:
   126 0000053C EA000000002800      <1>     jmp SS_TASK_1:0     ; タスク1に切り替え
   127 00000543 EB09                <1>     jmp .10E
   128                              <1> .12L:                   ; case SS_TASK_1:
   129 00000545 EA000000003000      <1>     jmp SS_TASK_2:0     ; タスク2に切り替え
   130 0000054C EB00                <1>     jmp .10E
   131                              <1> .10E:
   132                              <1> 
   133 0000054E 07                  <1>     pop es
   134 0000054F 1F                  <1>     pop ds
   135 00000550 61                  <1>     popad
   136                              <1> 
   137 00000551 CF                  <1>     iret
   138                              <1> 
   139 00000552 00<rep 2h>          <1> ALIGN 4, db 0
   140 00000554 0000000000000000    <1> TIMER_COUNT: dq 0
   141                              <1> 
   100                                  %include "tasks/task_1.s"
   101                              <1> task_1:
   102                              <1>     ; 文字列の表示(コールゲート)
   103                              <1>     ;cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   104 0000055C 68[8A050000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0 ; draw_str();
   104 00000564 006A3FE8D302000066- <1>
   104 0000056D 83C410              <1>
   105                              <1> 
   106                              <1> .10L:
   107                              <1>     ; 時刻の表示
   108 00000570 A1[04020000]        <1>     mov eax, [RTC_TIME]
   109 00000575 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   109 0000057E 48E8160600006683C4- <1>
   109 00000587 10                  <1>
   110                              <1> 
   111 00000588 EBE6                <1>     jmp .10L
   112                              <1> 
   113                              <1>     ; データ
   114 0000058A 5461736B2D3100      <1> .s0 db "Task-1", 0
   101                                  %include "tasks/task_2.s"
   102                              <1> task_2:
   103 00000591 68[56060000]6A076A- <1>     cdecl draw_str, 63, 1, 0x07, .s0
   103 00000599 016A3FE89E02000066- <1>
   103 000005A2 83C410              <1>
   104                              <1> 
   105 000005A5 DB05[44060000]      <1>     fild dword [.c1000]     ; st0 = [.c1000]
   106 000005AB D9EB                <1>     fldpi           ; st0 = pi
   107 000005AD DA35[48060000]      <1>     fidiv dword [.c180]     ; st0 /= [.c180]
   108 000005B3 D9EB                <1>     fldpi
   109 000005B5 DCC0                <1>     fadd st0, st0   ; st0 += st0
   110 000005B7 D9EE                <1>     fldz            ; st0 = 0
   111                              <1>     ; st0   0
   112                              <1>     ; st1   2*pi
   113                              <1>     ; st2   pi/180
   114                              <1>     ; st3   1000
   115                              <1> 
   116                              <1> .10L:
   117 000005B9 D8C2                <1>     fadd st0, st2   ; st0 += st2
   118 000005BB D9F8                <1>     fprem           ; st0 %= st1
   119 000005BD D9C0                <1>     fld st0         ; st0をコピー
   120 000005BF D9FE                <1>     fsin            ; st0 = sin(st0)
   121 000005C1 D8CC                <1>     fmul st0, st4   ; st0 *= 1000
   122 000005C3 DF35[4C060000]      <1>     fbstp [.bcd]
   123                              <1> 
   124 000005C9 A1[4C060000]        <1>     mov eax, [.bcd]
   125 000005CE 89C3                <1>     mov ebx, eax
   126                              <1> 
   127 000005D0 250F0F0000          <1>     and eax, 0x0F0F ; 上位４ビットをマスク
   128 000005D5 0D30300000          <1>     or eax, 0x3030  ; 上位４ビットに0x3に設定
   129                              <1> 
   130 000005DA C1EB04              <1>     shr ebx, 4
   131 000005DD 81E30F0F0000        <1>     and ebx, 0x0F0F ; 上位４ビットをマスク
   132 000005E3 81CB30300000        <1>     or ebx, 0x3030  ; 上位４ビットに0x3に設定
   133                              <1> 
   134 000005E9 883D[5E060000]      <1>     mov [.s2 + 0], bh   ; 1桁目
   135 000005EF 8825[60060000]      <1>     mov [.s3 + 0], ah   ; 小数1桁目
   136 000005F5 881D[61060000]      <1>     mov [.s3 + 1], bl   ; 小数2桁目
   137 000005FB A2[62060000]        <1>     mov [.s3 + 2], al   ; 小数3桁目
   138                              <1> 
   139 00000600 B807000000          <1>     mov eax, 7
   140 00000605 0FA305[55060000]    <1>     bt [.bcd + 9], eax  ; cf = .bcd+9 から7ビット目
   141 0000060C 7209                <1>     jc .10F
   142                              <1> 
   143 0000060E C605[5D060000]2B    <1>     mov [.s1 + 0], byte '+'
   144 00000615 EB07                <1>     jmp .10E
   145                              <1> .10F:
   146 00000617 C605[5D060000]2D    <1>     mov [.s1 + 0], byte '-'
   147                              <1> .10E:
   148                              <1> 
   149 0000061E 68[5D060000]6A076A- <1>     cdecl draw_str, 72, 1, 0x07, .s1
   149 00000626 016A48E81102000066- <1>
   149 0000062F 83C410              <1>
   150                              <1> 
   151                              <1>     ; ウェイト
   152 00000632 6A14E8130A00006683- <1>     cdecl wait_tick, 20
   152 0000063B C404                <1>
   153                              <1> 
   154 0000063D E977FFFFFF          <1>     jmp .10L
   155                              <1> 
   156                              <1> 
   157 00000642 00<rep 2h>          <1> ALIGN 4, db 0
   158 00000644 E8030000            <1> .c1000: dd 1000
   159 00000648 B4000000            <1> .c180:  dd 180
   160 0000064C 00<rep Ah>          <1> .bcd: times 10 db 0x00
   161 00000656 5461736B2D3200      <1> .s0     db "Task-2", 0
   162 0000065D 2D                  <1> .s1:    db "-"
   163 0000065E 302E                <1> .s2:    db "0."
   164 00000660 30303000            <1> .s3:    db "000", 0
   102                                  
   103                                  ; モジュール
   104                                  %include "../modules/protect/vga.s"
   105                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   106                              <1> ; plane: 読み込みプレーン
   107 00000664 55                  <1>     push ebp
   108 00000665 89E5                <1>     mov ebp, esp
   109                              <1> 
   110 00000667 6650                <1>     push ax
   111 00000669 6652                <1>     push dx
   112                              <1> 
   113                              <1> 
   114                              <1>     ; 読み込みプレーンの選択
   115 0000066B 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   116 0000066E 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   117 00000671 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   118 00000673 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   119 00000677 66EF                <1>     out dx, ax
   120                              <1> 
   121 00000679 665A                <1>     pop dx
   122 0000067B 6658                <1>     pop ax
   123                              <1> 
   124 0000067D 89EC                <1>     mov esp, ebp
   125 0000067F 5D                  <1>     pop ebp
   126                              <1> 
   127 00000680 C3                  <1>     ret
   128                              <1> 
   129                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   130                              <1> ; plane 書き込みプレーン
   131 00000681 55                  <1>     push ebp
   132 00000682 89E5                <1>     mov ebp, esp
   133                              <1> 
   134 00000684 6650                <1>     push ax
   135 00000686 6652                <1>     push dx
   136                              <1> 
   137                              <1> 
   138                              <1>     ; 書き込みプレーンの選択
   139 00000688 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   140 0000068B 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   141 0000068E B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   142 00000690 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   143 00000694 66EF                <1>     out dx, ax
   144                              <1> 
   145                              <1> 
   146 00000696 665A                <1>     pop dx
   147 00000698 6658                <1>     pop ax
   148                              <1> 
   149 0000069A 89EC                <1>     mov esp, ebp
   150 0000069C 5D                  <1>     pop ebp
   151                              <1> 
   152 0000069D C3                  <1>     ret
   153                              <1> 
   154                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   155                              <1> ; font FONTアドレス
   156                              <1> ; vram VRAMアドレス
   157                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   158                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   159 0000069E 55                  <1>     push ebp
   160 0000069F 89E5                <1>     mov ebp, esp
   161                              <1>     
   162 000006A1 50                  <1>     push eax
   163 000006A2 53                  <1>     push ebx
   164 000006A3 51                  <1>     push ecx
   165 000006A4 52                  <1>     push edx
   166 000006A5 57                  <1>     push edi
   167 000006A6 56                  <1>     push esi
   168                              <1> 
   169 000006A7 8B7508              <1>     mov esi, [ebp + 8]          ; font
   170 000006AA 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   171 000006AD 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   172 000006B1 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   173                              <1>     ; bh = 背景色 bl = 前景色
   174                              <1> 
   175 000006B5 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   176 000006B7 0F94C6              <1>     setz dh         ; dh = zf
   177 000006BA FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   178                              <1> 
   179 000006BC 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   180 000006BE 0F94C2              <1>     setz dl         ; dl = zf
   181 000006C1 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   182                              <1> 
   183                              <1>     ; 16ドットフォントのコピー
   184 000006C3 FC                  <1>     cld             ; アドレス加算モード
   185                              <1> 
   186 000006C4 B910000000          <1>     mov ecx, 16
   187                              <1> .10L:
   188                              <1>     ; フォントマスクの作成
   189 000006C9 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   190 000006CA 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   191 000006CC F6D4                <1>     not ah
   192                              <1> 
   193                              <1>     ; 前景色
   194 000006CE 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   195                              <1> 
   196                              <1>     ; 背景色
   197 000006D0 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   198 000006D6 7404                <1>     jz .11F
   199                              <1>     ; 透過on
   200 000006D8 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   201 000006DA EB02                <1>     jmp .11E
   202                              <1> .11F:                   ; 透過off
   203 000006DC 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   204                              <1> .11E:
   205                              <1>     
   206                              <1>     ; 前景色と背景色を合成
   207 000006DE 08E0                <1>     or al, ah           ; al = 背景 | 前景
   208                              <1> 
   209                              <1>     ; 新しい値を出力
   210 000006E0 8807                <1>     mov [edi], al
   211                              <1> 
   212 000006E2 83C750              <1>     add edi, 80      ; 1行すすめる
   213 000006E5 E2E2                <1>     loop .10L
   214                              <1> .10E:
   215                              <1> 
   216 000006E7 5E                  <1>     pop esi
   217 000006E8 5F                  <1>     pop edi
   218 000006E9 5A                  <1>     pop edx
   219 000006EA 59                  <1>     pop ecx
   220 000006EB 5B                  <1>     pop ebx
   221 000006EC 58                  <1>     pop eax
   222                              <1> 
   223 000006ED 89EC                <1>     mov esp, ebp
   224 000006EF 5D                  <1>     pop ebp
   225                              <1> 
   226 000006F0 C3                  <1>     ret
   227                              <1> 
   228                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   229                              <1> ; bitデータ
   230                              <1> ; vram VRAMアドレス
   231                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   232                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   233 000006F1 55                  <1>     push ebp
   234 000006F2 89E5                <1>     mov ebp, esp
   235                              <1>     
   236 000006F4 50                  <1>     push eax
   237 000006F5 53                  <1>     push ebx
   238 000006F6 52                  <1>     push edx
   239 000006F7 57                  <1>     push edi
   240                              <1> 
   241 000006F8 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   242 000006FB 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   243 000006FF 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   244                              <1>     ; bl = 前景色
   245                              <1> 
   246                              <1>     ; 常に透過モード
   247 00000703 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   248 00000705 0F94C3              <1>     setz bl         ; dl = zf
   249 00000708 FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   250                              <1> 
   251                              <1>     ; マスク
   252 0000070A 8A4508              <1>     mov al, [ebp + 8]   ; bit
   253 0000070D 88C4                <1>     mov ah, al      ; ah ~= al
   254 0000070F F6D4                <1>     not ah
   255                              <1> 
   256 00000711 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   257 00000713 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   258 00000715 08E0                <1>     or al, ah           ; 背景と前景を合成
   259 00000717 8807                <1>     mov [edi], al       ; プレーンに書き込み
   260                              <1>     
   261                              <1> 
   262 00000719 5F                  <1>     pop edi
   263 0000071A 5A                  <1>     pop edx
   264 0000071B 5B                  <1>     pop ebx
   265 0000071C 58                  <1>     pop eax
   266                              <1> 
   267 0000071D 89EC                <1>     mov esp, ebp
   268 0000071F 5D                  <1>     pop ebp
   269                              <1> 
   270 00000720 C3                  <1>     ret
   105                                  %include "../modules/protect/draw_char.s"
   106                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   107                              <1> ; col 列（0～79）
   108                              <1> ; row 行（0～29）
   109                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   110                              <1> ; ch 文字
   111                              <1> 
   112 00000721 55                  <1>     push ebp
   113 00000722 89E5                <1>     mov ebp, esp
   114                              <1> 
   115 00000724 53                  <1>     push ebx
   116 00000725 56                  <1>     push esi
   117 00000726 57                  <1>     push edi
   118                              <1> 
   119                              <1> %ifdef USE_TEST_AND_SET
   120 00000727 68[F8070000]E86E08- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   120 0000072F 00006683C404        <1>
   121                              <1> %endif
   122                              <1> 
   123                              <1>     ; コピー元フォントアドレスを設定
   124 00000735 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   125 00000739 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   126 0000073C 0335[00020000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   127                              <1> 
   128                              <1>     ; コピー先アドレスを取得
   129                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   130                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   131 00000742 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   132 00000745 C1E708              <1>     shl edi, 8
   133 00000748 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   134 0000074F 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   135                              <1> 
   136                              <1>     ; 1文字分のフォントを出力
   137 00000752 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   138                              <1> 
   139                              <1>     ; 輝度I
   140 00000756 6A03E807FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   140 0000075F C404                <1>
   141 00000761 6A08E819FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   141 0000076A C404                <1>
   142 0000076C 536A085756E828FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   142 00000775 FF6683C410          <1>
   143                              <1> 
   144                              <1>     ; 赤R
   145 0000077A 6A02E8E3FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   145 00000783 C404                <1>
   146 00000785 6A04E8F5FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   146 0000078E C404                <1>
   147 00000790 536A045756E804FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   147 00000799 FF6683C410          <1>
   148                              <1> 
   149                              <1>     ; 緑G
   150 0000079E 6A01E8BFFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   150 000007A7 C404                <1>
   151 000007A9 6A02E8D1FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   151 000007B2 C404                <1>
   152 000007B4 536A025756E8E0FEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   152 000007BD FF6683C410          <1>
   153                              <1> 
   154                              <1>     ; 青B
   155 000007C2 6A00E89BFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   155 000007CB C404                <1>
   156 000007CD 6A01E8ADFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   156 000007D6 C404                <1>
   157 000007D8 536A015756E8BCFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   157 000007E1 FF6683C410          <1>
   158                              <1> 
   159                              <1> %ifdef USE_TEST_AND_SET
   160 000007E6 C705[F8070000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   160 000007EE 0000                <1>
   161                              <1> %endif
   162                              <1> 
   163 000007F0 5F                  <1>     pop edi
   164 000007F1 5E                  <1>     pop esi
   165 000007F2 5B                  <1>     pop ebx
   166                              <1> 
   167 000007F3 89EC                <1>     mov esp, ebp
   168 000007F5 5D                  <1>     pop ebp
   169                              <1> 
   170 000007F6 C3                  <1>     ret
   171                              <1> 
   172 000007F7 00                  <1> ALIGN 4, db 0
   173 000007F8 00000000            <1> IN_USE:  dd 0
   106                                  %include "../modules/protect/draw_font.s"
   107                              <1> draw_font:  ; void draw_font(col, row);
   108                              <1> ; col 列
   109                              <1> ; row 行
   110 000007FC 55                  <1>     push ebp
   111 000007FD 89E5                <1>     mov ebp, esp
   112                              <1> 
   113 000007FF 50                  <1>     push eax
   114 00000800 53                  <1>     push ebx
   115 00000801 51                  <1>     push ecx
   116 00000802 57                  <1>     push edi
   117 00000803 56                  <1>     push esi
   118                              <1> 
   119                              <1> 
   120 00000804 8B7508              <1>     mov esi, [ebp + 8]  ; x
   121 00000807 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   122                              <1> 
   123 0000080A B900000000          <1>     mov ecx, 0
   124                              <1> .10L:
   125 0000080F 81F900010000        <1>     cmp ecx, 256
   126 00000815 731F                <1>     jae .10E
   127                              <1> 
   128 00000817 89C8                <1>     mov eax, ecx
   129 00000819 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   130 0000081C 01F0                <1>     add eax, esi    ; eax += x
   131                              <1> 
   132 0000081E 89CB                <1>     mov ebx, ecx
   133 00000820 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   134 00000823 01FB                <1>     add ebx, edi    ; ebx += y
   135                              <1> 
   136 00000825 516A075350E8F2FEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   136 0000082E FF6683C410          <1>
   137                              <1> 
   138 00000833 41                  <1>     inc ecx
   139 00000834 EBD9                <1>     jmp .10L
   140                              <1> .10E:
   141                              <1> 
   142 00000836 5E                  <1>     pop esi
   143 00000837 5F                  <1>     pop edi
   144 00000838 59                  <1>     pop ecx
   145 00000839 5B                  <1>     pop ebx
   146 0000083A 58                  <1>     pop eax
   147                              <1> 
   148 0000083B 89EC                <1>     mov esp, ebp
   149 0000083D 5D                  <1>     pop ebp
   150                              <1> 
   151 0000083E C3                  <1>     ret
   107                                  %include "../modules/protect/draw_str.s"
   108                              <1> draw_str:   ;void draw_str(col, row, color, p);
   109                              <1> ; col: 列
   110                              <1> ; row: 行
   111                              <1> ; color: 描画色
   112                              <1> ; p: 文字列のアドレス
   113 0000083F 55                  <1>     push ebp
   114 00000840 89E5                <1>     mov ebp, esp
   115                              <1> 
   116 00000842 50                  <1>     push eax
   117 00000843 53                  <1>     push ebx
   118 00000844 51                  <1>     push ecx
   119 00000845 52                  <1>     push edx
   120 00000846 56                  <1>     push esi
   121                              <1> 
   122                              <1> 
   123 00000847 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   124 0000084A 8B550C              <1>     mov edx, [ebp +12]  ; row
   125 0000084D 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   126 00000851 8B7514              <1>     mov esi, [ebp +20]  ; p
   127                              <1> 
   128 00000854 FC                  <1>     cld
   129                              <1> .10L:
   130 00000855 AC                  <1>     lodsb
   131 00000856 3C00                <1>     cmp al, 0
   132 00000858 741A                <1>     je .10E
   133                              <1> 
   134                              <1> %ifdef USE_SYSTEM_CALL
   135 0000085A CD81                <1>     int 0x81
   136                              <1> %else
   137                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   138                              <1> %endif
   139                              <1> 
   140 0000085C 41                  <1>     inc ecx
   141 0000085D 83F950              <1>     cmp ecx, 80
   142 00000860 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   143 00000862 B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   144 00000867 42                  <1>     inc edx
   145 00000868 83FA1E              <1>     cmp edx, 30
   146 0000086B 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   147 0000086D BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   148                              <1> .12E:
   149 00000872 EBE1                <1>     jmp .10L
   150                              <1> .10E:
   151                              <1> 
   152 00000874 5E                  <1>     pop esi
   153 00000875 5A                  <1>     pop edx
   154 00000876 59                  <1>     pop ecx
   155 00000877 5B                  <1>     pop ebx
   156 00000878 58                  <1>     pop eax
   157                              <1> 
   158 00000879 89EC                <1>     mov esp, ebp
   159 0000087B 5D                  <1>     pop ebp
   160                              <1> 
   161 0000087C C3                  <1>     ret
   108                                  %include "../modules/protect/draw_color_bar.s"
   109                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   110                              <1> ; col: 列
   111                              <1> ; row: 行
   112 0000087D 55                  <1>     push ebp
   113 0000087E 89E5                <1>     mov ebp, esp
   114                              <1> 
   115 00000880 50                  <1>     push eax
   116 00000881 53                  <1>     push ebx
   117 00000882 51                  <1>     push ecx
   118 00000883 52                  <1>     push edx
   119 00000884 56                  <1>     push esi
   120 00000885 57                  <1>     push edi
   121                              <1> 
   122                              <1> 
   123 00000886 8B7508              <1>     mov esi, [ebp + 8]      ; x
   124 00000889 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   125                              <1> 
   126                              <1>     ; カラーバーを表示
   127 0000088C B900000000          <1>     mov ecx, 0
   128                              <1> .10L:
   129 00000891 83F910              <1>     cmp ecx, 16
   130 00000894 732E                <1>     jae .10E
   131                              <1> 
   132                              <1>     ; 一回で8文字
   133 00000896 89C8                <1>     mov eax, ecx
   134 00000898 83E001              <1>     and eax, 0x01
   135 0000089B C1E003              <1>     shl eax, 3
   136 0000089E 01F0                <1>     add eax, esi    ; col
   137                              <1> 
   138                              <1>     ; 2回に1回改行
   139 000008A0 89CB                <1>     mov ebx, ecx
   140 000008A2 D1EB                <1>     shr ebx, 1
   141 000008A4 01FB                <1>     add ebx, edi    ; row
   142                              <1> 
   143                              <1>     ; 背景色を2色見たら下位次の行
   144 000008A6 89CA                <1>     mov edx, ecx
   145 000008A8 D1E2                <1>     shl edx, 1
   146 000008AA 8B92[D7080000]      <1>     mov edx, [.t0 + edx]    ; color
   147                              <1> 
   148 000008B0 68[CE080000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   148 000008B8 E882FFFFFF6683C410  <1>
   149                              <1> 
   150 000008C1 41                  <1>     inc ecx
   151 000008C2 EBCD                <1>     jmp .10L
   152                              <1> .10E:
   153                              <1> 
   154 000008C4 5F                  <1>     pop edi
   155 000008C5 5E                  <1>     pop esi
   156 000008C6 5A                  <1>     pop edx
   157 000008C7 59                  <1>     pop ecx
   158 000008C8 5B                  <1>     pop ebx
   159 000008C9 58                  <1>     pop eax
   160                              <1> 
   161 000008CA 89EC                <1>     mov esp, ebp
   162 000008CC 5D                  <1>     pop ebp
   163                              <1> 
   164 000008CD C3                  <1>     ret
   165                              <1> 
   166                              <1> 
   167 000008CE 202020202020202000  <1> .s0: db '        ', 0
   168                              <1> 
   169                              <1> .t0:
   170 000008D7 00000008            <1>     dw 0x0000, 0x0800
   171 000008DB 00010009            <1>     dw 0x0100, 0x0900
   172 000008DF 0002000A            <1>     dw 0x0200, 0x0A00
   173 000008E3 0003000B            <1>     dw 0x0300, 0x0B00
   174 000008E7 0004000C            <1>     dw 0x0400, 0x0C00
   175 000008EB 0005000D            <1>     dw 0x0500, 0x0D00
   176 000008EF 0006000E            <1>     dw 0x0600, 0x0E00
   177 000008F3 0007000F            <1>     dw 0x0700, 0x0F00
   109                                  %include "../modules/protect/draw_pixel.s"
   110                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   111                              <1> ; x: X座標
   112                              <1> ; y: Y座標
   113                              <1> ; color: 描画色
   114 000008F7 55                  <1>     push ebp
   115 000008F8 89E5                <1>     mov ebp, esp
   116                              <1> 
   117 000008FA 50                  <1>     push eax
   118 000008FB 53                  <1>     push ebx
   119 000008FC 51                  <1>     push ecx
   120 000008FD 57                  <1>     push edi
   121                              <1> 
   122                              <1> 
   123                              <1> 
   124                              <1>     ; y座標*80->y*(640/8)
   125 000008FE 8B7D0C              <1>     mov edi, [ebp +12]
   126 00000901 C1E704              <1>     shl edi, 4
   127 00000904 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   128                              <1> 
   129                              <1>     ; x座標/8  8pixel単位の位置
   130 0000090B 8B5D08              <1>     mov ebx, [ebp + 8]
   131 0000090E 89D9                <1>     mov ecx, ebx
   132 00000910 C1EB03              <1>     shr ebx, 3
   133 00000913 01DF                <1>     add edi, ebx
   134                              <1> 
   135                              <1>     ; x座標を8で割った余りからビット位置を計算
   136                              <1>     ; 8pixel中の位置
   137                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   138 00000915 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   139 00000918 BB80000000          <1>     mov ebx, 0x80
   140 0000091D D3EB                <1>     shr ebx, cl
   141                              <1> 
   142 0000091F 8B4D10              <1>     mov ecx, [ebp +16]
   143                              <1> 
   144                              <1>     ; プレーンごとに出力
   145 00000922 6A03E83BFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   145 0000092B C404                <1>
   146 0000092D 6A08E84DFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   146 00000936 C404                <1>
   147 00000938 516A085753E8AFFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   147 00000941 FF6683C410          <1>
   148                              <1> 
   149 00000946 6A02E817FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   149 0000094F C404                <1>
   150 00000951 6A04E829FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   150 0000095A C404                <1>
   151 0000095C 516A045753E88BFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   151 00000965 FF6683C410          <1>
   152                              <1> 
   153 0000096A 6A01E8F3FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   153 00000973 C404                <1>
   154 00000975 6A02E805FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   154 0000097E C404                <1>
   155 00000980 516A025753E867FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   155 00000989 FF6683C410          <1>
   156                              <1> 
   157 0000098E 6A00E8CFFCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   157 00000997 C404                <1>
   158 00000999 6A01E8E1FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   158 000009A2 C404                <1>
   159 000009A4 516A015753E843FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   159 000009AD FF6683C410          <1>
   160                              <1> 
   161 000009B2 5F                  <1>     pop edi
   162 000009B3 59                  <1>     pop ecx
   163 000009B4 5B                  <1>     pop ebx
   164 000009B5 58                  <1>     pop eax
   165                              <1> 
   166 000009B6 89EC                <1>     mov esp, ebp
   167 000009B8 5D                  <1>     pop ebp
   168                              <1> 
   169 000009B9 C3                  <1>     ret
   110                                  %include "../modules/protect/draw_line.s"
   111                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   112                              <1> ; X0 始点のＸ座標
   113                              <1> ; Y0 始点のＹ座標
   114                              <1> ; X1 終点のX座標
   115                              <1> ; Y1 終点のY座標
   116                              <1> ; color 描画色
   117 000009BA 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   118 000009BB 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   119                              <1>                     ; ----------------
   120 000009BD 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   121 000009BF 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   122 000009C1 6A00                <1>     push dword 0    ;    -12| dx    = 0
   123 000009C3 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   124 000009C5 6A00                <1>     push dword 0    ;    -20| y0    = 0
   125 000009C7 6A00                <1>     push dword 0    ;    -24| dy    = 0
   126 000009C9 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   127                              <1> 
   128 000009CB 50                  <1>     push eax        ;    -32| eax
   129 000009CC 53                  <1>     push ebx        ;    -36| ebx
   130 000009CD 51                  <1>     push ecx        ;    -40| ecx
   131 000009CE 52                  <1>     push edx        ;    -44| edx
   132 000009CF 56                  <1>     push esi        ;    -48| esi
   133 000009D0 57                  <1>     push edi        ;    -52| edi
   134                              <1>     ; espはebp-52?
   135                              <1> 
   136                              <1>     ; x0とx1の距離を計算
   137 000009D1 8B4508              <1>     mov eax, [ebp + 8]
   138 000009D4 8B5D10              <1>     mov ebx, [ebp +16]
   139 000009D7 29C3                <1>     sub ebx, eax
   140 000009D9 7D09                <1>     jge .10F
   141                              <1> 
   142 000009DB F7DB                <1>     neg ebx
   143 000009DD BEFFFFFFFF          <1>     mov esi, -1
   144 000009E2 EB05                <1>     jmp .10E
   145                              <1> .10F:
   146 000009E4 BE01000000          <1>     mov esi, 1
   147                              <1> .10E:
   148                              <1>     
   149                              <1>     ; y0とy1の距離を計算
   150 000009E9 8B4D0C              <1>     mov ecx, [ebp +12]
   151 000009EC 8B5514              <1>     mov edx, [ebp +20]
   152 000009EF 29CA                <1>     sub edx, ecx
   153 000009F1 7D09                <1>     jge .20F
   154                              <1> 
   155 000009F3 F7DA                <1>     neg edx
   156 000009F5 BFFFFFFFFF          <1>     mov edi, -1
   157 000009FA EB05                <1>     jmp .20E
   158                              <1> .20F:
   159 000009FC BF01000000          <1>     mov edi, 1
   160                              <1> .20E:
   161                              <1>     
   162                              <1>     ; x軸
   163 00000A01 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   164 00000A04 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   165 00000A07 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   166                              <1> 
   167                              <1>     ; y軸
   168 00000A0A 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   169 00000A0D 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   170 00000A10 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   171                              <1> 
   172                              <1> 
   173                              <1>     ; 基準軸を決める
   174 00000A13 39D3                <1>     cmp ebx, edx
   175 00000A15 7F08                <1>     jg .22F
   176                              <1>     
   177 00000A17 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   178 00000A1A 8D7DF8              <1>     lea edi, [ebp - 8]
   179                              <1> 
   180 00000A1D EB06                <1>     jmp .22E
   181                              <1> .22F:
   182                              <1>     
   183 00000A1F 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   184 00000A22 8D7DEC              <1>     lea edi, [ebp -20]
   185                              <1> .22E:
   186                              <1> 
   187                              <1> ; 基準軸 esi
   188                              <1> ; 相対軸 edi
   189                              <1> 
   190                              <1>     ; 繰り返し回数（基準軸のドット数）
   191 00000A25 8B4EFC              <1>     mov ecx, [esi - 4]
   192 00000A28 83F900              <1>     cmp ecx, 0
   193 00000A2B 7505                <1>     jnz .30E
   194 00000A2D B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   195                              <1> .30E:
   196                              <1> 
   197                              <1>     ; 線を描画
   198                              <1> .50L:
   199                              <1> 
   200                              <1> %ifdef USE_SYSTEM_CALL
   201 00000A32 89C8                <1>     mov eax, ecx
   202 00000A34 8B4DF8              <1>     mov ecx, [ebp - 8]
   203 00000A37 8B55EC              <1>     mov edx, [ebp -20]
   204 00000A3A 8B5D18              <1>     mov ebx, [ebp +24]
   205 00000A3D CD82                <1>     int 0x82            ; sys_call()
   206 00000A3F 89C1                <1>     mov ecx, eax
   207                              <1> %else
   208                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   211                              <1> %endif
   212                              <1> 
   213                              <1>     ; 座標更新
   214                              <1> 
   215                              <1>     ; 基準軸の更新
   216 00000A41 8B46F8              <1>     mov eax, [esi - 8]
   217 00000A44 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   218                              <1> 
   219                              <1>     ; 相対軸の更新
   220 00000A46 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   221 00000A49 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   222                              <1> 
   223 00000A4C 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   224                              <1> 
   225 00000A4F 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   226 00000A51 7C07                <1>     jl .52E
   227 00000A53 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   228                              <1> 
   229 00000A55 8B5FF8              <1>     mov ebx, [edi - 8]
   230 00000A58 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   231                              <1> .52E:
   232                              <1>     
   233 00000A5A 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   234                              <1> 
   235 00000A5D E2D3                <1>     loop .50L
   236                              <1> .50E:
   237                              <1> 
   238                              <1> 
   239 00000A5F 5F                  <1>     pop edi
   240 00000A60 5E                  <1>     pop esi
   241 00000A61 5A                  <1>     pop edx
   242 00000A62 59                  <1>     pop ecx
   243 00000A63 5B                  <1>     pop ebx
   244 00000A64 58                  <1>     pop eax
   245                              <1> 
   246 00000A65 89EC                <1>     mov esp, ebp
   247 00000A67 5D                  <1>     pop ebp
   248                              <1> 
   249 00000A68 C3                  <1>     ret
   111                                  %include "../modules/protect/draw_rect.s"
   112                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   113 00000A69 55                  <1>     push ebp
   114 00000A6A 89E5                <1>     mov ebp, esp
   115                              <1>     
   116 00000A6C 50                  <1>     push eax
   117 00000A6D 53                  <1>     push ebx
   118 00000A6E 51                  <1>     push ecx
   119 00000A6F 52                  <1>     push edx
   120 00000A70 56                  <1>     push esi
   121                              <1> 
   122 00000A71 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   123 00000A74 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   124 00000A77 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   125 00000A7A 8B5514              <1>     mov edx, [ebp +20]  ; y1
   126 00000A7D 8B7518              <1>     mov esi, [ebp +24]  ; color
   127                              <1> 
   128                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   129 00000A80 39C8                <1>     cmp eax, ecx
   130 00000A82 7C01                <1>     jl .10E
   131 00000A84 91                  <1>     xchg eax, ecx
   132                              <1> .10E:
   133 00000A85 39D3                <1>     cmp ebx, edx
   134 00000A87 7C02                <1>     jl .20E
   135 00000A89 87DA                <1>     xchg ebx, edx
   136                              <1> .20E:
   137                              <1> 
   138                              <1>     ; 矩形を描画
   139 00000A8B 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   139 00000A94 FF6683C414          <1>
   140 00000A99 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   140 00000AA2 FF6683C414          <1>
   141                              <1> 
   142 00000AA7 4A                  <1>     dec edx
   143 00000AA8 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   143 00000AB1 FF6683C414          <1>
   144 00000AB6 42                  <1>     inc edx
   145                              <1> 
   146 00000AB7 49                  <1>     dec ecx
   147 00000AB8 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   147 00000AC1 FF6683C414          <1>
   148                              <1> 
   149 00000AC6 5E                  <1>     pop esi
   150 00000AC7 5A                  <1>     pop edx
   151 00000AC8 59                  <1>     pop ecx
   152 00000AC9 5B                  <1>     pop ebx
   153 00000ACA 58                  <1>     pop eax
   154                              <1>     
   155 00000ACB 89EC                <1>     mov esp, ebp
   156 00000ACD 5D                  <1>     pop ebp
   157                              <1> 
   158 00000ACE C3                  <1>     ret
   112                                  %include "../modules/protect/itoa.s"
   113                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   114                              <1> ; num   変換する値
   115                              <1> ; buff  保存先バッファアドレス
   116                              <1> ; size  保存先バッファサイズ
   117                              <1> ; radix 基数（2, 8, 10, 16)
   118                              <1> ; flags 
   119                              <1> ;   B2: 空白を'0'で埋める
   120                              <1> ;   B1: '+/-'記号を付加する
   121                              <1> ;   B0: 値を符号付き変数として扱う
   122                              <1> 
   123 00000ACF 55                  <1>     push ebp
   124 00000AD0 89E5                <1>     mov ebp, esp
   125                              <1> 
   126 00000AD2 50                  <1>     push eax
   127 00000AD3 53                  <1>     push ebx
   128 00000AD4 51                  <1>     push ecx
   129 00000AD5 52                  <1>     push edx
   130 00000AD6 56                  <1>     push esi
   131 00000AD7 57                  <1>     push edi
   132                              <1> 
   133                              <1> 
   134                              <1>     ; 引数取得
   135 00000AD8 8B4508              <1>     mov eax, [ebp + 8]    ; num
   136 00000ADB 8B750C              <1>     mov esi, [ebp +12]    ; size
   137 00000ADE 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   138                              <1> 
   139 00000AE1 89F7                <1>     mov edi, esi
   140 00000AE3 01CF                <1>     add edi, ecx
   141 00000AE5 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   142                              <1> 
   143 00000AE6 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   144                              <1> 
   145                              <1>     ; 符号付き判定
   146 00000AE9 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   147                              <1> .10Q:
   148 00000AEF 7408                <1>     je .10E         ; E=Exit
   149 00000AF1 83F800              <1>     cmp eax, 0
   150                              <1> .12Q:
   151 00000AF4 7D03                <1>     jge .12E
   152 00000AF6 83CB02              <1>     or ebx, 0b0010
   153                              <1> .12E:
   154                              <1> .10E:
   155                              <1> 
   156                              <1>     ; 符号出力判定
   157 00000AF9 F7C302000000        <1>     test ebx, 0b0010
   158                              <1> .20Q:
   159 00000AFF 7410                <1>     je .20E
   160 00000B01 83F800              <1>     cmp eax, 0
   161                              <1> .22Q:
   162 00000B04 7D07                <1>     jge .22F
   163 00000B06 F7D8                <1>     neg eax
   164 00000B08 C6062D              <1>     mov [esi], byte '-'
   165 00000B0B EB03                <1>     jmp .22E
   166                              <1> .22F:
   167                              <1>     
   168 00000B0D C6062B              <1>     mov [esi], byte '+'
   169                              <1> .22E:
   170 00000B10 49                  <1>     dec ecx
   171                              <1> .20E:
   172                              <1> 
   173                              <1>     ; ASCII変換
   174 00000B11 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   175                              <1> .30L:
   176 00000B14 BA00000000          <1>     mov edx, 0
   177 00000B19 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   178                              <1> 
   179 00000B1B 89D6                <1>     mov esi, edx
   180 00000B1D 8A96[470B0000]      <1>     mov dl, byte [.ascii + esi]
   181                              <1> 
   182 00000B23 8817                <1>     mov [edi], dl
   183 00000B25 4F                  <1>     dec edi
   184                              <1> 
   185 00000B26 83F800              <1>     cmp eax, 0
   186 00000B29 E0E9                <1>     loopnz .30L
   187                              <1> .30E:
   188                              <1> 
   189                              <1>     ; 空欄を埋める
   190 00000B2B 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   191                              <1> .40Q:
   192 00000B2E 740D                <1>     je .40E
   193 00000B30 B020                <1>     mov al, ' '
   194 00000B32 837D1804            <1>     cmp [ebp +24], dword 0b0100
   195                              <1> .42Q:
   196 00000B36 7502                <1>     jne .42E
   197 00000B38 B030                <1>     mov al, '0'
   198                              <1> .42E:
   199 00000B3A FD                  <1>     std         ; dimention flag = 1(-方向)
   200 00000B3B F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   201                              <1> .40E:
   202                              <1> 
   203 00000B3D 5F                  <1>     pop edi
   204 00000B3E 5E                  <1>     pop esi
   205 00000B3F 5A                  <1>     pop edx
   206 00000B40 59                  <1>     pop ecx
   207 00000B41 5B                  <1>     pop ebx
   208 00000B42 58                  <1>     pop eax
   209                              <1> 
   210 00000B43 89EC                <1>     mov esp, ebp
   211 00000B45 5D                  <1>     pop ebp
   212                              <1> 
   213 00000B46 C3                  <1>     ret
   214                              <1> 
   215 00000B47 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   215 00000B50 39414243444546      <1>
   113                                  %include "../modules/protect/rtc.s"
   114                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   115                              <1> ; dst: 保存先アドレス
   116                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   117 00000B57 55                  <1>     push ebp
   118 00000B58 89E5                <1>     mov ebp, esp
   119                              <1> 
   120 00000B5A 50                  <1>     push eax
   121 00000B5B 53                  <1>     push ebx
   122                              <1> 
   123 00000B5C B00A                <1>     mov al, 0x0A    ; レジスタA
   124 00000B5E E670                <1>     out 0x70, al
   125 00000B60 E471                <1>     in al, 0x71
   126 00000B62 A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   127 00000B64 7407                <1>     je .10F
   128 00000B66 B801000000          <1>     mov eax, 1      ; 更新中は失敗
   129 00000B6B EB27                <1>     jmp .10E
   130                              <1> .10F:
   131                              <1> 
   132 00000B6D B004                <1>     mov al, 0x04    ; 時
   133 00000B6F E670                <1>     out 0x70, al    ; レジスタ設定
   134 00000B71 E471                <1>     in al, 0x71     ; 時刻読み込み
   135                              <1> 
   136 00000B73 C1E008              <1>     shl eax, 8      ; alをahに退避
   137                              <1> 
   138 00000B76 B002                <1>     mov al, 0x02    ; 分
   139 00000B78 E670                <1>     out 0x70, al    ; レジスタ設定
   140 00000B7A E471                <1>     in al, 0x71     ; 時刻読み込み
   141                              <1> 
   142 00000B7C C1E008              <1>     shl eax, 8      ; alをahに退避
   143                              <1> 
   144 00000B7F B000                <1>     mov al, 0x00    ; 秒
   145 00000B81 E670                <1>     out 0x70, al    ; レジスタ設定
   146 00000B83 E471                <1>     in al, 0x71     ; 時刻読み込み
   147                              <1> 
   148 00000B85 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   149                              <1> 
   150 00000B8A 8B5D08              <1>     mov ebx, [ebp + 8]
   151 00000B8D 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   152                              <1> 
   153 00000B8F B800000000          <1>     mov eax, 0
   154                              <1> .10E:
   155                              <1> 
   156 00000B94 5B                  <1>     pop ebx
   157 00000B95 58                  <1>     pop eax
   158                              <1> 
   159 00000B96 89EC                <1>     mov esp, ebp
   160 00000B98 5D                  <1>     pop ebp
   161                              <1> 
   162 00000B99 C3                  <1>     ret
   114                                  %include "../modules/protect/draw_time.s"
   115                              <1> draw_time:  ; void draw_time(col, row, color, time);
   116                              <1> ; time 時刻データ
   117 00000B9A 55                  <1>     push ebp
   118 00000B9B 89E5                <1>     mov ebp, esp
   119                              <1> 
   120 00000B9D 50                  <1>     push eax
   121 00000B9E 53                  <1>     push ebx
   122                              <1>     
   123 00000B9F 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   124                              <1> 
   125 00000BA2 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   126 00000BA5 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   126 00000BAC [0C0C0000]53E819FF- <1>
   126 00000BB4 FFFF6683C414        <1>
   127                              <1> 
   128 00000BBA 88E3                <1>     mov bl, ah          ; 分だけ
   129 00000BBC 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   129 00000BC3 [090C0000]53E802FF- <1>
   129 00000BCB FFFF6683C414        <1>
   130                              <1>     
   131 00000BD1 C1E810              <1>     shr eax, 16         ; 時だけ
   132 00000BD4 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   132 00000BDB [060C0000]50E8EAFE- <1>
   132 00000BE3 FFFF6683C414        <1>
   133                              <1> 
   134 00000BE9 68[060C0000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   134 00000BF1 FF750CFF7508E843FC- <1>
   134 00000BFA FFFF6683C410        <1>
   135                              <1> 
   136 00000C00 5B                  <1>     pop ebx
   137 00000C01 58                  <1>     pop eax
   138                              <1> 
   139 00000C02 89EC                <1>     mov esp, ebp
   140 00000C04 5D                  <1>     pop ebp
   141                              <1> 
   142 00000C05 C3                  <1>     ret
   143                              <1> 
   144 00000C06 5A5A3A              <1> .hour: db "ZZ:"
   145 00000C09 5A5A3A              <1> .min:  db "ZZ:"
   146 00000C0C 5A5A00              <1> .sec:  db "ZZ", 0
   115                                  %include "../modules/protect/interrupt.s"
   116                              <1> int_stop:
   117 00000C0F FB                  <1>     sti ; 割り込みを許可
   118                              <1> 
   119                              <1>     ; EAXで示される文字列を表示
   120 00000C10 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   120 00000C19 19E820FCFFFF6683C4- <1>
   120 00000C22 10                  <1>
   121                              <1> 
   122                              <1>     ; スタックのデータを文字列に変換
   123 00000C23 8B0424              <1>     mov eax, [esp + 0]
   124 00000C26 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   124 00000C2D [EB0C0000]50E898FE- <1>
   124 00000C35 FFFF6683C414        <1>
   125                              <1> 
   126 00000C3B 8B442404            <1>     mov eax, [esp + 4]
   127 00000C3F 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   127 00000C46 [FC0C0000]50E87FFE- <1>
   127 00000C4E FFFF6683C414        <1>
   128                              <1> 
   129 00000C54 8B442408            <1>     mov eax, [esp + 8]
   130 00000C58 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   130 00000C5F [0D0D0000]50E866FE- <1>
   130 00000C67 FFFF6683C414        <1>
   131                              <1> 
   132 00000C6D 8B44240C            <1>     mov eax, [esp +12]
   133 00000C71 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   133 00000C78 [1E0D0000]50E84DFE- <1>
   133 00000C80 FFFF6683C414        <1>
   134                              <1> 
   135                              <1>     ; 文字列の表示
   136 00000C86 68[E40C0000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   136 00000C8E 00006A106A19E8A6FB- <1>
   136 00000C97 FFFF6683C410        <1>
   137 00000C9D 68[F50C0000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   137 00000CA5 00006A116A19E88FFB- <1>
   137 00000CAE FFFF6683C410        <1>
   138 00000CB4 68[060D0000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   138 00000CBC 00006A126A19E878FB- <1>
   138 00000CC5 FFFF6683C410        <1>
   139 00000CCB 68[170D0000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   139 00000CD3 00006A136A19E861FB- <1>
   139 00000CDC FFFF6683C410        <1>
   140                              <1> 
   141                              <1>     ; 無限ループ
   142 00000CE2 EBFE                <1>     jmp $
   143                              <1> 
   144 00000CE4 4553502B20303A      <1> .s1 db "ESP+ 0:"
   145 00000CEB 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   145 00000CF4 00                  <1>
   146 00000CF5 2020202B20343A      <1> .s2 db "   + 4:"
   147 00000CFC 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   147 00000D05 00                  <1>
   148 00000D06 2020202B20383A      <1> .s3 db "   + 8:"
   149 00000D0D 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   149 00000D16 00                  <1>
   150 00000D17 2020202B31323A      <1> .s4 db "   +12:"
   151 00000D1E 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   151 00000D27 00                  <1>
   152                              <1> 
   153                              <1> int_default:
   154 00000D28 9C                  <1>     pushf       ; EFLAGS(IF==0)
   155 00000D29 0E                  <1>     push cs
   156 00000D2A 68[0F0C0000]        <1>     push int_stop
   157                              <1> 
   158 00000D2F B8[350D0000]        <1>     mov eax, .s0
   159 00000D34 CF                  <1>     iret
   160                              <1> 
   161 00000D35 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   161 00000D3E 50202020203E2000    <1>
   162                              <1> 
   163                              <1> 
   164                              <1> ; 割り込みベクタの初期化
   165 00000D46 90<rep 2h>          <1> ALIGN 4
   166 00000D48 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   167 00000D4A 00001000            <1>       dd VECT_BASE      ; idt location
   168                              <1> 
   169                              <1> ; 割り込みテーブルを初期化
   170                              <1> init_int:
   171 00000D4E 50                  <1>     push eax
   172 00000D4F 53                  <1>     push ebx
   173 00000D50 51                  <1>     push ecx
   174 00000D51 57                  <1>     push edi
   175                              <1> 
   176                              <1>     ; 全ての割り込みにデフォルト処理を設定
   177 00000D52 8D05[280D0000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   178 00000D58 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   179 00000D5D 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   180                              <1> 
   181 00000D5F B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   182 00000D64 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   183                              <1> 
   184                              <1>     ; メモリに書き込み
   185                              <1> .10L:
   186 00000D69 891F                <1>     mov [edi + 0], ebx
   187 00000D6B 894704              <1>     mov [edi + 4], eax
   188 00000D6E 83C708              <1>     add edi, 8
   189 00000D71 E2F6                <1>     loop .10L
   190                              <1> 
   191                              <1>     ; 割り込みディスクリプタの設定
   192 00000D73 0F011D[480D0000]    <1>     lidt [IDTR]
   193                              <1> 
   194 00000D7A 5F                  <1>     pop edi
   195 00000D7B 59                  <1>     pop ecx
   196 00000D7C 5B                  <1>     pop ebx
   197 00000D7D 58                  <1>     pop eax
   198                              <1> 
   199 00000D7E C3                  <1>     ret
   200                              <1> 
   201                              <1> 
   202                              <1> int_zero_div:
   203 00000D7F 9C                  <1>     pushf
   204 00000D80 0E                  <1>     push cs
   205 00000D81 68[0F0C0000]        <1>     push int_stop
   206                              <1> 
   207 00000D86 B8[8C0D0000]        <1>     mov eax, .s0
   208 00000D8B CF                  <1>     iret
   209                              <1> 
   210 00000D8C 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   210 00000D95 44495620203E2000    <1>
   116                                  %include "../modules/protect/pic.s"
   117                              <1> init_pic:
   118 00000D9D 50                  <1>     push eax
   119                              <1> 
   120                              <1>     ; outp ポート, データ
   121                              <1> 
   122                              <1>     ; マスタの設定
   123                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 00000D9E B011                <2>  mov al, %2
    50 00000DA0 E620                <2>  out %1, al
   124                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 00000DA2 B020                <2>  mov al, %2
    50 00000DA4 E621                <2>  out %1, al
   125                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 00000DA6 B004                <2>  mov al, %2
    50 00000DA8 E621                <2>  out %1, al
   126                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 00000DAA B001                <2>  mov al, %2
    50 00000DAC E621                <2>  out %1, al
   127                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 00000DAE B0FF                <2>  mov al, %2
    50 00000DB0 E621                <2>  out %1, al
   128                              <1> 
   129                              <1>     ; スレーブの設定
   130                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 00000DB2 B011                <2>  mov al, %2
    50 00000DB4 E6A0                <2>  out %1, al
   131                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 00000DB6 B028                <2>  mov al, %2
    50 00000DB8 E6A1                <2>  out %1, al
   132                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 00000DBA B002                <2>  mov al, %2
    50 00000DBC E6A1                <2>  out %1, al
   133                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 00000DBE B001                <2>  mov al, %2
    50 00000DC0 E6A1                <2>  out %1, al
   134                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 00000DC2 B0FF                <2>  mov al, %2
    50 00000DC4 E6A1                <2>  out %1, al
   135                              <1> 
   136 00000DC6 58                  <1>     pop eax
   137                              <1> 
   138 00000DC7 C3                  <1>     ret
   117                                  %include "../modules/protect/int_rtc.s"
   118                              <1> int_rtc:
   119 00000DC8 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   120 00000DC9 1E                  <1>     push ds
   121 00000DCA 06                  <1>     push es
   122                              <1> 
   123                              <1>     ; データ用セグメントセレクタの設定
   124 00000DCB 66B81000            <1>     mov ax, 0x0010
   125 00000DCF 8ED8                <1>     mov ds, ax
   126 00000DD1 8EC0                <1>     mov es, ax
   127                              <1> 
   128                              <1>     ; RTCから時刻を取得
   129 00000DD3 68[04020000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   129 00000DDB FFFF6683C404        <1>
   130                              <1> 
   131                              <1>     ; RTCの割り込み要因を取得
   132                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 00000DE1 B00C                <2>  mov al, %2
    50 00000DE3 E670                <2>  out %1, al
   133 00000DE5 E471                <1>     in al, 0x71     ; RTCからデータを取得
   134                              <1> 
   135                              <1>     ; 割り込みフラグをクリア(EOI)
   136 00000DE7 B020                <1>     mov al, 0x20
   137 00000DE9 E6A0                <1>     out 0xA0, al    ; スレーブ
   138 00000DEB E620                <1>     out 0x20, al    ; マスタ
   139                              <1> 
   140 00000DED 07                  <1>     pop es
   141 00000DEE 1F                  <1>     pop ds
   142 00000DEF 61                  <1>     popa
   143                              <1> 
   144 00000DF0 CF                  <1>     iret        ; 割り込み処理の終了
   145                              <1> 
   146                              <1> rtc_int_en:
   147 00000DF1 55                  <1>     push ebp
   148 00000DF2 89E5                <1>     mov ebp, esp
   149 00000DF4 50                  <1>     push eax
   150                              <1> 
   151                              <1>     ; 割り込み許可設定
   152                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 00000DF5 B00B                <2>  mov al, %2
    50 00000DF7 E670                <2>  out %1, al
   153                              <1> 
   154 00000DF9 E471                <1>     in al, 0x71     ; RTCからデータを取得
   155 00000DFB 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   156                              <1> 
   157 00000DFE E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   158                              <1> 
   159 00000E00 58                  <1>     pop eax
   160                              <1> 
   161 00000E01 89EC                <1>     mov esp, ebp
   162 00000E03 5D                  <1>     pop ebp
   163                              <1> 
   164 00000E04 C3                  <1>     ret
   118                                  %include "../modules/protect/int_keyboard.s"
   119                              <1> int_keyboard:
   120 00000E05 60                  <1>     pusha
   121 00000E06 1E                  <1>     push ds
   122 00000E07 06                  <1>     push es
   123                              <1> 
   124                              <1>     ; データ用セグメントの設定
   125 00000E08 66B81000            <1>     mov ax, 0x0010
   126 00000E0C 8ED8                <1>     mov ds, ax
   127 00000E0E 8EC0                <1>     mov es, ax
   128                              <1> 
   129                              <1>     ; KBCのバッファ読み取り
   130 00000E10 E460                <1>     in al, 0x60
   131                              <1> 
   132                              <1>     ; キーコードの保存
   133 00000E12 5068[2C0E0000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   133 00000E1A 0000006683C408      <1>
   134                              <1> 
   135                              <1>     ; 割り込み終了コマンド送信
   136                              <1>     outp 0x20, 0x20
    49 00000E21 B020                <2>  mov al, %2
    50 00000E23 E620                <2>  out %1, al
   137                              <1> 
   138 00000E25 07                  <1>     pop es
   139 00000E26 1F                  <1>     pop ds
   140 00000E27 61                  <1>     popa
   141                              <1> 
   142 00000E28 CF                  <1>     iret
   143                              <1> 
   144 00000E29 00<rep 3h>          <1> ALIGN 4, db 0
   145 00000E2C 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   119                                  %include "../modules/protect/ring_buff.s"
   120                              <1> ring_rd:        ; int ring_rd(buff, data);
   121                              <1> ; buff リングバッファ
   122                              <1> ; data 読み込んだデータの保存先アドレス
   123                              <1> ; 戻り値: データあり(0以外), データなし(0)
   124                              <1> 
   125 00000E44 55                  <1>     push ebp
   126 00000E45 89E5                <1>     mov ebp, esp
   127                              <1> 
   128 00000E47 50                  <1>     push eax
   129 00000E48 53                  <1>     push ebx
   130 00000E49 56                  <1>     push esi
   131 00000E4A 57                  <1>     push edi
   132                              <1> 
   133                              <1>     ; 引数取得
   134 00000E4B 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   135 00000E4E 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   136                              <1> 
   137                              <1>     ; 読み込み位置を確認
   138 00000E51 B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   139 00000E56 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   140 00000E58 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   141 00000E5B 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   142                              <1> 
   143 00000E5D 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   144                              <1> 
   145 00000E61 8807                <1>     mov [edi], al
   146                              <1> 
   147 00000E63 43                  <1>     inc ebx ; 次の読み込み位置
   148 00000E64 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   149 00000E67 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   150                              <1> 
   151 00000E69 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   152                              <1> .10E:
   153                              <1> 
   154 00000E6E 5F                  <1>     pop edi
   155 00000E6F 5E                  <1>     pop esi
   156 00000E70 5B                  <1>     pop ebx
   157 00000E71 58                  <1>     pop eax
   158                              <1> 
   159 00000E72 89EC                <1>     mov esp, ebp
   160 00000E74 5D                  <1>     pop ebp
   161                              <1> 
   162 00000E75 C3                  <1>     ret
   163                              <1> 
   164                              <1> 
   165                              <1> ring_wr:    ; int ring_wr(buff, data);
   166                              <1> ; buff シリンダバッファ
   167                              <1> ; data 書き込むデータ
   168                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   169 00000E76 55                  <1>     push ebp
   170 00000E77 89E5                <1>     mov ebp, esp
   171                              <1> 
   172 00000E79 50                  <1>     push eax
   173 00000E7A 53                  <1>     push ebx
   174 00000E7B 51                  <1>     push ecx
   175 00000E7C 56                  <1>     push esi
   176                              <1> 
   177 00000E7D 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   178                              <1> 
   179                              <1>     ; 書き込み位置を確認
   180 00000E80 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   181 00000E85 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   182 00000E88 89D9                <1>     mov ecx, ebx
   183 00000E8A 41                  <1>     inc ecx                         ; 次の書き込み位置
   184 00000E8B 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   185                              <1> 
   186                              <1>     ; バッファフルなら処理しない
   187 00000E8E 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   188 00000E90 740F                <1>     je .10E
   189                              <1> 
   190 00000E92 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   191                              <1> 
   192 00000E95 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   193 00000E99 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   194 00000E9C B801000000          <1>     mov eax, 1  ; 戻り値 成功
   195                              <1> .10E:
   196                              <1> 
   197 00000EA1 5E                  <1>     pop esi
   198 00000EA2 59                  <1>     pop ecx
   199 00000EA3 5B                  <1>     pop ebx
   200 00000EA4 58                  <1>     pop eax
   201                              <1> 
   202 00000EA5 89EC                <1>     mov esp, ebp
   203 00000EA7 5D                  <1>     pop ebp
   204                              <1> 
   205 00000EA8 C3                  <1>     ret
   206                              <1> 
   207                              <1> draw_key:
   208 00000EA9 55                  <1>     push ebp
   209 00000EAA 89E5                <1>     mov ebp, esp
   210                              <1> 
   211 00000EAC 50                  <1>     push eax
   212 00000EAD 53                  <1>     push ebx
   213 00000EAE 51                  <1>     push ecx
   214 00000EAF 52                  <1>     push edx
   215 00000EB0 56                  <1>     push esi
   216 00000EB1 57                  <1>     push edi
   217                              <1> 
   218                              <1> 
   219 00000EB2 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   220 00000EB5 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   221 00000EB8 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   222                              <1> 
   223                              <1>     ; リングバッファの情報を取得
   224 00000EBB 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   225 00000EBD 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   226 00000EC0 B910000000          <1>     mov ecx, RING_ITEM_SIZE
   227                              <1> 
   228                              <1> .10L:
   229 00000EC5 4B                  <1>     dec ebx ; 読み込み位置
   230 00000EC6 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   231 00000EC9 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   232                              <1> 
   233 00000ECC 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   233 00000ED5 68[080F0000]50E8EF- <1>
   233 00000EDD FBFFFF6683C414      <1>
   234 00000EE4 68[080F0000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   234 00000EEC 52E84DF9FFFF6683C4- <1>
   234 00000EF5 10                  <1>
   235                              <1> 
   236 00000EF6 83C203              <1>     add edx, 3  ; 表示位置更新
   237 00000EF9 E2CA                <1>     loop .10L
   238                              <1> .10E:
   239                              <1> 
   240 00000EFB 5F                  <1>     pop edi
   241 00000EFC 5E                  <1>     pop esi
   242 00000EFD 5A                  <1>     pop edx
   243 00000EFE 59                  <1>     pop ecx
   244 00000EFF 5B                  <1>     pop ebx
   245 00000F00 58                  <1>     pop eax
   246                              <1> 
   247 00000F01 89EC                <1>     mov esp, ebp
   248 00000F03 5D                  <1>     pop ebp
   249                              <1> 
   250 00000F04 C3                  <1>     ret
   251                              <1> 
   252 00000F05 00<rep 3h>          <1> ALIGN 4, db 0
   253 00000F08 2D2D2000            <1> .tmp db "-- ", 0
   120                                  %include "../modules/protect/timer.s"
   121                              <1> int_en_timer0:
   122 00000F0C 50                  <1>     push eax
   123                              <1> 
   124                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 00000F0D B034                <2>  mov al, %2
    50 00000F0F E643                <2>  out %1, al
   125                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 00000F11 B09C                <2>  mov al, %2
    50 00000F13 E640                <2>  out %1, al
   126                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 00000F15 B02E                <2>  mov al, %2
    50 00000F17 E640                <2>  out %1, al
   127                              <1> 
   128 00000F19 58                  <1>     pop eax
   129                              <1> 
   130 00000F1A C3                  <1>     ret
   121                                  %include "../modules/protect/draw_rotation_bar.s"
   122                              <1> draw_rotation_bar:
   123 00000F1B 50                  <1>     push eax
   124                              <1> 
   125 00000F1C A1[54050000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   126 00000F21 C1E804              <1>     shr eax, 4              ; eax /= 4
   127 00000F24 3B05[4C0F0000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   128 00000F2A 741E                <1>     je .10E
   129                              <1> 
   130 00000F2C A3[4C0F0000]        <1>     mov [.index], eax       ; 前回値設定
   131 00000F31 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   132                              <1> 
   133 00000F34 8A80[500F0000]      <1>     mov al, [.table + eax]  ; 文字表示
   134 00000F3A 506A0F6A1D6A00E8DB- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   134 00000F43 F7FFFF6683C410      <1>
   135                              <1> 
   136                              <1> .10E:
   137                              <1> 
   138 00000F4A 58                  <1>     pop eax
   139                              <1> 
   140 00000F4B C3                  <1>     ret
   141                              <1> 
   142                              <1> ALIGN 4, db 0
   143 00000F4C 00000000            <1> .index: dd 0        ; 前回値
   144 00000F50 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   122                                  %include "../modules/protect/call_gate.s"
   123                              <1> call_gate:
   124 00000F54 55                  <1>     push ebp
   125 00000F55 89E5                <1>     mov ebp, esp
   126                              <1> 
   127 00000F57 60                  <1>     pusha
   128 00000F58 1E                  <1>     push ds
   129 00000F59 06                  <1>     push es
   130                              <1> 
   131                              <1>     ; データ用セグメントの設定
   132 00000F5A 66B81000            <1>     mov ax, 0x0010
   133 00000F5E 8ED8                <1>     mov ds, ax
   134 00000F60 8EC0                <1>     mov es, ax
   135                              <1> 
   136                              <1>     ; 文字を表示
   137 00000F62 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   138 00000F65 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   139 00000F68 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   140 00000F6B 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   141 00000F6E 52515350E8C8F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   141 00000F77 6683C410            <1>
   142                              <1> 
   143 00000F7B 07                  <1>     pop es
   144 00000F7C 1F                  <1>     pop ds
   145 00000F7D 61                  <1>     popa
   146                              <1> 
   147 00000F7E 89EC                <1>     mov esp, ebp
   148 00000F80 5D                  <1>     pop ebp
   149                              <1> 
   150                              <1>     ; コードセグメントセレクタの復帰と終了
   151 00000F81 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   123                                  %include "../modules/protect/trap_gate.s"
   124                              <1> trap_gate_81:
   125                              <1>     ; 1文字出力
   126 00000F84 50535251E894F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   126 00000F8D 6683C410            <1>
   127                              <1> 
   128 00000F91 CF                  <1>     iret
   129                              <1> 
   130                              <1> trap_gate_82:
   131                              <1>     ; 点の描画
   132 00000F92 535251E85DF9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   132 00000F9B 83C40C              <1>
   133                              <1> 
   134 00000F9E CF                  <1>     iret
   124                                  %include "../modules/protect/test_and_set.s"
   125                              <1> test_and_set:
   126 00000F9F 55                  <1>     push ebp
   127 00000FA0 89E5                <1>     mov ebp, esp
   128                              <1> 
   129 00000FA2 50                  <1>     push eax
   130 00000FA3 53                  <1>     push ebx
   131                              <1> 
   132                              <1>     ; テストアンドセット
   133 00000FA4 B800000000          <1>     mov eax, 0
   134 00000FA9 8B5D08              <1>     mov ebx, [ebp + 8]
   135                              <1> 
   136                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   137                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   138                              <1> .10L:
   139 00000FAC F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   140 00000FB0 7307                <1>     jnc .10E
   141                              <1> 
   142                              <1> .12L:
   143 00000FB2 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   144 00000FB5 72FB                <1>     jc .12L
   145                              <1>     
   146 00000FB7 EBF3                <1>     jmp .10L
   147                              <1> .10E:
   148                              <1>     
   149 00000FB9 5B                  <1>     pop ebx
   150 00000FBA 58                  <1>     pop eax
   151                              <1> 
   152 00000FBB 89EC                <1>     mov esp, ebp
   153 00000FBD 5D                  <1>     pop ebp
   154                              <1> 
   155 00000FBE C3                  <1>     ret
   125                                  %include "../modules/protect/int_nm.s"
   126                              <1> get_tss_base:
   127                              <1> ; EBX: TSSセレクタ
   128                              <1>     ; EAX = TSS base address
   129 00000FBF 8B83[42020000]      <1>     mov eax, [GDT + ebx + 2]
   130 00000FC5 C1E008              <1>     shl eax, 8
   131 00000FC8 8A83[47020000]      <1>     mov al, [GDT + ebx + 7]
   132 00000FCE C1C808              <1>     ror eax, 8
   133                              <1> 
   134 00000FD1 C3                  <1>     ret
   135                              <1> 
   136                              <1> save_fpu_context:
   137 00000FD2 DD7068              <1>     fnsave [eax + 104]
   138 00000FD5 C780D4000000010000- <1>     mov [eax + 104 + 108], dword 1
   138 00000FDE 00                  <1>
   139                              <1> 
   140 00000FDF C3                  <1>     ret
   141                              <1> 
   142                              <1> load_fpu_context:
   143 00000FE0 83B8D400000000      <1>     cmp [eax + 104 + 108], dword 0
   144 00000FE7 7504                <1>     jne .10F    ; if(saved != 0) goto .10F
   145 00000FE9 DBE3                <1>     fninit      ; FPU初期化
   146 00000FEB EB03                <1>     jmp .10E
   147                              <1> .10F:
   148 00000FED DD6068              <1>     frstor [eax + 104]  ; FPUコンテキストを復帰
   149                              <1> .10E:
   150 00000FF0 C3                  <1>     ret
   151                              <1> 
   152                              <1> int_nm:
   153 00000FF1 60                  <1>     pusha
   154 00000FF2 1E                  <1>     push ds
   155 00000FF3 06                  <1>     push es
   156                              <1> 
   157 00000FF4 66B81000            <1>     mov ax, DS_KERNEL
   158 00000FF8 8ED8                <1>     mov ds, ax
   159 00000FFA 8EC0                <1>     mov es, ax
   160                              <1> 
   161                              <1>     ; タスクスイッチフラグをクリア
   162 00000FFC 0F06                <1>     clts    ; CR0.TS = 0
   163                              <1> 
   164                              <1>     ; 前回・今回FPUを使用するタスク
   165 00000FFE 8B3D[48100000]      <1>     mov edi, [.last_tss]; edi = 前回FPUを使用したタスクのTSS
   166 00001004 0F00CE              <1>     str esi             ; esi = 今回FPUを使用するタスクのTSS（trレジスタ）
   167 00001007 83E6F8              <1>     and esi, ~0x0007    ; 特権レベルはいらないのでマスク
   168                              <1> 
   169                              <1>     ; 初回利用チェック
   170 0000100A 83FF00              <1>     cmp edi, 0          ; if(前回のタスク==0) goto .10F
   171 0000100D 7420                <1>     je .10F
   172                              <1> 
   173 0000100F 39FE                <1>     cmp esi, edi        ; if(前回のタスク==今回のタスク) goto .12E
   174 00001011 741A                <1>     je .12E
   175                              <1> 
   176 00001013 FA                  <1>     cli
   177                              <1> 
   178                              <1>     ; 前回のFPUコンテキストを保存
   179 00001014 89FB                <1>     mov ebx, edi
   180 00001016 E8A4FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   181 0000101B E8B2FFFFFF          <1>     call save_fpu_context   ; void save_fpu_context(eax);
   182                              <1> 
   183                              <1>     ; 今回のFPUコンテキストを復帰
   184 00001020 89F3                <1>     mov ebx, esi
   185 00001022 E898FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   186 00001027 E8B4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   187                              <1> 
   188 0000102C FB                  <1>     sti
   189                              <1> .12E:
   190 0000102D EB0E                <1>     jmp .10E
   191                              <1> .10F:
   192 0000102F FA                  <1>     cli
   193                              <1> 
   194                              <1>     ; 今回のFPUコンテキストを復帰
   195 00001030 89F3                <1>     mov ebx, esi
   196 00001032 E888FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   197 00001037 E8A4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   198                              <1> 
   199 0000103C FB                  <1>     sti
   200                              <1> .10E:
   201                              <1> 
   202 0000103D 8935[48100000]      <1>     mov [.last_tss], esi
   203                              <1> 
   204 00001043 07                  <1>     pop es
   205 00001044 1F                  <1>     pop ds
   206 00001045 61                  <1>     popa
   207                              <1> 
   208 00001046 CF                  <1>     iret
   209                              <1> 
   210 00001047 00                  <1> ALIGN 4, db 0
   211 00001048 00000000            <1> .last_tss: dd 0
   126                                  %include "../modules/protect/wait_tick.s"
   127                              <1> wait_tick:
   128 0000104C 55                  <1>     push ebp
   129 0000104D 89E5                <1>     mov ebp, esp
   130                              <1> 
   131 0000104F 50                  <1>     push eax
   132 00001050 51                  <1>     push ecx
   133                              <1> 
   134                              <1>     ; ウェイト
   135 00001051 8B4D08              <1>     mov ecx, [ebp + 8]      ; ECX = ウェイト回数
   136 00001054 A1[54050000]        <1>     mov eax, [TIMER_COUNT]  ; EAX = TIMER
   137                              <1> 
   138                              <1> .10L:
   139 00001059 3905[54050000]      <1>     cmp [TIMER_COUNT], eax  ; for(i=0; i < ecx; i++) while(TIMER == eax);
   140 0000105F 74F8                <1>     je .10L
   141 00001061 40                  <1>     inc eax
   142 00001062 E2F5                <1>     loop .10L
   143                              <1> 
   144 00001064 59                  <1>     pop ecx
   145 00001065 58                  <1>     pop eax
   146                              <1> 
   147 00001066 89EC                <1>     mov esp, ebp
   148 00001068 5D                  <1>     pop ebp
   149                              <1> 
   150 00001069 C3                  <1>     ret
   127                                  
   128                                  ;パディング
   129 0000106A 00<rep F96h>                times KERNEL_SIZE - ($ - $$) db 0
   130                                  

     1                                  %include "../include/define.s"
     2                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     3                              <1> 
     4                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     5                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     6                              <1> 
     7                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
     8                              <1> 
     9                              <1>     E820_RECORD_SIZE equ 20
    10                              <1> 
    11                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    12                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    13                              <1> 
    14                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    15                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
     2                                  %include "../include/macro.s"
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
     3                                  
     4                                      ORG KERNEL_LOAD
     5                                  
     6                                  [BITS 32]   ; 32bitコードを生成
     7                                  
     8                                  ; エントリポイント
     9                                  kernel:
    10                                      ; フォントアドレスを取得
    11 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    12 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    13 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    14 0000000C C1E004                      shl eax, 4
    15 0000000F 01D8                        add eax, ebx
    16 00000011 A3[28000000]                mov [FONT_ADR], eax
    17                                  
    18                                      ; 文字の表示
    19 00000016 6A0D6A3FE858010000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    19 0000001F 6683C408           
    20                                  
    21                                      ; 処理の終了
    22 00000023 EBFE                        jmp $
    23                                  
    24 00000025 00<rep 3h>              ALIGN 4, db 0
    25 00000028 00000000                FONT_ADR: dd 0
    26                                  
    27                                  ; モジュール
    28                                  %include "../modules/protect/vga.s"
    29                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
    30                              <1> ; plane: 読み込みプレーン
    31 0000002C 55                  <1>     push ebp
    32 0000002D 89E5                <1>     mov ebp, esp
    33                              <1> 
    34 0000002F 6650                <1>     push ax
    35 00000031 6652                <1>     push dx
    36                              <1> 
    37                              <1> 
    38                              <1>     ; 読み込みプレーンの選択
    39 00000033 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
    40 00000036 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
    41 00000039 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
    42 0000003B 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
    43 0000003F 66EF                <1>     out dx, ax
    44                              <1> 
    45 00000041 665A                <1>     pop dx
    46 00000043 6658                <1>     pop ax
    47                              <1> 
    48 00000045 89EC                <1>     mov esp, ebp
    49 00000047 5D                  <1>     pop ebp
    50                              <1> 
    51 00000048 C3                  <1>     ret
    52                              <1> 
    53                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
    54                              <1> ; plane 書き込みプレーン
    55 00000049 55                  <1>     push ebp
    56 0000004A 89E5                <1>     mov ebp, esp
    57                              <1> 
    58 0000004C 6650                <1>     push ax
    59 0000004E 6652                <1>     push dx
    60                              <1> 
    61                              <1> 
    62                              <1>     ; 書き込みプレーンの選択
    63 00000050 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
    64 00000053 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
    65 00000056 B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
    66 00000058 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
    67 0000005C 66EF                <1>     out dx, ax
    68                              <1> 
    69                              <1> 
    70 0000005E 665A                <1>     pop dx
    71 00000060 6658                <1>     pop ax
    72                              <1> 
    73 00000062 89EC                <1>     mov esp, ebp
    74 00000064 5D                  <1>     pop ebp
    75                              <1> 
    76 00000065 C3                  <1>     ret
    77                              <1> 
    78                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
    79                              <1> ; font FONTアドレス
    80                              <1> ; vram VRAMアドレス
    81                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
    82                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
    83 00000066 55                  <1>     push ebp
    84 00000067 89E5                <1>     mov ebp, esp
    85                              <1>     
    86 00000069 50                  <1>     push eax
    87 0000006A 53                  <1>     push ebx
    88 0000006B 51                  <1>     push ecx
    89 0000006C 52                  <1>     push edx
    90 0000006D 57                  <1>     push edi
    91 0000006E 56                  <1>     push esi
    92                              <1> 
    93 0000006F 8B7508              <1>     mov esi, [ebp + 8]          ; font
    94 00000072 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
    95 00000075 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
    96 00000079 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
    97                              <1>     ; bh = 背景色 bl = 前景色
    98                              <1> 
    99 0000007D 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   100 0000007F 0F94C6              <1>     setz dh         ; dh = zf
   101 00000082 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   102                              <1> 
   103 00000084 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   104 00000086 0F94C2              <1>     setz dl         ; dl = zf
   105 00000089 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   106                              <1> 
   107                              <1>     ; 16ドットフォントのコピー
   108 0000008B FC                  <1>     cld             ; アドレス加算モード
   109                              <1> 
   110 0000008C B910000000          <1>     mov ecx, 16
   111                              <1> .10L:
   112                              <1>     ; フォントマスクの作成
   113 00000091 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   114 00000092 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   115 00000094 F6D4                <1>     not ah
   116                              <1> 
   117                              <1>     ; 前景色
   118 00000096 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   119                              <1> 
   120                              <1>     ; 背景色
   121 00000098 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   122 0000009E 7404                <1>     jz .11F
   123                              <1>     ; 透過on
   124 000000A0 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   125 000000A2 EB02                <1>     jmp .11E
   126                              <1> .11F:                   ; 透過off
   127 000000A4 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   128                              <1> .11E:
   129                              <1>     
   130                              <1>     ; 前景色と背景色を合成
   131 000000A6 08E0                <1>     or al, ah           ; al = 背景 | 前景
   132                              <1> 
   133                              <1>     ; 新しい値を出力
   134 000000A8 8807                <1>     mov [edi], al
   135                              <1> 
   136 000000AA 83C750              <1>     add edi, 80      ; 1行すすめる
   137 000000AD E2E2                <1>     loop .10L
   138                              <1> .10E:
   139                              <1> 
   140 000000AF 5E                  <1>     pop esi
   141 000000B0 5F                  <1>     pop edi
   142 000000B1 5A                  <1>     pop edx
   143 000000B2 59                  <1>     pop ecx
   144 000000B3 5B                  <1>     pop ebx
   145 000000B4 58                  <1>     pop eax
   146                              <1> 
   147 000000B5 89EC                <1>     mov esp, ebp
   148 000000B7 5D                  <1>     pop ebp
   149                              <1> 
   150 000000B8 C3                  <1>     ret
    29                                  %include "../modules/protect/draw_char.s"
    30                              <1> draw_char:      ; void draw_char(col, row, color, ch);
    31                              <1> ; col 列（0～79）
    32                              <1> ; row 行（0～29）
    33                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
    34                              <1> ; ch 文字
    35                              <1> 
    36 000000B9 55                  <1>     push ebp
    37 000000BA 89E5                <1>     mov ebp, esp
    38                              <1> 
    39 000000BC 53                  <1>     push ebx
    40 000000BD 56                  <1>     push esi
    41 000000BE 57                  <1>     push edi
    42                              <1> 
    43                              <1>     ; コピー元フォントアドレスを設定
    44 000000BF 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
    45 000000C3 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
    46 000000C6 0335[28000000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
    47                              <1> 
    48                              <1>     ; コピー先アドレスを取得
    49                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
    50                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
    51 000000CC 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
    52 000000CF C1E708              <1>     shl edi, 8
    53 000000D2 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
    54 000000D9 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
    55                              <1> 
    56                              <1>     ; 1文字分のフォントを出力
    57 000000DC 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
    58                              <1> 
    59                              <1>     ; 輝度I
    60 000000E0 6A03E845FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
    60 000000E9 C404                <1>
    61 000000EB 6A08E857FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
    61 000000F4 C404                <1>
    62 000000F6 536A085756E866FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
    62 000000FF FF6683C410          <1>
    63                              <1> 
    64                              <1>     ; 赤R
    65 00000104 6A02E821FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
    65 0000010D C404                <1>
    66 0000010F 6A04E833FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
    66 00000118 C404                <1>
    67 0000011A 536A045756E842FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
    67 00000123 FF6683C410          <1>
    68                              <1> 
    69                              <1>     ; 緑G
    70 00000128 6A01E8FDFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
    70 00000131 C404                <1>
    71 00000133 6A02E80FFFFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
    71 0000013C C404                <1>
    72 0000013E 536A025756E81EFFFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
    72 00000147 FF6683C410          <1>
    73                              <1> 
    74                              <1>     ; 青B
    75 0000014C 6A00E8D9FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
    75 00000155 C404                <1>
    76 00000157 6A01E8EBFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
    76 00000160 C404                <1>
    77 00000162 536A015756E8FAFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
    77 0000016B FF6683C410          <1>
    78                              <1> 
    79 00000170 5F                  <1>     pop edi
    80 00000171 5E                  <1>     pop esi
    81 00000172 5B                  <1>     pop ebx
    82                              <1> 
    83 00000173 89EC                <1>     mov esp, ebp
    84 00000175 5D                  <1>     pop ebp
    85                              <1> 
    86 00000176 C3                  <1>     ret
    30                                  %include "../modules/protect/draw_font.s"
    31                              <1> draw_font:  ; void draw_font(col, row);
    32                              <1> ; col 列
    33                              <1> ; row 行
    34 00000177 55                  <1>     push ebp
    35 00000178 89E5                <1>     mov ebp, esp
    36                              <1> 
    37 0000017A 50                  <1>     push eax
    38 0000017B 53                  <1>     push ebx
    39 0000017C 51                  <1>     push ecx
    40 0000017D 57                  <1>     push edi
    41 0000017E 56                  <1>     push esi
    42                              <1> 
    43                              <1> 
    44 0000017F 8B7508              <1>     mov esi, [ebp + 8]  ; x
    45 00000182 8B7D0C              <1>     mov edi, [ebp +12]  ; y
    46                              <1> 
    47 00000185 B900000000          <1>     mov ecx, 0
    48                              <1> .10L:
    49 0000018A 81F900010000        <1>     cmp ecx, 256
    50 00000190 731F                <1>     jae .10E
    51                              <1> 
    52 00000192 89C8                <1>     mov eax, ecx
    53 00000194 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
    54 00000197 01F0                <1>     add eax, esi    ; eax += x
    55                              <1> 
    56 00000199 89CB                <1>     mov ebx, ecx
    57 0000019B C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
    58 0000019E 01FB                <1>     add ebx, edi    ; ebx += y
    59                              <1> 
    60 000001A0 516A075350E80FFFFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
    60 000001A9 FF6683C410          <1>
    61                              <1> 
    62 000001AE 41                  <1>     inc ecx
    63 000001AF EBD9                <1>     jmp .10L
    64                              <1> .10E:
    65                              <1> 
    66 000001B1 5E                  <1>     pop esi
    67 000001B2 5F                  <1>     pop edi
    68 000001B3 59                  <1>     pop ecx
    69 000001B4 5B                  <1>     pop ebx
    70 000001B5 58                  <1>     pop eax
    71                              <1> 
    72 000001B6 89EC                <1>     mov esp, ebp
    73 000001B8 5D                  <1>     pop ebp
    74                              <1> 
    75 000001B9 C3                  <1>     ret
    31                                  
    32                                  ;パディング
    33 000001BA 00<rep 1E46h>               times KERNEL_SIZE - ($ - $$) db 0
    34                                  

     1                                      BOOT_LOAD   equ 0x7c00  ; ブートプログラムのロード位置
     2                                      ORG BOOT_LOAD           ; ロードアドレスをアセンブラに指示
     3                                  
     4                                  ; マクロ
     5                                  %include "../include/macro.s"   ; C言語と同等の関数呼び出し
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
     6                                  
     7                                  entry:
     8 00000000 EB58                        jmp ipl      ; jump to ipl
     9                                  
    10                                      ; BPB(BIOS Parameter Block
    11 00000002 90<rep 58h>                 times 90 - ($ - $$) db 0x90
    12                                  
    13                                  
    14                                      ; IPL(Initial Program Loader)
    15                                  ipl:
    16 0000005A FA                          cli         ; clear interrupu flag 割込み禁止
    17                                  
    18 0000005B B80000                      mov ax, 0x0000
    19 0000005E 89C2                        mov dx, ax
    20 00000060 8EC0                        mov es, ax
    21 00000062 8ED0                        mov ss, ax
    22 00000064 BC007C                      mov sp, BOOT_LOAD
    23                                      
    24 00000067 FB                          sti         ; set interrupt flag 割り込み許可
    25                                  
    26 00000068 8816[8800]                  mov [BOOT.DRIVE], dl    ; ブートドライブの番号(DL)を保存
    27                                  
    28 0000006C 68[7A00]E8180083C4-         cdecl puts, .s0
    28 00000074 02                 
    29 00000075 E8B100                      cdecl reboot            ; 戻ってこない
    30                                  
    31 00000078 EBFE                        jmp $       ; while(1)
    32                                  
    33 0000007A 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0x00
    33 00000083 2E0A0D00           
    34                                  
    35 00000087 00                      ALIGN 2, db 0
    36                                  BOOT:           ; ブートドライブ関係の情報
    37 00000088 0000                    .DRIVE: dw 0    ; ドライブ番号
    38                                  
    39                                  ; モジュール
    40                                  %include "../modules/real/puts.s"
    41                              <1> puts:       ; void puts(str);
    42 0000008A 55                  <1>     push bp
    43 0000008B 89E5                <1>     mov bp, sp
    44                              <1> 
    45 0000008D 50                  <1>     push ax
    46 0000008E 53                  <1>     push bx
    47 0000008F 56                  <1>     push si
    48                              <1> 
    49 00000090 8B7604              <1>     mov si, [bp + 4]    ; si=文字列のアドレス
    50                              <1> 
    51 00000093 B40E                <1>     mov ah, 0x0E
    52 00000095 BB0000              <1>     mov bx, 0x0000
    53 00000098 FC                  <1>     cld
    54                              <1> 
    55                              <1> .10L:
    56 00000099 AC                  <1>     lodsb
    57                              <1> 
    58 0000009A 3C00                <1>     cmp al, 0x00
    59 0000009C 7404                <1>     je .10E
    60                              <1> 
    61 0000009E CD10                <1>     int 0x10
    62 000000A0 EBF7                <1>     jmp .10L
    63                              <1> 
    64                              <1> .10E:
    65 000000A2 5E                  <1>     pop si
    66 000000A3 5B                  <1>     pop bx
    67 000000A4 58                  <1>     pop ax
    68                              <1> 
    69 000000A5 89EC                <1>     mov sp, bp
    70 000000A7 5D                  <1>     pop bp
    71                              <1> 
    72 000000A8 C3                  <1>     ret
    41                                  %include "../modules/real/itoa.s"
    42                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
    43                              <1> ; num   変換する値
    44                              <1> ; buff  保存先バッファアドレス
    45                              <1> ; size  保存先バッファサイズ
    46                              <1> ; radix 基数（2, 8, 10, 16)
    47                              <1> ; flags 
    48                              <1> ;   B2: 空白を'0'で埋める
    49                              <1> ;   B1: '+/-'記号を付加する
    50                              <1> ;   B0: 値を符号付き変数として扱う
    51                              <1> 
    52 000000A9 55                  <1>     push bp
    53 000000AA 89E5                <1>     mov bp, sp
    54                              <1> 
    55 000000AC 50                  <1>     push ax
    56 000000AD 53                  <1>     push bx
    57 000000AE 51                  <1>     push cx
    58 000000AF 52                  <1>     push dx
    59 000000B0 56                  <1>     push si
    60 000000B1 57                  <1>     push di
    61                              <1> 
    62                              <1> 
    63 000000B2 8B4604              <1>     mov ax, [bp + 4]    ; num
    64 000000B5 8B4E08              <1>     mov cx, [bp + 8]    ; size
    65 000000B8 8B7606              <1>     mov si, [bp + 6]    ; buff
    66                              <1> 
    67 000000BB 89F7                <1>     mov di, si
    68 000000BD 01CF                <1>     add di, cx
    69 000000BF 4F                  <1>     dec di              ; di = &si[cx-1]
    70                              <1> 
    71 000000C0 8B5E0C              <1>     mov bx, word [bp + 12]   ; flags
    72                              <1> 
    73                              <1>     ; 符号付き判定
    74 000000C3 F7C30100            <1>     test bx, 0b0001     ; 論理積を計算、0ならZFをセット
    75                              <1> .10Q:
    76 000000C7 7408                <1>     je .10E         ; E=Exit
    77 000000C9 83F800              <1>     cmp ax, 0
    78                              <1> .12Q:
    79 000000CC 7D03                <1>     jge .12E
    80 000000CE 83CB02              <1>     or bx, 0b0010
    81                              <1> .12E:
    82                              <1> .10E:
    83                              <1> 
    84                              <1>     ; 符号出力判定
    85 000000D1 F7C30200            <1>     test bx, 0b0010
    86                              <1> .20Q:
    87 000000D5 7410                <1>     je .20E
    88 000000D7 83F800              <1>     cmp ax, 0
    89                              <1> .22Q:
    90 000000DA 7D07                <1>     jge .22F
    91 000000DC F7D8                <1>     neg ax
    92 000000DE C6042D              <1>     mov [si], byte '-'
    93 000000E1 EB03                <1>     jmp .22E
    94                              <1> .22F:
    95                              <1>     
    96 000000E3 C6042B              <1>     mov [si], byte '+'
    97                              <1> .22E:
    98 000000E6 49                  <1>     dec cx
    99                              <1> .20E:
   100                              <1> 
   101                              <1>     ; ASCII変換
   102 000000E7 8B5E0A              <1>     mov bx, [bp + 10]   ; radix(基数)
   103                              <1> .30L:
   104 000000EA BA0000              <1>     mov dx, 0
   105 000000ED F7F3                <1>     div bx      ; 商：ax, あまり: dx
   106                              <1> 
   107 000000EF 89D6                <1>     mov si, dx
   108 000000F1 8A94[1901]          <1>     mov dl, byte [.ascii + si]
   109                              <1> 
   110 000000F5 8815                <1>     mov [di], dl
   111 000000F7 4F                  <1>     dec di
   112                              <1> 
   113 000000F8 83F800              <1>     cmp ax, 0
   114 000000FB E0ED                <1>     loopnz .30L
   115                              <1> .30E:
   116                              <1> 
   117 000000FD 83F900              <1>     cmp cx, 0
   118                              <1> .40Q:
   119 00000100 740D                <1>     je .40E
   120 00000102 B020                <1>     mov al, ' '
   121 00000104 837E0C04            <1>     cmp [bp + 12], word 0b0100
   122                              <1> .42Q:
   123 00000108 7502                <1>     jne .42E
   124 0000010A B030                <1>     mov al, '0'
   125                              <1> .42E:
   126 0000010C FD                  <1>     std         ; dimention flag = 1(-方向)
   127 0000010D F3AA                <1>     rep stosb   ; while (--cx) *di-- = al;
   128                              <1> .40E:
   129                              <1> 
   130 0000010F 5F                  <1>     pop di
   131 00000110 5E                  <1>     pop si
   132 00000111 5A                  <1>     pop dx
   133 00000112 59                  <1>     pop cx
   134 00000113 5B                  <1>     pop bx
   135 00000114 58                  <1>     pop ax
   136                              <1> 
   137 00000115 89EC                <1>     mov sp, bp
   138 00000117 5D                  <1>     pop bp
   139                              <1> 
   140 00000118 C3                  <1>     ret
   141                              <1> 
   142 00000119 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   142 00000122 39414243444546      <1>
    42                                  %include "../modules/real/reboot.s"
    43                              <1> reboot:
    44 00000129 68[4501]E85BFF83C4- <1>     cdecl puts, .s0
    44 00000131 02                  <1>
    45                              <1> 
    46                              <1> .10L:
    47 00000132 B410                <1>     mov ah, 0x10
    48 00000134 CD16                <1>     int 0x16
    49                              <1> 
    50 00000136 3C20                <1>     cmp al, ' '
    51 00000138 75F8                <1>     jne .10L
    52                              <1> 
    53 0000013A 68[6301]E84AFF83C4- <1>     cdecl puts, .s1
    53 00000142 02                  <1>
    54                              <1> 
    55 00000143 CD19                <1>     int 0x19
    56                              <1> 
    57 00000145 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    57 0000014E 414345206B65792074- <1>
    57 00000157 6F207265626F6F742E- <1>
    57 00000160 2E2E00              <1>
    58 00000163 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    43                                  
    44 00000168 00<rep 96h>                 times 510 - ($ - $$) db 0x00
    45 000001FE 55AA                        db 0x55, 0xAA

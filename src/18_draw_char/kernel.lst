     1                                  %include "../include/define.s"
     2                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     3                              <1> 
     4                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     5                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     6                              <1> 
     7                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
     8                              <1> 
     9                              <1>     E820_RECORD_SIZE equ 20
    10                              <1> 
    11                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    12                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    13                              <1> 
    14                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    15                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
     2                                  %include "../include/macro.s"
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
     3                                  
     4                                      ORG KERNEL_LOAD
     5                                  
     6                                  [BITS 32]   ; 32bitコードを生成
     7                                  
     8                                  ; エントリポイント
     9                                  kernel:
    10                                      ; フォントアドレスを取得
    11 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    12 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    13 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    14 0000000C C1E004                      shl eax, 4
    15 0000000F 01D8                        add eax, ebx
    16 00000011 A3[90000000]                mov [FONT_ADR], eax
    17                                  
    18                                      ; 文字の表示
    19 00000016 6A41680F0100006A00-         cdecl draw_char, 0, 0, 0x010F, 'A'
    19 0000001F 6A00E8F90000006683-
    19 00000028 C410               
    20 0000002A 6A42680F0100006A00-         cdecl draw_char, 1, 0, 0x010F, 'B'
    20 00000033 6A01E8E50000006683-
    20 0000003C C410               
    21 0000003E 6A43680F0100006A00-         cdecl draw_char, 2, 0, 0x010F, 'C'
    21 00000047 6A02E8D10000006683-
    21 00000050 C410               
    22                                  
    23 00000052 6A3068020400006A00-         cdecl draw_char, 0, 0, 0x0402, '0'
    23 0000005B 6A00E8BD0000006683-
    23 00000064 C410               
    24 00000066 6A3168120200006A00-         cdecl draw_char, 1, 0, 0x0212, '1'
    24 0000006F 6A01E8A90000006683-
    24 00000078 C410               
    25 0000007A 6A5F68120200006A00-         cdecl draw_char, 2, 0, 0x0212, '_'
    25 00000083 6A02E8950000006683-
    25 0000008C C410               
    26                                  
    27                                      ; 処理の終了
    28 0000008E EBFE                        jmp $
    29                                  
    30                                  ALIGN 4, db 0
    31 00000090 00000000                FONT_ADR: dd 0
    32                                  
    33                                  ; モジュール
    34                                  %include "../modules/protect/vga.s"
    35                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
    36                              <1> ; plane: 読み込みプレーン
    37 00000094 55                  <1>     push ebp
    38 00000095 89E5                <1>     mov ebp, esp
    39                              <1> 
    40 00000097 6650                <1>     push ax
    41 00000099 6652                <1>     push dx
    42                              <1> 
    43                              <1> 
    44                              <1>     ; 読み込みプレーンの選択
    45 0000009B 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
    46 0000009E 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
    47 000000A1 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
    48 000000A3 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
    49 000000A7 66EF                <1>     out dx, ax
    50                              <1> 
    51 000000A9 665A                <1>     pop dx
    52 000000AB 6658                <1>     pop ax
    53                              <1> 
    54 000000AD 89EC                <1>     mov esp, ebp
    55 000000AF 5D                  <1>     pop ebp
    56                              <1> 
    57 000000B0 C3                  <1>     ret
    58                              <1> 
    59                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
    60                              <1> ; plane 書き込みプレーン
    61 000000B1 55                  <1>     push ebp
    62 000000B2 89E5                <1>     mov ebp, esp
    63                              <1> 
    64 000000B4 6650                <1>     push ax
    65 000000B6 6652                <1>     push dx
    66                              <1> 
    67                              <1> 
    68                              <1>     ; 書き込みプレーンの選択
    69 000000B8 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
    70 000000BB 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
    71 000000BE B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
    72 000000C0 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
    73 000000C4 66EF                <1>     out dx, ax
    74                              <1> 
    75                              <1> 
    76 000000C6 665A                <1>     pop dx
    77 000000C8 6658                <1>     pop ax
    78                              <1> 
    79 000000CA 89EC                <1>     mov esp, ebp
    80 000000CC 5D                  <1>     pop ebp
    81                              <1> 
    82 000000CD C3                  <1>     ret
    83                              <1> 
    84                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
    85                              <1> ; font FONTアドレス
    86                              <1> ; vram VRAMアドレス
    87                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
    88                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
    89 000000CE 55                  <1>     push ebp
    90 000000CF 89E5                <1>     mov ebp, esp
    91                              <1>     
    92 000000D1 50                  <1>     push eax
    93 000000D2 53                  <1>     push ebx
    94 000000D3 52                  <1>     push edx
    95 000000D4 57                  <1>     push edi
    96 000000D5 56                  <1>     push esi
    97                              <1> 
    98 000000D6 8B7508              <1>     mov esi, [ebp + 8]          ; font
    99 000000D9 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   100 000000DC 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   101 000000E0 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   102                              <1>     ; bh = 背景色 bl = 前景色
   103                              <1> 
   104 000000E4 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   105 000000E6 0F94C6              <1>     setz dh         ; dh = zf
   106 000000E9 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   107                              <1> 
   108 000000EB 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   109 000000ED 0F94C2              <1>     setz dl         ; dl = zf
   110 000000F0 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   111                              <1> 
   112                              <1>     ; 16ドットフォントのコピー
   113 000000F2 FC                  <1>     cld             ; アドレス加算モード
   114                              <1> 
   115 000000F3 B910000000          <1>     mov ecx, 16
   116                              <1> .10L:
   117                              <1>     ; フォントマスクの作成
   118 000000F8 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   119 000000F9 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   120 000000FB F6D4                <1>     not ah
   121                              <1> 
   122                              <1>     ; 前景色
   123 000000FD 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   124                              <1> 
   125                              <1>     ; 背景色
   126 000000FF F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   127 00000105 7404                <1>     jz .11F
   128                              <1>     ; 透過on
   129 00000107 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   130 00000109 EB02                <1>     jmp .11E
   131                              <1> .11F:                   ; 透過off
   132 0000010B 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   133                              <1> .11E:
   134                              <1>     
   135                              <1>     ; 前景色と背景色を合成
   136 0000010D 08E0                <1>     or al, ah           ; al = 背景 | 前景
   137                              <1> 
   138                              <1>     ; 新しい値を出力
   139 0000010F 8807                <1>     mov [edi], al
   140                              <1> 
   141 00000111 83C750              <1>     add edi, 80      ; 1行すすめる
   142 00000114 E2E2                <1>     loop .10L
   143                              <1> .10E:
   144                              <1> 
   145 00000116 5E                  <1>     pop esi
   146 00000117 5F                  <1>     pop edi
   147 00000118 5A                  <1>     pop edx
   148 00000119 5B                  <1>     pop ebx
   149 0000011A 58                  <1>     pop eax
   150                              <1> 
   151 0000011B 89EC                <1>     mov esp, ebp
   152 0000011D 5D                  <1>     pop ebp
   153                              <1> 
   154 0000011E C3                  <1>     ret
    35                                  %include "../modules/protect/draw_char.s"
    36                              <1> draw_char:      ; void draw_char(col, row, color, ch);
    37                              <1> ; col 列（0～79）
    38                              <1> ; row 行（0～29）
    39                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
    40                              <1> ; ch 文字
    41                              <1> 
    42 0000011F 55                  <1>     push ebp
    43 00000120 89E5                <1>     mov ebp, esp
    44                              <1> 
    45 00000122 53                  <1>     push ebx
    46 00000123 56                  <1>     push esi
    47 00000124 57                  <1>     push edi
    48                              <1> 
    49                              <1>     ; コピー元フォントアドレスを設定
    50 00000125 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
    51 00000129 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
    52 0000012C 0335[90000000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
    53                              <1> 
    54                              <1>     ; コピー先アドレスを取得
    55                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
    56                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
    57 00000132 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
    58 00000135 C1E708              <1>     shl edi, 8
    59 00000138 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
    60 0000013F 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
    61                              <1> 
    62                              <1>     ; 1文字分のフォントを出力
    63 00000142 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
    64                              <1> 
    65                              <1>     ; 輝度I
    66 00000146 6A03E847FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
    66 0000014F C404                <1>
    67 00000151 6A08E859FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
    67 0000015A C404                <1>
    68 0000015C 536A085756E868FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
    68 00000165 FF6683C410          <1>
    69                              <1> 
    70                              <1>     ; 赤R
    71 0000016A 6A02E823FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
    71 00000173 C404                <1>
    72 00000175 6A04E835FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
    72 0000017E C404                <1>
    73 00000180 536A045756E844FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
    73 00000189 FF6683C410          <1>
    74                              <1> 
    75                              <1>     ; 緑G
    76 0000018E 6A01E8FFFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
    76 00000197 C404                <1>
    77 00000199 6A02E811FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
    77 000001A2 C404                <1>
    78 000001A4 536A025756E820FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
    78 000001AD FF6683C410          <1>
    79                              <1> 
    80                              <1>     ; 青B
    81 000001B2 6A00E8DBFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
    81 000001BB C404                <1>
    82 000001BD 6A01E8EDFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
    82 000001C6 C404                <1>
    83 000001C8 536A015756E8FCFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
    83 000001D1 FF6683C410          <1>
    84                              <1> 
    85 000001D6 5F                  <1>     pop edi
    86 000001D7 5E                  <1>     pop esi
    87 000001D8 5B                  <1>     pop ebx
    88                              <1> 
    89 000001D9 89EC                <1>     mov esp, ebp
    90 000001DB 5D                  <1>     pop ebp
    91                              <1> 
    92 000001DC C3                  <1>     ret
    36                                  
    37                                  ;パディング
    38 000001DD 00<rep 1E23h>               times KERNEL_SIZE - ($ - $$) db 0
    39                                  

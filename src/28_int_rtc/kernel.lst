     1                                  %include "../include/define.s"
     2                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     3                              <1> 
     4                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     5                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     6                              <1> 
     7                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
     8                              <1> 
     9                              <1>     E820_RECORD_SIZE equ 20
    10                              <1> 
    11                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    12                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    13                              <1> 
    14                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    15                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    16                              <1> 
    17                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
     2                                  %include "../include/macro.s"
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
    25                              <1> 
    26                              <1> %macro set_vect 1-*
    27                              <1>         push eax
    28                              <1>         push edi
    29                              <1> 
    30                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    31                              <1>         mov eax, %2
    32                              <1> 
    33                              <1>     %if 3 == %0
    34                              <1>         mov [edi + 4], %3               ; フラグ
    35                              <1>     %endif
    36                              <1> 
    37                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    38                              <1>         shr eax, 16
    39                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    40                              <1> 
    41                              <1>         pop edi
    42                              <1>         pop eax
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro outp 2
    46                              <1>     mov al, %2
    47                              <1>     out %1, al
    48                              <1> %endmacro
     3                                  
     4                                      ORG KERNEL_LOAD
     5                                  
     6                                  [BITS 32]   ; 32bitコードを生成
     7                                  
     8                                  ; エントリポイント
     9                                  kernel:
    10                                      ; フォントアドレスを取得
    11 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    12 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    13 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    14 0000000C C1E004                      shl eax, 4
    15 0000000F 01D8                        add eax, ebx
    16 00000011 A3[C4000000]                mov [FONT_ADR], eax
    17                                  
    18                                      ; 初期化
    19 00000016 E88B070000                  cdecl init_int                  ; 割り込みベクタの初期化
    20 0000001B E8D5070000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    21                                  
    22                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    27 00000020 50                  <1>  push eax
    28 00000021 57                  <1>  push edi
    29                              <1> 
    30 00000022 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 00000027 B8[D7070000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 0000002C 668907              <1>  mov [edi + 0], ax
    38 0000002F C1E810              <1>  shr eax, 16
    39 00000032 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 00000036 5F                  <1>  pop edi
    42 00000037 58                  <1>  pop eax
    23                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    27 00000038 50                  <1>  push eax
    28 00000039 57                  <1>  push edi
    29                              <1> 
    30 0000003A BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 0000003F B8[20080000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 00000044 668907              <1>  mov [edi + 0], ax
    38 00000047 C1E810              <1>  shr eax, 16
    39 0000004A 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 0000004E 5F                  <1>  pop edi
    42 0000004F 58                  <1>  pop eax
    24                                  
    25                                      ; デバイスの割り込み許可
    26 00000050 6A10E8F20700006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    26 00000059 C404               
    27                                  
    28                                      ; IMR（割り込みマスクレジスタ）の設定
    29                                      outp 0x21, 0b1111_1011          ; 割り込み有効：スレーブPIC
    46 0000005B B0FB                <1>  mov al, %2
    47 0000005D E621                <1>  out %1, al
    30                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    46 0000005F B0FE                <1>  mov al, %2
    47 00000061 E6A1                <1>  out %1, al
    31                                  
    32 00000063 FB                          sti                             ; 割り込み許可
    33                                  
    34 00000064 6A0D6A3FE8DA010000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    34 0000006D 6683C408           
    35 00000071 6A046A3FE859020000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    35 0000007A 6683C408           
    36 0000007E 68[B1000000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    36 00000086 00006A0E6A19E8F901-
    36 0000008F 00006683C410       
    37                                  
    38                                  .10L:
    39 00000095 A1[C8000000]                mov eax, [RTC_TIME]
    40 0000009A 5068000700006A006A-         cdecl draw_time, 72, 0, 0x0700, eax
    40 000000A3 48E84A0500006683C4-
    40 000000AC 10                 
    41                                  
    42 000000AD EBE6                        jmp .10L
    43                                  
    44                                      ; 処理の終了
    45 000000AF EBFE                        jmp $
    46                                  
    47 000000B1 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    47 000000BA 65726E656C212000   
    48                                  
    49 000000C2 00<rep 2h>              ALIGN 4, db 0
    50 000000C4 00000000                FONT_ADR: dd 0
    51 000000C8 00000000                RTC_TIME: dd 0
    52                                  
    53                                  ; モジュール
    54                                  %include "../modules/protect/vga.s"
    55                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
    56                              <1> ; plane: 読み込みプレーン
    57 000000CC 55                  <1>     push ebp
    58 000000CD 89E5                <1>     mov ebp, esp
    59                              <1> 
    60 000000CF 6650                <1>     push ax
    61 000000D1 6652                <1>     push dx
    62                              <1> 
    63                              <1> 
    64                              <1>     ; 読み込みプレーンの選択
    65 000000D3 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
    66 000000D6 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
    67 000000D9 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
    68 000000DB 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
    69 000000DF 66EF                <1>     out dx, ax
    70                              <1> 
    71 000000E1 665A                <1>     pop dx
    72 000000E3 6658                <1>     pop ax
    73                              <1> 
    74 000000E5 89EC                <1>     mov esp, ebp
    75 000000E7 5D                  <1>     pop ebp
    76                              <1> 
    77 000000E8 C3                  <1>     ret
    78                              <1> 
    79                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
    80                              <1> ; plane 書き込みプレーン
    81 000000E9 55                  <1>     push ebp
    82 000000EA 89E5                <1>     mov ebp, esp
    83                              <1> 
    84 000000EC 6650                <1>     push ax
    85 000000EE 6652                <1>     push dx
    86                              <1> 
    87                              <1> 
    88                              <1>     ; 書き込みプレーンの選択
    89 000000F0 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
    90 000000F3 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
    91 000000F6 B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
    92 000000F8 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
    93 000000FC 66EF                <1>     out dx, ax
    94                              <1> 
    95                              <1> 
    96 000000FE 665A                <1>     pop dx
    97 00000100 6658                <1>     pop ax
    98                              <1> 
    99 00000102 89EC                <1>     mov esp, ebp
   100 00000104 5D                  <1>     pop ebp
   101                              <1> 
   102 00000105 C3                  <1>     ret
   103                              <1> 
   104                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   105                              <1> ; font FONTアドレス
   106                              <1> ; vram VRAMアドレス
   107                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   108                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   109 00000106 55                  <1>     push ebp
   110 00000107 89E5                <1>     mov ebp, esp
   111                              <1>     
   112 00000109 50                  <1>     push eax
   113 0000010A 53                  <1>     push ebx
   114 0000010B 51                  <1>     push ecx
   115 0000010C 52                  <1>     push edx
   116 0000010D 57                  <1>     push edi
   117 0000010E 56                  <1>     push esi
   118                              <1> 
   119 0000010F 8B7508              <1>     mov esi, [ebp + 8]          ; font
   120 00000112 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   121 00000115 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   122 00000119 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   123                              <1>     ; bh = 背景色 bl = 前景色
   124                              <1> 
   125 0000011D 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   126 0000011F 0F94C6              <1>     setz dh         ; dh = zf
   127 00000122 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   128                              <1> 
   129 00000124 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   130 00000126 0F94C2              <1>     setz dl         ; dl = zf
   131 00000129 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   132                              <1> 
   133                              <1>     ; 16ドットフォントのコピー
   134 0000012B FC                  <1>     cld             ; アドレス加算モード
   135                              <1> 
   136 0000012C B910000000          <1>     mov ecx, 16
   137                              <1> .10L:
   138                              <1>     ; フォントマスクの作成
   139 00000131 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   140 00000132 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   141 00000134 F6D4                <1>     not ah
   142                              <1> 
   143                              <1>     ; 前景色
   144 00000136 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   145                              <1> 
   146                              <1>     ; 背景色
   147 00000138 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   148 0000013E 7404                <1>     jz .11F
   149                              <1>     ; 透過on
   150 00000140 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   151 00000142 EB02                <1>     jmp .11E
   152                              <1> .11F:                   ; 透過off
   153 00000144 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   154                              <1> .11E:
   155                              <1>     
   156                              <1>     ; 前景色と背景色を合成
   157 00000146 08E0                <1>     or al, ah           ; al = 背景 | 前景
   158                              <1> 
   159                              <1>     ; 新しい値を出力
   160 00000148 8807                <1>     mov [edi], al
   161                              <1> 
   162 0000014A 83C750              <1>     add edi, 80      ; 1行すすめる
   163 0000014D E2E2                <1>     loop .10L
   164                              <1> .10E:
   165                              <1> 
   166 0000014F 5E                  <1>     pop esi
   167 00000150 5F                  <1>     pop edi
   168 00000151 5A                  <1>     pop edx
   169 00000152 59                  <1>     pop ecx
   170 00000153 5B                  <1>     pop ebx
   171 00000154 58                  <1>     pop eax
   172                              <1> 
   173 00000155 89EC                <1>     mov esp, ebp
   174 00000157 5D                  <1>     pop ebp
   175                              <1> 
   176 00000158 C3                  <1>     ret
   177                              <1> 
   178                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   179                              <1> ; bitデータ
   180                              <1> ; vram VRAMアドレス
   181                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   182                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   183 00000159 55                  <1>     push ebp
   184 0000015A 89E5                <1>     mov ebp, esp
   185                              <1>     
   186 0000015C 50                  <1>     push eax
   187 0000015D 53                  <1>     push ebx
   188 0000015E 52                  <1>     push edx
   189 0000015F 57                  <1>     push edi
   190                              <1> 
   191 00000160 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   192 00000163 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   193 00000167 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   194                              <1>     ; bl = 前景色
   195                              <1> 
   196                              <1>     ; 常に透過モード
   197 0000016B 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   198 0000016D 0F94C3              <1>     setz bl         ; dl = zf
   199 00000170 FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   200                              <1> 
   201                              <1>     ; マスク
   202 00000172 8A4508              <1>     mov al, [ebp + 8]   ; bit
   203 00000175 88C4                <1>     mov ah, al      ; ah ~= al
   204 00000177 F6D4                <1>     not ah
   205                              <1> 
   206 00000179 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   207 0000017B 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   208 0000017D 08E0                <1>     or al, ah           ; 背景と前景を合成
   209 0000017F 8807                <1>     mov [edi], al       ; プレーンに書き込み
   210                              <1>     
   211                              <1> 
   212 00000181 5F                  <1>     pop edi
   213 00000182 5A                  <1>     pop edx
   214 00000183 5B                  <1>     pop ebx
   215 00000184 58                  <1>     pop eax
   216                              <1> 
   217 00000185 89EC                <1>     mov esp, ebp
   218 00000187 5D                  <1>     pop ebp
   219                              <1> 
   220 00000188 C3                  <1>     ret
    55                                  %include "../modules/protect/draw_char.s"
    56                              <1> draw_char:      ; void draw_char(col, row, color, ch);
    57                              <1> ; col 列（0～79）
    58                              <1> ; row 行（0～29）
    59                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
    60                              <1> ; ch 文字
    61                              <1> 
    62 00000189 55                  <1>     push ebp
    63 0000018A 89E5                <1>     mov ebp, esp
    64                              <1> 
    65 0000018C 53                  <1>     push ebx
    66 0000018D 56                  <1>     push esi
    67 0000018E 57                  <1>     push edi
    68                              <1> 
    69                              <1>     ; コピー元フォントアドレスを設定
    70 0000018F 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
    71 00000193 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
    72 00000196 0335[C4000000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
    73                              <1> 
    74                              <1>     ; コピー先アドレスを取得
    75                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
    76                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
    77 0000019C 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
    78 0000019F C1E708              <1>     shl edi, 8
    79 000001A2 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
    80 000001A9 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
    81                              <1> 
    82                              <1>     ; 1文字分のフォントを出力
    83 000001AC 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
    84                              <1> 
    85                              <1>     ; 輝度I
    86 000001B0 6A03E815FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
    86 000001B9 C404                <1>
    87 000001BB 6A08E827FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
    87 000001C4 C404                <1>
    88 000001C6 536A085756E836FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
    88 000001CF FF6683C410          <1>
    89                              <1> 
    90                              <1>     ; 赤R
    91 000001D4 6A02E8F1FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
    91 000001DD C404                <1>
    92 000001DF 6A04E803FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
    92 000001E8 C404                <1>
    93 000001EA 536A045756E812FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
    93 000001F3 FF6683C410          <1>
    94                              <1> 
    95                              <1>     ; 緑G
    96 000001F8 6A01E8CDFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
    96 00000201 C404                <1>
    97 00000203 6A02E8DFFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
    97 0000020C C404                <1>
    98 0000020E 536A025756E8EEFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
    98 00000217 FF6683C410          <1>
    99                              <1> 
   100                              <1>     ; 青B
   101 0000021C 6A00E8A9FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   101 00000225 C404                <1>
   102 00000227 6A01E8BBFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   102 00000230 C404                <1>
   103 00000232 536A015756E8CAFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   103 0000023B FF6683C410          <1>
   104                              <1> 
   105 00000240 5F                  <1>     pop edi
   106 00000241 5E                  <1>     pop esi
   107 00000242 5B                  <1>     pop ebx
   108                              <1> 
   109 00000243 89EC                <1>     mov esp, ebp
   110 00000245 5D                  <1>     pop ebp
   111                              <1> 
   112 00000246 C3                  <1>     ret
    56                                  %include "../modules/protect/draw_font.s"
    57                              <1> draw_font:  ; void draw_font(col, row);
    58                              <1> ; col 列
    59                              <1> ; row 行
    60 00000247 55                  <1>     push ebp
    61 00000248 89E5                <1>     mov ebp, esp
    62                              <1> 
    63 0000024A 50                  <1>     push eax
    64 0000024B 53                  <1>     push ebx
    65 0000024C 51                  <1>     push ecx
    66 0000024D 57                  <1>     push edi
    67 0000024E 56                  <1>     push esi
    68                              <1> 
    69                              <1> 
    70 0000024F 8B7508              <1>     mov esi, [ebp + 8]  ; x
    71 00000252 8B7D0C              <1>     mov edi, [ebp +12]  ; y
    72                              <1> 
    73 00000255 B900000000          <1>     mov ecx, 0
    74                              <1> .10L:
    75 0000025A 81F900010000        <1>     cmp ecx, 256
    76 00000260 731F                <1>     jae .10E
    77                              <1> 
    78 00000262 89C8                <1>     mov eax, ecx
    79 00000264 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
    80 00000267 01F0                <1>     add eax, esi    ; eax += x
    81                              <1> 
    82 00000269 89CB                <1>     mov ebx, ecx
    83 0000026B C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
    84 0000026E 01FB                <1>     add ebx, edi    ; ebx += y
    85                              <1> 
    86 00000270 516A075350E80FFFFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
    86 00000279 FF6683C410          <1>
    87                              <1> 
    88 0000027E 41                  <1>     inc ecx
    89 0000027F EBD9                <1>     jmp .10L
    90                              <1> .10E:
    91                              <1> 
    92 00000281 5E                  <1>     pop esi
    93 00000282 5F                  <1>     pop edi
    94 00000283 59                  <1>     pop ecx
    95 00000284 5B                  <1>     pop ebx
    96 00000285 58                  <1>     pop eax
    97                              <1> 
    98 00000286 89EC                <1>     mov esp, ebp
    99 00000288 5D                  <1>     pop ebp
   100                              <1> 
   101 00000289 C3                  <1>     ret
    57                                  %include "../modules/protect/draw_str.s"
    58                              <1> draw_str:   ;void draw_str(col, row, color, p);
    59                              <1> ; col: 列
    60                              <1> ; row: 行
    61                              <1> ; color: 描画色
    62                              <1> ; p: 文字列のアドレス
    63 0000028A 55                  <1>     push ebp
    64 0000028B 89E5                <1>     mov ebp, esp
    65                              <1> 
    66 0000028D 50                  <1>     push eax
    67 0000028E 53                  <1>     push ebx
    68 0000028F 51                  <1>     push ecx
    69 00000290 52                  <1>     push edx
    70 00000291 56                  <1>     push esi
    71                              <1> 
    72                              <1> 
    73 00000292 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
    74 00000295 8B550C              <1>     mov edx, [ebp +12]  ; row
    75 00000298 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
    76 0000029C 8B7514              <1>     mov esi, [ebp +20]  ; p
    77                              <1> 
    78 0000029F FC                  <1>     cld
    79                              <1> .10L:
    80 000002A0 AC                  <1>     lodsb
    81 000002A1 3C00                <1>     cmp al, 0
    82 000002A3 7425                <1>     je .10E
    83                              <1> 
    84 000002A5 50535251E8DBFEFFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
    84 000002AE 6683C410            <1>
    85                              <1> 
    86 000002B2 41                  <1>     inc ecx
    87 000002B3 83F950              <1>     cmp ecx, 80
    88 000002B6 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
    89 000002B8 B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
    90 000002BD 42                  <1>     inc edx
    91 000002BE 83FA1E              <1>     cmp edx, 30
    92 000002C1 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
    93 000002C3 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
    94                              <1> .12E:
    95 000002C8 EBD6                <1>     jmp .10L
    96                              <1> .10E:
    97                              <1> 
    98 000002CA 5E                  <1>     pop esi
    99 000002CB 5A                  <1>     pop edx
   100 000002CC 59                  <1>     pop ecx
   101 000002CD 5B                  <1>     pop ebx
   102 000002CE 58                  <1>     pop eax
   103                              <1> 
   104 000002CF 89EC                <1>     mov esp, ebp
   105 000002D1 5D                  <1>     pop ebp
   106                              <1> 
   107 000002D2 C3                  <1>     ret
    58                                  %include "../modules/protect/draw_color_bar.s"
    59                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
    60                              <1> ; col: 列
    61                              <1> ; row: 行
    62 000002D3 55                  <1>     push ebp
    63 000002D4 89E5                <1>     mov ebp, esp
    64                              <1> 
    65 000002D6 50                  <1>     push eax
    66 000002D7 53                  <1>     push ebx
    67 000002D8 51                  <1>     push ecx
    68 000002D9 52                  <1>     push edx
    69 000002DA 56                  <1>     push esi
    70 000002DB 57                  <1>     push edi
    71                              <1> 
    72                              <1> 
    73 000002DC 8B7508              <1>     mov esi, [ebp + 8]      ; x
    74 000002DF 8B7D0C              <1>     mov edi, [ebp +12]      ; y
    75                              <1> 
    76                              <1>     ; カラーバーを表示
    77 000002E2 B900000000          <1>     mov ecx, 0
    78                              <1> .10L:
    79 000002E7 83F910              <1>     cmp ecx, 16
    80 000002EA 732E                <1>     jae .10E
    81                              <1> 
    82                              <1>     ; 一回で8文字
    83 000002EC 89C8                <1>     mov eax, ecx
    84 000002EE 83E001              <1>     and eax, 0x01
    85 000002F1 C1E003              <1>     shl eax, 3
    86 000002F4 01F0                <1>     add eax, esi    ; col
    87                              <1> 
    88                              <1>     ; 2回に1回改行
    89 000002F6 89CB                <1>     mov ebx, ecx
    90 000002F8 D1EB                <1>     shr ebx, 1
    91 000002FA 01FB                <1>     add ebx, edi    ; row
    92                              <1> 
    93                              <1>     ; 背景色を2色見たら下位次の行
    94 000002FC 89CA                <1>     mov edx, ecx
    95 000002FE D1E2                <1>     shl edx, 1
    96 00000300 8B92[2D030000]      <1>     mov edx, [.t0 + edx]    ; color
    97                              <1> 
    98 00000306 68[24030000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
    98 0000030E E877FFFFFF6683C410  <1>
    99                              <1> 
   100 00000317 41                  <1>     inc ecx
   101 00000318 EBCD                <1>     jmp .10L
   102                              <1> .10E:
   103                              <1> 
   104 0000031A 5F                  <1>     pop edi
   105 0000031B 5E                  <1>     pop esi
   106 0000031C 5A                  <1>     pop edx
   107 0000031D 59                  <1>     pop ecx
   108 0000031E 5B                  <1>     pop ebx
   109 0000031F 58                  <1>     pop eax
   110                              <1> 
   111 00000320 89EC                <1>     mov esp, ebp
   112 00000322 5D                  <1>     pop ebp
   113                              <1> 
   114 00000323 C3                  <1>     ret
   115                              <1> 
   116                              <1> 
   117 00000324 202020202020202000  <1> .s0: db '        ', 0
   118                              <1> 
   119                              <1> .t0:
   120 0000032D 00000008            <1>     dw 0x0000, 0x0800
   121 00000331 00010009            <1>     dw 0x0100, 0x0900
   122 00000335 0002000A            <1>     dw 0x0200, 0x0A00
   123 00000339 0003000B            <1>     dw 0x0300, 0x0B00
   124 0000033D 0004000C            <1>     dw 0x0400, 0x0C00
   125 00000341 0005000D            <1>     dw 0x0500, 0x0D00
   126 00000345 0006000E            <1>     dw 0x0600, 0x0E00
   127 00000349 0007000F            <1>     dw 0x0700, 0x0F00
    59                                  %include "../modules/protect/draw_pixel.s"
    60                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
    61                              <1> ; x: X座標
    62                              <1> ; y: Y座標
    63                              <1> ; color: 描画色
    64 0000034D 55                  <1>     push ebp
    65 0000034E 89E5                <1>     mov ebp, esp
    66                              <1> 
    67 00000350 50                  <1>     push eax
    68 00000351 53                  <1>     push ebx
    69 00000352 51                  <1>     push ecx
    70 00000353 57                  <1>     push edi
    71                              <1> 
    72                              <1> 
    73                              <1> 
    74                              <1>     ; y座標*80->y*(640/8)
    75 00000354 8B7D0C              <1>     mov edi, [ebp +12]
    76 00000357 C1E704              <1>     shl edi, 4
    77 0000035A 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
    78                              <1> 
    79                              <1>     ; x座標/8  8pixel単位の位置
    80 00000361 8B5D08              <1>     mov ebx, [ebp + 8]
    81 00000364 89D9                <1>     mov ecx, ebx
    82 00000366 C1EB03              <1>     shr ebx, 3
    83 00000369 01DF                <1>     add edi, ebx
    84                              <1> 
    85                              <1>     ; x座標を8で割った余りからビット位置を計算
    86                              <1>     ; 8pixel中の位置
    87                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
    88 0000036B 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
    89 0000036E BB80000000          <1>     mov ebx, 0x80
    90 00000373 D3EB                <1>     shr ebx, cl
    91                              <1> 
    92 00000375 8B4D10              <1>     mov ecx, [ebp +16]
    93                              <1> 
    94                              <1>     ; プレーンごとに出力
    95 00000378 6A03E84DFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
    95 00000381 C404                <1>
    96 00000383 6A08E85FFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
    96 0000038C C404                <1>
    97 0000038E 516A085753E8C1FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
    97 00000397 FF6683C410          <1>
    98                              <1> 
    99 0000039C 6A02E829FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
    99 000003A5 C404                <1>
   100 000003A7 6A04E83BFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   100 000003B0 C404                <1>
   101 000003B2 516A045753E89DFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   101 000003BB FF6683C410          <1>
   102                              <1> 
   103 000003C0 6A01E805FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   103 000003C9 C404                <1>
   104 000003CB 6A02E817FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   104 000003D4 C404                <1>
   105 000003D6 516A025753E879FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   105 000003DF FF6683C410          <1>
   106                              <1> 
   107 000003E4 6A00E8E1FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   107 000003ED C404                <1>
   108 000003EF 6A01E8F3FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   108 000003F8 C404                <1>
   109 000003FA 516A015753E855FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   109 00000403 FF6683C410          <1>
   110                              <1> 
   111 00000408 5F                  <1>     pop edi
   112 00000409 59                  <1>     pop ecx
   113 0000040A 5B                  <1>     pop ebx
   114 0000040B 58                  <1>     pop eax
   115                              <1> 
   116 0000040C 89EC                <1>     mov esp, ebp
   117 0000040E 5D                  <1>     pop ebp
   118                              <1> 
   119 0000040F C3                  <1>     ret
    60                                  %include "../modules/protect/draw_line.s"
    61                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
    62                              <1> ; X0 始点のＸ座標
    63                              <1> ; Y0 始点のＹ座標
    64                              <1> ; X1 終点のX座標
    65                              <1> ; Y1 終点のY座標
    66                              <1> ; color 描画色
    67 00000410 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
    68 00000411 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
    69                              <1>                     ; ----------------
    70 00000413 6A00                <1>     push dword 0    ;    - 4| sum   = 0
    71 00000415 6A00                <1>     push dword 0    ;    - 8| x0    = 0
    72 00000417 6A00                <1>     push dword 0    ;    -12| dx    = 0
    73 00000419 6A00                <1>     push dword 0    ;    -16| inc_x = 0
    74 0000041B 6A00                <1>     push dword 0    ;    -20| y0    = 0
    75 0000041D 6A00                <1>     push dword 0    ;    -24| dy    = 0
    76 0000041F 6A00                <1>     push dword 0    ;    -28| inc_y = 0
    77                              <1> 
    78 00000421 50                  <1>     push eax        ;    -32| eax
    79 00000422 53                  <1>     push ebx        ;    -36| ebx
    80 00000423 51                  <1>     push ecx        ;    -40| ecx
    81 00000424 52                  <1>     push edx        ;    -44| edx
    82 00000425 56                  <1>     push esi        ;    -48| esi
    83 00000426 57                  <1>     push edi        ;    -52| edi
    84                              <1>     ; espはebp-52?
    85                              <1> 
    86                              <1>     ; x0とx1の距離を計算
    87 00000427 8B4508              <1>     mov eax, [ebp + 8]
    88 0000042A 8B5D10              <1>     mov ebx, [ebp +16]
    89 0000042D 29C3                <1>     sub ebx, eax
    90 0000042F 7D09                <1>     jge .10F
    91                              <1> 
    92 00000431 F7DB                <1>     neg ebx
    93 00000433 BEFFFFFFFF          <1>     mov esi, -1
    94 00000438 EB05                <1>     jmp .10E
    95                              <1> .10F:
    96 0000043A BE01000000          <1>     mov esi, 1
    97                              <1> .10E:
    98                              <1>     
    99                              <1>     ; y0とy1の距離を計算
   100 0000043F 8B4D0C              <1>     mov ecx, [ebp +12]
   101 00000442 8B5514              <1>     mov edx, [ebp +20]
   102 00000445 29CA                <1>     sub edx, ecx
   103 00000447 7D09                <1>     jge .20F
   104                              <1> 
   105 00000449 F7DA                <1>     neg edx
   106 0000044B BFFFFFFFFF          <1>     mov edi, -1
   107 00000450 EB05                <1>     jmp .20E
   108                              <1> .20F:
   109 00000452 BF01000000          <1>     mov edi, 1
   110                              <1> .20E:
   111                              <1>     
   112                              <1>     ; x軸
   113 00000457 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   114 0000045A 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   115 0000045D 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   116                              <1> 
   117                              <1>     ; y軸
   118 00000460 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   119 00000463 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   120 00000466 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   121                              <1> 
   122                              <1> 
   123                              <1>     ; 基準軸を決める
   124 00000469 39D3                <1>     cmp ebx, edx
   125 0000046B 7F08                <1>     jg .22F
   126                              <1>     
   127 0000046D 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   128 00000470 8D7DF8              <1>     lea edi, [ebp - 8]
   129                              <1> 
   130 00000473 EB06                <1>     jmp .22E
   131                              <1> .22F:
   132                              <1>     
   133 00000475 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   134 00000478 8D7DEC              <1>     lea edi, [ebp -20]
   135                              <1> .22E:
   136                              <1> 
   137                              <1> ; 基準軸 esi
   138                              <1> ; 相対軸 edi
   139                              <1> 
   140                              <1>     ; 繰り返し回数（基準軸のドット数）
   141 0000047B 8B4EFC              <1>     mov ecx, [esi - 4]
   142 0000047E 83F900              <1>     cmp ecx, 0
   143 00000481 7505                <1>     jnz .30E
   144 00000483 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   145                              <1> .30E:
   146                              <1> 
   147                              <1>     ; 線を描画
   148                              <1> .50L:
   149                              <1> 
   150 00000488 FF7518FF75ECFF75F8- <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   150 00000491 E8B7FEFFFF6683C40C  <1>
   153                              <1> 
   154                              <1>     ; 座標更新
   155                              <1> 
   156                              <1>     ; 基準軸の更新
   157 0000049A 8B46F8              <1>     mov eax, [esi - 8]
   158 0000049D 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   159                              <1> 
   160                              <1>     ; 相対軸の更新
   161 0000049F 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   162 000004A2 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   163                              <1> 
   164 000004A5 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   165                              <1> 
   166 000004A8 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   167 000004AA 7C07                <1>     jl .52E
   168 000004AC 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   169                              <1> 
   170 000004AE 8B5FF8              <1>     mov ebx, [edi - 8]
   171 000004B1 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   172                              <1> .52E:
   173                              <1>     
   174 000004B3 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   175                              <1> 
   176 000004B6 E2D0                <1>     loop .50L
   177                              <1> .50E:
   178                              <1> 
   179                              <1> 
   180 000004B8 5F                  <1>     pop edi
   181 000004B9 5E                  <1>     pop esi
   182 000004BA 5A                  <1>     pop edx
   183 000004BB 59                  <1>     pop ecx
   184 000004BC 5B                  <1>     pop ebx
   185 000004BD 58                  <1>     pop eax
   186                              <1>     ; espはebp-28?
   187                              <1> 
   188                              <1>     ; ↓これいらないの？
   189                              <1>     ; pop (tmp_reg)
   190                              <1>     ; pop (tmp_reg)
   191                              <1>     ; pop (tmp_reg)
   192                              <1>     ; pop (tmp_reg)
   193                              <1>     ; pop (tmp_reg)
   194                              <1>     ; pop (tmp_reg)
   195                              <1>     ; pop (tmp_reg)
   196                              <1>     ; もしくはsub esp, 56とか？
   197                              <1> 
   198                              <1>     ; espはebp?
   199 000004BE 89EC                <1>     mov esp, ebp
   200 000004C0 5D                  <1>     pop ebp
   201                              <1> 
   202 000004C1 C3                  <1>     ret
    61                                  %include "../modules/protect/draw_rect.s"
    62                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
    63 000004C2 55                  <1>     push ebp
    64 000004C3 89E5                <1>     mov ebp, esp
    65                              <1>     
    66 000004C5 50                  <1>     push eax
    67 000004C6 53                  <1>     push ebx
    68 000004C7 51                  <1>     push ecx
    69 000004C8 52                  <1>     push edx
    70 000004C9 56                  <1>     push esi
    71                              <1> 
    72 000004CA 8B4508              <1>     mov eax, [ebp + 8]  ; x0
    73 000004CD 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
    74 000004D0 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
    75 000004D3 8B5514              <1>     mov edx, [ebp +20]  ; y1
    76 000004D6 8B7518              <1>     mov esi, [ebp +24]  ; color
    77                              <1> 
    78                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
    79 000004D9 39C8                <1>     cmp eax, ecx
    80 000004DB 7C01                <1>     jl .10E
    81 000004DD 91                  <1>     xchg eax, ecx
    82                              <1> .10E:
    83 000004DE 39D3                <1>     cmp ebx, edx
    84 000004E0 7C02                <1>     jl .20E
    85 000004E2 87DA                <1>     xchg ebx, edx
    86                              <1> .20E:
    87                              <1> 
    88                              <1>     ; 矩形を描画
    89 000004E4 5653515350E822FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
    89 000004ED FF6683C414          <1>
    90 000004F2 5652505350E814FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
    90 000004FB FF6683C414          <1>
    91                              <1> 
    92 00000500 4A                  <1>     dec edx
    93 00000501 5652515250E805FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
    93 0000050A FF6683C414          <1>
    94 0000050F 42                  <1>     inc edx
    95                              <1> 
    96 00000510 49                  <1>     dec ecx
    97 00000511 5652515351E8F5FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
    97 0000051A FF6683C414          <1>
    98                              <1> 
    99 0000051F 5E                  <1>     pop esi
   100 00000520 5A                  <1>     pop edx
   101 00000521 59                  <1>     pop ecx
   102 00000522 5B                  <1>     pop ebx
   103 00000523 58                  <1>     pop eax
   104                              <1>     
   105 00000524 89EC                <1>     mov esp, ebp
   106 00000526 5D                  <1>     pop ebp
   107                              <1> 
   108 00000527 C3                  <1>     ret
    62                                  %include "../modules/protect/itoa.s"
    63                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
    64                              <1> ; num   変換する値
    65                              <1> ; buff  保存先バッファアドレス
    66                              <1> ; size  保存先バッファサイズ
    67                              <1> ; radix 基数（2, 8, 10, 16)
    68                              <1> ; flags 
    69                              <1> ;   B2: 空白を'0'で埋める
    70                              <1> ;   B1: '+/-'記号を付加する
    71                              <1> ;   B0: 値を符号付き変数として扱う
    72                              <1> 
    73 00000528 55                  <1>     push ebp
    74 00000529 89E5                <1>     mov ebp, esp
    75                              <1> 
    76 0000052B 50                  <1>     push eax
    77 0000052C 53                  <1>     push ebx
    78 0000052D 51                  <1>     push ecx
    79 0000052E 52                  <1>     push edx
    80 0000052F 56                  <1>     push esi
    81 00000530 57                  <1>     push edi
    82                              <1> 
    83                              <1> 
    84                              <1>     ; 引数取得
    85 00000531 8B4508              <1>     mov eax, [ebp + 8]    ; num
    86 00000534 8B750C              <1>     mov esi, [ebp +12]    ; size
    87 00000537 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
    88                              <1> 
    89 0000053A 89F7                <1>     mov edi, esi
    90 0000053C 01CF                <1>     add edi, ecx
    91 0000053E 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
    92                              <1> 
    93 0000053F 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
    94                              <1> 
    95                              <1>     ; 符号付き判定
    96 00000542 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
    97                              <1> .10Q:
    98 00000548 7408                <1>     je .10E         ; E=Exit
    99 0000054A 83F800              <1>     cmp eax, 0
   100                              <1> .12Q:
   101 0000054D 7D03                <1>     jge .12E
   102 0000054F 83CB02              <1>     or ebx, 0b0010
   103                              <1> .12E:
   104                              <1> .10E:
   105                              <1> 
   106                              <1>     ; 符号出力判定
   107 00000552 F7C302000000        <1>     test ebx, 0b0010
   108                              <1> .20Q:
   109 00000558 7410                <1>     je .20E
   110 0000055A 83F800              <1>     cmp eax, 0
   111                              <1> .22Q:
   112 0000055D 7D07                <1>     jge .22F
   113 0000055F F7D8                <1>     neg eax
   114 00000561 C6062D              <1>     mov [esi], byte '-'
   115 00000564 EB03                <1>     jmp .22E
   116                              <1> .22F:
   117                              <1>     
   118 00000566 C6062B              <1>     mov [esi], byte '+'
   119                              <1> .22E:
   120 00000569 49                  <1>     dec ecx
   121                              <1> .20E:
   122                              <1> 
   123                              <1>     ; ASCII変換
   124 0000056A 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   125                              <1> .30L:
   126 0000056D BA00000000          <1>     mov edx, 0
   127 00000572 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   128                              <1> 
   129 00000574 89D6                <1>     mov esi, edx
   130 00000576 8A96[A0050000]      <1>     mov dl, byte [.ascii + esi]
   131                              <1> 
   132 0000057C 8817                <1>     mov [edi], dl
   133 0000057E 4F                  <1>     dec edi
   134                              <1> 
   135 0000057F 83F800              <1>     cmp eax, 0
   136 00000582 E0E9                <1>     loopnz .30L
   137                              <1> .30E:
   138                              <1> 
   139                              <1>     ; 空欄を埋める
   140 00000584 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   141                              <1> .40Q:
   142 00000587 740D                <1>     je .40E
   143 00000589 B020                <1>     mov al, ' '
   144 0000058B 837D1804            <1>     cmp [ebp +24], dword 0b0100
   145                              <1> .42Q:
   146 0000058F 7502                <1>     jne .42E
   147 00000591 B030                <1>     mov al, '0'
   148                              <1> .42E:
   149 00000593 FD                  <1>     std         ; dimention flag = 1(-方向)
   150 00000594 F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   151                              <1> .40E:
   152                              <1> 
   153 00000596 5F                  <1>     pop edi
   154 00000597 5E                  <1>     pop esi
   155 00000598 5A                  <1>     pop edx
   156 00000599 59                  <1>     pop ecx
   157 0000059A 5B                  <1>     pop ebx
   158 0000059B 58                  <1>     pop eax
   159                              <1> 
   160 0000059C 89EC                <1>     mov esp, ebp
   161 0000059E 5D                  <1>     pop ebp
   162                              <1> 
   163 0000059F C3                  <1>     ret
   164                              <1> 
   165 000005A0 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   165 000005A9 39414243444546      <1>
    63                                  %include "../modules/protect/rtc.s"
    64                              <1> rtc_get_time:   ; int rtc_get_time(dst);
    65                              <1> ; dst: 保存先アドレス
    66                              <1> ; 戻り値: 成功(0以外)、失敗(0)
    67 000005B0 55                  <1>     push ebp
    68 000005B1 89E5                <1>     mov ebp, esp
    69                              <1> 
    70 000005B3 50                  <1>     push eax
    71 000005B4 53                  <1>     push ebx
    72                              <1> 
    73 000005B5 B00A                <1>     mov al, 0x0A    ; レジスタA
    74 000005B7 E670                <1>     out 0x70, al
    75 000005B9 E471                <1>     in al, 0x71
    76 000005BB A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
    77 000005BD 7407                <1>     je .10F
    78 000005BF B801000000          <1>     mov eax, 1      ; 更新中は失敗
    79 000005C4 EB27                <1>     jmp .10E
    80                              <1> .10F:
    81                              <1> 
    82 000005C6 B004                <1>     mov al, 0x04    ; 時
    83 000005C8 E670                <1>     out 0x70, al    ; レジスタ設定
    84 000005CA E471                <1>     in al, 0x71     ; 時刻読み込み
    85                              <1> 
    86 000005CC C1E008              <1>     shl eax, 8      ; alをahに退避
    87                              <1> 
    88 000005CF B002                <1>     mov al, 0x02    ; 分
    89 000005D1 E670                <1>     out 0x70, al    ; レジスタ設定
    90 000005D3 E471                <1>     in al, 0x71     ; 時刻読み込み
    91                              <1> 
    92 000005D5 C1E008              <1>     shl eax, 8      ; alをahに退避
    93                              <1> 
    94 000005D8 B000                <1>     mov al, 0x00    ; 秒
    95 000005DA E670                <1>     out 0x70, al    ; レジスタ設定
    96 000005DC E471                <1>     in al, 0x71     ; 時刻読み込み
    97                              <1> 
    98 000005DE 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
    99                              <1> 
   100 000005E3 8B5D08              <1>     mov ebx, [ebp + 8]
   101 000005E6 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   102                              <1> 
   103 000005E8 B800000000          <1>     mov eax, 0
   104                              <1> .10E:
   105                              <1> 
   106 000005ED 5B                  <1>     pop ebx
   107 000005EE 58                  <1>     pop eax
   108                              <1> 
   109 000005EF 89EC                <1>     mov esp, ebp
   110 000005F1 5D                  <1>     pop ebp
   111                              <1> 
   112 000005F2 C3                  <1>     ret
    64                                  %include "../modules/protect/draw_time.s"
    65                              <1> draw_time:  ; void draw_time(col, row, color, time);
    66                              <1> ; time 時刻データ
    67 000005F3 55                  <1>     push ebp
    68 000005F4 89E5                <1>     mov ebp, esp
    69                              <1> 
    70 000005F6 50                  <1>     push eax
    71 000005F7 53                  <1>     push ebx
    72                              <1>     
    73 000005F8 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
    74                              <1> 
    75 000005FB 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
    76 000005FE 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
    76 00000605 [65060000]53E819FF- <1>
    76 0000060D FFFF6683C414        <1>
    77                              <1> 
    78 00000613 88E3                <1>     mov bl, ah          ; 分だけ
    79 00000615 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
    79 0000061C [62060000]53E802FF- <1>
    79 00000624 FFFF6683C414        <1>
    80                              <1>     
    81 0000062A C1E810              <1>     shr eax, 16         ; 時だけ
    82 0000062D 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
    82 00000634 [5F060000]50E8EAFE- <1>
    82 0000063C FFFF6683C414        <1>
    83                              <1> 
    84 00000642 68[5F060000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
    84 0000064A FF750CFF7508E835FC- <1>
    84 00000653 FFFF6683C410        <1>
    85                              <1> 
    86 00000659 5B                  <1>     pop ebx
    87 0000065A 58                  <1>     pop eax
    88                              <1> 
    89 0000065B 89EC                <1>     mov esp, ebp
    90 0000065D 5D                  <1>     pop ebp
    91                              <1> 
    92 0000065E C3                  <1>     ret
    93                              <1> 
    94 0000065F 5A5A3A              <1> .hour: db "ZZ:"
    95 00000662 5A5A3A              <1> .min:  db "ZZ:"
    96 00000665 5A5A00              <1> .sec:  db "ZZ", 0
    65                                  %include "../modules/protect/interrupt.s"
    66                              <1> int_stop:
    67 00000668 FB                  <1>     sti ; 割り込みを許可
    68                              <1> 
    69                              <1>     ; EAXで示される文字列を表示
    70 00000669 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
    70 00000672 19E812FCFFFF6683C4- <1>
    70 0000067B 10                  <1>
    71                              <1> 
    72                              <1>     ; スタックのデータを文字列に変換
    73 0000067C 8B0424              <1>     mov eax, [esp + 0]
    74 0000067F 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
    74 00000686 [44070000]50E898FE- <1>
    74 0000068E FFFF6683C414        <1>
    75                              <1> 
    76 00000694 8B442404            <1>     mov eax, [esp + 4]
    77 00000698 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
    77 0000069F [55070000]50E87FFE- <1>
    77 000006A7 FFFF6683C414        <1>
    78                              <1> 
    79 000006AD 8B442408            <1>     mov eax, [esp + 8]
    80 000006B1 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
    80 000006B8 [66070000]50E866FE- <1>
    80 000006C0 FFFF6683C414        <1>
    81                              <1> 
    82 000006C6 8B44240C            <1>     mov eax, [esp +12]
    83 000006CA 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
    83 000006D1 [77070000]50E84DFE- <1>
    83 000006D9 FFFF6683C414        <1>
    84                              <1> 
    85                              <1>     ; 文字列の表示
    86 000006DF 68[3D070000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
    86 000006E7 00006A106A19E898FB- <1>
    86 000006F0 FFFF6683C410        <1>
    87 000006F6 68[4E070000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
    87 000006FE 00006A116A19E881FB- <1>
    87 00000707 FFFF6683C410        <1>
    88 0000070D 68[5F070000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
    88 00000715 00006A126A19E86AFB- <1>
    88 0000071E FFFF6683C410        <1>
    89 00000724 68[70070000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
    89 0000072C 00006A136A19E853FB- <1>
    89 00000735 FFFF6683C410        <1>
    90                              <1> 
    91                              <1>     ; 無限ループ
    92 0000073B EBFE                <1>     jmp $
    93                              <1> 
    94 0000073D 4553502B20303A      <1> .s1 db "ESP+ 0:"
    95 00000744 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
    95 0000074D 00                  <1>
    96 0000074E 2020202B20343A      <1> .s2 db "   + 4:"
    97 00000755 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
    97 0000075E 00                  <1>
    98 0000075F 2020202B20383A      <1> .s3 db "   + 8:"
    99 00000766 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
    99 0000076F 00                  <1>
   100 00000770 2020202B31323A      <1> .s4 db "   +12:"
   101 00000777 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   101 00000780 00                  <1>
   102                              <1> 
   103                              <1> int_default:
   104 00000781 9C                  <1>     pushf       ; EFLAGS(IF==0)
   105 00000782 0E                  <1>     push cs
   106 00000783 68[68060000]        <1>     push int_stop
   107                              <1> 
   108 00000788 B8[8E070000]        <1>     mov eax, .s0
   109 0000078D CF                  <1>     iret
   110                              <1> 
   111 0000078E 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   111 00000797 50202020203E2000    <1>
   112                              <1> 
   113                              <1> 
   114                              <1> ; 割り込みベクタの初期化
   115 0000079F 90                  <1> ALIGN 4
   116 000007A0 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   117 000007A2 00001000            <1>       dd VECT_BASE      ; idt location
   118                              <1> 
   119                              <1> ; 割り込みテーブルを初期化
   120                              <1> init_int:
   121 000007A6 50                  <1>     push eax
   122 000007A7 53                  <1>     push ebx
   123 000007A8 51                  <1>     push ecx
   124 000007A9 57                  <1>     push edi
   125                              <1> 
   126                              <1>     ; 全ての割り込みにデフォルト処理を設定
   127 000007AA 8D05[81070000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   128 000007B0 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   129 000007B5 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   130                              <1> 
   131 000007B7 B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   132 000007BC BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   133                              <1> 
   134                              <1>     ; メモリに書き込み
   135                              <1> .10L:
   136 000007C1 891F                <1>     mov [edi + 0], ebx
   137 000007C3 894704              <1>     mov [edi + 4], eax
   138 000007C6 83C708              <1>     add edi, 8
   139 000007C9 E2F6                <1>     loop .10L
   140                              <1> 
   141                              <1>     ; 割り込みディスクリプタの設定
   142 000007CB 0F011D[A0070000]    <1>     lidt [IDTR]
   143                              <1> 
   144 000007D2 5F                  <1>     pop edi
   145 000007D3 59                  <1>     pop ecx
   146 000007D4 5B                  <1>     pop ebx
   147 000007D5 58                  <1>     pop eax
   148                              <1> 
   149 000007D6 C3                  <1>     ret
   150                              <1> 
   151                              <1> 
   152                              <1> int_zero_div:
   153 000007D7 9C                  <1>     pushf
   154 000007D8 0E                  <1>     push cs
   155 000007D9 68[68060000]        <1>     push int_stop
   156                              <1> 
   157 000007DE B8[E4070000]        <1>     mov eax, .s0
   158 000007E3 CF                  <1>     iret
   159                              <1> 
   160 000007E4 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   160 000007ED 44495620203E2000    <1>
    66                                  %include "../modules/protect/pic.s"
    67                              <1> init_pic:
    68 000007F5 50                  <1>     push eax
    69                              <1> 
    70                              <1>     ; outp ポート, データ
    71                              <1> 
    72                              <1>     ; マスタの設定
    73                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    46 000007F6 B011                <2>  mov al, %2
    47 000007F8 E620                <2>  out %1, al
    74                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    46 000007FA B020                <2>  mov al, %2
    47 000007FC E621                <2>  out %1, al
    75                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    46 000007FE B004                <2>  mov al, %2
    47 00000800 E621                <2>  out %1, al
    76                              <1>     outp 0x21, 0x05 ; MASTER.ICW4 = 0x05
    46 00000802 B005                <2>  mov al, %2
    47 00000804 E621                <2>  out %1, al
    77                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    46 00000806 B0FF                <2>  mov al, %2
    47 00000808 E621                <2>  out %1, al
    78                              <1> 
    79                              <1>     ; スレーブの設定
    80                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    46 0000080A B011                <2>  mov al, %2
    47 0000080C E6A0                <2>  out %1, al
    81                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    46 0000080E B028                <2>  mov al, %2
    47 00000810 E6A1                <2>  out %1, al
    82                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    46 00000812 B002                <2>  mov al, %2
    47 00000814 E6A1                <2>  out %1, al
    83                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    46 00000816 B001                <2>  mov al, %2
    47 00000818 E6A1                <2>  out %1, al
    84                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    46 0000081A B0FF                <2>  mov al, %2
    47 0000081C E6A1                <2>  out %1, al
    85                              <1> 
    86 0000081E 58                  <1>     pop eax
    87                              <1> 
    88 0000081F C3                  <1>     ret
    67                                  %include "../modules/protect/int_rtc.s"
    68                              <1> int_rtc:
    69 00000820 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
    70 00000821 1E                  <1>     push ds
    71 00000822 06                  <1>     push es
    72                              <1> 
    73                              <1>     ; データ用セグメントセレクタの設定
    74 00000823 66B81000            <1>     mov ax, 0x0010
    75 00000827 8ED8                <1>     mov ds, ax
    76 00000829 8EC0                <1>     mov es, ax
    77                              <1> 
    78                              <1>     ; RTCから時刻を取得
    79 0000082B 68[C8000000]E87BFD- <1>     cdecl rtc_get_time, RTC_TIME
    79 00000833 FFFF6683C404        <1>
    80                              <1> 
    81                              <1>     ; RTCの割り込み要因を取得
    82                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    46 00000839 B00C                <2>  mov al, %2
    47 0000083B E670                <2>  out %1, al
    83 0000083D E471                <1>     in al, 0x71     ; RTCからデータを取得
    84                              <1> 
    85                              <1>     ; 割り込みフラグをクリア(EOI)
    86 0000083F B020                <1>     mov al, 0x20
    87 00000841 E6A0                <1>     out 0xA0, al    ; スレーブ
    88 00000843 E620                <1>     out 0x20, al    ; マスタ
    89                              <1> 
    90 00000845 07                  <1>     pop es
    91 00000846 1F                  <1>     pop ds
    92 00000847 61                  <1>     popa
    93                              <1> 
    94 00000848 CF                  <1>     iret        ; 割り込み処理の終了
    95                              <1> 
    96                              <1> rtc_int_en:
    97 00000849 55                  <1>     push ebp
    98 0000084A 89E5                <1>     mov ebp, esp
    99 0000084C 50                  <1>     push eax
   100                              <1> 
   101                              <1>     ; 割り込み許可設定
   102                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    46 0000084D B00B                <2>  mov al, %2
    47 0000084F E670                <2>  out %1, al
   103                              <1> 
   104 00000851 E471                <1>     in al, 0x71     ; RTCからデータを取得
   105 00000853 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   106                              <1> 
   107 00000856 E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   108                              <1> 
   109 00000858 58                  <1>     pop eax
   110                              <1> 
   111 00000859 89EC                <1>     mov esp, ebp
   112 0000085B 5D                  <1>     pop ebp
   113                              <1> 
   114 0000085C C3                  <1>     ret
    68                                  
    69                                  ;パディング
    70 0000085D 00<rep 17A3h>               times KERNEL_SIZE - ($ - $$) db 0
    71                                  

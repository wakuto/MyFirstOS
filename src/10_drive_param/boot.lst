     1                                  ; マクロ
     2                                  %include "../include/macro.s"   ; C言語と同等の関数呼び出し
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
     3                                  %include "../include/define.s"  ; 各種定数の宣言
     4                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
     5                              <1> 
     6                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     7                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     8                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートプログラムのセクタ数
     4                                  
     5                                      ORG BOOT_LOAD           ; ロードアドレスをアセンブラに指示
     6                                  
     7                                  entry:
     8 00000000 EB58                        jmp ipl      ; jump to ipl
     9                                  
    10                                      ; BPB(BIOS Parameter Block
    11 00000002 90<rep 58h>                 times 90 - ($ - $$) db 0x90
    12                                  
    13                                  
    14                                      ; IPL(Initial Program Loader)
    15                                  ipl:
    16 0000005A FA                          cli         ; clear interrupu flag 割込み禁止
    17                                  
    18                                  
    19 0000005B B80000                      mov ax, 0x0000
    20 0000005E 8ED8                        mov ds, ax
    21 00000060 8EC0                        mov es, ax
    22 00000062 8ED0                        mov ss, ax
    23 00000064 BC007C                      mov sp, BOOT_LOAD
    24                                      
    25 00000067 FB                          sti         ; set interrupt flag 割り込み許可
    26                                  
    27 00000068 8816[B800]                  mov [BOOT + drive.no], dl    ; ブートドライブの番号(DL)を保存
    28                                  
    29 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0
    29 00000074 02                 
    30                                  
    31                                      ; 残りのセクタをすべて読み込む
    32 00000075 BB0F00                      mov bx, BOOT_SECT - 1           ; bx: 残りのブートセクタ数
    33 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; cx: 次のロードアドレス
    34                                  
    35 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx    ; ax = read_chs(BOOT, bx, cx);
    35 00000083 83C406             
    36                                  
    37 00000086 39D8                        cmp ax, bx
    38                                  .10Q:
    39 00000088 740C                        jz .10E                 ; 読み込んだセクタ数==読み込むセクタ数
    40                                  .10T:
    41 0000008A 68[A600]E8300083C4-         cdecl puts, .e0         ; 失敗
    41 00000092 02                 
    42 00000093 E84900                      call reboot             ; 戻ってこない
    43                                  .10E:
    44                                      ; 次のステージへ
    45 00000096 E92802                      jmp stage_2
    46                                  
    47                                  
    48                                  ; Data
    49 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0x00
    49 000000A2 2E0A0D00           
    50 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    50 000000AF 746F72207265616400 
    51                                  
    52                                  ALIGN 2, db 0
    53                                  BOOT:           ; ブートドライブ関係の情報
    54                                      istruc drive    ; struct driveを宣言
    55 000000B8 0000                            at drive.no, dw 0       ; ドライブ番号
    56 000000BA 0000                            at drive.cyln, dw 0     ; C:シリンダ
    57 000000BC 0000                            at drive.head, dw 0     ; H:ヘッド
    58 000000BE 0200                            at drive.sect, dw 2     ; S:セクタ
    59                                      iend
    60                                  
    61                                  ; モジュール
    62                                  %include "../modules/real/puts.s"
    63                              <1> puts:       ; void puts(str);
    64 000000C0 55                  <1>     push bp
    65 000000C1 89E5                <1>     mov bp, sp
    66                              <1> 
    67 000000C3 50                  <1>     push ax
    68 000000C4 53                  <1>     push bx
    69 000000C5 56                  <1>     push si
    70                              <1> 
    71 000000C6 8B7604              <1>     mov si, [bp + 4]    ; si=文字列のアドレス
    72                              <1> 
    73 000000C9 B40E                <1>     mov ah, 0x0E
    74 000000CB BB0000              <1>     mov bx, 0x0000
    75 000000CE FC                  <1>     cld
    76                              <1> 
    77                              <1> .10L:
    78 000000CF AC                  <1>     lodsb
    79                              <1> 
    80 000000D0 3C00                <1>     cmp al, 0x00
    81 000000D2 7404                <1>     je .10E
    82                              <1> 
    83 000000D4 CD10                <1>     int 0x10
    84 000000D6 EBF7                <1>     jmp .10L
    85                              <1> 
    86                              <1> .10E:
    87 000000D8 5E                  <1>     pop si
    88 000000D9 5B                  <1>     pop bx
    89 000000DA 58                  <1>     pop ax
    90                              <1> 
    91 000000DB 89EC                <1>     mov sp, bp
    92 000000DD 5D                  <1>     pop bp
    93                              <1> 
    94 000000DE C3                  <1>     ret
    63                                  %include "../modules/real/reboot.s"
    64                              <1> reboot:
    65 000000DF 68[FB00]E8DBFF83C4- <1>     cdecl puts, .s0
    65 000000E7 02                  <1>
    66                              <1> 
    67                              <1> .10L:
    68 000000E8 B410                <1>     mov ah, 0x10
    69 000000EA CD16                <1>     int 0x16
    70                              <1> 
    71 000000EC 3C20                <1>     cmp al, ' '
    72 000000EE 75F8                <1>     jne .10L
    73                              <1> 
    74 000000F0 68[1901]E8CAFF83C4- <1>     cdecl puts, .s1
    74 000000F8 02                  <1>
    75                              <1> 
    76 000000F9 CD19                <1>     int 0x19
    77                              <1> 
    78 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    78 00000104 414345206B65792074- <1>
    78 0000010D 6F207265626F6F742E- <1>
    78 00000116 2E2E00              <1>
    79 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    64                                  %include "../modules/real/read_chs.s"
    65                              <1> read_chs:           ; int read_chs(drive, sect, dst);
    66                              <1> ; drive: drive構造体のアドレス
    67                              <1> ; sect:  読み出しセクタ数
    68                              <1> ; dst:   読み出し先アドレス
    69                              <1> ; 戻り値:読み込んだセクタ数
    70 0000011E 55                  <1>     push bp
    71 0000011F 89E5                <1>     mov bp, sp
    72 00000121 6A03                <1>     push 3          ; リトライ回数
    73 00000123 6A00                <1>     push 0          ; 読み込みセクタ数
    74                              <1> 
    75 00000125 53                  <1>     push bx
    76 00000126 51                  <1>     push cx
    77 00000127 52                  <1>     push dx
    78 00000128 06                  <1>     push es
    79 00000129 56                  <1>     push si
    80                              <1> 
    81                              <1>     ; 処理開始
    82 0000012A 8B7604              <1>     mov si, [bp + 4]    ; drive パラメータバッファ
    83                              <1>     
    84                              <1>     ; cxレジスタの設定
    85 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]
    86 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]
    87 00000133 C0E106              <1>     shl cl, 6
    88 00000136 0A4C06              <1>     or cl, [si + drive.sect]
    89                              <1> 
    90                              <1>     ; セクタ読み込み
    91 00000139 8A7404              <1>     mov dh, [si + drive.head];ヘッド番号
    92 0000013C 8A14                <1>     mov dl, [si + drive.no] ; ドライブ番号
    93 0000013E B80000              <1>     mov ax, 0x0000          ; 初期化
    94 00000141 8EC0                <1>     mov es, ax              ; セグメント
    95 00000143 8B5E08              <1>     mov bx, [bp + 8]        ; コピー先
    96                              <1> .10L:
    97                              <1> 
    98 00000146 B402                <1>     mov ah, 0x02        ; セクタ読み込み
    99 00000148 8A4606              <1>     mov al, [bp + 6]    ; 読み込みセクタ数
   100 0000014B CD13                <1>     int 0x13
   101 0000014D 7304                <1>     jnc .11E            ; if(success) goto .11E
   102                              <1> 
   103 0000014F B000                <1>     mov al, 0           ; failed, 読み込んだセクタ数=0
   104 00000151 EB0C                <1>     jmp .10E
   105                              <1> .11E:
   106                              <1>     
   107 00000153 3C00                <1>     cmp al, 0
   108 00000155 7508                <1>     jne .10E            ; if(読み込んだセクタ != 0) goto .10E
   109                              <1>     
   110 00000157 B80000              <1>     mov ax, 0
   111 0000015A FF4EFE              <1>     dec word [bp - 2]   ; retry--
   112 0000015D 75E7                <1>     jnz .10L            ; if(retry != 0) goto .10L
   113                              <1> .10E:
   114 0000015F B400                <1>     mov ah, 0           ; ステータス情報を破棄
   115                              <1> 
   116 00000161 5E                  <1>     pop si
   117 00000162 07                  <1>     pop es
   118 00000163 5A                  <1>     pop dx
   119 00000164 59                  <1>     pop cx
   120 00000165 5B                  <1>     pop bx
   121                              <1> 
   122 00000166 89EC                <1>     mov sp, bp
   123 00000168 5D                  <1>     pop bp
   124                              <1> 
   125 00000169 C3                  <1>     ret
    65                                  
    66 0000016A 00<rep 94h>                 times 510 - ($ - $$) db 0x00
    67 000001FE 55AA                        db 0x55, 0xAA
    68                                  
    69                                  ; モジュール（512バイトに入らなかった分）
    70                                  %include "../modules/real/itoa.s"
    71                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
    72                              <1> ; num   変換する値
    73                              <1> ; buff  保存先バッファアドレス
    74                              <1> ; size  保存先バッファサイズ
    75                              <1> ; radix 基数（2, 8, 10, 16)
    76                              <1> ; flags 
    77                              <1> ;   B2: 空白を'0'で埋める
    78                              <1> ;   B1: '+/-'記号を付加する
    79                              <1> ;   B0: 値を符号付き変数として扱う
    80                              <1> 
    81 00000200 55                  <1>     push bp
    82 00000201 89E5                <1>     mov bp, sp
    83                              <1> 
    84 00000203 50                  <1>     push ax
    85 00000204 53                  <1>     push bx
    86 00000205 51                  <1>     push cx
    87 00000206 52                  <1>     push dx
    88 00000207 56                  <1>     push si
    89 00000208 57                  <1>     push di
    90                              <1> 
    91                              <1> 
    92 00000209 8B4604              <1>     mov ax, [bp + 4]    ; num
    93 0000020C 8B4E08              <1>     mov cx, [bp + 8]    ; size
    94 0000020F 8B7606              <1>     mov si, [bp + 6]    ; buff
    95                              <1> 
    96 00000212 89F7                <1>     mov di, si
    97 00000214 01CF                <1>     add di, cx
    98 00000216 4F                  <1>     dec di              ; di = &si[cx-1]
    99                              <1> 
   100 00000217 8B5E0C              <1>     mov bx, word [bp + 12]   ; flags
   101                              <1> 
   102                              <1>     ; 符号付き判定
   103 0000021A F7C30100            <1>     test bx, 0b0001     ; 論理積を計算、0ならZFをセット
   104                              <1> .10Q:
   105 0000021E 7408                <1>     je .10E         ; E=Exit
   106 00000220 83F800              <1>     cmp ax, 0
   107                              <1> .12Q:
   108 00000223 7D03                <1>     jge .12E
   109 00000225 83CB02              <1>     or bx, 0b0010
   110                              <1> .12E:
   111                              <1> .10E:
   112                              <1> 
   113                              <1>     ; 符号出力判定
   114 00000228 F7C30200            <1>     test bx, 0b0010
   115                              <1> .20Q:
   116 0000022C 7410                <1>     je .20E
   117 0000022E 83F800              <1>     cmp ax, 0
   118                              <1> .22Q:
   119 00000231 7D07                <1>     jge .22F
   120 00000233 F7D8                <1>     neg ax
   121 00000235 C6042D              <1>     mov [si], byte '-'
   122 00000238 EB03                <1>     jmp .22E
   123                              <1> .22F:
   124                              <1>     
   125 0000023A C6042B              <1>     mov [si], byte '+'
   126                              <1> .22E:
   127 0000023D 49                  <1>     dec cx
   128                              <1> .20E:
   129                              <1> 
   130                              <1>     ; ASCII変換
   131 0000023E 8B5E0A              <1>     mov bx, [bp + 10]   ; radix(基数)
   132                              <1> .30L:
   133 00000241 BA0000              <1>     mov dx, 0
   134 00000244 F7F3                <1>     div bx      ; 商：ax, あまり: dx
   135                              <1> 
   136 00000246 89D6                <1>     mov si, dx
   137 00000248 8A94[7002]          <1>     mov dl, byte [.ascii + si]
   138                              <1> 
   139 0000024C 8815                <1>     mov [di], dl
   140 0000024E 4F                  <1>     dec di
   141                              <1> 
   142 0000024F 83F800              <1>     cmp ax, 0
   143 00000252 E0ED                <1>     loopnz .30L
   144                              <1> .30E:
   145                              <1> 
   146 00000254 83F900              <1>     cmp cx, 0
   147                              <1> .40Q:
   148 00000257 740D                <1>     je .40E
   149 00000259 B020                <1>     mov al, ' '
   150 0000025B 837E0C04            <1>     cmp [bp + 12], word 0b0100
   151                              <1> .42Q:
   152 0000025F 7502                <1>     jne .42E
   153 00000261 B030                <1>     mov al, '0'
   154                              <1> .42E:
   155 00000263 FD                  <1>     std         ; dimention flag = 1(-方向)
   156 00000264 F3AA                <1>     rep stosb   ; while (--cx) *di-- = al;
   157                              <1> .40E:
   158                              <1> 
   159 00000266 5F                  <1>     pop di
   160 00000267 5E                  <1>     pop si
   161 00000268 5A                  <1>     pop dx
   162 00000269 59                  <1>     pop cx
   163 0000026A 5B                  <1>     pop bx
   164 0000026B 58                  <1>     pop ax
   165                              <1> 
   166 0000026C 89EC                <1>     mov sp, bp
   167 0000026E 5D                  <1>     pop bp
   168                              <1> 
   169 0000026F C3                  <1>     ret
   170                              <1> 
   171 00000270 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   171 00000279 39414243444546      <1>
    71                                  %include "../modules/real/get_drive_param.s"
    72                              <1> get_drive_param:    ; int get_drive_param(drive);
    73                              <1> ; drive: drive構造体のアドレス
    74                              <1> ;        no 対象となるドライブ番号（BIOSから渡された起動ドライブ）
    75                              <1> ; 戻り値: 成功（0以外） 失敗（0）
    76                              <1> 
    77 00000280 55                  <1>     push bp
    78 00000281 89E5                <1>     mov bp, sp
    79                              <1> 
    80 00000283 53                  <1>     push bx
    81 00000284 51                  <1>     push cx
    82 00000285 06                  <1>     push es
    83 00000286 56                  <1>     push si
    84 00000287 57                  <1>     push di
    85                              <1> 
    86                              <1>     ; 処理開始
    87 00000288 8B7604              <1>     mov si, [bp + 4]        ; si = バッファ
    88                              <1> 
    89 0000028B B80000              <1>     mov ax, 0               ; Disk Base Table Pointerの初期化
    90 0000028E 8EC0                <1>     mov es, ax              ; es = di = 0
    91 00000290 89C7                <1>     mov di, ax
    92                              <1> 
    93 00000292 B408                <1>     mov ah, 0x08            ; ah = ドライブパラメータの取得
    94 00000294 8A14                <1>     mov dl, [si + drive.no] ; dl = ドライブ番号
    95 00000296 CD13                <1>     int 0x13
    96                              <1> 
    97                              <1> .10Q:
    98 00000298 721B                <1>     jc .10F
    99                              <1> .10T:       ; 成功
   100 0000029A 88C8                <1>     mov al, cl
   101 0000029C 83E03F              <1>     and ax, 0x3f    ; alの下位6ビット セクタ数のみ有効
   102                              <1> 
   103 0000029F C0E906              <1>     shr cl, 6       ; cl = シリンダ上位2ビット
   104                              <1>                     ; ch = シリンダ下位8ビット
   105 000002A2 C1C908              <1>     ror cx, 8       ; chとclを交換、cx = シリンダ
   106 000002A5 41                  <1>     inc cx          ; 1始まりに変換
   107                              <1> 
   108 000002A6 0FB6DE              <1>     movzx bx, dh    ; bx = ヘッド数 ゼロ拡張
   109 000002A9 43                  <1>     inc bx          ; 1はじまりに変換
   110                              <1> 
   111                              <1>     ; cx = シリンダ
   112                              <1>     ; bx = ヘッド
   113                              <1>     ; ax = セクタ
   114 000002AA 894C02              <1>     mov [si + drive.cyln], cx
   115 000002AD 895C04              <1>     mov [si + drive.head], bx
   116 000002B0 894406              <1>     mov [si + drive.sect], ax
   117                              <1> 
   118 000002B3 EB03                <1>     jmp .10E
   119                              <1> 
   120                              <1> .10F:       ; 失敗
   121 000002B5 B80000              <1>     mov ax, 0
   122                              <1>     
   123                              <1> .10E:
   124                              <1>     
   125 000002B8 5F                  <1>     pop di
   126 000002B9 5E                  <1>     pop si
   127 000002BA 07                  <1>     pop es
   128 000002BB 59                  <1>     pop cx
   129 000002BC 5B                  <1>     pop bx
   130                              <1> 
   131 000002BD 89EC                <1>     mov sp, bp
   132 000002BF 5D                  <1>     pop bp
   133                              <1> 
   134 000002C0 C3                  <1>     ret
    72                                  
    73                                  ; ブート処理の第２ステージ
    74                                  stage_2:
    75 000002C1 68[7E03]E8F9FD83C4-         cdecl puts, .s0
    75 000002C9 02                 
    76                                  
    77                                      ; ドライブ情報を取得
    78 000002CA 68[B800]E8B0FF83C4-         cdecl get_drive_param, BOOT
    78 000002D2 02                 
    79 000002D3 83F800                      cmp ax, 0
    80                                  .10Q:
    81 000002D6 750C                        jne .10E
    82                                  .10T:   ; 失敗
    83 000002D8 68[6103]E8E2FD83C4-         cdecl puts, .e0
    83 000002E0 02                 
    84 000002E1 E8FBFD                      call reboot
    85                                  
    86                                  .10E:   ; 成功
    87                                      ; ドライブ情報を表示
    88 000002E4 A1[B800]                    mov ax, [BOOT + drive.no]
    89 000002E7 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
    89 000002EE [4203]50E80CFF83C4-
    89 000002F6 0A                 
    90 000002F7 A1[BA00]                    mov ax, [BOOT + drive.cyln]
    91 000002FA 6A046A106A0468-             cdecl itoa, ax, .p2, 4, 16, 0b0100
    91 00000301 [4A03]50E8F9FE83C4-
    91 00000309 0A                 
    92 0000030A A1[BC00]                    mov ax, [BOOT + drive.head]
    93 0000030D 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
    93 00000314 [5403]50E8E6FE83C4-
    93 0000031C 0A                 
    94 0000031D A1[BE00]                    mov ax, [BOOT + drive.sect]
    95 00000320 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
    95 00000327 [5C03]50E8D3FE83C4-
    95 0000032F 0A                 
    96 00000330 68[3903]E88AFD83C4-         cdecl puts, .s1
    96 00000338 02                 
    97                                  
    98 00000339 2044726976653A3078      .s1 db " Drive:0x"
    99 00000342 20202C20433A3078        .p1 db "  , C:0x"
   100 0000034A 202020202C20483A30-     .p2 db "    , H:0x"
   100 00000353 78                 
   101 00000354 20202C20533A3078        .p3 db "  , S:0x"
   102 0000035C 20200A0D00              .p4 db "  ", 0x0A, 0x0D, 0
   103                                  
   104 00000361 43616E277420676574-     .e0 db "Can't get drive parameter.", 0
   104 0000036A 206472697665207061-
   104 00000373 72616D657465722E00 
   105                                      
   106 0000037C EBFE                        jmp $       ; while(1)
   107                                  
   108                                  ; Data
   109 0000037E 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   109 00000387 2E2E2E0A0D00       
   110                                  
   111                                  ; パディング(このファイルは8kBとする）
   112 0000038D 00<rep 1C73h>               times BOOT_SIZE - ($ - $$) db 0 ; 8kB

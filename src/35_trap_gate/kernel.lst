     1                                  %define USE_SYSTEM_CALL
     2                                  
     3                                  %include "../include/define.s"
     4                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     5                              <1> 
     6                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     7                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     8                              <1> 
     9                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    10                              <1> 
    11                              <1>     E820_RECORD_SIZE equ 20
    12                              <1> 
    13                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    14                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    15                              <1> 
    16                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    17                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    18                              <1> 
    19                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    20                              <1> 
    21                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    22                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    23                              <1> 
    24                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    25                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
     4                                  %include "../include/macro.s"
     5                              <1> ; C言語と同等の関数呼び出し
     6                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     7                              <1> 
     8                              <1>     %rep %0 - 1         ; 引数の数-1回
     9                              <1>         push %{-1:-1}   ; 一番最後の引数
    10                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    11                              <1>     %endrep
    12                              <1>     %rotate -1      ; 回転をもとに戻す
    13                              <1> 
    14                              <1>     call %1         ; 第１引数を呼び出し
    15                              <1> 
    16                              <1>     %if 1 < %0
    17                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    18                              <1>     %endif
    19                              <1> %endmacro
    20                              <1> 
    21                              <1> struc drive
    22 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    23 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    24 00000004 ????                <1>     .head resw 1    ; ヘッド
    25 00000006 ????                <1>     .sect resw 1    ; セクタ
    26                              <1> endstruc
    27                              <1> 
    28                              <1> %macro set_vect 1-*
    29                              <1>         push eax
    30                              <1>         push edi
    31                              <1> 
    32                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    33                              <1>         mov eax, %2
    34                              <1> 
    35                              <1>     %if 3 == %0
    36                              <1>         mov [edi + 4], %3               ; フラグ
    37                              <1>     %endif
    38                              <1> 
    39                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    40                              <1>         shr eax, 16
    41                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    42                              <1> 
    43                              <1>         pop edi
    44                              <1>         pop eax
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> %macro outp 2
    48                              <1>     mov al, %2
    49                              <1>     out %1, al
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %define RING_ITEM_SIZE (1 << 4)
    53                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    54                              <1> 
    55                              <1> struc ring_buff
    56 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    57 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    58 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    59                              <1> endstruc
    60                              <1> 
    61                              <1> %macro set_desc 2-*
    62                              <1>         push eax
    63                              <1>         push edi
    64                              <1> 
    65                              <1>         mov edi, %1     ; ディスクリプタアドレス
    66                              <1>         mov eax, %2     ; ベースアドレス
    67                              <1> 
    68                              <1>     %if 3 == %0
    69                              <1>         mov [edi + 0], %3   ; リミット
    70                              <1>     %endif
    71                              <1> 
    72                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    73                              <1>         shr eax, 16
    74                              <1>         mov [edi + 4], al   ; ベース([23:16])
    75                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    76                              <1> 
    77                              <1>         pop edi
    78                              <1>         pop eax
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro set_gate 2-*
    82                              <1>     push eax
    83                              <1>     push edi
    84                              <1> 
    85                              <1>     mov edi, %1         ; ディスクリプタアドレス
    86                              <1>     mov eax, %2         ; ベースアドレス
    87                              <1> 
    88                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    89                              <1>     shr eax, 16
    90                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    91                              <1> 
    92                              <1>     pop edi
    93                              <1>     pop eax
    94                              <1> %endmacro
     5                                  
     6                                      ORG KERNEL_LOAD
     7                                  
     8                                  [BITS 32]   ; 32bitコードを生成
     9                                  
    10                                  ; エントリポイント
    11                                  kernel:
    12                                      ; フォントアドレスを取得
    13 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    14 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    15 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    16 0000000C C1E004                      shl eax, 4
    17 0000000F 01D8                        add eax, ebx
    18 00000011 A3[D4010000]                mov [FONT_ADR], eax
    19                                  
    20                                      ; TSSディスクリプタの設定
    21                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    62 00000016 50                  <1>  push eax
    63 00000017 57                  <1>  push edi
    64                              <1> 
    65 00000018 BF[24020000]        <1>  mov edi, %1
    66 0000001D B8[42020000]        <1>  mov eax, %2
    67                              <1> 
    68                              <1>  %if 3 == %0
    69                              <1>  mov [edi + 0], %3
    70                              <1>  %endif
    71                              <1> 
    72 00000022 66894702            <1>  mov [edi + 2], ax
    73 00000026 C1E810              <1>  shr eax, 16
    74 00000029 884704              <1>  mov [edi + 4], al
    75 0000002C 886707              <1>  mov [edi + 7], ah
    76                              <1> 
    77 0000002F 5F                  <1>  pop edi
    78 00000030 58                  <1>  pop eax
    22                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    62 00000031 50                  <1>  push eax
    63 00000032 57                  <1>  push edi
    64                              <1> 
    65 00000033 BF[2C020000]        <1>  mov edi, %1
    66 00000038 B8[AA020000]        <1>  mov eax, %2
    67                              <1> 
    68                              <1>  %if 3 == %0
    69                              <1>  mov [edi + 0], %3
    70                              <1>  %endif
    71                              <1> 
    72 0000003D 66894702            <1>  mov [edi + 2], ax
    73 00000041 C1E810              <1>  shr eax, 16
    74 00000044 884704              <1>  mov [edi + 4], al
    75 00000047 886707              <1>  mov [edi + 7], ah
    76                              <1> 
    77 0000004A 5F                  <1>  pop edi
    78 0000004B 58                  <1>  pop eax
    23                                  
    24                                      ; コールゲートの設定
    25                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    82 0000004C 50                  <1>  push eax
    83 0000004D 57                  <1>  push edi
    84                              <1> 
    85 0000004E BF[34020000]        <1>  mov edi, %1
    86 00000053 B8[600C0000]        <1>  mov eax, %2
    87                              <1> 
    88 00000058 668907              <1>  mov [edi + 0], ax
    89 0000005B C1E810              <1>  shr eax, 16
    90 0000005E 66894706            <1>  mov [edi + 6], ax
    91                              <1> 
    92 00000062 5F                  <1>  pop edi
    93 00000063 58                  <1>  pop eax
    26                                  
    27                                      ; LDTの設定
    28                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    62 00000064 50                  <1>  push eax
    63 00000065 57                  <1>  push edi
    64                              <1> 
    65 00000066 BF[1C020000]        <1>  mov edi, %1
    66 0000006B B8[DC010000]        <1>  mov eax, %2
    67                              <1> 
    68                              <1>  %if 3 == %0
    69 00000070 66C7072700          <1>  mov [edi + 0], %3
    70                              <1>  %endif
    71                              <1> 
    72 00000075 66894702            <1>  mov [edi + 2], ax
    73 00000079 C1E810              <1>  shr eax, 16
    74 0000007C 884704              <1>  mov [edi + 4], al
    75 0000007F 886707              <1>  mov [edi + 7], ah
    76                              <1> 
    77 00000082 5F                  <1>  pop edi
    78 00000083 58                  <1>  pop eax
    29                                  
    30                                      ; GDTをロード(再設定)
    31 00000084 0F0115[3C020000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    32                                  
    33                                      ; スタックの設定
    34 0000008B BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    35                                  
    36                                      ; タスクレジスタの初期化
    37 00000090 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    38 00000094 0F00D8                      ltr ax              ; タスクレジスタの設定
    39                                  
    40                                      ; 初期化
    41 00000097 E8BE090000                  cdecl init_int                  ; 割り込みベクタの初期化
    42 0000009C E8080A0000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    43                                  
    44                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    29 000000A1 50                  <1>  push eax
    30 000000A2 57                  <1>  push edi
    31                              <1> 
    32 000000A3 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    33 000000A8 B8[8B0A0000]        <1>  mov eax, %2
    34                              <1> 
    35                              <1>  %if 3 == %0
    36                              <1>  mov [edi + 4], %3
    37                              <1>  %endif
    38                              <1> 
    39 000000AD 668907              <1>  mov [edi + 0], ax
    40 000000B0 C1E810              <1>  shr eax, 16
    41 000000B3 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    43 000000B7 5F                  <1>  pop edi
    44 000000B8 58                  <1>  pop eax
    45                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    29 000000B9 50                  <1>  push eax
    30 000000BA 57                  <1>  push edi
    31                              <1> 
    32 000000BB BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    33 000000C0 B8[12030000]        <1>  mov eax, %2
    34                              <1> 
    35                              <1>  %if 3 == %0
    36                              <1>  mov [edi + 4], %3
    37                              <1>  %endif
    38                              <1> 
    39 000000C5 668907              <1>  mov [edi + 0], ax
    40 000000C8 C1E810              <1>  shr eax, 16
    41 000000CB 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    43 000000CF 5F                  <1>  pop edi
    44 000000D0 58                  <1>  pop eax
    46                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    29 000000D1 50                  <1>  push eax
    30 000000D2 57                  <1>  push edi
    31                              <1> 
    32 000000D3 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    33 000000D8 B8[110B0000]        <1>  mov eax, %2
    34                              <1> 
    35                              <1>  %if 3 == %0
    36                              <1>  mov [edi + 4], %3
    37                              <1>  %endif
    38                              <1> 
    39 000000DD 668907              <1>  mov [edi + 0], ax
    40 000000E0 C1E810              <1>  shr eax, 16
    41 000000E3 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    43 000000E7 5F                  <1>  pop edi
    44 000000E8 58                  <1>  pop eax
    47                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    29 000000E9 50                  <1>  push eax
    30 000000EA 57                  <1>  push edi
    31                              <1> 
    32 000000EB BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    33 000000F0 B8[D40A0000]        <1>  mov eax, %2
    34                              <1> 
    35                              <1>  %if 3 == %0
    36                              <1>  mov [edi + 4], %3
    37                              <1>  %endif
    38                              <1> 
    39 000000F5 668907              <1>  mov [edi + 0], ax
    40 000000F8 C1E810              <1>  shr eax, 16
    41 000000FB 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    43 000000FF 5F                  <1>  pop edi
    44 00000100 58                  <1>  pop eax
    48                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    29 00000101 50                  <1>  push eax
    30 00000102 57                  <1>  push edi
    31                              <1> 
    32 00000103 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    33 00000108 B8[900C0000]        <1>  mov eax, %2
    34                              <1> 
    35                              <1>  %if 3 == %0
    36 0000010D 66C7470400EF        <1>  mov [edi + 4], %3
    37                              <1>  %endif
    38                              <1> 
    39 00000113 668907              <1>  mov [edi + 0], ax
    40 00000116 C1E810              <1>  shr eax, 16
    41 00000119 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    43 0000011D 5F                  <1>  pop edi
    44 0000011E 58                  <1>  pop eax
    49                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    29 0000011F 50                  <1>  push eax
    30 00000120 57                  <1>  push edi
    31                              <1> 
    32 00000121 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    33 00000126 B8[9E0C0000]        <1>  mov eax, %2
    34                              <1> 
    35                              <1>  %if 3 == %0
    36 0000012B 66C7470400EF        <1>  mov [edi + 4], %3
    37                              <1>  %endif
    38                              <1> 
    39 00000131 668907              <1>  mov [edi + 0], ax
    40 00000134 C1E810              <1>  shr eax, 16
    41 00000137 66894706            <1>  mov [edi + 6], ax
    42                              <1> 
    43 0000013B 5F                  <1>  pop edi
    44 0000013C 58                  <1>  pop eax
    50                                  
    51                                      ; デバイスの割り込み許可
    52 0000013D 6A10E8B90900006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    52 00000146 C404               
    53                                  
    54                                      ; IMR（割り込みマスクレジスタ）の設定
    55                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    48 00000148 B0F8                <1>  mov al, %2
    49 0000014A E621                <1>  out %1, al
    56                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    48 0000014C B0FE                <1>  mov al, %2
    49 0000014E E6A1                <1>  out %1, al
    57                                  
    58 00000150 FB                          sti                             ; 割り込み許可
    59                                  
    60 00000151 6A0D6A3FE8AE030000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    60 0000015A 6683C408           
    61 0000015E 6A046A3FE822040000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    61 00000167 6683C408           
    62 0000016B 68[BC010000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    62 00000173 00006A0E6A19E8CD03-
    62 0000017C 00006683C410       
    63                                  
    64                                  
    65                                      ; タスクの呼び出し
    66                                      ;call SS_TASK_1:0
    67                                  
    68                                  
    69                                  .10L:
    70                                      ; タスクの呼び出し
    71 00000182 EA000000002800              jmp SS_TASK_1:0
    72                                  
    73                                      ; 回転する棒の表示
    74 00000189 E8990A0000                  cdecl draw_rotation_bar
    75                                  
    76                                      ; キーコードの取得
    77 0000018E 68[D0010000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    77 00000194 [380B0000]E8B30900-
    77 0000019C 006683C408         
    78 000001A1 83F800                      cmp eax, 0
    79 000001A4 7414                        je .10E
    80                                  
    81                                      ; キーコードの表示
    82 000001A6 68[380B0000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    82 000001AE 02E8010A00006683C4-
    82 000001B7 0C                 
    83                                  
    84 000001B8 EBC8                        jmp .10L
    85                                  .10E:
    86                                  
    87                                  
    88                                      ; 処理の終了
    89 000001BA EBFE                        jmp $
    90                                  
    91 000001BC 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    91 000001C5 65726E656C212000   
    92                                  
    93 000001CD 00<rep 3h>              ALIGN 4, db 0
    94 000001D0 00000000                .int_key: dd 0
    95                                  
    96                                  ALIGN 4, db 0
    97 000001D4 00000000                FONT_ADR: dd 0
    98 000001D8 00000000                RTC_TIME: dd 0
    99                                  
   100                                  ; タスク
   101                                  %include "descriptor.s"
   102                              <1> ; ローカルディスクリプタテーブル
   103 000001DC 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   104 000001E4 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   105 000001EC FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   106 000001F4 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   107 000001FC FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   108                              <1> .end:
   109                              <1> 
   110                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   111                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   112                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   113                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   114                              <1> 
   115                              <1> LDT_LIMIT equ .end        - LDT - 1
   116                              <1> 
   117                              <1> ; グローバルディスクリプタテーブル
   118 00000204 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   119 0000020C FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   120 00000214 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   121 0000021C 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   122 00000224 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   123 0000022C 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   124 00000234 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   125                              <1> .end:
   126                              <1> 
   127                              <1> CS_KERNEL equ .cs_kernel - GDT
   128                              <1> DS_KERNEL equ .ds_kernel - GDT
   129                              <1> SS_LDT    equ .ldt       - GDT
   130                              <1> SS_TASK_0 equ .tss_0     - GDT
   131                              <1> SS_TASK_1 equ .tss_1     - GDT
   132                              <1> SS_GATE_0 equ .call_gate - GDT
   133                              <1> 
   134 0000023C 3700                <1> GDTR: dw GDT.end - GDT - 1
   135 0000023E [04020000]          <1>       dd GDT
   136                              <1> 
   137                              <1> ; TSS
   138                              <1> TSS_0:
   139 00000242 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   140 00000246 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   141 0000024A 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   142 0000024E 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   143 00000252 00000000            <1> .ss1:       dd 0                    ;* 16:
   144 00000256 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   145 0000025A 00000000            <1> .ss2:       dd 0                    ;* 24:
   146 0000025E 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   147 00000262 00000000            <1> .eip:       dd 0                    ;  32:EIP
   148 00000266 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   149 0000026A 00000000            <1> .eax:       dd 0                    ;  40:EAX
   150 0000026E 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   151 00000272 00000000            <1> .edx:       dd 0                    ;  48:EDX
   152 00000276 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   153 0000027A 00000000            <1> .esp:       dd 0                    ;  56:ESP
   154 0000027E 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   155 00000282 00000000            <1> .esi:       dd 0                    ;  64:ESI
   156 00000286 00000000            <1> .edi:       dd 0                    ;  68:EDI
   157 0000028A 00000000            <1> .es:        dd 0                    ;  72:ES
   158 0000028E 00000000            <1> .cs:        dd 0                    ;  76:CS
   159 00000292 00000000            <1> .ss:        dd 0                    ;  80:SS
   160 00000296 00000000            <1> .ds:        dd 0                    ;  84:DS
   161 0000029A 00000000            <1> .fs:        dd 0                    ;  88:FS
   162 0000029E 00000000            <1> .gs:        dd 0                    ;  92:GS
   163 000002A2 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   164 000002A6 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   165                              <1> 
   166                              <1> TSS_1:
   167 000002AA 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   168 000002AE 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   169 000002B2 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   170 000002B6 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   171 000002BA 00000000            <1> .ss1:       dd 0                    ;* 16:
   172 000002BE 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   173 000002C2 00000000            <1> .ss2:       dd 0                    ;* 24:
   174 000002C6 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   175 000002CA [50030000]          <1> .eip:       dd task_1               ;  32:EIP
   176 000002CE 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   177 000002D2 00000000            <1> .eax:       dd 0                    ;  40:EAX
   178 000002D6 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   179 000002DA 00000000            <1> .edx:       dd 0                    ;  48:EDX
   180 000002DE 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   181 000002E2 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   182 000002E6 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   183 000002EA 00000000            <1> .esi:       dd 0                    ;  64:ESI
   184 000002EE 00000000            <1> .edi:       dd 0                    ;  68:EDI
   185 000002F2 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   186 000002F6 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   187 000002FA 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   188 000002FE 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   189 00000302 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   190 00000306 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   191 0000030A 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   192 0000030E 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   102                                  %include "modules/int_timer.s"
   103                              <1> int_timer:
   104 00000312 60                  <1>     pushad
   105 00000313 1E                  <1>     push ds
   106 00000314 06                  <1>     push es
   107                              <1> 
   108                              <1>     ; データ用セグメントの設定
   109 00000315 66B81000            <1>     mov ax, 0x0010
   110 00000319 8ED8                <1>     mov ds, ax
   111 0000031B 8EC0                <1>     mov es, ax
   112                              <1> 
   113                              <1>     ; TICK
   114 0000031D FF05[48030000]      <1>     inc dword [TIMER_COUNT]
   115                              <1> 
   116                              <1>     ; 割り込みフラグをクリア(EOI)
   117                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    48 00000323 B020                <2>  mov al, %2
    49 00000325 E620                <2>  out %1, al
   118                              <1> 
   119                              <1>     ; タスクの切り替え
   120 00000327 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   121 0000032B 6683F828            <1>     cmp ax, SS_TASK_1   ; switch(ax)
   122 0000032F 7409                <1>     je .11L
   123                              <1> 
   124 00000331 EA000000002800      <1>     jmp SS_TASK_1:0     ; default:
   125 00000338 EB09                <1>     jmp .10E
   126                              <1> .11L:                   ; case SS_TASK_1:
   127 0000033A EA000000002000      <1>     jmp SS_TASK_0:0
   128 00000341 EB00                <1>     jmp .10E
   129                              <1> .10E:
   130                              <1> 
   131 00000343 07                  <1>     pop es
   132 00000344 1F                  <1>     pop ds
   133 00000345 61                  <1>     popad
   134                              <1> 
   135 00000346 CF                  <1>     iret
   136                              <1> 
   137 00000347 00                  <1> ALIGN 4, db 0
   138 00000348 0000000000000000    <1> TIMER_COUNT: dq 0
   139                              <1> 
   103                                  %include "tasks/task_1.s"
   104                              <1> task_1:
   105                              <1>     ; 文字列の表示(コールゲート)
   106 00000350 68[80030000]6A076A- <1>     cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   106 00000358 006A3F9A0000000030- <1>
   106 00000361 006683C410          <1>
   107                              <1> 
   108                              <1> .10L:
   109                              <1>     ; 時刻の表示
   110 00000366 A1[D8010000]        <1>     mov eax, [RTC_TIME]
   111 0000036B 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   111 00000374 48E82C0500006683C4- <1>
   111 0000037D 10                  <1>
   112                              <1> 
   113 0000037E EBE6                <1>     jmp .10L
   114                              <1> 
   115                              <1>     ; データ
   116 00000380 5461736B2D3100      <1> .s0 db "Task-1", 0
   104                                  
   105                                  ; モジュール
   106                                  %include "../modules/protect/vga.s"
   107                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   108                              <1> ; plane: 読み込みプレーン
   109 00000387 55                  <1>     push ebp
   110 00000388 89E5                <1>     mov ebp, esp
   111                              <1> 
   112 0000038A 6650                <1>     push ax
   113 0000038C 6652                <1>     push dx
   114                              <1> 
   115                              <1> 
   116                              <1>     ; 読み込みプレーンの選択
   117 0000038E 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   118 00000391 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   119 00000394 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   120 00000396 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   121 0000039A 66EF                <1>     out dx, ax
   122                              <1> 
   123 0000039C 665A                <1>     pop dx
   124 0000039E 6658                <1>     pop ax
   125                              <1> 
   126 000003A0 89EC                <1>     mov esp, ebp
   127 000003A2 5D                  <1>     pop ebp
   128                              <1> 
   129 000003A3 C3                  <1>     ret
   130                              <1> 
   131                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   132                              <1> ; plane 書き込みプレーン
   133 000003A4 55                  <1>     push ebp
   134 000003A5 89E5                <1>     mov ebp, esp
   135                              <1> 
   136 000003A7 6650                <1>     push ax
   137 000003A9 6652                <1>     push dx
   138                              <1> 
   139                              <1> 
   140                              <1>     ; 書き込みプレーンの選択
   141 000003AB 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   142 000003AE 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   143 000003B1 B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   144 000003B3 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   145 000003B7 66EF                <1>     out dx, ax
   146                              <1> 
   147                              <1> 
   148 000003B9 665A                <1>     pop dx
   149 000003BB 6658                <1>     pop ax
   150                              <1> 
   151 000003BD 89EC                <1>     mov esp, ebp
   152 000003BF 5D                  <1>     pop ebp
   153                              <1> 
   154 000003C0 C3                  <1>     ret
   155                              <1> 
   156                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   157                              <1> ; font FONTアドレス
   158                              <1> ; vram VRAMアドレス
   159                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   160                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   161 000003C1 55                  <1>     push ebp
   162 000003C2 89E5                <1>     mov ebp, esp
   163                              <1>     
   164 000003C4 50                  <1>     push eax
   165 000003C5 53                  <1>     push ebx
   166 000003C6 51                  <1>     push ecx
   167 000003C7 52                  <1>     push edx
   168 000003C8 57                  <1>     push edi
   169 000003C9 56                  <1>     push esi
   170                              <1> 
   171 000003CA 8B7508              <1>     mov esi, [ebp + 8]          ; font
   172 000003CD 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   173 000003D0 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   174 000003D4 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   175                              <1>     ; bh = 背景色 bl = 前景色
   176                              <1> 
   177 000003D8 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   178 000003DA 0F94C6              <1>     setz dh         ; dh = zf
   179 000003DD FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   180                              <1> 
   181 000003DF 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   182 000003E1 0F94C2              <1>     setz dl         ; dl = zf
   183 000003E4 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   184                              <1> 
   185                              <1>     ; 16ドットフォントのコピー
   186 000003E6 FC                  <1>     cld             ; アドレス加算モード
   187                              <1> 
   188 000003E7 B910000000          <1>     mov ecx, 16
   189                              <1> .10L:
   190                              <1>     ; フォントマスクの作成
   191 000003EC AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   192 000003ED 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   193 000003EF F6D4                <1>     not ah
   194                              <1> 
   195                              <1>     ; 前景色
   196 000003F1 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   197                              <1> 
   198                              <1>     ; 背景色
   199 000003F3 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   200 000003F9 7404                <1>     jz .11F
   201                              <1>     ; 透過on
   202 000003FB 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   203 000003FD EB02                <1>     jmp .11E
   204                              <1> .11F:                   ; 透過off
   205 000003FF 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   206                              <1> .11E:
   207                              <1>     
   208                              <1>     ; 前景色と背景色を合成
   209 00000401 08E0                <1>     or al, ah           ; al = 背景 | 前景
   210                              <1> 
   211                              <1>     ; 新しい値を出力
   212 00000403 8807                <1>     mov [edi], al
   213                              <1> 
   214 00000405 83C750              <1>     add edi, 80      ; 1行すすめる
   215 00000408 E2E2                <1>     loop .10L
   216                              <1> .10E:
   217                              <1> 
   218 0000040A 5E                  <1>     pop esi
   219 0000040B 5F                  <1>     pop edi
   220 0000040C 5A                  <1>     pop edx
   221 0000040D 59                  <1>     pop ecx
   222 0000040E 5B                  <1>     pop ebx
   223 0000040F 58                  <1>     pop eax
   224                              <1> 
   225 00000410 89EC                <1>     mov esp, ebp
   226 00000412 5D                  <1>     pop ebp
   227                              <1> 
   228 00000413 C3                  <1>     ret
   229                              <1> 
   230                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   231                              <1> ; bitデータ
   232                              <1> ; vram VRAMアドレス
   233                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   234                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   235 00000414 55                  <1>     push ebp
   236 00000415 89E5                <1>     mov ebp, esp
   237                              <1>     
   238 00000417 50                  <1>     push eax
   239 00000418 53                  <1>     push ebx
   240 00000419 52                  <1>     push edx
   241 0000041A 57                  <1>     push edi
   242                              <1> 
   243 0000041B 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   244 0000041E 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   245 00000422 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   246                              <1>     ; bl = 前景色
   247                              <1> 
   248                              <1>     ; 常に透過モード
   249 00000426 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   250 00000428 0F94C3              <1>     setz bl         ; dl = zf
   251 0000042B FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   252                              <1> 
   253                              <1>     ; マスク
   254 0000042D 8A4508              <1>     mov al, [ebp + 8]   ; bit
   255 00000430 88C4                <1>     mov ah, al      ; ah ~= al
   256 00000432 F6D4                <1>     not ah
   257                              <1> 
   258 00000434 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   259 00000436 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   260 00000438 08E0                <1>     or al, ah           ; 背景と前景を合成
   261 0000043A 8807                <1>     mov [edi], al       ; プレーンに書き込み
   262                              <1>     
   263                              <1> 
   264 0000043C 5F                  <1>     pop edi
   265 0000043D 5A                  <1>     pop edx
   266 0000043E 5B                  <1>     pop ebx
   267 0000043F 58                  <1>     pop eax
   268                              <1> 
   269 00000440 89EC                <1>     mov esp, ebp
   270 00000442 5D                  <1>     pop ebp
   271                              <1> 
   272 00000443 C3                  <1>     ret
   107                                  %include "../modules/protect/draw_char.s"
   108                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   109                              <1> ; col 列（0～79）
   110                              <1> ; row 行（0～29）
   111                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   112                              <1> ; ch 文字
   113                              <1> 
   114 00000444 55                  <1>     push ebp
   115 00000445 89E5                <1>     mov ebp, esp
   116                              <1> 
   117 00000447 53                  <1>     push ebx
   118 00000448 56                  <1>     push esi
   119 00000449 57                  <1>     push edi
   120                              <1> 
   121                              <1> %ifdef USE_TEST_AND_SET
   122                              <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   123                              <1> %endif
   124                              <1> 
   125                              <1>     ; コピー元フォントアドレスを設定
   126 0000044A 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   127 0000044E C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   128 00000451 0335[D4010000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   129                              <1> 
   130                              <1>     ; コピー先アドレスを取得
   131                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   132                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   133 00000457 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   134 0000045A C1E708              <1>     shl edi, 8
   135 0000045D 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   136 00000464 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   137                              <1> 
   138                              <1>     ; 1文字分のフォントを出力
   139 00000467 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   140                              <1> 
   141                              <1>     ; 輝度I
   142 0000046B 6A03E815FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   142 00000474 C404                <1>
   143 00000476 6A08E827FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   143 0000047F C404                <1>
   144 00000481 536A085756E836FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   144 0000048A FF6683C410          <1>
   145                              <1> 
   146                              <1>     ; 赤R
   147 0000048F 6A02E8F1FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   147 00000498 C404                <1>
   148 0000049A 6A04E803FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   148 000004A3 C404                <1>
   149 000004A5 536A045756E812FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   149 000004AE FF6683C410          <1>
   150                              <1> 
   151                              <1>     ; 緑G
   152 000004B3 6A01E8CDFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   152 000004BC C404                <1>
   153 000004BE 6A02E8DFFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   153 000004C7 C404                <1>
   154 000004C9 536A025756E8EEFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   154 000004D2 FF6683C410          <1>
   155                              <1> 
   156                              <1>     ; 青B
   157 000004D7 6A00E8A9FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   157 000004E0 C404                <1>
   158 000004E2 6A01E8BBFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   158 000004EB C404                <1>
   159 000004ED 536A015756E8CAFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   159 000004F6 FF6683C410          <1>
   160                              <1> 
   161                              <1> %ifdef USE_TEST_AND_SET
   162                              <1>     mov [IN_USE], dword 0   ; 変数のクリア
   163                              <1> %endif
   164                              <1> 
   165 000004FB 5F                  <1>     pop edi
   166 000004FC 5E                  <1>     pop esi
   167 000004FD 5B                  <1>     pop ebx
   168                              <1> 
   169 000004FE 89EC                <1>     mov esp, ebp
   170 00000500 5D                  <1>     pop ebp
   171                              <1> 
   172 00000501 C3                  <1>     ret
   173                              <1> 
   174 00000502 00<rep 2h>          <1> ALIGN 4, db 0
   175 00000504 00000000            <1> IN_USE:  dd 0
   108                                  %include "../modules/protect/draw_font.s"
   109                              <1> draw_font:  ; void draw_font(col, row);
   110                              <1> ; col 列
   111                              <1> ; row 行
   112 00000508 55                  <1>     push ebp
   113 00000509 89E5                <1>     mov ebp, esp
   114                              <1> 
   115 0000050B 50                  <1>     push eax
   116 0000050C 53                  <1>     push ebx
   117 0000050D 51                  <1>     push ecx
   118 0000050E 57                  <1>     push edi
   119 0000050F 56                  <1>     push esi
   120                              <1> 
   121                              <1> 
   122 00000510 8B7508              <1>     mov esi, [ebp + 8]  ; x
   123 00000513 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   124                              <1> 
   125 00000516 B900000000          <1>     mov ecx, 0
   126                              <1> .10L:
   127 0000051B 81F900010000        <1>     cmp ecx, 256
   128 00000521 731F                <1>     jae .10E
   129                              <1> 
   130 00000523 89C8                <1>     mov eax, ecx
   131 00000525 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   132 00000528 01F0                <1>     add eax, esi    ; eax += x
   133                              <1> 
   134 0000052A 89CB                <1>     mov ebx, ecx
   135 0000052C C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   136 0000052F 01FB                <1>     add ebx, edi    ; ebx += y
   137                              <1> 
   138 00000531 516A075350E809FFFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   138 0000053A FF6683C410          <1>
   139                              <1> 
   140 0000053F 41                  <1>     inc ecx
   141 00000540 EBD9                <1>     jmp .10L
   142                              <1> .10E:
   143                              <1> 
   144 00000542 5E                  <1>     pop esi
   145 00000543 5F                  <1>     pop edi
   146 00000544 59                  <1>     pop ecx
   147 00000545 5B                  <1>     pop ebx
   148 00000546 58                  <1>     pop eax
   149                              <1> 
   150 00000547 89EC                <1>     mov esp, ebp
   151 00000549 5D                  <1>     pop ebp
   152                              <1> 
   153 0000054A C3                  <1>     ret
   109                                  %include "../modules/protect/draw_str.s"
   110                              <1> draw_str:   ;void draw_str(col, row, color, p);
   111                              <1> ; col: 列
   112                              <1> ; row: 行
   113                              <1> ; color: 描画色
   114                              <1> ; p: 文字列のアドレス
   115 0000054B 55                  <1>     push ebp
   116 0000054C 89E5                <1>     mov ebp, esp
   117                              <1> 
   118 0000054E 50                  <1>     push eax
   119 0000054F 53                  <1>     push ebx
   120 00000550 51                  <1>     push ecx
   121 00000551 52                  <1>     push edx
   122 00000552 56                  <1>     push esi
   123                              <1> 
   124                              <1> 
   125 00000553 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   126 00000556 8B550C              <1>     mov edx, [ebp +12]  ; row
   127 00000559 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   128 0000055D 8B7514              <1>     mov esi, [ebp +20]  ; p
   129                              <1> 
   130 00000560 FC                  <1>     cld
   131                              <1> .10L:
   132 00000561 AC                  <1>     lodsb
   133 00000562 3C00                <1>     cmp al, 0
   134 00000564 741A                <1>     je .10E
   135                              <1> 
   136                              <1> %ifdef USE_SYSTEM_CALL
   137 00000566 CD81                <1>     int 0x81
   138                              <1> %else
   139                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   140                              <1> %endif
   141                              <1> 
   142 00000568 41                  <1>     inc ecx
   143 00000569 83F950              <1>     cmp ecx, 80
   144 0000056C 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   145 0000056E B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   146 00000573 42                  <1>     inc edx
   147 00000574 83FA1E              <1>     cmp edx, 30
   148 00000577 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   149 00000579 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   150                              <1> .12E:
   151 0000057E EBE1                <1>     jmp .10L
   152                              <1> .10E:
   153                              <1> 
   154 00000580 5E                  <1>     pop esi
   155 00000581 5A                  <1>     pop edx
   156 00000582 59                  <1>     pop ecx
   157 00000583 5B                  <1>     pop ebx
   158 00000584 58                  <1>     pop eax
   159                              <1> 
   160 00000585 89EC                <1>     mov esp, ebp
   161 00000587 5D                  <1>     pop ebp
   162                              <1> 
   163 00000588 C3                  <1>     ret
   110                                  %include "../modules/protect/draw_color_bar.s"
   111                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   112                              <1> ; col: 列
   113                              <1> ; row: 行
   114 00000589 55                  <1>     push ebp
   115 0000058A 89E5                <1>     mov ebp, esp
   116                              <1> 
   117 0000058C 50                  <1>     push eax
   118 0000058D 53                  <1>     push ebx
   119 0000058E 51                  <1>     push ecx
   120 0000058F 52                  <1>     push edx
   121 00000590 56                  <1>     push esi
   122 00000591 57                  <1>     push edi
   123                              <1> 
   124                              <1> 
   125 00000592 8B7508              <1>     mov esi, [ebp + 8]      ; x
   126 00000595 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   127                              <1> 
   128                              <1>     ; カラーバーを表示
   129 00000598 B900000000          <1>     mov ecx, 0
   130                              <1> .10L:
   131 0000059D 83F910              <1>     cmp ecx, 16
   132 000005A0 732E                <1>     jae .10E
   133                              <1> 
   134                              <1>     ; 一回で8文字
   135 000005A2 89C8                <1>     mov eax, ecx
   136 000005A4 83E001              <1>     and eax, 0x01
   137 000005A7 C1E003              <1>     shl eax, 3
   138 000005AA 01F0                <1>     add eax, esi    ; col
   139                              <1> 
   140                              <1>     ; 2回に1回改行
   141 000005AC 89CB                <1>     mov ebx, ecx
   142 000005AE D1EB                <1>     shr ebx, 1
   143 000005B0 01FB                <1>     add ebx, edi    ; row
   144                              <1> 
   145                              <1>     ; 背景色を2色見たら下位次の行
   146 000005B2 89CA                <1>     mov edx, ecx
   147 000005B4 D1E2                <1>     shl edx, 1
   148 000005B6 8B92[E3050000]      <1>     mov edx, [.t0 + edx]    ; color
   149                              <1> 
   150 000005BC 68[DA050000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   150 000005C4 E882FFFFFF6683C410  <1>
   151                              <1> 
   152 000005CD 41                  <1>     inc ecx
   153 000005CE EBCD                <1>     jmp .10L
   154                              <1> .10E:
   155                              <1> 
   156 000005D0 5F                  <1>     pop edi
   157 000005D1 5E                  <1>     pop esi
   158 000005D2 5A                  <1>     pop edx
   159 000005D3 59                  <1>     pop ecx
   160 000005D4 5B                  <1>     pop ebx
   161 000005D5 58                  <1>     pop eax
   162                              <1> 
   163 000005D6 89EC                <1>     mov esp, ebp
   164 000005D8 5D                  <1>     pop ebp
   165                              <1> 
   166 000005D9 C3                  <1>     ret
   167                              <1> 
   168                              <1> 
   169 000005DA 202020202020202000  <1> .s0: db '        ', 0
   170                              <1> 
   171                              <1> .t0:
   172 000005E3 00000008            <1>     dw 0x0000, 0x0800
   173 000005E7 00010009            <1>     dw 0x0100, 0x0900
   174 000005EB 0002000A            <1>     dw 0x0200, 0x0A00
   175 000005EF 0003000B            <1>     dw 0x0300, 0x0B00
   176 000005F3 0004000C            <1>     dw 0x0400, 0x0C00
   177 000005F7 0005000D            <1>     dw 0x0500, 0x0D00
   178 000005FB 0006000E            <1>     dw 0x0600, 0x0E00
   179 000005FF 0007000F            <1>     dw 0x0700, 0x0F00
   111                                  %include "../modules/protect/draw_pixel.s"
   112                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   113                              <1> ; x: X座標
   114                              <1> ; y: Y座標
   115                              <1> ; color: 描画色
   116 00000603 55                  <1>     push ebp
   117 00000604 89E5                <1>     mov ebp, esp
   118                              <1> 
   119 00000606 50                  <1>     push eax
   120 00000607 53                  <1>     push ebx
   121 00000608 51                  <1>     push ecx
   122 00000609 57                  <1>     push edi
   123                              <1> 
   124                              <1> 
   125                              <1> 
   126                              <1>     ; y座標*80->y*(640/8)
   127 0000060A 8B7D0C              <1>     mov edi, [ebp +12]
   128 0000060D C1E704              <1>     shl edi, 4
   129 00000610 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   130                              <1> 
   131                              <1>     ; x座標/8  8pixel単位の位置
   132 00000617 8B5D08              <1>     mov ebx, [ebp + 8]
   133 0000061A 89D9                <1>     mov ecx, ebx
   134 0000061C C1EB03              <1>     shr ebx, 3
   135 0000061F 01DF                <1>     add edi, ebx
   136                              <1> 
   137                              <1>     ; x座標を8で割った余りからビット位置を計算
   138                              <1>     ; 8pixel中の位置
   139                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   140 00000621 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   141 00000624 BB80000000          <1>     mov ebx, 0x80
   142 00000629 D3EB                <1>     shr ebx, cl
   143                              <1> 
   144 0000062B 8B4D10              <1>     mov ecx, [ebp +16]
   145                              <1> 
   146                              <1>     ; プレーンごとに出力
   147 0000062E 6A03E852FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   147 00000637 C404                <1>
   148 00000639 6A08E864FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   148 00000642 C404                <1>
   149 00000644 516A085753E8C6FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   149 0000064D FF6683C410          <1>
   150                              <1> 
   151 00000652 6A02E82EFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   151 0000065B C404                <1>
   152 0000065D 6A04E840FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   152 00000666 C404                <1>
   153 00000668 516A045753E8A2FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   153 00000671 FF6683C410          <1>
   154                              <1> 
   155 00000676 6A01E80AFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   155 0000067F C404                <1>
   156 00000681 6A02E81CFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   156 0000068A C404                <1>
   157 0000068C 516A025753E87EFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   157 00000695 FF6683C410          <1>
   158                              <1> 
   159 0000069A 6A00E8E6FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   159 000006A3 C404                <1>
   160 000006A5 6A01E8F8FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   160 000006AE C404                <1>
   161 000006B0 516A015753E85AFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   161 000006B9 FF6683C410          <1>
   162                              <1> 
   163 000006BE 5F                  <1>     pop edi
   164 000006BF 59                  <1>     pop ecx
   165 000006C0 5B                  <1>     pop ebx
   166 000006C1 58                  <1>     pop eax
   167                              <1> 
   168 000006C2 89EC                <1>     mov esp, ebp
   169 000006C4 5D                  <1>     pop ebp
   170                              <1> 
   171 000006C5 C3                  <1>     ret
   112                                  %include "../modules/protect/draw_line.s"
   113                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   114                              <1> ; X0 始点のＸ座標
   115                              <1> ; Y0 始点のＹ座標
   116                              <1> ; X1 終点のX座標
   117                              <1> ; Y1 終点のY座標
   118                              <1> ; color 描画色
   119 000006C6 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   120 000006C7 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   121                              <1>                     ; ----------------
   122 000006C9 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   123 000006CB 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   124 000006CD 6A00                <1>     push dword 0    ;    -12| dx    = 0
   125 000006CF 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   126 000006D1 6A00                <1>     push dword 0    ;    -20| y0    = 0
   127 000006D3 6A00                <1>     push dword 0    ;    -24| dy    = 0
   128 000006D5 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   129                              <1> 
   130 000006D7 50                  <1>     push eax        ;    -32| eax
   131 000006D8 53                  <1>     push ebx        ;    -36| ebx
   132 000006D9 51                  <1>     push ecx        ;    -40| ecx
   133 000006DA 52                  <1>     push edx        ;    -44| edx
   134 000006DB 56                  <1>     push esi        ;    -48| esi
   135 000006DC 57                  <1>     push edi        ;    -52| edi
   136                              <1>     ; espはebp-52?
   137                              <1> 
   138                              <1>     ; x0とx1の距離を計算
   139 000006DD 8B4508              <1>     mov eax, [ebp + 8]
   140 000006E0 8B5D10              <1>     mov ebx, [ebp +16]
   141 000006E3 29C3                <1>     sub ebx, eax
   142 000006E5 7D09                <1>     jge .10F
   143                              <1> 
   144 000006E7 F7DB                <1>     neg ebx
   145 000006E9 BEFFFFFFFF          <1>     mov esi, -1
   146 000006EE EB05                <1>     jmp .10E
   147                              <1> .10F:
   148 000006F0 BE01000000          <1>     mov esi, 1
   149                              <1> .10E:
   150                              <1>     
   151                              <1>     ; y0とy1の距離を計算
   152 000006F5 8B4D0C              <1>     mov ecx, [ebp +12]
   153 000006F8 8B5514              <1>     mov edx, [ebp +20]
   154 000006FB 29CA                <1>     sub edx, ecx
   155 000006FD 7D09                <1>     jge .20F
   156                              <1> 
   157 000006FF F7DA                <1>     neg edx
   158 00000701 BFFFFFFFFF          <1>     mov edi, -1
   159 00000706 EB05                <1>     jmp .20E
   160                              <1> .20F:
   161 00000708 BF01000000          <1>     mov edi, 1
   162                              <1> .20E:
   163                              <1>     
   164                              <1>     ; x軸
   165 0000070D 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   166 00000710 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   167 00000713 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   168                              <1> 
   169                              <1>     ; y軸
   170 00000716 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   171 00000719 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   172 0000071C 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   173                              <1> 
   174                              <1> 
   175                              <1>     ; 基準軸を決める
   176 0000071F 39D3                <1>     cmp ebx, edx
   177 00000721 7F08                <1>     jg .22F
   178                              <1>     
   179 00000723 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   180 00000726 8D7DF8              <1>     lea edi, [ebp - 8]
   181                              <1> 
   182 00000729 EB06                <1>     jmp .22E
   183                              <1> .22F:
   184                              <1>     
   185 0000072B 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   186 0000072E 8D7DEC              <1>     lea edi, [ebp -20]
   187                              <1> .22E:
   188                              <1> 
   189                              <1> ; 基準軸 esi
   190                              <1> ; 相対軸 edi
   191                              <1> 
   192                              <1>     ; 繰り返し回数（基準軸のドット数）
   193 00000731 8B4EFC              <1>     mov ecx, [esi - 4]
   194 00000734 83F900              <1>     cmp ecx, 0
   195 00000737 7505                <1>     jnz .30E
   196 00000739 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   197                              <1> .30E:
   198                              <1> 
   199                              <1>     ; 線を描画
   200                              <1> .50L:
   201                              <1> 
   202                              <1> %ifdef USE_SYSTEM_CALL
   203 0000073E 89C8                <1>     mov eax, ecx
   204 00000740 8B4DF8              <1>     mov ecx, [ebp - 8]
   205 00000743 8B55EC              <1>     mov edx, [ebp -20]
   206 00000746 8B5D18              <1>     mov ebx, [ebp +24]
   207 00000749 CD82                <1>     int 0x82            ; sys_call()
   208 0000074B 89C1                <1>     mov ecx, eax
   209                              <1> %else
   210                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   213                              <1> %endif
   214                              <1> 
   215                              <1>     ; 座標更新
   216                              <1> 
   217                              <1>     ; 基準軸の更新
   218 0000074D 8B46F8              <1>     mov eax, [esi - 8]
   219 00000750 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   220                              <1> 
   221                              <1>     ; 相対軸の更新
   222 00000752 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   223 00000755 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   224                              <1> 
   225 00000758 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   226                              <1> 
   227 0000075B 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   228 0000075D 7C07                <1>     jl .52E
   229 0000075F 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   230                              <1> 
   231 00000761 8B5FF8              <1>     mov ebx, [edi - 8]
   232 00000764 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   233                              <1> .52E:
   234                              <1>     
   235 00000766 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   236                              <1> 
   237 00000769 E2D3                <1>     loop .50L
   238                              <1> .50E:
   239                              <1> 
   240                              <1> 
   241 0000076B 5F                  <1>     pop edi
   242 0000076C 5E                  <1>     pop esi
   243 0000076D 5A                  <1>     pop edx
   244 0000076E 59                  <1>     pop ecx
   245 0000076F 5B                  <1>     pop ebx
   246 00000770 58                  <1>     pop eax
   247                              <1> 
   248 00000771 89EC                <1>     mov esp, ebp
   249 00000773 5D                  <1>     pop ebp
   250                              <1> 
   251 00000774 C3                  <1>     ret
   113                                  %include "../modules/protect/draw_rect.s"
   114                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   115 00000775 55                  <1>     push ebp
   116 00000776 89E5                <1>     mov ebp, esp
   117                              <1>     
   118 00000778 50                  <1>     push eax
   119 00000779 53                  <1>     push ebx
   120 0000077A 51                  <1>     push ecx
   121 0000077B 52                  <1>     push edx
   122 0000077C 56                  <1>     push esi
   123                              <1> 
   124 0000077D 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   125 00000780 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   126 00000783 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   127 00000786 8B5514              <1>     mov edx, [ebp +20]  ; y1
   128 00000789 8B7518              <1>     mov esi, [ebp +24]  ; color
   129                              <1> 
   130                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   131 0000078C 39C8                <1>     cmp eax, ecx
   132 0000078E 7C01                <1>     jl .10E
   133 00000790 91                  <1>     xchg eax, ecx
   134                              <1> .10E:
   135 00000791 39D3                <1>     cmp ebx, edx
   136 00000793 7C02                <1>     jl .20E
   137 00000795 87DA                <1>     xchg ebx, edx
   138                              <1> .20E:
   139                              <1> 
   140                              <1>     ; 矩形を描画
   141 00000797 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   141 000007A0 FF6683C414          <1>
   142 000007A5 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   142 000007AE FF6683C414          <1>
   143                              <1> 
   144 000007B3 4A                  <1>     dec edx
   145 000007B4 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   145 000007BD FF6683C414          <1>
   146 000007C2 42                  <1>     inc edx
   147                              <1> 
   148 000007C3 49                  <1>     dec ecx
   149 000007C4 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   149 000007CD FF6683C414          <1>
   150                              <1> 
   151 000007D2 5E                  <1>     pop esi
   152 000007D3 5A                  <1>     pop edx
   153 000007D4 59                  <1>     pop ecx
   154 000007D5 5B                  <1>     pop ebx
   155 000007D6 58                  <1>     pop eax
   156                              <1>     
   157 000007D7 89EC                <1>     mov esp, ebp
   158 000007D9 5D                  <1>     pop ebp
   159                              <1> 
   160 000007DA C3                  <1>     ret
   114                                  %include "../modules/protect/itoa.s"
   115                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   116                              <1> ; num   変換する値
   117                              <1> ; buff  保存先バッファアドレス
   118                              <1> ; size  保存先バッファサイズ
   119                              <1> ; radix 基数（2, 8, 10, 16)
   120                              <1> ; flags 
   121                              <1> ;   B2: 空白を'0'で埋める
   122                              <1> ;   B1: '+/-'記号を付加する
   123                              <1> ;   B0: 値を符号付き変数として扱う
   124                              <1> 
   125 000007DB 55                  <1>     push ebp
   126 000007DC 89E5                <1>     mov ebp, esp
   127                              <1> 
   128 000007DE 50                  <1>     push eax
   129 000007DF 53                  <1>     push ebx
   130 000007E0 51                  <1>     push ecx
   131 000007E1 52                  <1>     push edx
   132 000007E2 56                  <1>     push esi
   133 000007E3 57                  <1>     push edi
   134                              <1> 
   135                              <1> 
   136                              <1>     ; 引数取得
   137 000007E4 8B4508              <1>     mov eax, [ebp + 8]    ; num
   138 000007E7 8B750C              <1>     mov esi, [ebp +12]    ; size
   139 000007EA 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   140                              <1> 
   141 000007ED 89F7                <1>     mov edi, esi
   142 000007EF 01CF                <1>     add edi, ecx
   143 000007F1 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   144                              <1> 
   145 000007F2 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   146                              <1> 
   147                              <1>     ; 符号付き判定
   148 000007F5 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   149                              <1> .10Q:
   150 000007FB 7408                <1>     je .10E         ; E=Exit
   151 000007FD 83F800              <1>     cmp eax, 0
   152                              <1> .12Q:
   153 00000800 7D03                <1>     jge .12E
   154 00000802 83CB02              <1>     or ebx, 0b0010
   155                              <1> .12E:
   156                              <1> .10E:
   157                              <1> 
   158                              <1>     ; 符号出力判定
   159 00000805 F7C302000000        <1>     test ebx, 0b0010
   160                              <1> .20Q:
   161 0000080B 7410                <1>     je .20E
   162 0000080D 83F800              <1>     cmp eax, 0
   163                              <1> .22Q:
   164 00000810 7D07                <1>     jge .22F
   165 00000812 F7D8                <1>     neg eax
   166 00000814 C6062D              <1>     mov [esi], byte '-'
   167 00000817 EB03                <1>     jmp .22E
   168                              <1> .22F:
   169                              <1>     
   170 00000819 C6062B              <1>     mov [esi], byte '+'
   171                              <1> .22E:
   172 0000081C 49                  <1>     dec ecx
   173                              <1> .20E:
   174                              <1> 
   175                              <1>     ; ASCII変換
   176 0000081D 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   177                              <1> .30L:
   178 00000820 BA00000000          <1>     mov edx, 0
   179 00000825 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   180                              <1> 
   181 00000827 89D6                <1>     mov esi, edx
   182 00000829 8A96[53080000]      <1>     mov dl, byte [.ascii + esi]
   183                              <1> 
   184 0000082F 8817                <1>     mov [edi], dl
   185 00000831 4F                  <1>     dec edi
   186                              <1> 
   187 00000832 83F800              <1>     cmp eax, 0
   188 00000835 E0E9                <1>     loopnz .30L
   189                              <1> .30E:
   190                              <1> 
   191                              <1>     ; 空欄を埋める
   192 00000837 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   193                              <1> .40Q:
   194 0000083A 740D                <1>     je .40E
   195 0000083C B020                <1>     mov al, ' '
   196 0000083E 837D1804            <1>     cmp [ebp +24], dword 0b0100
   197                              <1> .42Q:
   198 00000842 7502                <1>     jne .42E
   199 00000844 B030                <1>     mov al, '0'
   200                              <1> .42E:
   201 00000846 FD                  <1>     std         ; dimention flag = 1(-方向)
   202 00000847 F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   203                              <1> .40E:
   204                              <1> 
   205 00000849 5F                  <1>     pop edi
   206 0000084A 5E                  <1>     pop esi
   207 0000084B 5A                  <1>     pop edx
   208 0000084C 59                  <1>     pop ecx
   209 0000084D 5B                  <1>     pop ebx
   210 0000084E 58                  <1>     pop eax
   211                              <1> 
   212 0000084F 89EC                <1>     mov esp, ebp
   213 00000851 5D                  <1>     pop ebp
   214                              <1> 
   215 00000852 C3                  <1>     ret
   216                              <1> 
   217 00000853 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   217 0000085C 39414243444546      <1>
   115                                  %include "../modules/protect/rtc.s"
   116                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   117                              <1> ; dst: 保存先アドレス
   118                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   119 00000863 55                  <1>     push ebp
   120 00000864 89E5                <1>     mov ebp, esp
   121                              <1> 
   122 00000866 50                  <1>     push eax
   123 00000867 53                  <1>     push ebx
   124                              <1> 
   125 00000868 B00A                <1>     mov al, 0x0A    ; レジスタA
   126 0000086A E670                <1>     out 0x70, al
   127 0000086C E471                <1>     in al, 0x71
   128 0000086E A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   129 00000870 7407                <1>     je .10F
   130 00000872 B801000000          <1>     mov eax, 1      ; 更新中は失敗
   131 00000877 EB27                <1>     jmp .10E
   132                              <1> .10F:
   133                              <1> 
   134 00000879 B004                <1>     mov al, 0x04    ; 時
   135 0000087B E670                <1>     out 0x70, al    ; レジスタ設定
   136 0000087D E471                <1>     in al, 0x71     ; 時刻読み込み
   137                              <1> 
   138 0000087F C1E008              <1>     shl eax, 8      ; alをahに退避
   139                              <1> 
   140 00000882 B002                <1>     mov al, 0x02    ; 分
   141 00000884 E670                <1>     out 0x70, al    ; レジスタ設定
   142 00000886 E471                <1>     in al, 0x71     ; 時刻読み込み
   143                              <1> 
   144 00000888 C1E008              <1>     shl eax, 8      ; alをahに退避
   145                              <1> 
   146 0000088B B000                <1>     mov al, 0x00    ; 秒
   147 0000088D E670                <1>     out 0x70, al    ; レジスタ設定
   148 0000088F E471                <1>     in al, 0x71     ; 時刻読み込み
   149                              <1> 
   150 00000891 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   151                              <1> 
   152 00000896 8B5D08              <1>     mov ebx, [ebp + 8]
   153 00000899 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   154                              <1> 
   155 0000089B B800000000          <1>     mov eax, 0
   156                              <1> .10E:
   157                              <1> 
   158 000008A0 5B                  <1>     pop ebx
   159 000008A1 58                  <1>     pop eax
   160                              <1> 
   161 000008A2 89EC                <1>     mov esp, ebp
   162 000008A4 5D                  <1>     pop ebp
   163                              <1> 
   164 000008A5 C3                  <1>     ret
   116                                  %include "../modules/protect/draw_time.s"
   117                              <1> draw_time:  ; void draw_time(col, row, color, time);
   118                              <1> ; time 時刻データ
   119 000008A6 55                  <1>     push ebp
   120 000008A7 89E5                <1>     mov ebp, esp
   121                              <1> 
   122 000008A9 50                  <1>     push eax
   123 000008AA 53                  <1>     push ebx
   124                              <1>     
   125 000008AB 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   126                              <1> 
   127 000008AE 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   128 000008B1 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   128 000008B8 [18090000]53E819FF- <1>
   128 000008C0 FFFF6683C414        <1>
   129                              <1> 
   130 000008C6 88E3                <1>     mov bl, ah          ; 分だけ
   131 000008C8 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   131 000008CF [15090000]53E802FF- <1>
   131 000008D7 FFFF6683C414        <1>
   132                              <1>     
   133 000008DD C1E810              <1>     shr eax, 16         ; 時だけ
   134 000008E0 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   134 000008E7 [12090000]50E8EAFE- <1>
   134 000008EF FFFF6683C414        <1>
   135                              <1> 
   136 000008F5 68[12090000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   136 000008FD FF750CFF7508E843FC- <1>
   136 00000906 FFFF6683C410        <1>
   137                              <1> 
   138 0000090C 5B                  <1>     pop ebx
   139 0000090D 58                  <1>     pop eax
   140                              <1> 
   141 0000090E 89EC                <1>     mov esp, ebp
   142 00000910 5D                  <1>     pop ebp
   143                              <1> 
   144 00000911 C3                  <1>     ret
   145                              <1> 
   146 00000912 5A5A3A              <1> .hour: db "ZZ:"
   147 00000915 5A5A3A              <1> .min:  db "ZZ:"
   148 00000918 5A5A00              <1> .sec:  db "ZZ", 0
   117                                  %include "../modules/protect/interrupt.s"
   118                              <1> int_stop:
   119 0000091B FB                  <1>     sti ; 割り込みを許可
   120                              <1> 
   121                              <1>     ; EAXで示される文字列を表示
   122 0000091C 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   122 00000925 19E820FCFFFF6683C4- <1>
   122 0000092E 10                  <1>
   123                              <1> 
   124                              <1>     ; スタックのデータを文字列に変換
   125 0000092F 8B0424              <1>     mov eax, [esp + 0]
   126 00000932 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   126 00000939 [F7090000]50E898FE- <1>
   126 00000941 FFFF6683C414        <1>
   127                              <1> 
   128 00000947 8B442404            <1>     mov eax, [esp + 4]
   129 0000094B 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   129 00000952 [080A0000]50E87FFE- <1>
   129 0000095A FFFF6683C414        <1>
   130                              <1> 
   131 00000960 8B442408            <1>     mov eax, [esp + 8]
   132 00000964 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   132 0000096B [190A0000]50E866FE- <1>
   132 00000973 FFFF6683C414        <1>
   133                              <1> 
   134 00000979 8B44240C            <1>     mov eax, [esp +12]
   135 0000097D 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   135 00000984 [2A0A0000]50E84DFE- <1>
   135 0000098C FFFF6683C414        <1>
   136                              <1> 
   137                              <1>     ; 文字列の表示
   138 00000992 68[F0090000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   138 0000099A 00006A106A19E8A6FB- <1>
   138 000009A3 FFFF6683C410        <1>
   139 000009A9 68[010A0000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   139 000009B1 00006A116A19E88FFB- <1>
   139 000009BA FFFF6683C410        <1>
   140 000009C0 68[120A0000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   140 000009C8 00006A126A19E878FB- <1>
   140 000009D1 FFFF6683C410        <1>
   141 000009D7 68[230A0000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   141 000009DF 00006A136A19E861FB- <1>
   141 000009E8 FFFF6683C410        <1>
   142                              <1> 
   143                              <1>     ; 無限ループ
   144 000009EE EBFE                <1>     jmp $
   145                              <1> 
   146 000009F0 4553502B20303A      <1> .s1 db "ESP+ 0:"
   147 000009F7 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   147 00000A00 00                  <1>
   148 00000A01 2020202B20343A      <1> .s2 db "   + 4:"
   149 00000A08 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   149 00000A11 00                  <1>
   150 00000A12 2020202B20383A      <1> .s3 db "   + 8:"
   151 00000A19 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   151 00000A22 00                  <1>
   152 00000A23 2020202B31323A      <1> .s4 db "   +12:"
   153 00000A2A 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   153 00000A33 00                  <1>
   154                              <1> 
   155                              <1> int_default:
   156 00000A34 9C                  <1>     pushf       ; EFLAGS(IF==0)
   157 00000A35 0E                  <1>     push cs
   158 00000A36 68[1B090000]        <1>     push int_stop
   159                              <1> 
   160 00000A3B B8[410A0000]        <1>     mov eax, .s0
   161 00000A40 CF                  <1>     iret
   162                              <1> 
   163 00000A41 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   163 00000A4A 50202020203E2000    <1>
   164                              <1> 
   165                              <1> 
   166                              <1> ; 割り込みベクタの初期化
   167 00000A52 90<rep 2h>          <1> ALIGN 4
   168 00000A54 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   169 00000A56 00001000            <1>       dd VECT_BASE      ; idt location
   170                              <1> 
   171                              <1> ; 割り込みテーブルを初期化
   172                              <1> init_int:
   173 00000A5A 50                  <1>     push eax
   174 00000A5B 53                  <1>     push ebx
   175 00000A5C 51                  <1>     push ecx
   176 00000A5D 57                  <1>     push edi
   177                              <1> 
   178                              <1>     ; 全ての割り込みにデフォルト処理を設定
   179 00000A5E 8D05[340A0000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   180 00000A64 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   181 00000A69 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   182                              <1> 
   183 00000A6B B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   184 00000A70 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   185                              <1> 
   186                              <1>     ; メモリに書き込み
   187                              <1> .10L:
   188 00000A75 891F                <1>     mov [edi + 0], ebx
   189 00000A77 894704              <1>     mov [edi + 4], eax
   190 00000A7A 83C708              <1>     add edi, 8
   191 00000A7D E2F6                <1>     loop .10L
   192                              <1> 
   193                              <1>     ; 割り込みディスクリプタの設定
   194 00000A7F 0F011D[540A0000]    <1>     lidt [IDTR]
   195                              <1> 
   196 00000A86 5F                  <1>     pop edi
   197 00000A87 59                  <1>     pop ecx
   198 00000A88 5B                  <1>     pop ebx
   199 00000A89 58                  <1>     pop eax
   200                              <1> 
   201 00000A8A C3                  <1>     ret
   202                              <1> 
   203                              <1> 
   204                              <1> int_zero_div:
   205 00000A8B 9C                  <1>     pushf
   206 00000A8C 0E                  <1>     push cs
   207 00000A8D 68[1B090000]        <1>     push int_stop
   208                              <1> 
   209 00000A92 B8[980A0000]        <1>     mov eax, .s0
   210 00000A97 CF                  <1>     iret
   211                              <1> 
   212 00000A98 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   212 00000AA1 44495620203E2000    <1>
   118                                  %include "../modules/protect/pic.s"
   119                              <1> init_pic:
   120 00000AA9 50                  <1>     push eax
   121                              <1> 
   122                              <1>     ; outp ポート, データ
   123                              <1> 
   124                              <1>     ; マスタの設定
   125                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    48 00000AAA B011                <2>  mov al, %2
    49 00000AAC E620                <2>  out %1, al
   126                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    48 00000AAE B020                <2>  mov al, %2
    49 00000AB0 E621                <2>  out %1, al
   127                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    48 00000AB2 B004                <2>  mov al, %2
    49 00000AB4 E621                <2>  out %1, al
   128                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    48 00000AB6 B001                <2>  mov al, %2
    49 00000AB8 E621                <2>  out %1, al
   129                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    48 00000ABA B0FF                <2>  mov al, %2
    49 00000ABC E621                <2>  out %1, al
   130                              <1> 
   131                              <1>     ; スレーブの設定
   132                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    48 00000ABE B011                <2>  mov al, %2
    49 00000AC0 E6A0                <2>  out %1, al
   133                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    48 00000AC2 B028                <2>  mov al, %2
    49 00000AC4 E6A1                <2>  out %1, al
   134                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    48 00000AC6 B002                <2>  mov al, %2
    49 00000AC8 E6A1                <2>  out %1, al
   135                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    48 00000ACA B001                <2>  mov al, %2
    49 00000ACC E6A1                <2>  out %1, al
   136                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    48 00000ACE B0FF                <2>  mov al, %2
    49 00000AD0 E6A1                <2>  out %1, al
   137                              <1> 
   138 00000AD2 58                  <1>     pop eax
   139                              <1> 
   140 00000AD3 C3                  <1>     ret
   119                                  %include "../modules/protect/int_rtc.s"
   120                              <1> int_rtc:
   121 00000AD4 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   122 00000AD5 1E                  <1>     push ds
   123 00000AD6 06                  <1>     push es
   124                              <1> 
   125                              <1>     ; データ用セグメントセレクタの設定
   126 00000AD7 66B81000            <1>     mov ax, 0x0010
   127 00000ADB 8ED8                <1>     mov ds, ax
   128 00000ADD 8EC0                <1>     mov es, ax
   129                              <1> 
   130                              <1>     ; RTCから時刻を取得
   131 00000ADF 68[D8010000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   131 00000AE7 FFFF6683C404        <1>
   132                              <1> 
   133                              <1>     ; RTCの割り込み要因を取得
   134                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    48 00000AED B00C                <2>  mov al, %2
    49 00000AEF E670                <2>  out %1, al
   135 00000AF1 E471                <1>     in al, 0x71     ; RTCからデータを取得
   136                              <1> 
   137                              <1>     ; 割り込みフラグをクリア(EOI)
   138 00000AF3 B020                <1>     mov al, 0x20
   139 00000AF5 E6A0                <1>     out 0xA0, al    ; スレーブ
   140 00000AF7 E620                <1>     out 0x20, al    ; マスタ
   141                              <1> 
   142 00000AF9 07                  <1>     pop es
   143 00000AFA 1F                  <1>     pop ds
   144 00000AFB 61                  <1>     popa
   145                              <1> 
   146 00000AFC CF                  <1>     iret        ; 割り込み処理の終了
   147                              <1> 
   148                              <1> rtc_int_en:
   149 00000AFD 55                  <1>     push ebp
   150 00000AFE 89E5                <1>     mov ebp, esp
   151 00000B00 50                  <1>     push eax
   152                              <1> 
   153                              <1>     ; 割り込み許可設定
   154                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    48 00000B01 B00B                <2>  mov al, %2
    49 00000B03 E670                <2>  out %1, al
   155                              <1> 
   156 00000B05 E471                <1>     in al, 0x71     ; RTCからデータを取得
   157 00000B07 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   158                              <1> 
   159 00000B0A E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   160                              <1> 
   161 00000B0C 58                  <1>     pop eax
   162                              <1> 
   163 00000B0D 89EC                <1>     mov esp, ebp
   164 00000B0F 5D                  <1>     pop ebp
   165                              <1> 
   166 00000B10 C3                  <1>     ret
   120                                  %include "../modules/protect/int_keyboard.s"
   121                              <1> int_keyboard:
   122 00000B11 60                  <1>     pusha
   123 00000B12 1E                  <1>     push ds
   124 00000B13 06                  <1>     push es
   125                              <1> 
   126                              <1>     ; データ用セグメントの設定
   127 00000B14 66B81000            <1>     mov ax, 0x0010
   128 00000B18 8ED8                <1>     mov ds, ax
   129 00000B1A 8EC0                <1>     mov es, ax
   130                              <1> 
   131                              <1>     ; KBCのバッファ読み取り
   132 00000B1C E460                <1>     in al, 0x60
   133                              <1> 
   134                              <1>     ; キーコードの保存
   135 00000B1E 5068[380B0000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   135 00000B26 0000006683C408      <1>
   136                              <1> 
   137                              <1>     ; 割り込み終了コマンド送信
   138                              <1>     outp 0x20, 0x20
    48 00000B2D B020                <2>  mov al, %2
    49 00000B2F E620                <2>  out %1, al
   139                              <1> 
   140 00000B31 07                  <1>     pop es
   141 00000B32 1F                  <1>     pop ds
   142 00000B33 61                  <1>     popa
   143                              <1> 
   144 00000B34 CF                  <1>     iret
   145                              <1> 
   146 00000B35 00<rep 3h>          <1> ALIGN 4, db 0
   147 00000B38 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   121                                  %include "../modules/protect/ring_buff.s"
   122                              <1> ring_rd:        ; int ring_rd(buff, data);
   123                              <1> ; buff リングバッファ
   124                              <1> ; data 読み込んだデータの保存先アドレス
   125                              <1> ; 戻り値: データあり(0以外), データなし(0)
   126                              <1> 
   127 00000B50 55                  <1>     push ebp
   128 00000B51 89E5                <1>     mov ebp, esp
   129                              <1> 
   130 00000B53 50                  <1>     push eax
   131 00000B54 53                  <1>     push ebx
   132 00000B55 56                  <1>     push esi
   133 00000B56 57                  <1>     push edi
   134                              <1> 
   135                              <1>     ; 引数取得
   136 00000B57 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   137 00000B5A 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   138                              <1> 
   139                              <1>     ; 読み込み位置を確認
   140 00000B5D B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   141 00000B62 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   142 00000B64 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   143 00000B67 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   144                              <1> 
   145 00000B69 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   146                              <1> 
   147 00000B6D 8807                <1>     mov [edi], al
   148                              <1> 
   149 00000B6F 43                  <1>     inc ebx ; 次の読み込み位置
   150 00000B70 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   151 00000B73 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   152                              <1> 
   153 00000B75 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   154                              <1> .10E:
   155                              <1> 
   156 00000B7A 5F                  <1>     pop edi
   157 00000B7B 5E                  <1>     pop esi
   158 00000B7C 5B                  <1>     pop ebx
   159 00000B7D 58                  <1>     pop eax
   160                              <1> 
   161 00000B7E 89EC                <1>     mov esp, ebp
   162 00000B80 5D                  <1>     pop ebp
   163                              <1> 
   164 00000B81 C3                  <1>     ret
   165                              <1> 
   166                              <1> 
   167                              <1> ring_wr:    ; int ring_wr(buff, data);
   168                              <1> ; buff シリンダバッファ
   169                              <1> ; data 書き込むデータ
   170                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   171 00000B82 55                  <1>     push ebp
   172 00000B83 89E5                <1>     mov ebp, esp
   173                              <1> 
   174 00000B85 50                  <1>     push eax
   175 00000B86 53                  <1>     push ebx
   176 00000B87 51                  <1>     push ecx
   177 00000B88 56                  <1>     push esi
   178                              <1> 
   179 00000B89 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   180                              <1> 
   181                              <1>     ; 書き込み位置を確認
   182 00000B8C B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   183 00000B91 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   184 00000B94 89D9                <1>     mov ecx, ebx
   185 00000B96 41                  <1>     inc ecx                         ; 次の書き込み位置
   186 00000B97 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   187                              <1> 
   188                              <1>     ; バッファフルなら処理しない
   189 00000B9A 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   190 00000B9C 740F                <1>     je .10E
   191                              <1> 
   192 00000B9E 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   193                              <1> 
   194 00000BA1 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   195 00000BA5 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   196 00000BA8 B801000000          <1>     mov eax, 1  ; 戻り値 成功
   197                              <1> .10E:
   198                              <1> 
   199 00000BAD 5E                  <1>     pop esi
   200 00000BAE 59                  <1>     pop ecx
   201 00000BAF 5B                  <1>     pop ebx
   202 00000BB0 58                  <1>     pop eax
   203                              <1> 
   204 00000BB1 89EC                <1>     mov esp, ebp
   205 00000BB3 5D                  <1>     pop ebp
   206                              <1> 
   207 00000BB4 C3                  <1>     ret
   208                              <1> 
   209                              <1> draw_key:
   210 00000BB5 55                  <1>     push ebp
   211 00000BB6 89E5                <1>     mov ebp, esp
   212                              <1> 
   213 00000BB8 50                  <1>     push eax
   214 00000BB9 53                  <1>     push ebx
   215 00000BBA 51                  <1>     push ecx
   216 00000BBB 52                  <1>     push edx
   217 00000BBC 56                  <1>     push esi
   218 00000BBD 57                  <1>     push edi
   219                              <1> 
   220                              <1> 
   221 00000BBE 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   222 00000BC1 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   223 00000BC4 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   224                              <1> 
   225                              <1>     ; リングバッファの情報を取得
   226 00000BC7 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   227 00000BC9 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   228 00000BCC B910000000          <1>     mov ecx, RING_ITEM_SIZE
   229                              <1> 
   230                              <1> .10L:
   231 00000BD1 4B                  <1>     dec ebx ; 読み込み位置
   232 00000BD2 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   233 00000BD5 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   234                              <1> 
   235 00000BD8 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   235 00000BE1 68[140C0000]50E8EF- <1>
   235 00000BE9 FBFFFF6683C414      <1>
   236 00000BF0 68[140C0000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   236 00000BF8 52E84DF9FFFF6683C4- <1>
   236 00000C01 10                  <1>
   237                              <1> 
   238 00000C02 83C203              <1>     add edx, 3  ; 表示位置更新
   239 00000C05 E2CA                <1>     loop .10L
   240                              <1> .10E:
   241                              <1> 
   242 00000C07 5F                  <1>     pop edi
   243 00000C08 5E                  <1>     pop esi
   244 00000C09 5A                  <1>     pop edx
   245 00000C0A 59                  <1>     pop ecx
   246 00000C0B 5B                  <1>     pop ebx
   247 00000C0C 58                  <1>     pop eax
   248                              <1> 
   249 00000C0D 89EC                <1>     mov esp, ebp
   250 00000C0F 5D                  <1>     pop ebp
   251                              <1> 
   252 00000C10 C3                  <1>     ret
   253                              <1> 
   254 00000C11 00<rep 3h>          <1> ALIGN 4, db 0
   255 00000C14 2D2D2000            <1> .tmp db "-- ", 0
   122                                  %include "../modules/protect/timer.s"
   123                              <1> int_en_timer0:
   124 00000C18 50                  <1>     push eax
   125                              <1> 
   126                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    48 00000C19 B034                <2>  mov al, %2
    49 00000C1B E643                <2>  out %1, al
   127                              <1>     outp 0x40, 0x9C             ; 下位バイト
    48 00000C1D B09C                <2>  mov al, %2
    49 00000C1F E640                <2>  out %1, al
   128                              <1>     outp 0x40, 0x2E             ; 上位バイト
    48 00000C21 B02E                <2>  mov al, %2
    49 00000C23 E640                <2>  out %1, al
   129                              <1> 
   130 00000C25 58                  <1>     pop eax
   131                              <1> 
   132 00000C26 C3                  <1>     ret
   123                                  %include "../modules/protect/draw_rotation_bar.s"
   124                              <1> draw_rotation_bar:
   125 00000C27 50                  <1>     push eax
   126                              <1> 
   127 00000C28 A1[48030000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   128 00000C2D C1E804              <1>     shr eax, 4              ; eax /= 4
   129 00000C30 3B05[580C0000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   130 00000C36 741E                <1>     je .10E
   131                              <1> 
   132 00000C38 A3[580C0000]        <1>     mov [.index], eax       ; 前回値設定
   133 00000C3D 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   134                              <1> 
   135 00000C40 8A80[5C0C0000]      <1>     mov al, [.table + eax]  ; 文字表示
   136 00000C46 506A0F6A1D6A00E8F2- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   136 00000C4F F7FFFF6683C410      <1>
   137                              <1> 
   138                              <1> .10E:
   139                              <1> 
   140 00000C56 58                  <1>     pop eax
   141                              <1> 
   142 00000C57 C3                  <1>     ret
   143                              <1> 
   144                              <1> ALIGN 4, db 0
   145 00000C58 00000000            <1> .index: dd 0        ; 前回値
   146 00000C5C 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   124                                  %include "../modules/protect/call_gate.s"
   125                              <1> call_gate:
   126 00000C60 55                  <1>     push ebp
   127 00000C61 89E5                <1>     mov ebp, esp
   128                              <1> 
   129 00000C63 60                  <1>     pusha
   130 00000C64 1E                  <1>     push ds
   131 00000C65 06                  <1>     push es
   132                              <1> 
   133                              <1>     ; データ用セグメントの設定
   134 00000C66 66B81000            <1>     mov ax, 0x0010
   135 00000C6A 8ED8                <1>     mov ds, ax
   136 00000C6C 8EC0                <1>     mov es, ax
   137                              <1> 
   138                              <1>     ; 文字を表示
   139 00000C6E 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   140 00000C71 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   141 00000C74 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   142 00000C77 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   143 00000C7A 52515350E8C8F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   143 00000C83 6683C410            <1>
   144                              <1> 
   145 00000C87 07                  <1>     pop es
   146 00000C88 1F                  <1>     pop ds
   147 00000C89 61                  <1>     popa
   148                              <1> 
   149 00000C8A 89EC                <1>     mov esp, ebp
   150 00000C8C 5D                  <1>     pop ebp
   151                              <1> 
   152                              <1>     ; コードセグメントセレクタの復帰と終了
   153 00000C8D CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   125                                  %include "../modules/protect/trap_gate.s"
   126                              <1> trap_gate_81:
   127                              <1>     ; 1文字出力
   128 00000C90 50535251E8ABF7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   128 00000C99 6683C410            <1>
   129                              <1> 
   130 00000C9D CF                  <1>     iret
   131                              <1> 
   132                              <1> trap_gate_82:
   133                              <1>     ; 点の描画
   134 00000C9E 535251E85DF9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   134 00000CA7 83C40C              <1>
   135                              <1> 
   136 00000CAA CF                  <1>     iret
   126                                  
   127                                  ;パディング
   128 00000CAB 00<rep 1355h>               times KERNEL_SIZE - ($ - $$) db 0
   129                                  

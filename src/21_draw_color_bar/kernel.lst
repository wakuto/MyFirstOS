     1                                  %include "../include/define.s"
     2                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     3                              <1> 
     4                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     5                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     6                              <1> 
     7                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
     8                              <1> 
     9                              <1>     E820_RECORD_SIZE equ 20
    10                              <1> 
    11                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    12                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    13                              <1> 
    14                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    15                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
     2                                  %include "../include/macro.s"
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
     3                                  
     4                                      ORG KERNEL_LOAD
     5                                  
     6                                  [BITS 32]   ; 32bitコードを生成
     7                                  
     8                                  ; エントリポイント
     9                                  kernel:
    10                                      ; フォントアドレスを取得
    11 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    12 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    13 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    14 0000000C C1E004                      shl eax, 4
    15 0000000F 01D8                        add eax, ebx
    16 00000011 A3[5C000000]                mov [FONT_ADR], eax
    17                                  
    18                                      ; 文字の表示
    19 00000016 6A0D6A3FE88C010000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    19 0000001F 6683C408           
    20 00000023 6A046A3FE80B020000-         cdecl draw_color_bar, 63, 4
    20 0000002C 6683C408           
    21                                  
    22 00000030 68[49000000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0
    22 00000038 00006A0E6A19E8AB01-
    22 00000041 00006683C410       
    23                                  
    24                                      ; 処理の終了
    25 00000047 EBFE                        jmp $
    26                                  
    27 00000049 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    27 00000052 65726E656C212000   
    28                                  
    29 0000005A 00<rep 2h>              ALIGN 4, db 0
    30 0000005C 00000000                FONT_ADR: dd 0
    31                                  
    32                                  ; モジュール
    33                                  %include "../modules/protect/vga.s"
    34                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
    35                              <1> ; plane: 読み込みプレーン
    36 00000060 55                  <1>     push ebp
    37 00000061 89E5                <1>     mov ebp, esp
    38                              <1> 
    39 00000063 6650                <1>     push ax
    40 00000065 6652                <1>     push dx
    41                              <1> 
    42                              <1> 
    43                              <1>     ; 読み込みプレーンの選択
    44 00000067 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
    45 0000006A 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
    46 0000006D B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
    47 0000006F 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
    48 00000073 66EF                <1>     out dx, ax
    49                              <1> 
    50 00000075 665A                <1>     pop dx
    51 00000077 6658                <1>     pop ax
    52                              <1> 
    53 00000079 89EC                <1>     mov esp, ebp
    54 0000007B 5D                  <1>     pop ebp
    55                              <1> 
    56 0000007C C3                  <1>     ret
    57                              <1> 
    58                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
    59                              <1> ; plane 書き込みプレーン
    60 0000007D 55                  <1>     push ebp
    61 0000007E 89E5                <1>     mov ebp, esp
    62                              <1> 
    63 00000080 6650                <1>     push ax
    64 00000082 6652                <1>     push dx
    65                              <1> 
    66                              <1> 
    67                              <1>     ; 書き込みプレーンの選択
    68 00000084 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
    69 00000087 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
    70 0000008A B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
    71 0000008C 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
    72 00000090 66EF                <1>     out dx, ax
    73                              <1> 
    74                              <1> 
    75 00000092 665A                <1>     pop dx
    76 00000094 6658                <1>     pop ax
    77                              <1> 
    78 00000096 89EC                <1>     mov esp, ebp
    79 00000098 5D                  <1>     pop ebp
    80                              <1> 
    81 00000099 C3                  <1>     ret
    82                              <1> 
    83                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
    84                              <1> ; font FONTアドレス
    85                              <1> ; vram VRAMアドレス
    86                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
    87                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
    88 0000009A 55                  <1>     push ebp
    89 0000009B 89E5                <1>     mov ebp, esp
    90                              <1>     
    91 0000009D 50                  <1>     push eax
    92 0000009E 53                  <1>     push ebx
    93 0000009F 51                  <1>     push ecx
    94 000000A0 52                  <1>     push edx
    95 000000A1 57                  <1>     push edi
    96 000000A2 56                  <1>     push esi
    97                              <1> 
    98 000000A3 8B7508              <1>     mov esi, [ebp + 8]          ; font
    99 000000A6 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   100 000000A9 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   101 000000AD 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   102                              <1>     ; bh = 背景色 bl = 前景色
   103                              <1> 
   104 000000B1 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   105 000000B3 0F94C6              <1>     setz dh         ; dh = zf
   106 000000B6 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   107                              <1> 
   108 000000B8 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   109 000000BA 0F94C2              <1>     setz dl         ; dl = zf
   110 000000BD FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   111                              <1> 
   112                              <1>     ; 16ドットフォントのコピー
   113 000000BF FC                  <1>     cld             ; アドレス加算モード
   114                              <1> 
   115 000000C0 B910000000          <1>     mov ecx, 16
   116                              <1> .10L:
   117                              <1>     ; フォントマスクの作成
   118 000000C5 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   119 000000C6 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   120 000000C8 F6D4                <1>     not ah
   121                              <1> 
   122                              <1>     ; 前景色
   123 000000CA 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   124                              <1> 
   125                              <1>     ; 背景色
   126 000000CC F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   127 000000D2 7404                <1>     jz .11F
   128                              <1>     ; 透過on
   129 000000D4 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   130 000000D6 EB02                <1>     jmp .11E
   131                              <1> .11F:                   ; 透過off
   132 000000D8 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   133                              <1> .11E:
   134                              <1>     
   135                              <1>     ; 前景色と背景色を合成
   136 000000DA 08E0                <1>     or al, ah           ; al = 背景 | 前景
   137                              <1> 
   138                              <1>     ; 新しい値を出力
   139 000000DC 8807                <1>     mov [edi], al
   140                              <1> 
   141 000000DE 83C750              <1>     add edi, 80      ; 1行すすめる
   142 000000E1 E2E2                <1>     loop .10L
   143                              <1> .10E:
   144                              <1> 
   145 000000E3 5E                  <1>     pop esi
   146 000000E4 5F                  <1>     pop edi
   147 000000E5 5A                  <1>     pop edx
   148 000000E6 59                  <1>     pop ecx
   149 000000E7 5B                  <1>     pop ebx
   150 000000E8 58                  <1>     pop eax
   151                              <1> 
   152 000000E9 89EC                <1>     mov esp, ebp
   153 000000EB 5D                  <1>     pop ebp
   154                              <1> 
   155 000000EC C3                  <1>     ret
    34                                  %include "../modules/protect/draw_char.s"
    35                              <1> draw_char:      ; void draw_char(col, row, color, ch);
    36                              <1> ; col 列（0～79）
    37                              <1> ; row 行（0～29）
    38                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
    39                              <1> ; ch 文字
    40                              <1> 
    41 000000ED 55                  <1>     push ebp
    42 000000EE 89E5                <1>     mov ebp, esp
    43                              <1> 
    44 000000F0 53                  <1>     push ebx
    45 000000F1 56                  <1>     push esi
    46 000000F2 57                  <1>     push edi
    47                              <1> 
    48                              <1>     ; コピー元フォントアドレスを設定
    49 000000F3 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
    50 000000F7 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
    51 000000FA 0335[5C000000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
    52                              <1> 
    53                              <1>     ; コピー先アドレスを取得
    54                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
    55                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
    56 00000100 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
    57 00000103 C1E708              <1>     shl edi, 8
    58 00000106 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
    59 0000010D 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
    60                              <1> 
    61                              <1>     ; 1文字分のフォントを出力
    62 00000110 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
    63                              <1> 
    64                              <1>     ; 輝度I
    65 00000114 6A03E845FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
    65 0000011D C404                <1>
    66 0000011F 6A08E857FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
    66 00000128 C404                <1>
    67 0000012A 536A085756E866FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
    67 00000133 FF6683C410          <1>
    68                              <1> 
    69                              <1>     ; 赤R
    70 00000138 6A02E821FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
    70 00000141 C404                <1>
    71 00000143 6A04E833FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
    71 0000014C C404                <1>
    72 0000014E 536A045756E842FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
    72 00000157 FF6683C410          <1>
    73                              <1> 
    74                              <1>     ; 緑G
    75 0000015C 6A01E8FDFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
    75 00000165 C404                <1>
    76 00000167 6A02E80FFFFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
    76 00000170 C404                <1>
    77 00000172 536A025756E81EFFFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
    77 0000017B FF6683C410          <1>
    78                              <1> 
    79                              <1>     ; 青B
    80 00000180 6A00E8D9FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
    80 00000189 C404                <1>
    81 0000018B 6A01E8EBFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
    81 00000194 C404                <1>
    82 00000196 536A015756E8FAFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
    82 0000019F FF6683C410          <1>
    83                              <1> 
    84 000001A4 5F                  <1>     pop edi
    85 000001A5 5E                  <1>     pop esi
    86 000001A6 5B                  <1>     pop ebx
    87                              <1> 
    88 000001A7 89EC                <1>     mov esp, ebp
    89 000001A9 5D                  <1>     pop ebp
    90                              <1> 
    91 000001AA C3                  <1>     ret
    35                                  %include "../modules/protect/draw_font.s"
    36                              <1> draw_font:  ; void draw_font(col, row);
    37                              <1> ; col 列
    38                              <1> ; row 行
    39 000001AB 55                  <1>     push ebp
    40 000001AC 89E5                <1>     mov ebp, esp
    41                              <1> 
    42 000001AE 50                  <1>     push eax
    43 000001AF 53                  <1>     push ebx
    44 000001B0 51                  <1>     push ecx
    45 000001B1 57                  <1>     push edi
    46 000001B2 56                  <1>     push esi
    47                              <1> 
    48                              <1> 
    49 000001B3 8B7508              <1>     mov esi, [ebp + 8]  ; x
    50 000001B6 8B7D0C              <1>     mov edi, [ebp +12]  ; y
    51                              <1> 
    52 000001B9 B900000000          <1>     mov ecx, 0
    53                              <1> .10L:
    54 000001BE 81F900010000        <1>     cmp ecx, 256
    55 000001C4 731F                <1>     jae .10E
    56                              <1> 
    57 000001C6 89C8                <1>     mov eax, ecx
    58 000001C8 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
    59 000001CB 01F0                <1>     add eax, esi    ; eax += x
    60                              <1> 
    61 000001CD 89CB                <1>     mov ebx, ecx
    62 000001CF C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
    63 000001D2 01FB                <1>     add ebx, edi    ; ebx += y
    64                              <1> 
    65 000001D4 516A075350E80FFFFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
    65 000001DD FF6683C410          <1>
    66                              <1> 
    67 000001E2 41                  <1>     inc ecx
    68 000001E3 EBD9                <1>     jmp .10L
    69                              <1> .10E:
    70                              <1> 
    71 000001E5 5E                  <1>     pop esi
    72 000001E6 5F                  <1>     pop edi
    73 000001E7 59                  <1>     pop ecx
    74 000001E8 5B                  <1>     pop ebx
    75 000001E9 58                  <1>     pop eax
    76                              <1> 
    77 000001EA 89EC                <1>     mov esp, ebp
    78 000001EC 5D                  <1>     pop ebp
    79                              <1> 
    80 000001ED C3                  <1>     ret
    36                                  %include "../modules/protect/draw_str.s"
    37                              <1> draw_str:   ;void draw_str(col, row, color, p);
    38                              <1> ; col: 列
    39                              <1> ; row: 行
    40                              <1> ; color: 描画色
    41                              <1> ; p: 文字列のアドレス
    42 000001EE 55                  <1>     push ebp
    43 000001EF 89E5                <1>     mov ebp, esp
    44                              <1> 
    45 000001F1 50                  <1>     push eax
    46 000001F2 53                  <1>     push ebx
    47 000001F3 51                  <1>     push ecx
    48 000001F4 52                  <1>     push edx
    49 000001F5 56                  <1>     push esi
    50                              <1> 
    51                              <1> 
    52 000001F6 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
    53 000001F9 8B550C              <1>     mov edx, [ebp +12]  ; row
    54 000001FC 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
    55 00000200 8B7514              <1>     mov esi, [ebp +20]  ; p
    56                              <1> 
    57 00000203 FC                  <1>     cld
    58                              <1> .10L:
    59 00000204 AC                  <1>     lodsb
    60 00000205 3C00                <1>     cmp al, 0
    61 00000207 7425                <1>     je .10E
    62                              <1> 
    63 00000209 50535251E8DBFEFFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
    63 00000212 6683C410            <1>
    64                              <1> 
    65 00000216 41                  <1>     inc ecx
    66 00000217 83F950              <1>     cmp ecx, 80
    67 0000021A 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
    68 0000021C B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
    69 00000221 42                  <1>     inc edx
    70 00000222 83FA1E              <1>     cmp edx, 30
    71 00000225 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
    72 00000227 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
    73                              <1> .12E:
    74 0000022C EBD6                <1>     jmp .10L
    75                              <1> .10E:
    76                              <1> 
    77 0000022E 5E                  <1>     pop esi
    78 0000022F 5A                  <1>     pop edx
    79 00000230 59                  <1>     pop ecx
    80 00000231 5B                  <1>     pop ebx
    81 00000232 58                  <1>     pop eax
    82                              <1> 
    83 00000233 89EC                <1>     mov esp, ebp
    84 00000235 5D                  <1>     pop ebp
    85                              <1> 
    86 00000236 C3                  <1>     ret
    37                                  %include "../modules/protect/draw_color_bar.s"
    38                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
    39                              <1> ; col: 列
    40                              <1> ; row: 行
    41 00000237 55                  <1>     push ebp
    42 00000238 89E5                <1>     mov ebp, esp
    43                              <1> 
    44 0000023A 50                  <1>     push eax
    45 0000023B 53                  <1>     push ebx
    46 0000023C 51                  <1>     push ecx
    47 0000023D 52                  <1>     push edx
    48 0000023E 56                  <1>     push esi
    49 0000023F 57                  <1>     push edi
    50                              <1> 
    51                              <1> 
    52 00000240 8B7508              <1>     mov esi, [ebp + 8]      ; x
    53 00000243 8B7D0C              <1>     mov edi, [ebp +12]      ; y
    54                              <1> 
    55                              <1>     ; カラーバーを表示
    56 00000246 B900000000          <1>     mov ecx, 0
    57                              <1> .10L:
    58 0000024B 83F910              <1>     cmp ecx, 16
    59 0000024E 732E                <1>     jae .10E
    60                              <1> 
    61                              <1>     ; 一回で8文字
    62 00000250 89C8                <1>     mov eax, ecx
    63 00000252 83E001              <1>     and eax, 0x01
    64 00000255 C1E003              <1>     shl eax, 3
    65 00000258 01F0                <1>     add eax, esi    ; col
    66                              <1> 
    67                              <1>     ; 2回に1回改行
    68 0000025A 89CB                <1>     mov ebx, ecx
    69 0000025C D1EB                <1>     shr ebx, 1
    70 0000025E 01FB                <1>     add ebx, edi    ; row
    71                              <1> 
    72                              <1>     ; 背景色を2色見たら下位次の行
    73 00000260 89CA                <1>     mov edx, ecx
    74 00000262 D1E2                <1>     shl edx, 1
    75 00000264 8B92[91020000]      <1>     mov edx, [.t0 + edx]    ; color
    76                              <1> 
    77 0000026A 68[88020000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
    77 00000272 E877FFFFFF6683C410  <1>
    78                              <1> 
    79 0000027B 41                  <1>     inc ecx
    80 0000027C EBCD                <1>     jmp .10L
    81                              <1> .10E:
    82                              <1> 
    83 0000027E 5F                  <1>     pop edi
    84 0000027F 5E                  <1>     pop esi
    85 00000280 5A                  <1>     pop edx
    86 00000281 59                  <1>     pop ecx
    87 00000282 5B                  <1>     pop ebx
    88 00000283 58                  <1>     pop eax
    89                              <1> 
    90 00000284 89EC                <1>     mov esp, ebp
    91 00000286 5D                  <1>     pop ebp
    92                              <1> 
    93 00000287 C3                  <1>     ret
    94                              <1> 
    95                              <1> 
    96 00000288 202020202020202000  <1> .s0: db '        ', 0
    97                              <1> 
    98                              <1> .t0:
    99 00000291 00000008            <1>     dw 0x0000, 0x0800
   100 00000295 00010009            <1>     dw 0x0100, 0x0900
   101 00000299 0002000A            <1>     dw 0x0200, 0x0A00
   102 0000029D 0003000B            <1>     dw 0x0300, 0x0B00
   103 000002A1 0004000C            <1>     dw 0x0400, 0x0C00
   104 000002A5 0005000D            <1>     dw 0x0500, 0x0D00
   105 000002A9 0006000E            <1>     dw 0x0600, 0x0E00
   106 000002AD 0007000F            <1>     dw 0x0700, 0x0F00
    38                                  
    39                                  ;パディング
    40 000002B1 00<rep 1D4Fh>               times KERNEL_SIZE - ($ - $$) db 0
    41                                  

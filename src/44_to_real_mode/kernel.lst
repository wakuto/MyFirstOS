     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    27                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
    28                              <1>     SP_TASK_3 equ STACK_BASE + (STACK_SIZE * 4)
    29                              <1>     SP_TASK_4 equ STACK_BASE + (STACK_SIZE * 5)
    30                              <1>     SP_TASK_5 equ STACK_BASE + (STACK_SIZE * 6)
    31                              <1>     SP_TASK_6 equ STACK_BASE + (STACK_SIZE * 7)
    32                              <1> 
    33                              <1>     PARAM_TASK_4 equ 0x0010_8000            ; 描画パラメータ：タスク4用
    34                              <1>     PARAM_TASK_5 equ 0x0010_9000            ; 描画パラメータ：タスク5用
    35                              <1>     PARAM_TASK_6 equ 0x0010_A000            ; 描画パラメータ：タスク6用
    36                              <1> 
    37                              <1>     CR3_BASE equ 0x0010_5000    ; ページ変換テーブル タスク3用
    38                              <1> 
    39                              <1>     CR3_TASK_4 equ 0x0020_0000  ; ページ変換テーブル タスク4用
    40                              <1>     CR3_TASK_5 equ 0x0020_2000  ; ページ変換テーブル タスク5用
    41                              <1>     CR3_TASK_6 equ 0x0020_4000  ; ページ変換テーブル タスク6用
    42                              <1> 
    43                              <1> 
    44                              <1>     FAT_SIZE equ (1024 * 128)   ; FAT-1/2
    45                              <1>     ROOT_SIZE equ (1024 *  16)  ; ルートディレクトリ領域
    46                              <1> 
    47                              <1>     ENTRY_SIZE equ 32           ; エントリサイズ
    48                              <1> 
    49                              <1>     ; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
    50                              <1>     FAT_OFFSET equ (BOOT_SIZE + KERNEL_SIZE)
    51                              <1>     FAT1_START equ (KERNEL_SIZE)
    52                              <1>     FAT2_START equ (FAT1_START + FAT_SIZE)
    53                              <1>     ROOT_START equ (FAT2_START + FAT_SIZE)
    54                              <1>     FILE_START equ (ROOT_START + ROOT_SIZE)
    55                              <1> 
    56                              <1>     ; ファイル属性
    57                              <1>     ATTR_READ_ONLY equ 0x01
    58                              <1>     ATTR_HIDDEN equ 0x02
    59                              <1>     ATTR_SYSTEM equ 0x04
    60                              <1>     ATTR_VOLUME_ID equ 0x08
    61                              <1>     ATTR_DIRECTORY equ 0x10
    62                              <1>     ATTR_ARCHIVE equ 0x20
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc rose
    98 00000000 ????????            <1>     .x0         resd 1      ; 左上座標
    99 00000004 ????????            <1>     .y0         resd 1      ; 
   100 00000008 ????????            <1>     .x1         resd 1      ; 右下座標
   101 0000000C ????????            <1>     .y1         resd 1      ;
   102                              <1> 
   103 00000010 ????????            <1>     .n          resd 1      ; 変数n
   104 00000014 ????????            <1>     .d          resd 1      ; 変数d
   105                              <1> 
   106                              <1>     ;描画色
   107 00000018 ????????            <1>     .color_x    resd 1      ; x軸
   108 0000001C ????????            <1>     .color_y    resd 1      ; y軸
   109 00000020 ????????            <1>     .color_z    resd 1      ; 枠
   110 00000024 ????????            <1>     .color_s    resd 1      ; 文字
   111 00000028 ????????            <1>     .color_f    resd 1      ; グラフ描画
   112 0000002C ????????            <1>     .color_b    resd 1      ; グラフ消去
   113                              <1> 
   114 00000030 <res 10h>           <1>     .title      resb 16     ; タイトル
   115                              <1> endstruc
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[CC020000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[64030000]        <1>  mov edi, %1
    67 0000001D B8[AA030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[6C030000]        <1>  mov edi, %1
    67 00000038 B8[82040000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                      set_desc GDT.tss_2, TSS_2       ; タスク2用TSSの設定
    63 0000004C 50                  <1>  push eax
    64 0000004D 57                  <1>  push edi
    65                              <1> 
    66 0000004E BF[74030000]        <1>  mov edi, %1
    67 00000053 B8[5A050000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000058 66894702            <1>  mov [edi + 2], ax
    74 0000005C C1E810              <1>  shr eax, 16
    75 0000005F 884704              <1>  mov [edi + 4], al
    76 00000062 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000065 5F                  <1>  pop edi
    79 00000066 58                  <1>  pop eax
    25                                      set_desc GDT.tss_3, TSS_3       ; タスク3用TSSの設定
    63 00000067 50                  <1>  push eax
    64 00000068 57                  <1>  push edi
    65                              <1> 
    66 00000069 BF[7C030000]        <1>  mov edi, %1
    67 0000006E B8[32060000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000073 66894702            <1>  mov [edi + 2], ax
    74 00000077 C1E810              <1>  shr eax, 16
    75 0000007A 884704              <1>  mov [edi + 4], al
    76 0000007D 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000080 5F                  <1>  pop edi
    79 00000081 58                  <1>  pop eax
    26                                      set_desc GDT.tss_4, TSS_4       ; タスク4用TSSの設定
    63 00000082 50                  <1>  push eax
    64 00000083 57                  <1>  push edi
    65                              <1> 
    66 00000084 BF[84030000]        <1>  mov edi, %1
    67 00000089 B8[0A070000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000008E 66894702            <1>  mov [edi + 2], ax
    74 00000092 C1E810              <1>  shr eax, 16
    75 00000095 884704              <1>  mov [edi + 4], al
    76 00000098 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000009B 5F                  <1>  pop edi
    79 0000009C 58                  <1>  pop eax
    27                                      set_desc GDT.tss_5, TSS_5       ; タスク5用TSSの設定
    63 0000009D 50                  <1>  push eax
    64 0000009E 57                  <1>  push edi
    65                              <1> 
    66 0000009F BF[8C030000]        <1>  mov edi, %1
    67 000000A4 B8[E2070000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000A9 66894702            <1>  mov [edi + 2], ax
    74 000000AD C1E810              <1>  shr eax, 16
    75 000000B0 884704              <1>  mov [edi + 4], al
    76 000000B3 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000B6 5F                  <1>  pop edi
    79 000000B7 58                  <1>  pop eax
    28                                      set_desc GDT.tss_6, TSS_6       ; タスク6用TSSの設定
    63 000000B8 50                  <1>  push eax
    64 000000B9 57                  <1>  push edi
    65                              <1> 
    66 000000BA BF[94030000]        <1>  mov edi, %1
    67 000000BF B8[BA080000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000C4 66894702            <1>  mov [edi + 2], ax
    74 000000C8 C1E810              <1>  shr eax, 16
    75 000000CB 884704              <1>  mov [edi + 4], al
    76 000000CE 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000D1 5F                  <1>  pop edi
    79 000000D2 58                  <1>  pop eax
    29                                  
    30                                      ; コールゲートの設定
    31                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 000000D3 50                  <1>  push eax
    84 000000D4 57                  <1>  push edi
    85                              <1> 
    86 000000D5 BF[9C030000]        <1>  mov edi, %1
    87 000000DA B8[CC170000]        <1>  mov eax, %2
    88                              <1> 
    89 000000DF 668907              <1>  mov [edi + 0], ax
    90 000000E2 C1E810              <1>  shr eax, 16
    91 000000E5 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 000000E9 5F                  <1>  pop edi
    94 000000EA 58                  <1>  pop eax
    32                                  
    33                                      ; LDTの設定
    34                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 000000EB 50                  <1>  push eax
    64 000000EC 57                  <1>  push edi
    65                              <1> 
    66 000000ED BF[5C030000]        <1>  mov edi, %1
    67 000000F2 B8[D4020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000FC 66894702            <1>  mov [edi + 2], ax
    74 00000100 C1E810              <1>  shr eax, 16
    75 00000103 884704              <1>  mov [edi + 4], al
    76 00000106 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000109 5F                  <1>  pop edi
    79 0000010A 58                  <1>  pop eax
    35                                  
    36                                      ; GDTをロード(再設定)
    37 0000010B 0F0115[A4030000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    38                                  
    39                                      ; スタックの設定
    40 00000112 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    41                                  
    42                                      ; タスクレジスタの初期化
    43 00000117 66B83000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    44 0000011B 0F00D8                      ltr ax              ; タスクレジスタの設定
    45                                  
    46                                      ; 初期化
    47 0000011E E8A7140000                  cdecl init_int                  ; 割り込みベクタの初期化
    48 00000123 E8F1140000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    49 00000128 E8EB080000                  cdecl init_page                 ; ページングの初期化
    50                                  
    51                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 0000012D 50                  <1>  push eax
    31 0000012E 57                  <1>  push edi
    32                              <1> 
    33 0000012F BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000134 B8[FB150000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000139 668907              <1>  mov [edi + 0], ax
    41 0000013C C1E810              <1>  shr eax, 16
    42 0000013F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000143 5F                  <1>  pop edi
    45 00000144 58                  <1>  pop eax
    52                                      set_vect 0x07, int_nm           ; 割り込み処理の登録：デバイス使用不可例外
    30 00000145 50                  <1>  push eax
    31 00000146 57                  <1>  push edi
    32                              <1> 
    33 00000147 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000014C B8[69180000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000151 668907              <1>  mov [edi + 0], ax
    41 00000154 C1E810              <1>  shr eax, 16
    42 00000157 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000015B 5F                  <1>  pop edi
    45 0000015C 58                  <1>  pop eax
    53                                      set_vect 0x0E, int_pf           ; 割り込み処理の登録：ページフォルト
    30 0000015D 50                  <1>  push eax
    31 0000015E 57                  <1>  push edi
    32                              <1> 
    33 0000015F BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000164 B8[F50A0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000169 668907              <1>  mov [edi + 0], ax
    41 0000016C C1E810              <1>  shr eax, 16
    42 0000016F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000173 5F                  <1>  pop edi
    45 00000174 58                  <1>  pop eax
    54                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 00000175 50                  <1>  push eax
    31 00000176 57                  <1>  push edi
    32                              <1> 
    33 00000177 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000017C B8[92090000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000181 668907              <1>  mov [edi + 0], ax
    41 00000184 C1E810              <1>  shr eax, 16
    42 00000187 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000018B 5F                  <1>  pop edi
    45 0000018C 58                  <1>  pop eax
    55                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 0000018D 50                  <1>  push eax
    31 0000018E 57                  <1>  push edi
    32                              <1> 
    33 0000018F BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000194 B8[81160000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000199 668907              <1>  mov [edi + 0], ax
    41 0000019C C1E810              <1>  shr eax, 16
    42 0000019F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001A3 5F                  <1>  pop edi
    45 000001A4 58                  <1>  pop eax
    56                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 000001A5 50                  <1>  push eax
    31 000001A6 57                  <1>  push edi
    32                              <1> 
    33 000001A7 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001AC B8[44160000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001B1 668907              <1>  mov [edi + 0], ax
    41 000001B4 C1E810              <1>  shr eax, 16
    42 000001B7 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001BB 5F                  <1>  pop edi
    45 000001BC 58                  <1>  pop eax
    57                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 000001BD 50                  <1>  push eax
    31 000001BE 57                  <1>  push edi
    32                              <1> 
    33 000001BF BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001C4 B8[FC170000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 000001C9 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001CF 668907              <1>  mov [edi + 0], ax
    41 000001D2 C1E810              <1>  shr eax, 16
    42 000001D5 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001D9 5F                  <1>  pop edi
    45 000001DA 58                  <1>  pop eax
    58                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 000001DB 50                  <1>  push eax
    31 000001DC 57                  <1>  push edi
    32                              <1> 
    33 000001DD BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001E2 B8[0A180000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 000001E7 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001ED 668907              <1>  mov [edi + 0], ax
    41 000001F0 C1E810              <1>  shr eax, 16
    42 000001F3 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001F7 5F                  <1>  pop edi
    45 000001F8 58                  <1>  pop eax
    59                                  
    60                                      ; デバイスの割り込み許可
    61 000001F9 6A10E86D1400006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    61 00000202 C404               
    62 00000204 E87B150000                  cdecl int_en_timer0             ; タイマー割り込み許可
    63                                  
    64                                      ; IMR（割り込みマスクレジスタ）の設定
    65                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 00000209 B0F8                <1>  mov al, %2
    50 0000020B E621                <1>  out %1, al
    66                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 0000020D B0FE                <1>  mov al, %2
    50 0000020F E6A1                <1>  out %1, al
    67                                  
    68                                      ; ページングの有効化
    69 00000211 B800501000                  mov eax, CR3_BASE
    70 00000216 0F22D8                      mov cr3, eax                    ; ページテーブルの登録
    71                                  
    72 00000219 0F20C0                      mov eax, cr0
    73 0000021C 0D00000080                  or eax, (1 << 31)               ; CR0 | PG      ページングを有効化
    74 00000221 0F22C0                      mov cr0, eax
    75 00000224 EB00                        jmp $ + 2                       ; パイプラインのクリア
    76                                  
    77 00000226 FB                          sti                             ; 割り込み許可
    78                                  
    79 00000227 6A0D6A3FE81C0E0000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    79 00000230 6683C408           
    80 00000234 6A046A3FE8900E0000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    80 0000023D 6683C408           
    81 00000241 68[B4020000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    81 00000249 00006A0E6A19E83B0E-
    81 00000252 00006683C410       
    82                                  
    83                                  
    84                                  
    85                                  .10L:
    86                                      ; 回転する棒の表示
    87 00000258 E836150000                  cdecl draw_rotation_bar
    88                                  
    89                                      ; キーコードの取得
    90 0000025D 68[C8020000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    90 00000263 [A8160000]E8541400-
    90 0000026B 006683C408         
    91 00000270 83F800                      cmp eax, 0
    92 00000273 743D                        je .10E
    93                                  
    94                                      ; キーコードの表示
    95 00000275 68[A8160000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    95 0000027D 02E89E1400006683C4-
    95 00000286 0C                 
    96                                  
    97                                      ; キー押下時の処理
    98 00000287 A0[C8020000]                mov al, [.int_key]
    99 0000028C 3C02                        cmp al, 0x02
   100 0000028E 7522                        jne .12E
   101                                      ; ファイル読み込み
   102 00000290 FF15F09B0000                call [BOOT_LOAD + BOOT_SIZE - 16]   ; ファイル読み込み
   103                                  
   104                                      ; ファイルの内容を表示
   105 00000296 BE00780000                  mov esi, 0x7800
   106 0000029B C6462000                    mov [esi + 32], byte 0
   107 0000029F 5668040F00006A006A-         cdecl draw_str, 0, 0, 0x0F04, esi
   107 000002A8 00E8E10D00006683C4-
   107 000002B1 10                 
   108                                  .12E:
   109                                  
   110                                  .10E:
   111 000002B2 EBA4                        jmp .10L
   112                                  
   113 000002B4 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
   113 000002BD 65726E656C212000   
   114                                  
   115 000002C5 00<rep 3h>              ALIGN 4, db 0
   116 000002C8 00000000                .int_key: dd 0
   117                                  
   118                                  ALIGN 4, db 0
   119 000002CC 00000000                FONT_ADR: dd 0
   120 000002D0 00000000                RTC_TIME: dd 0
   121                                  
   122                                  ; タスク
   123                                  %include "descriptor.s"
   124                              <1> ; ローカルディスクリプタテーブル
   125 000002D4 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   126 000002DC FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   127 000002E4 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   128 000002EC FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   129 000002F4 FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   130 000002FC FFFF000000FACF00    <1> .cs_task_2: dq 0x00CFFA000000FFFF   ; CODE 4G
   131 00000304 FFFF000000F2CF00    <1> .ds_task_2: dq 0x00CFF2000000FFFF   ; DATA 4G
   132 0000030C FFFF000000FACF00    <1> .cs_task_3: dq 0x00CFFA000000FFFF   ; CODE 4G
   133 00000314 FFFF000000F2CF00    <1> .ds_task_3: dq 0x00CFF2000000FFFF   ; DATA 4G
   134 0000031C FFFF000000F2CF00    <1> .ds_task_4: dq 0x00CFF2000000FFFF   ; DATA 4G
   135 00000324 FFFF000000F2CF00    <1> .ds_task_5: dq 0x00CFF2000000FFFF   ; DATA 4G
   136 0000032C FFFF000000F2CF00    <1> .ds_task_6: dq 0x00CFF2000000FFFF   ; DATA 4G
   137                              <1> .end:
   138                              <1> 
   139                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   140                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   141                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   142                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   143                              <1> CS_TASK_2 equ (.cs_task_2 - LDT) | 4 | 3; タスク2用CSセレクタ
   144                              <1> DS_TASK_2 equ (.ds_task_2 - LDT) | 4 | 3; タスク2用DSセレクタ
   145                              <1> CS_TASK_3 equ (.cs_task_3 - LDT) | 4 | 3; タスク3用CSセレクタ
   146                              <1> DS_TASK_3 equ (.ds_task_3 - LDT) | 4 | 3; タスク3用DSセレクタ
   147                              <1> DS_TASK_4 equ (.ds_task_4 - LDT) | 4 | 3; タスク4用DSセレクタ
   148                              <1> DS_TASK_5 equ (.ds_task_5 - LDT) | 4 | 3; タスク5用DSセレクタ
   149                              <1> DS_TASK_6 equ (.ds_task_6 - LDT) | 4 | 3; タスク6用DSセレクタ
   150                              <1> 
   151                              <1> LDT_LIMIT equ .end        - LDT - 1
   152                              <1> 
   153                              <1> ; グローバルディスクリプタテーブル
   154 00000334 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   155 0000033C FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   156 00000344 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   157 0000034C FFFF0000009A0F00    <1> .cs_bit16:  dq 0x000F9A000000FFFF   ; コードセグメント（16ビットセグメント）
   158 00000354 FFFF000000920F00    <1> .ds_bit16:  dq 0x000F92000000FFFF   ; データセグメント（16ビットセグメント）
   159 0000035C 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   160 00000364 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   161 0000036C 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   162 00000374 6700000000890000    <1> .tss_2:     dq 0x0000890000000067   ; TSSディスクリプタ
   163 0000037C 6700000000890000    <1> .tss_3:     dq 0x0000890000000067   ; TSS_3ディスクリプタ
   164 00000384 6700000000890000    <1> .tss_4:     dq 0x0000890000000067   ; TSS_4ディスクリプタ
   165 0000038C 6700000000890000    <1> .tss_5:     dq 0x0000890000000067   ; TSS_5ディスクリプタ
   166 00000394 6700000000890000    <1> .tss_6:     dq 0x0000890000000067   ; TSS_6ディスクリプタ
   167 0000039C 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   168                              <1> .end:
   169                              <1> 
   170                              <1> CS_KERNEL equ .cs_kernel - GDT
   171                              <1> DS_KERNEL equ .ds_kernel - GDT
   172                              <1> SS_LDT    equ .ldt       - GDT
   173                              <1> SS_TASK_0 equ .tss_0     - GDT
   174                              <1> SS_TASK_1 equ .tss_1     - GDT
   175                              <1> SS_TASK_2 equ .tss_2     - GDT
   176                              <1> SS_TASK_3 equ .tss_3     - GDT
   177                              <1> SS_TASK_4 equ .tss_4     - GDT
   178                              <1> SS_TASK_5 equ .tss_5     - GDT
   179                              <1> SS_TASK_6 equ .tss_6     - GDT
   180                              <1> SS_GATE_0 equ .call_gate - GDT
   181                              <1> 
   182 000003A4 6F00                <1> GDTR: dw GDT.end - GDT - 1
   183 000003A6 [34030000]          <1>       dd GDT
   184                              <1> 
   185                              <1> ; TSS
   186                              <1> TSS_0:
   187 000003AA 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   188 000003AE 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   189 000003B2 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   190 000003B6 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   191 000003BA 00000000            <1> .ss1:       dd 0                    ;* 16:
   192 000003BE 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   193 000003C2 00000000            <1> .ss2:       dd 0                    ;* 24:
   194 000003C6 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   195 000003CA 00000000            <1> .eip:       dd 0                    ;  32:EIP
   196 000003CE 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   197 000003D2 00000000            <1> .eax:       dd 0                    ;  40:EAX
   198 000003D6 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   199 000003DA 00000000            <1> .edx:       dd 0                    ;  48:EDX
   200 000003DE 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   201 000003E2 00000000            <1> .esp:       dd 0                    ;  56:ESP
   202 000003E6 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   203 000003EA 00000000            <1> .esi:       dd 0                    ;  64:ESI
   204 000003EE 00000000            <1> .edi:       dd 0                    ;  68:EDI
   205 000003F2 00000000            <1> .es:        dd 0                    ;  72:ES
   206 000003F6 00000000            <1> .cs:        dd 0                    ;  76:CS
   207 000003FA 00000000            <1> .ss:        dd 0                    ;  80:SS
   208 000003FE 00000000            <1> .ds:        dd 0                    ;  84:DS
   209 00000402 00000000            <1> .fs:        dd 0                    ;  88:FS
   210 00000406 00000000            <1> .gs:        dd 0                    ;  92:GS
   211 0000040A 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   212 0000040E 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   213 00000412 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   214                              <1> 
   215                              <1> TSS_1:
   216 00000482 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   217 00000486 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   218 0000048A 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   219 0000048E 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   220 00000492 00000000            <1> .ss1:       dd 0                    ;* 16:
   221 00000496 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   222 0000049A 00000000            <1> .ss2:       dd 0                    ;* 24:
   223 0000049E 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   224 000004A2 [630B0000]          <1> .eip:       dd task_1               ;  32:EIP
   225 000004A6 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   226 000004AA 00000000            <1> .eax:       dd 0                    ;  40:EAX
   227 000004AE 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   228 000004B2 00000000            <1> .edx:       dd 0                    ;  48:EDX
   229 000004B6 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   230 000004BA 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   231 000004BE 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   232 000004C2 00000000            <1> .esi:       dd 0                    ;  64:ESI
   233 000004C6 00000000            <1> .edi:       dd 0                    ;  68:EDI
   234 000004CA 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   235 000004CE 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   236 000004D2 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   237 000004D6 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   238 000004DA 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   239 000004DE 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   240 000004E2 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   241 000004E6 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   242 000004EA 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   243                              <1> 
   244                              <1> TSS_2:
   245 0000055A 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   246 0000055E 003A1000            <1> .esp0:      dd SP_TASK_2 - 512      ;*  4:ESP0
   247 00000562 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   248 00000566 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   249 0000056A 00000000            <1> .ss1:       dd 0                    ;* 16:
   250 0000056E 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   251 00000572 00000000            <1> .ss2:       dd 0                    ;* 24:
   252 00000576 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   253 0000057A [980B0000]          <1> .eip:       dd task_2               ;  32:EIP
   254 0000057E 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   255 00000582 00000000            <1> .eax:       dd 0                    ;  40:EAX
   256 00000586 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   257 0000058A 00000000            <1> .edx:       dd 0                    ;  48:EDX
   258 0000058E 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   259 00000592 003C1000            <1> .esp:       dd SP_TASK_2            ;  56:ESP
   260 00000596 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   261 0000059A 00000000            <1> .esi:       dd 0                    ;  64:ESI
   262 0000059E 00000000            <1> .edi:       dd 0                    ;  68:EDI
   263 000005A2 37000000            <1> .es:        dd DS_TASK_2            ;  72:ES
   264 000005A6 2F000000            <1> .cs:        dd CS_TASK_2            ;  76:CS
   265 000005AA 37000000            <1> .ss:        dd DS_TASK_2            ;  80:SS
   266 000005AE 37000000            <1> .ds:        dd DS_TASK_2            ;  84:DS
   267 000005B2 37000000            <1> .fs:        dd DS_TASK_2            ;  88:FS
   268 000005B6 37000000            <1> .gs:        dd DS_TASK_2            ;  92:GS
   269 000005BA 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   270 000005BE 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   271 000005C2 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   272                              <1> 
   273                              <1> TSS_3:
   274 00000632 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   275 00000636 003E1000            <1> .esp0:      dd SP_TASK_3 - 512      ;*  4:ESP0
   276 0000063A 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   277 0000063E 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   278 00000642 00000000            <1> .ss1:       dd 0                    ;* 16:
   279 00000646 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   280 0000064A 00000000            <1> .ss2:       dd 0                    ;* 24:
   281 0000064E 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   282 00000652 [6C0C0000]          <1> .eip:       dd task_3               ;  32:EIP
   283 00000656 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   284 0000065A 00000000            <1> .eax:       dd 0                    ;  40:EAX
   285 0000065E 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   286 00000662 00000000            <1> .edx:       dd 0                    ;  48:EDX
   287 00000666 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   288 0000066A 00401000            <1> .esp:       dd SP_TASK_3            ;  56:ESP
   289 0000066E 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   290 00000672 00000000            <1> .esi:       dd 0                    ;  64:ESI
   291 00000676 00000000            <1> .edi:       dd 0                    ;  68:EDI
   292 0000067A 47000000            <1> .es:        dd DS_TASK_3            ;  72:ES
   293 0000067E 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   294 00000682 47000000            <1> .ss:        dd DS_TASK_3            ;  80:SS
   295 00000686 47000000            <1> .ds:        dd DS_TASK_3            ;  84:DS
   296 0000068A 47000000            <1> .fs:        dd DS_TASK_3            ;  88:FS
   297 0000068E 47000000            <1> .gs:        dd DS_TASK_3            ;  92:GS
   298 00000692 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   299 00000696 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   300 0000069A 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   301                              <1> 
   302                              <1> TSS_4:
   303 0000070A 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   304 0000070E 00421000            <1> .esp0:      dd SP_TASK_4 - 512      ;*  4:ESP0
   305 00000712 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   306 00000716 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   307 0000071A 00000000            <1> .ss1:       dd 0                    ;* 16:
   308 0000071E 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   309 00000722 00000000            <1> .ss2:       dd 0                    ;* 24:
   310 00000726 00002000            <1> .cr3:       dd CR3_TASK_4           ;  28:CR3(PDBR)
   311 0000072A [6C0C0000]          <1> .eip:       dd task_3               ;  32:EIP
   312 0000072E 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   313 00000732 00000000            <1> .eax:       dd 0                    ;  40:EAX
   314 00000736 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   315 0000073A 00000000            <1> .edx:       dd 0                    ;  48:EDX
   316 0000073E 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   317 00000742 00441000            <1> .esp:       dd SP_TASK_4            ;  56:ESP
   318 00000746 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   319 0000074A 00000000            <1> .esi:       dd 0                    ;  64:ESI
   320 0000074E 00000000            <1> .edi:       dd 0                    ;  68:EDI
   321 00000752 4F000000            <1> .es:        dd DS_TASK_4            ;  72:ES
   322 00000756 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   323 0000075A 4F000000            <1> .ss:        dd DS_TASK_4            ;  80:SS
   324 0000075E 4F000000            <1> .ds:        dd DS_TASK_4            ;  84:DS
   325 00000762 4F000000            <1> .fs:        dd DS_TASK_4            ;  88:FS
   326 00000766 4F000000            <1> .gs:        dd DS_TASK_4            ;  92:GS
   327 0000076A 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   328 0000076E 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   329 00000772 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   330                              <1> 
   331                              <1> TSS_5:
   332 000007E2 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   333 000007E6 00461000            <1> .esp0:      dd SP_TASK_5 - 512      ;*  4:ESP0
   334 000007EA 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   335 000007EE 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   336 000007F2 00000000            <1> .ss1:       dd 0                    ;* 16:
   337 000007F6 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   338 000007FA 00000000            <1> .ss2:       dd 0                    ;* 24:
   339 000007FE 00202000            <1> .cr3:       dd CR3_TASK_5           ;  28:CR3(PDBR)
   340 00000802 [6C0C0000]          <1> .eip:       dd task_3               ;  32:EIP
   341 00000806 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   342 0000080A 00000000            <1> .eax:       dd 0                    ;  40:EAX
   343 0000080E 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   344 00000812 00000000            <1> .edx:       dd 0                    ;  48:EDX
   345 00000816 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   346 0000081A 00481000            <1> .esp:       dd SP_TASK_5            ;  56:ESP
   347 0000081E 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   348 00000822 00000000            <1> .esi:       dd 0                    ;  64:ESI
   349 00000826 00000000            <1> .edi:       dd 0                    ;  68:EDI
   350 0000082A 57000000            <1> .es:        dd DS_TASK_5            ;  72:ES
   351 0000082E 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   352 00000832 57000000            <1> .ss:        dd DS_TASK_5            ;  80:SS
   353 00000836 57000000            <1> .ds:        dd DS_TASK_5            ;  84:DS
   354 0000083A 57000000            <1> .fs:        dd DS_TASK_5            ;  88:FS
   355 0000083E 57000000            <1> .gs:        dd DS_TASK_5            ;  92:GS
   356 00000842 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   357 00000846 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   358 0000084A 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   359                              <1> 
   360                              <1> TSS_6:
   361 000008BA 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   362 000008BE 004A1000            <1> .esp0:      dd SP_TASK_6 - 512      ;*  4:ESP0
   363 000008C2 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   364 000008C6 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   365 000008CA 00000000            <1> .ss1:       dd 0                    ;* 16:
   366 000008CE 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   367 000008D2 00000000            <1> .ss2:       dd 0                    ;* 24:
   368 000008D6 00402000            <1> .cr3:       dd CR3_TASK_6           ;  28:CR3(PDBR)
   369 000008DA [6C0C0000]          <1> .eip:       dd task_3               ;  32:EIP
   370 000008DE 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   371 000008E2 00000000            <1> .eax:       dd 0                    ;  40:EAX
   372 000008E6 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   373 000008EA 00000000            <1> .edx:       dd 0                    ;  48:EDX
   374 000008EE 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   375 000008F2 004C1000            <1> .esp:       dd SP_TASK_6            ;  56:ESP
   376 000008F6 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   377 000008FA 00000000            <1> .esi:       dd 0                    ;  64:ESI
   378 000008FE 00000000            <1> .edi:       dd 0                    ;  68:EDI
   379 00000902 5F000000            <1> .es:        dd DS_TASK_6            ;  72:ES
   380 00000906 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   381 0000090A 5F000000            <1> .ss:        dd DS_TASK_6            ;  80:SS
   382 0000090E 5F000000            <1> .ds:        dd DS_TASK_6            ;  84:DS
   383 00000912 5F000000            <1> .fs:        dd DS_TASK_6            ;  88:FS
   384 00000916 5F000000            <1> .gs:        dd DS_TASK_6            ;  92:GS
   385 0000091A 28000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   386 0000091E 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   387 00000922 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   124                                  %include "modules/int_timer.s"
   125                              <1> int_timer:
   126 00000992 60                  <1>     pushad
   127 00000993 1E                  <1>     push ds
   128 00000994 06                  <1>     push es
   129                              <1> 
   130                              <1>     ; データ用セグメントの設定
   131 00000995 66B81000            <1>     mov ax, 0x0010
   132 00000999 8ED8                <1>     mov ds, ax
   133 0000099B 8EC0                <1>     mov es, ax
   134                              <1> 
   135                              <1>     ; TICK
   136 0000099D FF05[140A0000]      <1>     inc dword [TIMER_COUNT]
   137                              <1> 
   138                              <1>     ; 割り込みフラグをクリア(EOI)
   139                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 000009A3 B020                <2>  mov al, %2
    50 000009A5 E620                <2>  out %1, al
   140                              <1> 
   141                              <1>     ; タスクの切り替え(task0 -> task1 -> task2 -> task0 -> ...)
   142 000009A7 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   143 000009AB 6683F830            <1>     cmp ax, SS_TASK_0   ; switch(ax)
   144 000009AF 7427                <1>     je .11L
   145 000009B1 6683F838            <1>     cmp ax, SS_TASK_1
   146 000009B5 742A                <1>     je .12L
   147 000009B7 6683F840            <1>     cmp ax, SS_TASK_2
   148 000009BB 742D                <1>     je .13L
   149 000009BD 6683F848            <1>     cmp ax, SS_TASK_3
   150 000009C1 7430                <1>     je .14L
   151 000009C3 6683F850            <1>     cmp ax, SS_TASK_4
   152 000009C7 7433                <1>     je .15L
   153 000009C9 6683F858            <1>     cmp ax, SS_TASK_5
   154 000009CD 7436                <1>     je .16L
   155                              <1> 
   156 000009CF EA000000003000      <1>     jmp SS_TASK_0:0     ; default:
   157 000009D6 EB36                <1>     jmp .10E
   158                              <1> .11L:                   ; case SS_TASK_0:
   159 000009D8 EA000000003800      <1>     jmp SS_TASK_1:0     ; タスク1に切り替え
   160 000009DF EB2D                <1>     jmp .10E
   161                              <1> .12L:                   ; case SS_TASK_1:
   162 000009E1 EA000000004000      <1>     jmp SS_TASK_2:0     ; タスク2に切り替え
   163 000009E8 EB24                <1>     jmp .10E
   164                              <1> .13L:                   ; case SS_TASK_2:
   165 000009EA EA000000004800      <1>     jmp SS_TASK_3:0     ; タスク3に切り替え
   166 000009F1 EB1B                <1>     jmp .10E
   167                              <1> .14L:                   ; case SS_TASK_3:
   168 000009F3 EA000000005000      <1>     jmp SS_TASK_4:0     ; タスク4に切り替え
   169 000009FA EB12                <1>     jmp .10E
   170                              <1> .15L:                   ; case SS_TASK_4:
   171 000009FC EA000000005800      <1>     jmp SS_TASK_5:0     ; タスク5に切り替え
   172 00000A03 EB09                <1>     jmp .10E
   173                              <1> .16L:                   ; case SS_TASK_5:
   174 00000A05 EA000000006000      <1>     jmp SS_TASK_6:0     ; タスク6に切り替え
   175 00000A0C EB00                <1>     jmp .10E
   176                              <1> .10E:
   177                              <1> 
   178 00000A0E 07                  <1>     pop es
   179 00000A0F 1F                  <1>     pop ds
   180 00000A10 61                  <1>     popad
   181                              <1> 
   182 00000A11 CF                  <1>     iret
   183                              <1> 
   184 00000A12 00<rep 2h>          <1> ALIGN 4, db 0
   185 00000A14 00000000            <1> TIMER_COUNT: dd 0
   186                              <1> 
   125                                  %include "modules/paging.s"
   126                              <1> init_page:
   127 00000A18 60                  <1>     pusha
   128                              <1> 
   129 00000A19 6800501000E8970000- <1>     cdecl page_set_4m, CR3_BASE     ; ページ変換テーブルの作成 タスク3用
   129 00000A22 006683C404          <1>
   130 00000A27 6800002000E8890000- <1>     cdecl page_set_4m, CR3_TASK_4   ; ページ変換テーブルの作成 タスク4用
   130 00000A30 006683C404          <1>
   131 00000A35 6800202000E87B0000- <1>     cdecl page_set_4m, CR3_TASK_5   ; ページ変換テーブルの作成 タスク5用
   131 00000A3E 006683C404          <1>
   132 00000A43 6800402000E86D0000- <1>     cdecl page_set_4m, CR3_TASK_6   ; ページ変換テーブルの作成 タスク5用
   132 00000A4C 006683C404          <1>
   133 00000A51 C7051C641000000000- <1>     mov [0x0010_6000 + 0x107 * 4], dword 0   ; 0x0010_7000をページ不在に設定
   133 00000A5A 00                  <1>
   134                              <1> 
   135                              <1>     ; アドレス変換設定
   136 00000A5B C7051C142000078010- <1>     mov [0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7   ; タスク4用
   136 00000A64 00                  <1>
   137 00000A65 C7051C342000079010- <1>     mov [0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7   ; タスク5用
   137 00000A6E 00                  <1>
   138 00000A6F C7051C54200007A010- <1>     mov [0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7   ; タスク6用
   138 00000A78 00                  <1>
   139                              <1> 
   140                              <1>     ; 描画パラメータの設定
   141 00000A79 6A4068[AC0D0000]68- <1>     cdecl memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size    ; タスク4用
   141 00000A81 00801000E8580E0000- <1>
   141 00000A8A 6683C40C            <1>
   142 00000A8E 6A4068[EC0D0000]68- <1>     cdecl memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size    ; タスク5用
   142 00000A96 00901000E8430E0000- <1>
   142 00000A9F 6683C40C            <1>
   143 00000AA3 6A4068[2C0E0000]68- <1>     cdecl memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size    ; タスク6用
   143 00000AAB 00A01000E82E0E0000- <1>
   143 00000AB4 6683C40C            <1>
   144                              <1> 
   145 00000AB8 61                  <1>     popa
   146                              <1> 
   147 00000AB9 C3                  <1>     ret
   148                              <1> 
   149                              <1> 
   150                              <1> page_set_4m:
   151 00000ABA 55                  <1>     push ebp
   152 00000ABB 89E5                <1>     mov ebp, esp
   153                              <1> 
   154 00000ABD 60                  <1>     pusha
   155                              <1> 
   156                              <1>     ; ページディレクトリの作成
   157 00000ABE FC                  <1>     cld                     ; dfをクリア (+方向)
   158 00000ABF 8B7D08              <1>     mov edi, [ebp + 8]      ; EDI = ページディレクトリの先頭
   159 00000AC2 B800000000          <1>     mov eax, 0x00000000     ; EAX = 0   P = 0
   160 00000AC7 B900040000          <1>     mov ecx, 1024           ; count = 1024
   161 00000ACC F3AB                <1>     rep stosd               ; while(ecx--) *(edi++) = eax;
   162                              <1> 
   163                              <1>     ; 先頭のエントリを設定
   164 00000ACE 89F8                <1>     mov eax, edi            ; ページディレクトリの直後
   165 00000AD0 2500F0FFFF          <1>     and eax, ~0x0000_0FFF   ; 物理アドレスの指定
   166 00000AD5 83C807              <1>     or eax, 7               ; U/S R/W Pの許可
   167 00000AD8 898700F0FFFF        <1>     mov [edi - (1024 * 4)], eax ; 先頭のエントリを設定
   168                              <1> 
   169                              <1>     ; ページングテーブルの設定(リニア)
   170 00000ADE B807000000          <1>     mov eax, 0x00000007     ; 物理アドレスの指定とU/S R/W Pの許可
   171 00000AE3 B900040000          <1>     mov ecx, 1024           ; count = 1024
   172                              <1> .10L:                       ; do {
   173 00000AE8 AB                  <1>     stosd                   ;   *(edi++) = eax
   174 00000AE9 0500100000          <1>     add eax, 0x00001000     ;   eax += 0x1000
   175 00000AEE E2F8                <1>     loop .10L               ; } while(--count)
   176                              <1> 
   177 00000AF0 61                  <1>     popa
   178                              <1> 
   179 00000AF1 89EC                <1>     mov esp, ebp
   180 00000AF3 5D                  <1>     pop ebp
   181                              <1> 
   182 00000AF4 C3                  <1>     ret
   126                                  %include "modules/int_pf.s"
   127                              <1> int_pf:
   128 00000AF5 55                  <1>     push ebp
   129 00000AF6 89E5                <1>     mov ebp, esp
   130                              <1> 
   131 00000AF8 60                  <1>     pusha
   132 00000AF9 1E                  <1>     push ds
   133 00000AFA 06                  <1>     push es
   134                              <1> 
   135                              <1>     ; データ用セグメントセレクタの設定
   136 00000AFB 66B81000            <1>     mov ax, 0x0010
   137 00000AFF 8ED8                <1>     mov ds, ax
   138 00000B01 8EC0                <1>     mov es, ax
   139                              <1> 
   140                              <1>     ; 例外を生成したアドレスの確認
   141 00000B03 0F20D0              <1>     mov eax, cr2            ; ページフォルトの際アクセスしようとしたアドレス
   142 00000B06 2500F0FFFF          <1>     and eax, ~0x0FFF        ; 4KB 以内のアクセス
   143 00000B0B 3D00701000          <1>     cmp eax, 0x0010_7000    ; if(アクセスしようとしたアドレス!=0x0010_7000) goto .10F
   144 00000B10 7521                <1>     jne .10F
   145                              <1> 
   146 00000B12 C7051C641000077010- <1>     mov [0x00106000 + 0x107 * 4], dword 0x00107007  ; ページの有効化
   146 00000B1B 00                  <1>
   147 00000B1C 6A4068[6C0D0000]68- <1>     cdecl memcpy, 0x0010_7000, DRAW_PARAM, rose_size; 描画パラメータのコピー
   147 00000B24 00701000E8B50D0000- <1>
   147 00000B2D 6683C40C            <1>
   148 00000B31 EB15                <1>     jmp .10E
   149                              <1> 
   150                              <1> .10F:
   151                              <1>     ; スタックの調整
   152 00000B33 83C404              <1>     add esp, 4      ; pop es
   153 00000B36 83C404              <1>     add esp, 4      ; pop ds
   154 00000B39 61                  <1>     popa
   155 00000B3A 5D                  <1>     pop ebp
   156                              <1> 
   157                              <1>     ; タスク終了処理
   158 00000B3B 9C                  <1>     pushf           ; EFLAGS
   159 00000B3C 0E                  <1>     push cs         ; CS
   160 00000B3D 68[8C140000]        <1>     push int_stop   ; スタック表示処理
   161                              <1> 
   162 00000B42 B8[520B0000]        <1>     mov eax, .s0    ; 割り込み種別
   163 00000B47 CF                  <1>     iret
   164                              <1> 
   165                              <1> .10E:
   166                              <1> 
   167 00000B48 07                  <1>     pop es
   168 00000B49 1F                  <1>     pop ds
   169 00000B4A 61                  <1>     popa
   170                              <1> 
   171 00000B4B 89EC                <1>     mov esp, ebp
   172 00000B4D 5D                  <1>     pop ebp
   173                              <1> 
   174 00000B4E 83C404              <1>     add esp, 4  ; エラーコードの破棄
   175 00000B51 CF                  <1>     iret
   176                              <1> 
   177 00000B52 203C20504147452046- <1> .s0 db " < PAGE FAULT > ", 0
   177 00000B5B 41554C54203E2000    <1>
   127                                  %include "tasks/task_1.s"
   128                              <1> task_1:
   129                              <1>     ; 文字列の表示(コールゲート)
   130                              <1>     ;cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   131 00000B63 68[910B0000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0 ; draw_str();
   131 00000B6B 006A3FE81C05000066- <1>
   131 00000B74 83C410              <1>
   132                              <1> 
   133                              <1> .10L:
   134                              <1>     ; 時刻の表示
   135 00000B77 A1[D0020000]        <1>     mov eax, [RTC_TIME]
   136 00000B7C 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   136 00000B85 48E8770800006683C4- <1>
   136 00000B8E 10                  <1>
   137                              <1> 
   138 00000B8F EBE6                <1>     jmp .10L
   139                              <1> 
   140                              <1>     ; データ
   141 00000B91 5461736B2D3100      <1> .s0 db "Task-1", 0
   128                                  %include "tasks/task_2.s"
   129                              <1> task_2:
   130 00000B98 68[5E0C0000]6A076A- <1>     cdecl draw_str, 63, 1, 0x07, .s0
   130 00000BA0 016A3FE8E704000066- <1>
   130 00000BA9 83C410              <1>
   131                              <1> 
   132 00000BAC DB05[4C0C0000]      <1>     fild dword [.c1000]     ; st0 = [.c1000]
   133 00000BB2 D9EB                <1>     fldpi           ; st0 = pi
   134 00000BB4 DA35[500C0000]      <1>     fidiv dword [.c180]     ; st0 /= [.c180]
   135 00000BBA D9EB                <1>     fldpi
   136 00000BBC DCC0                <1>     fadd st0, st0   ; st0 += st0
   137 00000BBE D9EE                <1>     fldz            ; st0 = 0
   138                              <1>     ; st0   0
   139                              <1>     ; st1   2*pi
   140                              <1>     ; st2   pi/180
   141                              <1>     ; st3   1000
   142                              <1> 
   143                              <1> .10L:
   144 00000BC0 D8C2                <1>     fadd st0, st2   ; st0 += st2
   145 00000BC2 D9F8                <1>     fprem           ; st0 %= st1
   146 00000BC4 D9C0                <1>     fld st0         ; st0をコピー
   147 00000BC6 D9FE                <1>     fsin            ; st0 = sin(st0)
   148 00000BC8 D8CC                <1>     fmul st0, st4   ; st0 *= 1000
   149 00000BCA DF35[540C0000]      <1>     fbstp [.bcd]
   150                              <1> 
   151 00000BD0 A1[540C0000]        <1>     mov eax, [.bcd]
   152 00000BD5 89C3                <1>     mov ebx, eax
   153                              <1> 
   154 00000BD7 250F0F0000          <1>     and eax, 0x0F0F ; 上位４ビットをマスク
   155 00000BDC 0D30300000          <1>     or eax, 0x3030  ; 上位４ビットに0x3に設定
   156                              <1> 
   157 00000BE1 C1EB04              <1>     shr ebx, 4
   158 00000BE4 81E30F0F0000        <1>     and ebx, 0x0F0F ; 上位４ビットをマスク
   159 00000BEA 81CB30300000        <1>     or ebx, 0x3030  ; 上位４ビットに0x3に設定
   160                              <1> 
   161 00000BF0 883D[660C0000]      <1>     mov [.s2 + 0], bh   ; 1桁目
   162 00000BF6 8825[680C0000]      <1>     mov [.s3 + 0], ah   ; 小数1桁目
   163 00000BFC 881D[690C0000]      <1>     mov [.s3 + 1], bl   ; 小数2桁目
   164 00000C02 A2[6A0C0000]        <1>     mov [.s3 + 2], al   ; 小数3桁目
   165                              <1> 
   166 00000C07 B807000000          <1>     mov eax, 7
   167 00000C0C 0FA305[5D0C0000]    <1>     bt [.bcd + 9], eax  ; cf = .bcd+9 から7ビット目
   168 00000C13 7209                <1>     jc .10F
   169                              <1> 
   170 00000C15 C605[650C0000]2B    <1>     mov [.s1 + 0], byte '+'
   171 00000C1C EB07                <1>     jmp .10E
   172                              <1> .10F:
   173 00000C1E C605[650C0000]2D    <1>     mov [.s1 + 0], byte '-'
   174                              <1> .10E:
   175                              <1> 
   176 00000C25 68[650C0000]6A076A- <1>     cdecl draw_str, 72, 1, 0x07, .s1
   176 00000C2D 016A48E85A04000066- <1>
   176 00000C36 83C410              <1>
   177                              <1> 
   178                              <1>     ; ウェイト
   179 00000C39 6A14E8840C00006683- <1>     cdecl wait_tick, 20
   179 00000C42 C404                <1>
   180                              <1> 
   181 00000C44 E977FFFFFF          <1>     jmp .10L
   182                              <1> 
   183                              <1> 
   184 00000C49 00<rep 3h>          <1> ALIGN 4, db 0
   185 00000C4C E8030000            <1> .c1000: dd 1000
   186 00000C50 B4000000            <1> .c180:  dd 180
   187 00000C54 00<rep Ah>          <1> .bcd: times 10 db 0x00
   188 00000C5E 5461736B2D3200      <1> .s0     db "Task-2", 0
   189 00000C65 2D                  <1> .s1:    db "-"
   190 00000C66 302E                <1> .s2:    db "0."
   191 00000C68 30303000            <1> .s3:    db "000", 0
   129                                  %include "tasks/task_3.s"
   130                              <1> task_3:
   131 00000C6C 89E5                <1>     mov ebp, esp
   132                              <1> 
   133 00000C6E 6A00                <1>     push dword 0    ; x0    x座標原点
   134 00000C70 6A00                <1>     push dword 0    ; y0    y座標原点
   135 00000C72 6A00                <1>     push dword 0    ; x     x座標描画
   136 00000C74 6A00                <1>     push dword 0    ; y     y座標描画
   137 00000C76 6A00                <1>     push dword 0    ; r     角度
   138                              <1> 
   139                              <1>     ; 初期化
   140                              <1>     ;mov esi, DRAW_PARAM ; esi = 描画パラメータ
   141 00000C78 BE00701000          <1>     mov esi, 0x0010_7000
   142                              <1> 
   143                              <1>     ; タイトル表示
   144 00000C7D 8B06                <1>     mov eax, [esi + rose.x0]
   145 00000C7F 8B5E04              <1>     mov ebx, [esi + rose.y0]
   146                              <1> 
   147 00000C82 C1E803              <1>     shr eax, 3                      ; EAX = EAX /  8 x座標を文字位置に変換
   148 00000C85 C1EB04              <1>     shr ebx, 4                      ; EBX = EBX / 16 y座標を文字位置に変換
   149 00000C88 4B                  <1>     dec ebx                         ; 1文字分上に移動
   150 00000C89 8B4E24              <1>     mov ecx, [esi + rose.color_s]   ; 文字色
   151 00000C8C 8D5630              <1>     lea edx, [esi + rose.title]     ; タイトル
   152                              <1> 
   153 00000C8F 52515350E8F7030000- <1>     cdecl draw_str, eax, ebx, ecx, edx
   153 00000C98 6683C410            <1>
   154                              <1> 
   155                              <1>     ; X軸の中点
   156 00000C9C 8B06                <1>     mov eax, [esi + rose.x0]
   157 00000C9E 8B5E08              <1>     mov ebx, [esi + rose.x1]
   158 00000CA1 29C3                <1>     sub ebx, eax            ; ebx = x0 - x1
   159 00000CA3 D1EB                <1>     shr ebx, 1              ; ebx /= 1
   160 00000CA5 01C3                <1>     add ebx, eax            ; ebx += x0
   161 00000CA7 895DFC              <1>     mov [ebp - 4], ebx      ; x0 = 原点
   162                              <1> 
   163                              <1>     ; Y軸の中点
   164 00000CAA 8B4604              <1>     mov eax, [esi + rose.y0]
   165 00000CAD 8B5E0C              <1>     mov ebx, [esi + rose.y1]
   166 00000CB0 29C3                <1>     sub ebx, eax            ; ebx = y0 - y1
   167 00000CB2 D1EB                <1>     shr ebx, 1              ; ebx /= 1
   168 00000CB4 01C3                <1>     add ebx, eax            ; ebx += y0
   169 00000CB6 895DF8              <1>     mov [ebp - 8], ebx      ; y0 = 原点
   170                              <1> 
   171                              <1>     ; X軸の描画
   172 00000CB9 8B06                <1>     mov eax, [esi + rose.x0]
   173 00000CBB 8B5DF8              <1>     mov ebx, [ebp - 8]
   174 00000CBE 8B4E08              <1>     mov ecx, [esi + rose.x1]
   175                              <1> 
   176 00000CC1 FF761853515350E855- <1>     cdecl draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   176 00000CCA 0500006683C414      <1>
   177                              <1> 
   178                              <1>     ; Y軸の描画
   179 00000CD1 8B4604              <1>     mov eax, [esi + rose.y0]
   180 00000CD4 8B5DFC              <1>     mov ebx, [ebp - 4]
   181 00000CD7 8B4E0C              <1>     mov ecx, [esi + rose.y1]
   182                              <1> 
   183 00000CDA FF761C51535053E83C- <1>     cdecl draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   183 00000CE3 0500006683C414      <1>
   184                              <1> 
   185                              <1>     ; 枠の描画
   186 00000CEA 8B06                <1>     mov eax, [esi + rose.x0]
   187 00000CEC 8B5E04              <1>     mov ebx, [esi + rose.y0]
   188 00000CEF 8B4E08              <1>     mov ecx, [esi + rose.x1]
   189 00000CF2 8B560C              <1>     mov edx, [esi + rose.y1]
   190                              <1> 
   191 00000CF5 FF762052515350E8D0- <1>     cdecl draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   191 00000CFE 0500006683C414      <1>
   192                              <1> 
   193                              <1>     ; 振幅をX軸の約95%とする
   194 00000D05 8B4608              <1>     mov eax, [esi + rose.x1]
   195 00000D08 2B06                <1>     sub eax, [esi + rose.x0]
   196 00000D0A D1E8                <1>     shr eax, 1                  ; eax = 原点から右端の長さ
   197 00000D0C 89C3                <1>     mov ebx, eax
   198 00000D0E C1EB04              <1>     shr ebx, 4
   199 00000D11 29D8                <1>     sub eax, ebx
   200                              <1> 
   201                              <1>     ; FPUの初期化（バラ曲線の初期化）
   202 00000D13 FF7614FF761050E84D- <1>     cdecl fpu_rose_init            , eax            , dword [esi + rose.n]            , dword [esi + rose.d]
   202 00000D1C 0100006683C40C      <1>
   206                              <1> 
   207                              <1>     ; メインループ
   208                              <1> .10L:
   209                              <1>     ; 座標計算
   210 00000D23 8D5DF4              <1>     lea ebx, [ebp -12]  ; EBX = &x;
   211 00000D26 8D4DF0              <1>     lea ecx, [ebp -16]  ; ECX = &y;
   212 00000D29 8B45EC              <1>     mov eax, [ebp -20]  ; EAX = r;
   213                              <1> 
   214 00000D2C 505153E85201000066- <1>     cdecl fpu_rose_update            , ebx            , ecx            , eax
   214 00000D35 83C40C              <1>
   218                              <1> 
   219                              <1>     ; 角度更新(r = r % 36000)
   220 00000D38 BA00000000          <1>     mov edx, 0
   221 00000D3D 40                  <1>     inc eax
   222 00000D3E BBA08C0000          <1>     mov ebx, 360 * 100
   223 00000D43 F7F3                <1>     div ebx             ; EDX = EDX:EAX % EBX
   224 00000D45 8955EC              <1>     mov [ebp -20], edx
   225                              <1> 
   226                              <1>     ; ドット描画
   227 00000D48 8B4DF4              <1>     mov ecx, [ebp -12]  ; x座標
   228 00000D4B 8B55F0              <1>     mov edx, [ebp -16]  ; y座標
   229                              <1> 
   230 00000D4E 034DFC              <1>     add ecx, [ebp - 4]  ; x座標原点
   231 00000D51 0355F8              <1>     add edx, [ebp - 8]  ; y座標原点
   232                              <1> 
   233 00000D54 8B5E28              <1>     mov ebx, [esi + rose.color_f]   ; 表示色
   234 00000D57 CD82                <1>     int 0x82            ; sys_call_82(表示色, X, Y)
   235                              <1> 
   236                              <1>     ; ウェイト
   237 00000D59 6A02E8640B00006683- <1>     cdecl wait_tick, 2
   237 00000D62 C404                <1>
   238                              <1> 
   239                              <1>     ; ドット描画(消去)
   240 00000D64 8B5E2C              <1>     mov ebx, [esi + rose.color_b]   ; 背景色
   241 00000D67 CD82                <1>     int 0x82           ; sys_call_82(表示色, X, Y)
   242                              <1> 
   243 00000D69 EBB8                <1>     jmp .10L
   244                              <1> 
   245                              <1> 
   246 00000D6B 00                  <1> ALIGN 4, db 0
   247                              <1> DRAW_PARAM:
   248                              <1> .t3:
   249                              <1>     istruc rose
   250 00000D6C 20000000            <1>         at rose.x0,         dd  32
   251 00000D70 20000000            <1>         at rose.y0,         dd  32
   252 00000D74 D0000000            <1>         at rose.x1,         dd 208
   253 00000D78 D0000000            <1>         at rose.y1,         dd 208
   254                              <1> 
   255 00000D7C 02000000            <1>         at rose.n,          dd 2
   256 00000D80 01000000            <1>         at rose.d,          dd 1
   257                              <1> 
   258 00000D84 07000000            <1>         at rose.color_x,    dd 0x007
   259 00000D88 07000000            <1>         at rose.color_y,    dd 0x007
   260 00000D8C 0F000000            <1>         at rose.color_z,    dd 0x00F
   261 00000D90 0F030000            <1>         at rose.color_s,    dd 0x30F
   262 00000D94 0F000000            <1>         at rose.color_f,    dd 0x00F
   263 00000D98 03000000            <1>         at rose.color_b,    dd 0x003
   264                              <1> 
   265 00000D9C 5461736B2D3300      <1>         at rose.title,      db "Task-3", 0
   266 00000DA3 00<rep 9h>          <1>     iend
   267                              <1> .t4:
   268                              <1>     istruc rose
   269 00000DAC F8000000            <1>         at rose.x0,         dd 248
   270 00000DB0 20000000            <1>         at rose.y0,         dd  32
   271 00000DB4 A8010000            <1>         at rose.x1,         dd 424
   272 00000DB8 D0000000            <1>         at rose.y1,         dd 208
   273                              <1> 
   274 00000DBC 03000000            <1>         at rose.n,          dd 3
   275 00000DC0 01000000            <1>         at rose.d,          dd 1
   276                              <1> 
   277 00000DC4 07000000            <1>         at rose.color_x,    dd 0x007
   278 00000DC8 07000000            <1>         at rose.color_y,    dd 0x007
   279 00000DCC 0F000000            <1>         at rose.color_z,    dd 0x00F
   280 00000DD0 0F030000            <1>         at rose.color_s,    dd 0x30F
   281 00000DD4 0F000000            <1>         at rose.color_f,    dd 0x00F
   282 00000DD8 04000000            <1>         at rose.color_b,    dd 0x004
   283                              <1> 
   284 00000DDC 5461736B2D3400      <1>         at rose.title,      db "Task-4", 0
   285 00000DE3 00<rep 9h>          <1>     iend
   286                              <1> .t5:
   287                              <1>     istruc rose
   288 00000DEC 20000000            <1>         at rose.x0,         dd  32
   289 00000DF0 10010000            <1>         at rose.y0,         dd 272
   290 00000DF4 D0000000            <1>         at rose.x1,         dd 208
   291 00000DF8 C0010000            <1>         at rose.y1,         dd 448
   292                              <1> 
   293 00000DFC 02000000            <1>         at rose.n,          dd 2
   294 00000E00 06000000            <1>         at rose.d,          dd 6
   295                              <1> 
   296 00000E04 07000000            <1>         at rose.color_x,    dd 0x007
   297 00000E08 07000000            <1>         at rose.color_y,    dd 0x007
   298 00000E0C 0F000000            <1>         at rose.color_z,    dd 0x00F
   299 00000E10 0F030000            <1>         at rose.color_s,    dd 0x30F
   300 00000E14 0F000000            <1>         at rose.color_f,    dd 0x00F
   301 00000E18 05000000            <1>         at rose.color_b,    dd 0x005
   302                              <1> 
   303 00000E1C 5461736B2D3500      <1>         at rose.title,      db "Task-5", 0
   304 00000E23 00<rep 9h>          <1>     iend
   305                              <1> .t6:
   306                              <1>     istruc rose
   307 00000E2C F8000000            <1>         at rose.x0,         dd 248
   308 00000E30 10010000            <1>         at rose.y0,         dd 272
   309 00000E34 A8010000            <1>         at rose.x1,         dd 424
   310 00000E38 C0010000            <1>         at rose.y1,         dd 448
   311                              <1> 
   312 00000E3C 04000000            <1>         at rose.n,          dd 4
   313 00000E40 06000000            <1>         at rose.d,          dd 6
   314                              <1> 
   315 00000E44 07000000            <1>         at rose.color_x,    dd 0x007
   316 00000E48 07000000            <1>         at rose.color_y,    dd 0x007
   317 00000E4C 0F000000            <1>         at rose.color_z,    dd 0x00F
   318 00000E50 0F030000            <1>         at rose.color_s,    dd 0x30F
   319 00000E54 0F000000            <1>         at rose.color_f,    dd 0x00F
   320 00000E58 06000000            <1>         at rose.color_b,    dd 0x006
   321                              <1> 
   322 00000E5C 5461736B2D3600      <1>         at rose.title,      db "Task-6", 0
   323 00000E63 00<rep 9h>          <1>     iend
   324                              <1> 
   325                              <1> fpu_rose_init:
   326 00000E6C 55                  <1>     push ebp
   327 00000E6D 89E5                <1>     mov ebp, esp
   328                              <1> 
   329 00000E6F 68B4000000          <1>     push dword 180
   330                              <1> 
   331 00000E74 D9EB                <1>     fldpi
   332 00000E76 DA75FC              <1>     fidiv dword [ebp - 4]   ; 180
   333 00000E79 DB450C              <1>     fild  dword [ebp +12]   ; n
   334 00000E7C DA7510              <1>     fidiv dword [ebp +16]   ; d
   335 00000E7F DB4508              <1>     fild  dword [ebp + 8]   ; A
   336                              <1> 
   337 00000E82 89EC                <1>     mov esp, ebp
   338 00000E84 5D                  <1>     pop ebp
   339                              <1> 
   340 00000E85 C3                  <1>     ret
   341                              <1> 
   342                              <1> fpu_rose_update:
   343                              <1> ; px: 計算したX座標を格納するアドレス
   344                              <1> ; py: 計算したY座標を格納するアドレス
   345                              <1> ; t:  角度
   346                              <1> 
   347 00000E86 55                  <1>     push ebp
   348 00000E87 89E5                <1>     mov ebp, esp
   349                              <1> 
   350 00000E89 50                  <1>     push eax
   351 00000E8A 53                  <1>     push ebx
   352                              <1> 
   353 00000E8B 8B4508              <1>     mov eax, [ebp +  8] ; eax = px
   354 00000E8E 8B5D0C              <1>     mov ebx, [ebp + 12] ; ebx = py
   355                              <1> 
   356 00000E91 DB4510              <1>     fild dword [ebp +16]    ; t
   357 00000E94 D8CB                <1>     fmul st0, st3           ; st0 = t * r = θ
   358 00000E96 D9C0                <1>     fld st0
   359                              <1> 
   360 00000E98 D9FB                <1>     fsincos                 ; st0 = cos(st0)
   361                              <1>                             ; st1 = sin(st0)
   362                              <1>     
   363 00000E9A D9CA                <1>     fxch st2                ; st0 <-> st2
   364 00000E9C D8CC                <1>     fmul st0, st4           ; st0 = kθ
   365 00000E9E D9FE                <1>     fsin                    ; st0 = sin(kθ)
   366 00000EA0 D8CB                <1>     fmul st0, st3           ; st0 = Asin(kθ)
   367                              <1> 
   368                              <1>     ; st0 = Asin(kθ)
   369                              <1>     ; st1 = sin(θ)
   370                              <1>     ; st2 = cos(θ)
   371                              <1>     ; st3 = A
   372                              <1>     ; st4 = k
   373                              <1>     ; st5 = r
   374                              <1> 
   375 00000EA2 D9CA                <1>     fxch st2                ; cosをst0に
   376 00000EA4 D8CA                <1>     fmul st0, st2           ; st0 *= Asin(kθ)
   377 00000EA6 DB18                <1>     fistp dword [eax]       ; st0を[eax]にpop
   378                              <1> 
   379 00000EA8 DEC9                <1>     fmulp st1, st0          ; st1 *= st0; st0をpop
   380 00000EAA D9E0                <1>     fchs                    ; st0 * (-1)
   381 00000EAC DB1B                <1>     fistp dword [ebx]       ; st0を[ebx]にpop
   382                              <1> 
   383 00000EAE 5B                  <1>     pop ebx
   384 00000EAF 58                  <1>     pop eax
   385 00000EB0 89EC                <1>     mov esp, ebp
   386 00000EB2 5D                  <1>     pop ebp
   387                              <1> 
   388 00000EB3 C3                  <1>     ret
   130                                  
   131                                  ; モジュール
   132                                  %include "../modules/protect/vga.s"
   133                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   134                              <1> ; plane: 読み込みプレーン
   135 00000EB4 55                  <1>     push ebp
   136 00000EB5 89E5                <1>     mov ebp, esp
   137                              <1> 
   138 00000EB7 50                  <1>     push eax
   139 00000EB8 52                  <1>     push edx
   140                              <1> 
   141                              <1> 
   142                              <1>     ; 読み込みプレーンの選択
   143 00000EB9 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   144 00000EBC 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   145 00000EBF B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   146 00000EC1 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   147 00000EC5 66EF                <1>     out dx, ax
   148                              <1> 
   149 00000EC7 5A                  <1>     pop edx
   150 00000EC8 58                  <1>     pop eax
   151                              <1> 
   152 00000EC9 89EC                <1>     mov esp, ebp
   153 00000ECB 5D                  <1>     pop ebp
   154                              <1> 
   155 00000ECC C3                  <1>     ret
   156                              <1> 
   157                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   158                              <1> ; plane 書き込みプレーン
   159 00000ECD 55                  <1>     push ebp
   160 00000ECE 89E5                <1>     mov ebp, esp
   161                              <1> 
   162 00000ED0 6650                <1>     push ax
   163 00000ED2 6652                <1>     push dx
   164                              <1> 
   165                              <1> 
   166                              <1>     ; 書き込みプレーンの選択
   167 00000ED4 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   168 00000ED7 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   169 00000EDA B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   170 00000EDC 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   171 00000EE0 66EF                <1>     out dx, ax
   172                              <1> 
   173                              <1> 
   174 00000EE2 665A                <1>     pop dx
   175 00000EE4 6658                <1>     pop ax
   176                              <1> 
   177 00000EE6 89EC                <1>     mov esp, ebp
   178 00000EE8 5D                  <1>     pop ebp
   179                              <1> 
   180 00000EE9 C3                  <1>     ret
   181                              <1> 
   182                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   183                              <1> ; font FONTアドレス
   184                              <1> ; vram VRAMアドレス
   185                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   186                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   187 00000EEA 55                  <1>     push ebp
   188 00000EEB 89E5                <1>     mov ebp, esp
   189                              <1>     
   190 00000EED 50                  <1>     push eax
   191 00000EEE 53                  <1>     push ebx
   192 00000EEF 51                  <1>     push ecx
   193 00000EF0 52                  <1>     push edx
   194 00000EF1 57                  <1>     push edi
   195 00000EF2 56                  <1>     push esi
   196                              <1> 
   197 00000EF3 8B7508              <1>     mov esi, [ebp + 8]          ; font
   198 00000EF6 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   199 00000EF9 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   200 00000EFD 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   201                              <1>     ; bh = 背景色 bl = 前景色
   202                              <1> 
   203 00000F01 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   204 00000F03 0F94C6              <1>     setz dh         ; dh = zf
   205 00000F06 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   206                              <1> 
   207 00000F08 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   208 00000F0A 0F94C2              <1>     setz dl         ; dl = zf
   209 00000F0D FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   210                              <1> 
   211                              <1>     ; 16ドットフォントのコピー
   212 00000F0F FC                  <1>     cld             ; アドレス加算モード
   213                              <1> 
   214 00000F10 B910000000          <1>     mov ecx, 16
   215                              <1> .10L:
   216                              <1>     ; フォントマスクの作成
   217 00000F15 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   218 00000F16 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   219 00000F18 F6D4                <1>     not ah
   220                              <1> 
   221                              <1>     ; 前景色
   222 00000F1A 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   223                              <1> 
   224                              <1>     ; 背景色
   225 00000F1C F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   226 00000F22 7404                <1>     jz .11F
   227                              <1>     ; 透過on
   228 00000F24 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   229 00000F26 EB02                <1>     jmp .11E
   230                              <1> .11F:                   ; 透過off
   231 00000F28 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   232                              <1> .11E:
   233                              <1>     
   234                              <1>     ; 前景色と背景色を合成
   235 00000F2A 08E0                <1>     or al, ah           ; al = 背景 | 前景
   236                              <1> 
   237                              <1>     ; 新しい値を出力
   238 00000F2C 8807                <1>     mov [edi], al
   239                              <1> 
   240 00000F2E 83C750              <1>     add edi, 80      ; 1行すすめる
   241 00000F31 E2E2                <1>     loop .10L
   242                              <1> .10E:
   243                              <1> 
   244 00000F33 5E                  <1>     pop esi
   245 00000F34 5F                  <1>     pop edi
   246 00000F35 5A                  <1>     pop edx
   247 00000F36 59                  <1>     pop ecx
   248 00000F37 5B                  <1>     pop ebx
   249 00000F38 58                  <1>     pop eax
   250                              <1> 
   251 00000F39 89EC                <1>     mov esp, ebp
   252 00000F3B 5D                  <1>     pop ebp
   253                              <1> 
   254 00000F3C C3                  <1>     ret
   255                              <1> 
   256                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   257                              <1> ; bitデータ
   258                              <1> ; vram VRAMアドレス
   259                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   260                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   261 00000F3D 55                  <1>     push ebp
   262 00000F3E 89E5                <1>     mov ebp, esp
   263                              <1>     
   264 00000F40 50                  <1>     push eax
   265 00000F41 53                  <1>     push ebx
   266 00000F42 57                  <1>     push edi
   267                              <1> 
   268 00000F43 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   269 00000F46 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   270 00000F4A 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   271                              <1>     ; bl = 前景色
   272                              <1> 
   273                              <1>     ; 常に透過モード
   274 00000F4E 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   275 00000F50 0F94C3              <1>     setz bl         ; dl = zf
   276 00000F53 FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   277                              <1> 
   278                              <1>     ; マスク
   279 00000F55 8A4508              <1>     mov al, [ebp + 8]   ; bit
   280 00000F58 88C4                <1>     mov ah, al      ; ah ~= al
   281 00000F5A F6D4                <1>     not ah
   282                              <1> 
   283 00000F5C 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   284 00000F5E 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   285 00000F60 08E0                <1>     or al, ah           ; 背景と前景を合成
   286 00000F62 8807                <1>     mov [edi], al       ; プレーンに書き込み
   287                              <1>     
   288                              <1> 
   289 00000F64 5F                  <1>     pop edi
   290 00000F65 5B                  <1>     pop ebx
   291 00000F66 58                  <1>     pop eax
   292                              <1> 
   293 00000F67 89EC                <1>     mov esp, ebp
   294 00000F69 5D                  <1>     pop ebp
   295                              <1> 
   296 00000F6A C3                  <1>     ret
   133                                  %include "../modules/protect/draw_char.s"
   134                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   135                              <1> ; col 列（0～79）
   136                              <1> ; row 行（0～29）
   137                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   138                              <1> ; ch 文字
   139                              <1> 
   140 00000F6B 55                  <1>     push ebp
   141 00000F6C 89E5                <1>     mov ebp, esp
   142                              <1> 
   143 00000F6E 50                  <1>     push eax
   144 00000F6F 53                  <1>     push ebx
   145 00000F70 51                  <1>     push ecx
   146 00000F71 52                  <1>     push edx
   147 00000F72 56                  <1>     push esi
   148 00000F73 57                  <1>     push edi
   149                              <1> 
   150                              <1> %ifdef USE_TEST_AND_SET
   151 00000F74 68[48100000]E89908- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   151 00000F7C 00006683C404        <1>
   152                              <1> %endif
   153                              <1> 
   154                              <1>     ; コピー元フォントアドレスを設定
   155 00000F82 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   156 00000F86 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   157 00000F89 0335[CC020000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   158                              <1> 
   159                              <1>     ; コピー先アドレスを取得
   160                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   161                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   162 00000F8F 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   163 00000F92 C1E708              <1>     shl edi, 8
   164 00000F95 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   165 00000F9C 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   166                              <1> 
   167                              <1>     ; 1文字分のフォントを出力
   168 00000F9F 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   169                              <1> 
   170                              <1>     ; 輝度I
   171 00000FA3 6A03E80AFFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   171 00000FAC C404                <1>
   172 00000FAE 6A08E818FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   172 00000FB7 C404                <1>
   173 00000FB9 536A085756E827FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   173 00000FC2 FF6683C410          <1>
   174                              <1> 
   175                              <1>     ; 赤R
   176 00000FC7 6A02E8E6FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   176 00000FD0 C404                <1>
   177 00000FD2 6A04E8F4FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   177 00000FDB C404                <1>
   178 00000FDD 536A045756E803FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   178 00000FE6 FF6683C410          <1>
   179                              <1> 
   180                              <1>     ; 緑G
   181 00000FEB 6A01E8C2FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   181 00000FF4 C404                <1>
   182 00000FF6 6A02E8D0FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   182 00000FFF C404                <1>
   183 00001001 536A025756E8DFFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   183 0000100A FF6683C410          <1>
   184                              <1> 
   185                              <1>     ; 青B
   186 0000100F 6A00E89EFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   186 00001018 C404                <1>
   187 0000101A 6A01E8ACFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   187 00001023 C404                <1>
   188 00001025 536A015756E8BBFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   188 0000102E FF6683C410          <1>
   189                              <1> 
   190                              <1> %ifdef USE_TEST_AND_SET
   191 00001033 C705[48100000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   191 0000103B 0000                <1>
   192                              <1> %endif
   193                              <1> 
   194 0000103D 5F                  <1> 	pop		edi
   195 0000103E 5E                  <1> 	pop		esi
   196 0000103F 5A                  <1> 	pop		edx
   197 00001040 59                  <1> 	pop		ecx
   198 00001041 5B                  <1> 	pop		ebx
   199 00001042 58                  <1> 	pop		eax
   200                              <1> 
   201 00001043 89EC                <1>     mov esp, ebp
   202 00001045 5D                  <1>     pop ebp
   203                              <1> 
   204 00001046 C3                  <1>     ret
   205                              <1> 
   206                              <1> %ifdef USE_TEST_AND_SET
   207 00001047 00                  <1> ALIGN 4, db 0
   208 00001048 00000000            <1> IN_USE:  dd 0
   209                              <1> %endif
   134                                  %include "../modules/protect/draw_font.s"
   135                              <1> draw_font:  ; void draw_font(col, row);
   136                              <1> ; col 列
   137                              <1> ; row 行
   138 0000104C 55                  <1>     push ebp
   139 0000104D 89E5                <1>     mov ebp, esp
   140                              <1> 
   141 0000104F 50                  <1>     push eax
   142 00001050 53                  <1>     push ebx
   143 00001051 51                  <1>     push ecx
   144 00001052 57                  <1>     push edi
   145 00001053 56                  <1>     push esi
   146                              <1> 
   147                              <1> 
   148 00001054 8B7508              <1>     mov esi, [ebp + 8]  ; x
   149 00001057 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   150                              <1> 
   151 0000105A B900000000          <1>     mov ecx, 0
   152                              <1> .10L:
   153 0000105F 81F900010000        <1>     cmp ecx, 256
   154 00001065 731F                <1>     jae .10E
   155                              <1> 
   156 00001067 89C8                <1>     mov eax, ecx
   157 00001069 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   158 0000106C 01F0                <1>     add eax, esi    ; eax += x
   159                              <1> 
   160 0000106E 89CB                <1>     mov ebx, ecx
   161 00001070 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   162 00001073 01FB                <1>     add ebx, edi    ; ebx += y
   163                              <1> 
   164 00001075 516A075350E8ECFEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   164 0000107E FF6683C410          <1>
   165                              <1> 
   166 00001083 41                  <1>     inc ecx
   167 00001084 EBD9                <1>     jmp .10L
   168                              <1> .10E:
   169                              <1> 
   170 00001086 5E                  <1>     pop esi
   171 00001087 5F                  <1>     pop edi
   172 00001088 59                  <1>     pop ecx
   173 00001089 5B                  <1>     pop ebx
   174 0000108A 58                  <1>     pop eax
   175                              <1> 
   176 0000108B 89EC                <1>     mov esp, ebp
   177 0000108D 5D                  <1>     pop ebp
   178                              <1> 
   179 0000108E C3                  <1>     ret
   135                                  %include "../modules/protect/draw_str.s"
   136                              <1> draw_str:   ;void draw_str(col, row, color, p);
   137                              <1> ; col: 列
   138                              <1> ; row: 行
   139                              <1> ; color: 描画色
   140                              <1> ; p: 文字列のアドレス
   141 0000108F 55                  <1>     push ebp
   142 00001090 89E5                <1>     mov ebp, esp
   143                              <1> 
   144 00001092 50                  <1>     push eax
   145 00001093 53                  <1>     push ebx
   146 00001094 51                  <1>     push ecx
   147 00001095 52                  <1>     push edx
   148 00001096 56                  <1>     push esi
   149                              <1> 
   150                              <1> 
   151 00001097 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   152 0000109A 8B550C              <1>     mov edx, [ebp +12]  ; row
   153 0000109D 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   154 000010A1 8B7514              <1>     mov esi, [ebp +20]  ; p
   155                              <1> 
   156 000010A4 FC                  <1>     cld
   157                              <1> .10L:
   158 000010A5 AC                  <1>     lodsb
   159 000010A6 3C00                <1>     cmp al, 0
   160 000010A8 741A                <1>     je .10E
   161                              <1> 
   162                              <1> %ifdef USE_SYSTEM_CALL
   163 000010AA CD81                <1>     int 0x81
   164                              <1> %else
   165                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   166                              <1> %endif
   167                              <1> 
   168 000010AC 41                  <1>     inc ecx
   169 000010AD 83F950              <1>     cmp ecx, 80
   170 000010B0 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   171 000010B2 B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   172 000010B7 42                  <1>     inc edx
   173 000010B8 83FA1E              <1>     cmp edx, 30
   174 000010BB 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   175 000010BD BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   176                              <1> .12E:
   177 000010C2 EBE1                <1>     jmp .10L
   178                              <1> .10E:
   179                              <1> 
   180 000010C4 5E                  <1>     pop esi
   181 000010C5 5A                  <1>     pop edx
   182 000010C6 59                  <1>     pop ecx
   183 000010C7 5B                  <1>     pop ebx
   184 000010C8 58                  <1>     pop eax
   185                              <1> 
   186 000010C9 89EC                <1>     mov esp, ebp
   187 000010CB 5D                  <1>     pop ebp
   188                              <1> 
   189 000010CC C3                  <1>     ret
   136                                  %include "../modules/protect/draw_color_bar.s"
   137                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   138                              <1> ; col: 列
   139                              <1> ; row: 行
   140 000010CD 55                  <1>     push ebp
   141 000010CE 89E5                <1>     mov ebp, esp
   142                              <1> 
   143 000010D0 50                  <1>     push eax
   144 000010D1 53                  <1>     push ebx
   145 000010D2 51                  <1>     push ecx
   146 000010D3 52                  <1>     push edx
   147 000010D4 56                  <1>     push esi
   148 000010D5 57                  <1>     push edi
   149                              <1> 
   150                              <1> 
   151 000010D6 8B7508              <1>     mov esi, [ebp + 8]      ; x
   152 000010D9 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   153                              <1> 
   154                              <1>     ; カラーバーを表示
   155 000010DC B900000000          <1>     mov ecx, 0
   156                              <1> .10L:
   157 000010E1 83F910              <1>     cmp ecx, 16
   158 000010E4 732E                <1>     jae .10E
   159                              <1> 
   160                              <1>     ; 一回で8文字
   161 000010E6 89C8                <1>     mov eax, ecx
   162 000010E8 83E001              <1>     and eax, 0x01
   163 000010EB C1E003              <1>     shl eax, 3
   164 000010EE 01F0                <1>     add eax, esi    ; col
   165                              <1> 
   166                              <1>     ; 2回に1回改行
   167 000010F0 89CB                <1>     mov ebx, ecx
   168 000010F2 D1EB                <1>     shr ebx, 1
   169 000010F4 01FB                <1>     add ebx, edi    ; row
   170                              <1> 
   171                              <1>     ; 背景色を2色見たら下位次の行
   172 000010F6 89CA                <1>     mov edx, ecx
   173 000010F8 D1E2                <1>     shl edx, 1
   174 000010FA 8B92[27110000]      <1>     mov edx, [.t0 + edx]    ; color
   175                              <1> 
   176 00001100 68[1E110000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   176 00001108 E882FFFFFF6683C410  <1>
   177                              <1> 
   178 00001111 41                  <1>     inc ecx
   179 00001112 EBCD                <1>     jmp .10L
   180                              <1> .10E:
   181                              <1> 
   182 00001114 5F                  <1>     pop edi
   183 00001115 5E                  <1>     pop esi
   184 00001116 5A                  <1>     pop edx
   185 00001117 59                  <1>     pop ecx
   186 00001118 5B                  <1>     pop ebx
   187 00001119 58                  <1>     pop eax
   188                              <1> 
   189 0000111A 89EC                <1>     mov esp, ebp
   190 0000111C 5D                  <1>     pop ebp
   191                              <1> 
   192 0000111D C3                  <1>     ret
   193                              <1> 
   194                              <1> 
   195 0000111E 202020202020202000  <1> .s0: db '        ', 0
   196                              <1> 
   197                              <1> .t0:
   198 00001127 00000008            <1>     dw 0x0000, 0x0800
   199 0000112B 00010009            <1>     dw 0x0100, 0x0900
   200 0000112F 0002000A            <1>     dw 0x0200, 0x0A00
   201 00001133 0003000B            <1>     dw 0x0300, 0x0B00
   202 00001137 0004000C            <1>     dw 0x0400, 0x0C00
   203 0000113B 0005000D            <1>     dw 0x0500, 0x0D00
   204 0000113F 0006000E            <1>     dw 0x0600, 0x0E00
   205 00001143 0007000F            <1>     dw 0x0700, 0x0F00
   137                                  %include "../modules/protect/draw_pixel.s"
   138                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   139                              <1> ; x: X座標
   140                              <1> ; y: Y座標
   141                              <1> ; color: 描画色
   142 00001147 55                  <1>     push ebp
   143 00001148 89E5                <1>     mov ebp, esp
   144                              <1> 
   145 0000114A 50                  <1>     push eax
   146 0000114B 53                  <1>     push ebx
   147 0000114C 51                  <1>     push ecx
   148 0000114D 57                  <1>     push edi
   149                              <1> 
   150                              <1> 
   151                              <1> 
   152                              <1>     ; y座標*80->y*(640/8)
   153 0000114E 8B7D0C              <1>     mov edi, [ebp +12]
   154 00001151 C1E704              <1>     shl edi, 4
   155 00001154 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   156                              <1> 
   157                              <1>     ; x座標/8  8pixel単位の位置
   158 0000115B 8B5D08              <1>     mov ebx, [ebp + 8]
   159 0000115E 89D9                <1>     mov ecx, ebx
   160 00001160 C1EB03              <1>     shr ebx, 3
   161 00001163 01DF                <1>     add edi, ebx
   162                              <1> 
   163                              <1>     ; x座標を8で割った余りからビット位置を計算
   164                              <1>     ; 8pixel中の位置
   165                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   166 00001165 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   167 00001168 BB80000000          <1>     mov ebx, 0x80
   168 0000116D D3EB                <1>     shr ebx, cl
   169                              <1> 
   170 0000116F 8B4D10              <1>     mov ecx, [ebp +16]
   171                              <1> 
   172                              <1> %ifdef	USE_TEST_AND_SET
   173 00001172 68[48100000]E89B06- <1> 	cdecl	test_and_set, IN_USE			    ; TEST_AND_SET(IN_USE); // リソースの空き待ち
   173 0000117A 00006683C404        <1>
   174                              <1> %endif
   175                              <1> 
   176                              <1>     ; プレーンごとに出力
   177 00001180 6A03E82DFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   177 00001189 C404                <1>
   178 0000118B 6A08E83BFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   178 00001194 C404                <1>
   179 00001196 516A085753E89DFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   179 0000119F FF6683C410          <1>
   180                              <1> 
   181 000011A4 6A02E809FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   181 000011AD C404                <1>
   182 000011AF 6A04E817FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   182 000011B8 C404                <1>
   183 000011BA 516A045753E879FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   183 000011C3 FF6683C410          <1>
   184                              <1> 
   185 000011C8 6A01E8E5FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   185 000011D1 C404                <1>
   186 000011D3 6A02E8F3FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   186 000011DC C404                <1>
   187 000011DE 516A025753E855FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   187 000011E7 FF6683C410          <1>
   188                              <1> 
   189 000011EC 6A00E8C1FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   189 000011F5 C404                <1>
   190 000011F7 6A01E8CFFCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   190 00001200 C404                <1>
   191 00001202 516A015753E831FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   191 0000120B FF6683C410          <1>
   192                              <1> 
   193                              <1> %ifdef	USE_TEST_AND_SET
   194 00001210 C705[48100000]0000- <1> 	mov		[IN_USE], dword 0				    ; 変数のクリア
   194 00001218 0000                <1>
   195                              <1> %endif
   196                              <1> 
   197 0000121A 5F                  <1>     pop edi
   198 0000121B 59                  <1>     pop ecx
   199 0000121C 5B                  <1>     pop ebx
   200 0000121D 58                  <1>     pop eax
   201                              <1> 
   202 0000121E 89EC                <1>     mov esp, ebp
   203 00001220 5D                  <1>     pop ebp
   204                              <1> 
   205 00001221 C3                  <1>     ret
   138                                  %include "../modules/protect/draw_line.s"
   139                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   140                              <1> ; X0 始点のＸ座標
   141                              <1> ; Y0 始点のＹ座標
   142                              <1> ; X1 終点のX座標
   143                              <1> ; Y1 終点のY座標
   144                              <1> ; color 描画色
   145 00001222 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   146 00001223 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   147                              <1>                     ; ----------------
   148 00001225 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   149 00001227 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   150 00001229 6A00                <1>     push dword 0    ;    -12| dx    = 0
   151 0000122B 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   152 0000122D 6A00                <1>     push dword 0    ;    -20| y0    = 0
   153 0000122F 6A00                <1>     push dword 0    ;    -24| dy    = 0
   154 00001231 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   155                              <1> 
   156 00001233 50                  <1>     push eax        ;    -32| eax
   157 00001234 53                  <1>     push ebx        ;    -36| ebx
   158 00001235 51                  <1>     push ecx        ;    -40| ecx
   159 00001236 52                  <1>     push edx        ;    -44| edx
   160 00001237 56                  <1>     push esi        ;    -48| esi
   161 00001238 57                  <1>     push edi        ;    -52| edi
   162                              <1>     ; espはebp-52?
   163                              <1> 
   164                              <1>     ; x0とx1の距離を計算
   165 00001239 8B4508              <1>     mov eax, [ebp + 8]
   166 0000123C 8B5D10              <1>     mov ebx, [ebp +16]
   167 0000123F 29C3                <1>     sub ebx, eax
   168 00001241 7D09                <1>     jge .10F
   169                              <1> 
   170 00001243 F7DB                <1>     neg ebx
   171 00001245 BEFFFFFFFF          <1>     mov esi, -1
   172 0000124A EB05                <1>     jmp .10E
   173                              <1> .10F:
   174 0000124C BE01000000          <1>     mov esi, 1
   175                              <1> .10E:
   176                              <1>     
   177                              <1>     ; y0とy1の距離を計算
   178 00001251 8B4D0C              <1>     mov ecx, [ebp +12]
   179 00001254 8B5514              <1>     mov edx, [ebp +20]
   180 00001257 29CA                <1>     sub edx, ecx
   181 00001259 7D09                <1>     jge .20F
   182                              <1> 
   183 0000125B F7DA                <1>     neg edx
   184 0000125D BFFFFFFFFF          <1>     mov edi, -1
   185 00001262 EB05                <1>     jmp .20E
   186                              <1> .20F:
   187 00001264 BF01000000          <1>     mov edi, 1
   188                              <1> .20E:
   189                              <1>     
   190                              <1>     ; x軸
   191 00001269 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   192 0000126C 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   193 0000126F 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   194                              <1> 
   195                              <1>     ; y軸
   196 00001272 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   197 00001275 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   198 00001278 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   199                              <1> 
   200                              <1> 
   201                              <1>     ; 基準軸を決める
   202 0000127B 39D3                <1>     cmp ebx, edx
   203 0000127D 7F08                <1>     jg .22F
   204                              <1>     
   205 0000127F 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   206 00001282 8D7DF8              <1>     lea edi, [ebp - 8]
   207                              <1> 
   208 00001285 EB06                <1>     jmp .22E
   209                              <1> .22F:
   210                              <1>     
   211 00001287 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   212 0000128A 8D7DEC              <1>     lea edi, [ebp -20]
   213                              <1> .22E:
   214                              <1> 
   215                              <1> ; 基準軸 esi
   216                              <1> ; 相対軸 edi
   217                              <1> 
   218                              <1>     ; 繰り返し回数（基準軸のドット数）
   219 0000128D 8B4EFC              <1>     mov ecx, [esi - 4]
   220 00001290 83F900              <1>     cmp ecx, 0
   221 00001293 7505                <1>     jnz .30E
   222 00001295 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   223                              <1> .30E:
   224                              <1> 
   225                              <1>     ; 線を描画
   226                              <1> .50L:
   227                              <1> 
   228                              <1> %ifdef USE_SYSTEM_CALL
   229 0000129A 89C8                <1>     mov eax, ecx
   230 0000129C 8B4DF8              <1>     mov ecx, [ebp - 8]
   231 0000129F 8B55EC              <1>     mov edx, [ebp -20]
   232 000012A2 8B5D18              <1>     mov ebx, [ebp +24]
   233 000012A5 CD82                <1>     int 0x82            ; sys_call()
   234 000012A7 89C1                <1>     mov ecx, eax
   235                              <1> %else
   236                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   239                              <1> %endif
   240                              <1> 
   241                              <1>     ; 座標更新
   242                              <1> 
   243                              <1>     ; 基準軸の更新
   244 000012A9 8B46F8              <1>     mov eax, [esi - 8]
   245 000012AC 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   246                              <1> 
   247                              <1>     ; 相対軸の更新
   248 000012AE 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   249 000012B1 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   250                              <1> 
   251 000012B4 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   252                              <1> 
   253 000012B7 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   254 000012B9 7C07                <1>     jl .52E
   255 000012BB 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   256                              <1> 
   257 000012BD 8B5FF8              <1>     mov ebx, [edi - 8]
   258 000012C0 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   259                              <1> .52E:
   260                              <1>     
   261 000012C2 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   262                              <1> 
   263 000012C5 E2D3                <1>     loop .50L
   264                              <1> .50E:
   265                              <1> 
   266                              <1> 
   267 000012C7 5F                  <1>     pop edi
   268 000012C8 5E                  <1>     pop esi
   269 000012C9 5A                  <1>     pop edx
   270 000012CA 59                  <1>     pop ecx
   271 000012CB 5B                  <1>     pop ebx
   272 000012CC 58                  <1>     pop eax
   273                              <1> 
   274 000012CD 89EC                <1>     mov esp, ebp
   275 000012CF 5D                  <1>     pop ebp
   276                              <1> 
   277 000012D0 C3                  <1>     ret
   139                                  %include "../modules/protect/draw_rect.s"
   140                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   141 000012D1 55                  <1>     push ebp
   142 000012D2 89E5                <1>     mov ebp, esp
   143                              <1>     
   144 000012D4 50                  <1>     push eax
   145 000012D5 53                  <1>     push ebx
   146 000012D6 51                  <1>     push ecx
   147 000012D7 52                  <1>     push edx
   148 000012D8 56                  <1>     push esi
   149                              <1> 
   150 000012D9 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   151 000012DC 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   152 000012DF 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   153 000012E2 8B5514              <1>     mov edx, [ebp +20]  ; y1
   154 000012E5 8B7518              <1>     mov esi, [ebp +24]  ; color
   155                              <1> 
   156                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   157 000012E8 39C8                <1>     cmp eax, ecx
   158 000012EA 7C01                <1>     jl .10E
   159 000012EC 91                  <1>     xchg eax, ecx
   160                              <1> .10E:
   161 000012ED 39D3                <1>     cmp ebx, edx
   162 000012EF 7C02                <1>     jl .20E
   163 000012F1 87DA                <1>     xchg ebx, edx
   164                              <1> .20E:
   165                              <1> 
   166                              <1>     ; 矩形を描画
   167 000012F3 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   167 000012FC FF6683C414          <1>
   168 00001301 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   168 0000130A FF6683C414          <1>
   169                              <1> 
   170 0000130F 4A                  <1>     dec edx
   171 00001310 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   171 00001319 FF6683C414          <1>
   172 0000131E 42                  <1>     inc edx
   173                              <1> 
   174 0000131F 49                  <1>     dec ecx
   175 00001320 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   175 00001329 FF6683C414          <1>
   176                              <1> 
   177 0000132E 5E                  <1>     pop esi
   178 0000132F 5A                  <1>     pop edx
   179 00001330 59                  <1>     pop ecx
   180 00001331 5B                  <1>     pop ebx
   181 00001332 58                  <1>     pop eax
   182                              <1>     
   183 00001333 89EC                <1>     mov esp, ebp
   184 00001335 5D                  <1>     pop ebp
   185                              <1> 
   186 00001336 C3                  <1>     ret
   140                                  %include "../modules/protect/itoa.s"
   141                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   142                              <1> ; num   変換する値
   143                              <1> ; buff  保存先バッファアドレス
   144                              <1> ; size  保存先バッファサイズ
   145                              <1> ; radix 基数（2, 8, 10, 16)
   146                              <1> ; flags 
   147                              <1> ;   B2: 空白を'0'で埋める
   148                              <1> ;   B1: '+/-'記号を付加する
   149                              <1> ;   B0: 値を符号付き変数として扱う
   150                              <1> 
   151 00001337 55                  <1>     push ebp
   152 00001338 89E5                <1>     mov ebp, esp
   153                              <1> 
   154 0000133A 50                  <1>     push eax
   155 0000133B 53                  <1>     push ebx
   156 0000133C 51                  <1>     push ecx
   157 0000133D 52                  <1>     push edx
   158 0000133E 56                  <1>     push esi
   159 0000133F 57                  <1>     push edi
   160                              <1> 
   161                              <1> 
   162                              <1>     ; 引数取得
   163 00001340 8B4508              <1>     mov eax, [ebp + 8]    ; num
   164 00001343 8B750C              <1>     mov esi, [ebp +12]    ; size
   165 00001346 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   166                              <1> 
   167 00001349 89F7                <1>     mov edi, esi
   168 0000134B 01CF                <1>     add edi, ecx
   169 0000134D 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   170                              <1> 
   171 0000134E 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   172                              <1> 
   173                              <1>     ; 符号付き判定
   174 00001351 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   175                              <1> .10Q:
   176 00001357 7408                <1>     je .10E         ; E=Exit
   177 00001359 83F800              <1>     cmp eax, 0
   178                              <1> .12Q:
   179 0000135C 7D03                <1>     jge .12E
   180 0000135E 83CB02              <1>     or ebx, 0b0010
   181                              <1> .12E:
   182                              <1> .10E:
   183                              <1> 
   184                              <1>     ; 符号出力判定
   185 00001361 F7C302000000        <1>     test ebx, 0b0010
   186                              <1> .20Q:
   187 00001367 7410                <1>     je .20E
   188 00001369 83F800              <1>     cmp eax, 0
   189                              <1> .22Q:
   190 0000136C 7D07                <1>     jge .22F
   191 0000136E F7D8                <1>     neg eax
   192 00001370 C6062D              <1>     mov [esi], byte '-'
   193 00001373 EB03                <1>     jmp .22E
   194                              <1> .22F:
   195                              <1>     
   196 00001375 C6062B              <1>     mov [esi], byte '+'
   197                              <1> .22E:
   198 00001378 49                  <1>     dec ecx
   199                              <1> .20E:
   200                              <1> 
   201                              <1>     ; ASCII変換
   202 00001379 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   203                              <1> .30L:
   204 0000137C BA00000000          <1>     mov edx, 0
   205 00001381 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   206                              <1> 
   207 00001383 89D6                <1>     mov esi, edx
   208 00001385 8A96[AF130000]      <1>     mov dl, byte [.ascii + esi]
   209                              <1> 
   210 0000138B 8817                <1>     mov [edi], dl
   211 0000138D 4F                  <1>     dec edi
   212                              <1> 
   213 0000138E 83F800              <1>     cmp eax, 0
   214 00001391 E0E9                <1>     loopnz .30L
   215                              <1> .30E:
   216                              <1> 
   217                              <1>     ; 空欄を埋める
   218 00001393 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   219                              <1> .40Q:
   220 00001396 740D                <1>     je .40E
   221 00001398 B020                <1>     mov al, ' '
   222 0000139A 837D1804            <1>     cmp [ebp +24], dword 0b0100
   223                              <1> .42Q:
   224 0000139E 7502                <1>     jne .42E
   225 000013A0 B030                <1>     mov al, '0'
   226                              <1> .42E:
   227 000013A2 FD                  <1>     std         ; dimention flag = 1(-方向)
   228 000013A3 F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   229                              <1> .40E:
   230                              <1> 
   231 000013A5 5F                  <1>     pop edi
   232 000013A6 5E                  <1>     pop esi
   233 000013A7 5A                  <1>     pop edx
   234 000013A8 59                  <1>     pop ecx
   235 000013A9 5B                  <1>     pop ebx
   236 000013AA 58                  <1>     pop eax
   237                              <1> 
   238 000013AB 89EC                <1>     mov esp, ebp
   239 000013AD 5D                  <1>     pop ebp
   240                              <1> 
   241 000013AE C3                  <1>     ret
   242                              <1> 
   243 000013AF 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   243 000013B8 39414243444546      <1>
   141                                  %include "../modules/protect/rtc.s"
   142                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   143                              <1> ; dst: 保存先アドレス
   144                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   145 000013BF 55                  <1>     push ebp
   146 000013C0 89E5                <1>     mov ebp, esp
   147                              <1> 
   148 000013C2 50                  <1>     push eax
   149 000013C3 53                  <1>     push ebx
   150                              <1> 
   151 000013C4 B00A                <1>     mov al, 0x0A    ; レジスタA
   152 000013C6 E670                <1>     out 0x70, al
   153 000013C8 E471                <1>     in al, 0x71
   154 000013CA A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   155 000013CC 7407                <1>     je .10F
   156 000013CE B801000000          <1>     mov eax, 1      ; 更新中は失敗
   157 000013D3 EB27                <1>     jmp .10E
   158                              <1> .10F:
   159                              <1> 
   160 000013D5 B004                <1>     mov al, 0x04    ; 時
   161 000013D7 E670                <1>     out 0x70, al    ; レジスタ設定
   162 000013D9 E471                <1>     in al, 0x71     ; 時刻読み込み
   163                              <1> 
   164 000013DB C1E008              <1>     shl eax, 8      ; alをahに退避
   165                              <1> 
   166 000013DE B002                <1>     mov al, 0x02    ; 分
   167 000013E0 E670                <1>     out 0x70, al    ; レジスタ設定
   168 000013E2 E471                <1>     in al, 0x71     ; 時刻読み込み
   169                              <1> 
   170 000013E4 C1E008              <1>     shl eax, 8      ; alをahに退避
   171                              <1> 
   172 000013E7 B000                <1>     mov al, 0x00    ; 秒
   173 000013E9 E670                <1>     out 0x70, al    ; レジスタ設定
   174 000013EB E471                <1>     in al, 0x71     ; 時刻読み込み
   175                              <1> 
   176 000013ED 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   177                              <1> 
   178 000013F2 8B5D08              <1>     mov ebx, [ebp + 8]
   179 000013F5 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   180                              <1> 
   181 000013F7 B800000000          <1>     mov eax, 0
   182                              <1> .10E:
   183                              <1> 
   184 000013FC 5B                  <1>     pop ebx
   185 000013FD 58                  <1>     pop eax
   186                              <1> 
   187 000013FE 89EC                <1>     mov esp, ebp
   188 00001400 5D                  <1>     pop ebp
   189                              <1> 
   190 00001401 C3                  <1>     ret
   142                                  %include "../modules/protect/draw_time.s"
   143                              <1> draw_time:  ; void draw_time(col, row, color, time);
   144                              <1> ; time 時刻データ
   145 00001402 55                  <1>     push ebp
   146 00001403 89E5                <1>     mov ebp, esp
   147                              <1> 
   148 00001405 50                  <1>     push eax
   149 00001406 53                  <1>     push ebx
   150                              <1>     
   151 00001407 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   152 0000140A 3B05[84140000]      <1>     cmp eax, [.last]
   153 00001410 7463                <1>     je .10E
   154 00001412 A3[84140000]        <1>     mov [.last], eax
   155                              <1> 
   156 00001417 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   157 0000141A 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   157 00001421 [81140000]53E80CFF- <1>
   157 00001429 FFFF6683C414        <1>
   158                              <1> 
   159 0000142F 88E3                <1>     mov bl, ah          ; 分だけ
   160 00001431 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   160 00001438 [7E140000]53E8F5FE- <1>
   160 00001440 FFFF6683C414        <1>
   161                              <1>     
   162 00001446 C1E810              <1>     shr eax, 16         ; 時だけ
   163 00001449 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   163 00001450 [7B140000]50E8DDFE- <1>
   163 00001458 FFFF6683C414        <1>
   164                              <1> 
   165 0000145E 68[7B140000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   165 00001466 FF750CFF7508E81EFC- <1>
   165 0000146F FFFF6683C410        <1>
   166                              <1> 
   167                              <1> .10E:
   168                              <1> 
   169 00001475 5B                  <1>     pop ebx
   170 00001476 58                  <1>     pop eax
   171                              <1> 
   172 00001477 89EC                <1>     mov esp, ebp
   173 00001479 5D                  <1>     pop ebp
   174                              <1> 
   175 0000147A C3                  <1>     ret
   176                              <1> 
   177 0000147B 5A5A3A              <1> .hour: db "ZZ:"
   178 0000147E 5A5A3A              <1> .min:  db "ZZ:"
   179 00001481 5A5A00              <1> .sec:  db "ZZ", 0
   180 00001484 0000000000000000    <1> .last: dq 0
   143                                  %include "../modules/protect/interrupt.s"
   144                              <1> int_stop:
   145 0000148C FB                  <1>     sti ; 割り込みを許可
   146                              <1> 
   147                              <1>     ; EAXで示される文字列を表示
   148 0000148D 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   148 00001496 19E8F3FBFFFF6683C4- <1>
   148 0000149F 10                  <1>
   149                              <1> 
   150                              <1>     ; スタックのデータを文字列に変換
   151 000014A0 8B0424              <1>     mov eax, [esp + 0]
   152 000014A3 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   152 000014AA [68150000]50E883FE- <1>
   152 000014B2 FFFF6683C414        <1>
   153                              <1> 
   154 000014B8 8B442404            <1>     mov eax, [esp + 4]
   155 000014BC 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   155 000014C3 [79150000]50E86AFE- <1>
   155 000014CB FFFF6683C414        <1>
   156                              <1> 
   157 000014D1 8B442408            <1>     mov eax, [esp + 8]
   158 000014D5 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   158 000014DC [8A150000]50E851FE- <1>
   158 000014E4 FFFF6683C414        <1>
   159                              <1> 
   160 000014EA 8B44240C            <1>     mov eax, [esp +12]
   161 000014EE 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   161 000014F5 [9B150000]50E838FE- <1>
   161 000014FD FFFF6683C414        <1>
   162                              <1> 
   163                              <1>     ; 文字列の表示
   164 00001503 68[61150000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   164 0000150B 00006A106A19E879FB- <1>
   164 00001514 FFFF6683C410        <1>
   165 0000151A 68[72150000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   165 00001522 00006A116A19E862FB- <1>
   165 0000152B FFFF6683C410        <1>
   166 00001531 68[83150000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   166 00001539 00006A126A19E84BFB- <1>
   166 00001542 FFFF6683C410        <1>
   167 00001548 68[94150000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   167 00001550 00006A136A19E834FB- <1>
   167 00001559 FFFF6683C410        <1>
   168                              <1> 
   169                              <1>     ; 無限ループ
   170 0000155F EBFE                <1>     jmp $
   171                              <1> 
   172 00001561 4553502B20303A      <1> .s1 db "ESP+ 0:"
   173 00001568 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   173 00001571 00                  <1>
   174 00001572 2020202B20343A      <1> .s2 db "   + 4:"
   175 00001579 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   175 00001582 00                  <1>
   176 00001583 2020202B20383A      <1> .s3 db "   + 8:"
   177 0000158A 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   177 00001593 00                  <1>
   178 00001594 2020202B31323A      <1> .s4 db "   +12:"
   179 0000159B 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   179 000015A4 00                  <1>
   180                              <1> 
   181                              <1> int_default:
   182 000015A5 9C                  <1>     pushf       ; EFLAGS(IF==0)
   183 000015A6 0E                  <1>     push cs
   184 000015A7 68[8C140000]        <1>     push int_stop
   185                              <1> 
   186 000015AC B8[B2150000]        <1>     mov eax, .s0
   187 000015B1 CF                  <1>     iret
   188                              <1> 
   189 000015B2 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   189 000015BB 50202020203E2000    <1>
   190                              <1> 
   191                              <1> 
   192                              <1> ; 割り込みベクタの初期化
   193 000015C3 90                  <1> ALIGN 4
   194 000015C4 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   195 000015C6 00001000            <1>       dd VECT_BASE      ; idt location
   196                              <1> 
   197                              <1> ; 割り込みテーブルを初期化
   198                              <1> init_int:
   199 000015CA 50                  <1>     push eax
   200 000015CB 53                  <1>     push ebx
   201 000015CC 51                  <1>     push ecx
   202 000015CD 57                  <1>     push edi
   203                              <1> 
   204                              <1>     ; 全ての割り込みにデフォルト処理を設定
   205 000015CE 8D05[A5150000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   206 000015D4 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   207 000015D9 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   208                              <1> 
   209 000015DB B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   210 000015E0 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   211                              <1> 
   212                              <1>     ; メモリに書き込み
   213                              <1> .10L:
   214 000015E5 891F                <1>     mov [edi + 0], ebx
   215 000015E7 894704              <1>     mov [edi + 4], eax
   216 000015EA 83C708              <1>     add edi, 8
   217 000015ED E2F6                <1>     loop .10L
   218                              <1> 
   219                              <1>     ; 割り込みディスクリプタの設定
   220 000015EF 0F011D[C4150000]    <1>     lidt [IDTR]
   221                              <1> 
   222 000015F6 5F                  <1>     pop edi
   223 000015F7 59                  <1>     pop ecx
   224 000015F8 5B                  <1>     pop ebx
   225 000015F9 58                  <1>     pop eax
   226                              <1> 
   227 000015FA C3                  <1>     ret
   228                              <1> 
   229                              <1> 
   230                              <1> int_zero_div:
   231 000015FB 9C                  <1>     pushf
   232 000015FC 0E                  <1>     push cs
   233 000015FD 68[8C140000]        <1>     push int_stop
   234                              <1> 
   235 00001602 B8[08160000]        <1>     mov eax, .s0
   236 00001607 CF                  <1>     iret
   237                              <1> 
   238 00001608 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   238 00001611 44495620203E2000    <1>
   144                                  %include "../modules/protect/pic.s"
   145                              <1> init_pic:
   146 00001619 50                  <1>     push eax
   147                              <1> 
   148                              <1>     ; outp ポート, データ
   149                              <1> 
   150                              <1>     ; マスタの設定
   151                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 0000161A B011                <2>  mov al, %2
    50 0000161C E620                <2>  out %1, al
   152                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 0000161E B020                <2>  mov al, %2
    50 00001620 E621                <2>  out %1, al
   153                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 00001622 B004                <2>  mov al, %2
    50 00001624 E621                <2>  out %1, al
   154                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 00001626 B001                <2>  mov al, %2
    50 00001628 E621                <2>  out %1, al
   155                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 0000162A B0FF                <2>  mov al, %2
    50 0000162C E621                <2>  out %1, al
   156                              <1> 
   157                              <1>     ; スレーブの設定
   158                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 0000162E B011                <2>  mov al, %2
    50 00001630 E6A0                <2>  out %1, al
   159                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 00001632 B028                <2>  mov al, %2
    50 00001634 E6A1                <2>  out %1, al
   160                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 00001636 B002                <2>  mov al, %2
    50 00001638 E6A1                <2>  out %1, al
   161                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 0000163A B001                <2>  mov al, %2
    50 0000163C E6A1                <2>  out %1, al
   162                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 0000163E B0FF                <2>  mov al, %2
    50 00001640 E6A1                <2>  out %1, al
   163                              <1> 
   164 00001642 58                  <1>     pop eax
   165                              <1> 
   166 00001643 C3                  <1>     ret
   145                                  %include "../modules/protect/int_rtc.s"
   146                              <1> int_rtc:
   147 00001644 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   148 00001645 1E                  <1>     push ds
   149 00001646 06                  <1>     push es
   150                              <1> 
   151                              <1>     ; データ用セグメントセレクタの設定
   152 00001647 66B81000            <1>     mov ax, 0x0010
   153 0000164B 8ED8                <1>     mov ds, ax
   154 0000164D 8EC0                <1>     mov es, ax
   155                              <1> 
   156                              <1>     ; RTCから時刻を取得
   157 0000164F 68[D0020000]E866FD- <1>     cdecl rtc_get_time, RTC_TIME
   157 00001657 FFFF6683C404        <1>
   158                              <1> 
   159                              <1>     ; RTCの割り込み要因を取得
   160                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 0000165D B00C                <2>  mov al, %2
    50 0000165F E670                <2>  out %1, al
   161 00001661 E471                <1>     in al, 0x71     ; RTCからデータを取得
   162                              <1> 
   163                              <1>     ; 割り込みフラグをクリア(EOI)
   164 00001663 B020                <1>     mov al, 0x20
   165 00001665 E6A0                <1>     out 0xA0, al    ; スレーブ
   166 00001667 E620                <1>     out 0x20, al    ; マスタ
   167                              <1> 
   168 00001669 07                  <1>     pop es
   169 0000166A 1F                  <1>     pop ds
   170 0000166B 61                  <1>     popa
   171                              <1> 
   172 0000166C CF                  <1>     iret        ; 割り込み処理の終了
   173                              <1> 
   174                              <1> rtc_int_en:
   175 0000166D 55                  <1>     push ebp
   176 0000166E 89E5                <1>     mov ebp, esp
   177 00001670 50                  <1>     push eax
   178                              <1> 
   179                              <1>     ; 割り込み許可設定
   180                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 00001671 B00B                <2>  mov al, %2
    50 00001673 E670                <2>  out %1, al
   181                              <1> 
   182 00001675 E471                <1>     in al, 0x71     ; RTCからデータを取得
   183 00001677 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   184                              <1> 
   185 0000167A E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   186                              <1> 
   187 0000167C 58                  <1>     pop eax
   188                              <1> 
   189 0000167D 89EC                <1>     mov esp, ebp
   190 0000167F 5D                  <1>     pop ebp
   191                              <1> 
   192 00001680 C3                  <1>     ret
   146                                  %include "../modules/protect/int_keyboard.s"
   147                              <1> int_keyboard:
   148 00001681 60                  <1>     pusha
   149 00001682 1E                  <1>     push ds
   150 00001683 06                  <1>     push es
   151                              <1> 
   152                              <1>     ; データ用セグメントの設定
   153 00001684 66B81000            <1>     mov ax, 0x0010
   154 00001688 8ED8                <1>     mov ds, ax
   155 0000168A 8EC0                <1>     mov es, ax
   156                              <1> 
   157                              <1>     ; KBCのバッファ読み取り
   158 0000168C E460                <1>     in al, 0x60
   159                              <1> 
   160                              <1>     ; キーコードの保存
   161 0000168E 5068[A8160000]E857- <1>     cdecl ring_wr, _KEY_BUFF, eax
   161 00001696 0000006683C408      <1>
   162                              <1> 
   163                              <1>     ; 割り込み終了コマンド送信
   164                              <1>     outp 0x20, 0x20
    49 0000169D B020                <2>  mov al, %2
    50 0000169F E620                <2>  out %1, al
   165                              <1> 
   166 000016A1 07                  <1>     pop es
   167 000016A2 1F                  <1>     pop ds
   168 000016A3 61                  <1>     popa
   169                              <1> 
   170 000016A4 CF                  <1>     iret
   171                              <1> 
   172 000016A5 00<rep 3h>          <1> ALIGN 4, db 0
   173 000016A8 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   147                                  %include "../modules/protect/ring_buff.s"
   148                              <1> ring_rd:        ; int ring_rd(buff, data);
   149                              <1> ; buff リングバッファ
   150                              <1> ; data 読み込んだデータの保存先アドレス
   151                              <1> ; 戻り値: データあり(0以外), データなし(0)
   152                              <1> 
   153 000016C0 55                  <1>     push ebp
   154 000016C1 89E5                <1>     mov ebp, esp
   155                              <1> 
   156 000016C3 53                  <1>     push ebx
   157 000016C4 56                  <1>     push esi
   158 000016C5 57                  <1>     push edi
   159                              <1> 
   160                              <1>     ; 引数取得
   161 000016C6 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   162 000016C9 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   163                              <1> 
   164                              <1>     ; 読み込み位置を確認
   165 000016CC B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   166 000016D1 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   167 000016D3 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   168 000016D6 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   169                              <1> 
   170 000016D8 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   171                              <1> 
   172 000016DC 8807                <1>     mov [edi], al
   173                              <1> 
   174 000016DE 43                  <1>     inc ebx ; 次の読み込み位置
   175 000016DF 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   176 000016E2 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   177                              <1> 
   178 000016E4 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   179                              <1> .10E:
   180                              <1> 
   181 000016E9 5F                  <1>     pop edi
   182 000016EA 5E                  <1>     pop esi
   183 000016EB 5B                  <1>     pop ebx
   184                              <1> 
   185 000016EC 89EC                <1>     mov esp, ebp
   186 000016EE 5D                  <1>     pop ebp
   187                              <1> 
   188 000016EF C3                  <1>     ret
   189                              <1> 
   190                              <1> 
   191                              <1> ring_wr:    ; int ring_wr(buff, data);
   192                              <1> ; buff シリンダバッファ
   193                              <1> ; data 書き込むデータ
   194                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   195 000016F0 55                  <1>     push ebp
   196 000016F1 89E5                <1>     mov ebp, esp
   197                              <1> 
   198 000016F3 53                  <1>     push ebx
   199 000016F4 51                  <1>     push ecx
   200 000016F5 56                  <1>     push esi
   201                              <1> 
   202 000016F6 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   203                              <1> 
   204                              <1>     ; 書き込み位置を確認
   205 000016F9 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   206 000016FE 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   207 00001701 89D9                <1>     mov ecx, ebx
   208 00001703 41                  <1>     inc ecx                         ; 次の書き込み位置
   209 00001704 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   210                              <1> 
   211                              <1>     ; バッファフルなら処理しない
   212 00001707 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   213 00001709 740F                <1>     je .10E
   214                              <1> 
   215 0000170B 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   216                              <1> 
   217 0000170E 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   218 00001712 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   219 00001715 B801000000          <1>     mov eax, 1  ; 戻り値 成功
   220                              <1> .10E:
   221                              <1> 
   222 0000171A 5E                  <1>     pop esi
   223 0000171B 59                  <1>     pop ecx
   224 0000171C 5B                  <1>     pop ebx
   225                              <1> 
   226 0000171D 89EC                <1>     mov esp, ebp
   227 0000171F 5D                  <1>     pop ebp
   228                              <1> 
   229 00001720 C3                  <1>     ret
   230                              <1> 
   231                              <1> draw_key:
   232 00001721 55                  <1>     push ebp
   233 00001722 89E5                <1>     mov ebp, esp
   234                              <1> 
   235 00001724 50                  <1>     push eax
   236 00001725 53                  <1>     push ebx
   237 00001726 51                  <1>     push ecx
   238 00001727 52                  <1>     push edx
   239 00001728 56                  <1>     push esi
   240 00001729 57                  <1>     push edi
   241                              <1> 
   242                              <1> 
   243 0000172A 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   244 0000172D 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   245 00001730 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   246                              <1> 
   247                              <1>     ; リングバッファの情報を取得
   248 00001733 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   249 00001735 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   250 00001738 B910000000          <1>     mov ecx, RING_ITEM_SIZE
   251                              <1> 
   252                              <1> .10L:
   253 0000173D 4B                  <1>     dec ebx ; 読み込み位置
   254 0000173E 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   255 00001741 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   256                              <1> 
   257 00001744 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   257 0000174D 68[80170000]50E8DF- <1>
   257 00001755 FBFFFF6683C414      <1>
   258 0000175C 68[80170000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   258 00001764 52E825F9FFFF6683C4- <1>
   258 0000176D 10                  <1>
   259                              <1> 
   260 0000176E 83C203              <1>     add edx, 3  ; 表示位置更新
   261 00001771 E2CA                <1>     loop .10L
   262                              <1> .10E:
   263                              <1> 
   264 00001773 5F                  <1>     pop edi
   265 00001774 5E                  <1>     pop esi
   266 00001775 5A                  <1>     pop edx
   267 00001776 59                  <1>     pop ecx
   268 00001777 5B                  <1>     pop ebx
   269 00001778 58                  <1>     pop eax
   270                              <1> 
   271 00001779 89EC                <1>     mov esp, ebp
   272 0000177B 5D                  <1>     pop ebp
   273                              <1> 
   274 0000177C C3                  <1>     ret
   275                              <1> 
   276 0000177D 00<rep 3h>          <1> ALIGN 4, db 0
   277 00001780 2D2D2000            <1> .tmp db "-- ", 0
   148                                  %include "../modules/protect/timer.s"
   149                              <1> int_en_timer0:
   150 00001784 50                  <1>     push eax
   151                              <1> 
   152                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 00001785 B034                <2>  mov al, %2
    50 00001787 E643                <2>  out %1, al
   153                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 00001789 B09C                <2>  mov al, %2
    50 0000178B E640                <2>  out %1, al
   154                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 0000178D B02E                <2>  mov al, %2
    50 0000178F E640                <2>  out %1, al
   155                              <1> 
   156 00001791 58                  <1>     pop eax
   157                              <1> 
   158 00001792 C3                  <1>     ret
   149                                  %include "../modules/protect/draw_rotation_bar.s"
   150                              <1> draw_rotation_bar:
   151 00001793 50                  <1>     push eax
   152                              <1> 
   153 00001794 A1[140A0000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   154 00001799 C1E804              <1>     shr eax, 4              ; eax /= 4
   155 0000179C 3B05[C4170000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   156 000017A2 741E                <1>     je .10E
   157                              <1> 
   158 000017A4 A3[C4170000]        <1>     mov [.index], eax       ; 前回値設定
   159 000017A9 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   160                              <1> 
   161 000017AC 8A80[C8170000]      <1>     mov al, [.table + eax]  ; 文字表示
   162 000017B2 506A0F6A1D6A00E8AD- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   162 000017BB F7FFFF6683C410      <1>
   163                              <1> 
   164                              <1> .10E:
   165                              <1> 
   166 000017C2 58                  <1>     pop eax
   167                              <1> 
   168 000017C3 C3                  <1>     ret
   169                              <1> 
   170                              <1> ALIGN 4, db 0
   171 000017C4 00000000            <1> .index: dd 0        ; 前回値
   172 000017C8 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   150                                  %include "../modules/protect/call_gate.s"
   151                              <1> call_gate:
   152 000017CC 55                  <1>     push ebp
   153 000017CD 89E5                <1>     mov ebp, esp
   154                              <1> 
   155 000017CF 60                  <1>     pusha
   156 000017D0 1E                  <1>     push ds
   157 000017D1 06                  <1>     push es
   158                              <1> 
   159                              <1>     ; データ用セグメントの設定
   160 000017D2 66B81000            <1>     mov ax, 0x0010
   161 000017D6 8ED8                <1>     mov ds, ax
   162 000017D8 8EC0                <1>     mov es, ax
   163                              <1> 
   164                              <1>     ; 文字を表示
   165 000017DA 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   166 000017DD 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   167 000017E0 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   168 000017E3 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   169 000017E6 52515350E8A0F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   169 000017EF 6683C410            <1>
   170                              <1> 
   171 000017F3 07                  <1>     pop es
   172 000017F4 1F                  <1>     pop ds
   173 000017F5 61                  <1>     popa
   174                              <1> 
   175 000017F6 89EC                <1>     mov esp, ebp
   176 000017F8 5D                  <1>     pop ebp
   177                              <1> 
   178                              <1>     ; コードセグメントセレクタの復帰と終了
   179 000017F9 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   151                                  %include "../modules/protect/trap_gate.s"
   152                              <1> trap_gate_81:
   153                              <1>     ; 1文字出力
   154 000017FC 50535251E866F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   154 00001805 6683C410            <1>
   155                              <1> 
   156 00001809 CF                  <1>     iret
   157                              <1> 
   158                              <1> trap_gate_82:
   159                              <1>     ; 点の描画
   160 0000180A 535251E835F9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   160 00001813 83C40C              <1>
   161                              <1> 
   162 00001816 CF                  <1>     iret
   152                                  %include "../modules/protect/test_and_set.s"
   153                              <1> test_and_set:
   154 00001817 55                  <1>     push ebp
   155 00001818 89E5                <1>     mov ebp, esp
   156                              <1> 
   157 0000181A 50                  <1>     push eax
   158 0000181B 53                  <1>     push ebx
   159                              <1> 
   160                              <1>     ; テストアンドセット
   161 0000181C B800000000          <1>     mov eax, 0
   162 00001821 8B5D08              <1>     mov ebx, [ebp + 8]
   163                              <1> 
   164                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   165                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   166                              <1> .10L:
   167 00001824 F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   168 00001828 7307                <1>     jnc .10E
   169                              <1> 
   170                              <1> .12L:
   171 0000182A 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   172 0000182D 72FB                <1>     jc .12L
   173                              <1>     
   174 0000182F EBF3                <1>     jmp .10L
   175                              <1> .10E:
   176                              <1>     
   177 00001831 5B                  <1>     pop ebx
   178 00001832 58                  <1>     pop eax
   179                              <1> 
   180 00001833 89EC                <1>     mov esp, ebp
   181 00001835 5D                  <1>     pop ebp
   182                              <1> 
   183 00001836 C3                  <1>     ret
   153                                  %include "../modules/protect/int_nm.s"
   154                              <1> get_tss_base:
   155                              <1> ; EBX: TSSセレクタ
   156                              <1>     ; EAX = TSS base address
   157 00001837 8B83[36030000]      <1>     mov eax, [GDT + ebx + 2]
   158 0000183D C1E008              <1>     shl eax, 8
   159 00001840 8A83[3B030000]      <1>     mov al, [GDT + ebx + 7]
   160 00001846 C1C808              <1>     ror eax, 8
   161                              <1> 
   162 00001849 C3                  <1>     ret
   163                              <1> 
   164                              <1> save_fpu_context:
   165 0000184A DD7068              <1>     fnsave [eax + 104]
   166 0000184D C780D4000000010000- <1>     mov [eax + 104 + 108], dword 1
   166 00001856 00                  <1>
   167                              <1> 
   168 00001857 C3                  <1>     ret
   169                              <1> 
   170                              <1> load_fpu_context:
   171 00001858 83B8D400000000      <1>     cmp [eax + 104 + 108], dword 0
   172 0000185F 7504                <1>     jne .10F    ; if(saved != 0) goto .10F
   173 00001861 DBE3                <1>     fninit      ; FPU初期化
   174 00001863 EB03                <1>     jmp .10E
   175                              <1> .10F:
   176 00001865 DD6068              <1>     frstor [eax + 104]  ; FPUコンテキストを復帰
   177                              <1> .10E:
   178 00001868 C3                  <1>     ret
   179                              <1> 
   180                              <1> int_nm:
   181 00001869 60                  <1>     pusha
   182 0000186A 1E                  <1>     push ds
   183 0000186B 06                  <1>     push es
   184                              <1> 
   185 0000186C 66B81000            <1>     mov ax, DS_KERNEL
   186 00001870 8ED8                <1>     mov ds, ax
   187 00001872 8EC0                <1>     mov es, ax
   188                              <1> 
   189                              <1>     ; タスクスイッチフラグをクリア
   190 00001874 0F06                <1>     clts    ; CR0.TS = 0
   191                              <1> 
   192                              <1>     ; 前回・今回FPUを使用するタスク
   193 00001876 8B3D[C0180000]      <1>     mov edi, [.last_tss]; edi = 前回FPUを使用したタスクのTSS
   194 0000187C 0F00CE              <1>     str esi             ; esi = 今回FPUを使用するタスクのTSS（trレジスタ）
   195 0000187F 83E6F8              <1>     and esi, ~0x0007    ; 特権レベルはいらないのでマスク
   196                              <1> 
   197                              <1>     ; 初回利用チェック
   198 00001882 83FF00              <1>     cmp edi, 0          ; if(前回のタスク==0) goto .10F
   199 00001885 7420                <1>     je .10F
   200                              <1> 
   201 00001887 39FE                <1>     cmp esi, edi        ; if(前回のタスク==今回のタスク) goto .12E
   202 00001889 741A                <1>     je .12E
   203                              <1> 
   204 0000188B FA                  <1>     cli
   205                              <1> 
   206                              <1>     ; 前回のFPUコンテキストを保存
   207 0000188C 89FB                <1>     mov ebx, edi
   208 0000188E E8A4FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   209 00001893 E8B2FFFFFF          <1>     call save_fpu_context   ; void save_fpu_context(eax);
   210                              <1> 
   211                              <1>     ; 今回のFPUコンテキストを復帰
   212 00001898 89F3                <1>     mov ebx, esi
   213 0000189A E898FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   214 0000189F E8B4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   215                              <1> 
   216 000018A4 FB                  <1>     sti
   217                              <1> .12E:
   218 000018A5 EB0E                <1>     jmp .10E
   219                              <1> .10F:
   220 000018A7 FA                  <1>     cli
   221                              <1> 
   222                              <1>     ; 今回のFPUコンテキストを復帰
   223 000018A8 89F3                <1>     mov ebx, esi
   224 000018AA E888FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   225 000018AF E8A4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   226                              <1> 
   227 000018B4 FB                  <1>     sti
   228                              <1> .10E:
   229                              <1> 
   230 000018B5 8935[C0180000]      <1>     mov [.last_tss], esi
   231                              <1> 
   232 000018BB 07                  <1>     pop es
   233 000018BC 1F                  <1>     pop ds
   234 000018BD 61                  <1>     popa
   235                              <1> 
   236 000018BE CF                  <1>     iret
   237                              <1> 
   238 000018BF 00                  <1> ALIGN 4, db 0
   239 000018C0 00000000            <1> .last_tss: dd 0
   154                                  %include "../modules/protect/wait_tick.s"
   155                              <1> wait_tick:
   156 000018C4 55                  <1>     push ebp
   157 000018C5 89E5                <1>     mov ebp, esp
   158                              <1> 
   159 000018C7 50                  <1>     push eax
   160 000018C8 51                  <1>     push ecx
   161                              <1> 
   162                              <1>     ; ウェイト
   163 000018C9 8B4D08              <1>     mov ecx, [ebp + 8]      ; ECX = ウェイト回数
   164 000018CC A1[140A0000]        <1>     mov eax, [TIMER_COUNT]  ; EAX = TIMER
   165                              <1> 
   166                              <1> .10L:
   167 000018D1 3905[140A0000]      <1>     cmp [TIMER_COUNT], eax  ; for(i=0; i < ecx; i++) while(TIMER == eax);
   168 000018D7 74F8                <1>     je .10L
   169 000018D9 40                  <1>     inc eax
   170 000018DA E2F5                <1>     loop .10L
   171                              <1> 
   172 000018DC 59                  <1>     pop ecx
   173 000018DD 58                  <1>     pop eax
   174                              <1> 
   175 000018DE 89EC                <1>     mov esp, ebp
   176 000018E0 5D                  <1>     pop ebp
   177                              <1> 
   178 000018E1 C3                  <1>     ret
   155                                  %include "../modules/protect/memcpy.s"
   156                              <1> memcpy:     ; void memcpy(src, dest, size);
   157 000018E2 55                  <1>     push ebp
   158 000018E3 89E5                <1>     mov ebp, esp
   159                              <1> 
   160 000018E5 51                  <1>     push ecx
   161 000018E6 56                  <1>     push esi
   162 000018E7 57                  <1>     push edi
   163                              <1> 
   164 000018E8 FC                  <1>     cld     ; clear direction flag
   165 000018E9 8B7D08              <1>     mov edi, [ebp + 8]     ; src
   166 000018EC 8B750C              <1>     mov esi, [ebp + 12]    ; dest
   167 000018EF 8B4D10              <1>     mov ecx, [ebp + 16]    ; size
   168                              <1> 
   169 000018F2 F3A4                <1>     rep movsb
   170                              <1> 
   171 000018F4 5F                  <1>     pop edi
   172 000018F5 5E                  <1>     pop esi
   173 000018F6 59                  <1>     pop ecx
   174                              <1> 
   175 000018F7 89EC                <1>     mov esp, ebp
   176 000018F9 5D                  <1>     pop ebp
   177                              <1> 
   178 000018FA C3                  <1>     ret
   156                                  
   157                                  ;パディング
   158 000018FB 00<rep 705h>                times KERNEL_SIZE - ($ - $$) db 0
   159                                  
   160                                  ; FAT
   161                                  %include "fat.s"
   162                              <1> ; FAT:FAT-1
   163                              <1>     times (FAT1_START) - ($ - $$) db 0x00
   164                              <1> 
   165                              <1> FAT1:
   166 00002000 FFFF                <1>     db 0xFF, 0xFF   ; クラスタ：0
   167 00002002 FFFF                <1>     dw 0xFFFF       ; クラスタ：1
   168 00002004 FFFF                <1>     dw 0xFFFF       ; クラスタ：2
   169                              <1> 
   170                              <1> ; FAT:FAT-2
   171 00002006 00<rep 1FFFAh>      <1>     times (FAT2_START) - ($ - $$) db 0x00
   172                              <1> 
   173                              <1> FAT2:
   174 00022000 FFFF                <1>     db 0xFF, 0xFF   ; クラスタ：0
   175 00022002 FFFF                <1>     dw 0xFFFF       ; クラスタ：1
   176 00022004 FFFF                <1>     dw 0xFFFF       ; クラスタ：2
   177                              <1> 
   178                              <1> ; FAT:ルートディレクトリ領域
   179 00022006 00<rep 1FFFAh>      <1>     times (ROOT_START) - ($ - $$) db 0x00
   180                              <1> 
   181                              <1> FAT_ROOT:
   182 00042000 424F4F5441424C4544- <1>     db 'BOOTABLE', 'DSK'                ; ボリュームラベル
   182 00042009 534B                <1>
   183 0004200B 28                  <1>     db ATTR_ARCHIVE | ATTR_VOLUME_ID    ; 属性
   184 0004200C 00                  <1>     db 0x00                             ; 予約
   185 0004200D 00                  <1>     db 0x00                             ; TS
   186 0004200E 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)   ; 作成時刻
   187 00042010 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 作成日
   188 00042012 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; アクセス日
   189 00042014 0000                <1>     dw 0x0000                           ; 予約
   190 00042016 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)   ; 更新時刻
   191 00042018 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 更新日
   192 0004201A 0000                <1>     dw 0                                ; 先頭クラスタ
   193 0004201C 00000000            <1>     dd 0                                ; ファイルサイズ
   194                              <1> 
   195 00042020 5350454349414C2054- <1>     db 'SPECIAL ', 'TXT'                ; ボリュームラベル
   195 00042029 5854                <1>
   196 0004202B 20                  <1>     db ATTR_ARCHIVE                     ; 属性
   197 0004202C 00                  <1>     db 0x00                             ; 予約
   198 0004202D 00                  <1>     db 0x00                             ; TS
   199 0004202E 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)   ; 作成時刻
   200 00042030 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 作成日
   201 00042032 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; アクセス日
   202 00042034 0000                <1>     dw 0x0000                           ; 予約
   203 00042036 0000                <1>     dw ( 0 << 11) | ( 0 << 5)| (0 / 2)   ; 更新時刻
   204 00042038 0100                <1>     dw ( 0 <<  9) | (0 << 5) | ( 1)     ; 更新日
   205 0004203A 0000                <1>     dw 0                                ; 先頭クラスタ
   206 0004203C 0B000000            <1>     dd FILE.end - FILE                  ; ファイルサイズ
   207                              <1> 
   208                              <1> 
   209                              <1> ; FAT:データ領域
   210 00042040 00<rep 3FC0h>       <1>     times FILE_START - ($ - $$) db 0x00
   211 00046000 68656C6C6F2C204641- <1> FILE: db 'hello, FAT!'
   211 00046009 5421                <1>
   212 0004600B 00                  <1> .end: db 0
   213                              <1> 
   214 0004600C 00<rep 1F4h>        <1> ALIGN 512, db 0x00
   215 00046200 00<rep 7E00h>       <1>     times (512 * 63) db 0x00

     1                                  ; マクロ
     2                                  %include "../include/macro.s"   ; C言語と同等の関数呼び出し
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
     3                                  %include "../include/define.s"  ; 各種定数の宣言
     4                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
     5                              <1> 
     6                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     7                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     8                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートプログラムのセクタ数
     4                                  
     5                                      ORG BOOT_LOAD           ; ロードアドレスをアセンブラに指示
     6                                  
     7                                  entry:
     8 00000000 EB58                        jmp ipl      ; jump to ipl
     9                                  
    10                                      ; BPB(BIOS Parameter Block
    11 00000002 90<rep 58h>                 times 90 - ($ - $$) db 0x90
    12                                  
    13                                  
    14                                      ; IPL(Initial Program Loader)
    15                                  ipl:
    16 0000005A FA                          cli         ; clear interrupu flag 割込み禁止
    17                                  
    18                                  
    19 0000005B B80000                      mov ax, 0x0000
    20 0000005E 8ED8                        mov ds, ax
    21 00000060 8EC0                        mov es, ax
    22 00000062 8ED0                        mov ss, ax
    23 00000064 BC007C                      mov sp, BOOT_LOAD
    24                                      
    25 00000067 FB                          sti         ; set interrupt flag 割り込み許可
    26                                  
    27 00000068 8816[B800]                  mov [BOOT + drive.no], dl    ; ブートドライブの番号(DL)を保存
    28                                  
    29 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0
    29 00000074 02                 
    30                                  
    31                                      ; 残りのセクタをすべて読み込む
    32 00000075 BB0F00                      mov bx, BOOT_SECT - 1           ; bx: 残りのブートセクタ数
    33 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; cx: 次のロードアドレス
    34                                  
    35 0000007B 515368[B800]E81B01-         cdecl read_chs, BOOT, bx, cx    ; ax = read_chs(BOOT, bx, cx);
    35 00000083 83C406             
    36                                  
    37 00000086 39D8                        cmp ax, bx
    38                                  .10Q:
    39 00000088 740C                        jz .10E                 ; 読み込んだセクタ数==読み込むセクタ数
    40                                  .10T:
    41 0000008A 68[A600]E8300083C4-         cdecl puts, .e0         ; 失敗
    41 00000092 02                 
    42 00000093 E8C900                      call reboot             ; 戻ってこない
    43                                  .10E:
    44                                      ; 次のステージへ
    45 00000096 E96701                      jmp stage_2
    46                                  
    47                                  
    48                                  ; Data
    49 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0x00
    49 000000A2 2E0A0D00           
    50 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    50 000000AF 746F72207265616400 
    51                                  
    52                                  ALIGN 2, db 0
    53                                  BOOT:           ; ブートドライブ関係の情報
    54                                      istruc drive    ; struct driveを宣言
    55 000000B8 0000                            at drive.no, dw 0       ; ドライブ番号
    56 000000BA 0000                            at drive.cyln, dw 0     ; C:シリンダ
    57 000000BC 0000                            at drive.head, dw 0     ; H:ヘッド
    58 000000BE 0200                            at drive.sect, dw 2     ; S:セクタ
    59                                      iend
    60                                  
    61                                  ; モジュール
    62                                  %include "../modules/real/puts.s"
    63                              <1> puts:       ; void puts(str);
    64 000000C0 55                  <1>     push bp
    65 000000C1 89E5                <1>     mov bp, sp
    66                              <1> 
    67 000000C3 50                  <1>     push ax
    68 000000C4 53                  <1>     push bx
    69 000000C5 56                  <1>     push si
    70                              <1> 
    71 000000C6 8B7604              <1>     mov si, [bp + 4]    ; si=文字列のアドレス
    72                              <1> 
    73 000000C9 B40E                <1>     mov ah, 0x0E
    74 000000CB BB0000              <1>     mov bx, 0x0000
    75 000000CE FC                  <1>     cld
    76                              <1> 
    77                              <1> .10L:
    78 000000CF AC                  <1>     lodsb
    79                              <1> 
    80 000000D0 3C00                <1>     cmp al, 0x00
    81 000000D2 7404                <1>     je .10E
    82                              <1> 
    83 000000D4 CD10                <1>     int 0x10
    84 000000D6 EBF7                <1>     jmp .10L
    85                              <1> 
    86                              <1> .10E:
    87 000000D8 5E                  <1>     pop si
    88 000000D9 5B                  <1>     pop bx
    89 000000DA 58                  <1>     pop ax
    90                              <1> 
    91 000000DB 89EC                <1>     mov sp, bp
    92 000000DD 5D                  <1>     pop bp
    93                              <1> 
    94 000000DE C3                  <1>     ret
    63                                  %include "../modules/real/itoa.s"
    64                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
    65                              <1> ; num   変換する値
    66                              <1> ; buff  保存先バッファアドレス
    67                              <1> ; size  保存先バッファサイズ
    68                              <1> ; radix 基数（2, 8, 10, 16)
    69                              <1> ; flags 
    70                              <1> ;   B2: 空白を'0'で埋める
    71                              <1> ;   B1: '+/-'記号を付加する
    72                              <1> ;   B0: 値を符号付き変数として扱う
    73                              <1> 
    74 000000DF 55                  <1>     push bp
    75 000000E0 89E5                <1>     mov bp, sp
    76                              <1> 
    77 000000E2 50                  <1>     push ax
    78 000000E3 53                  <1>     push bx
    79 000000E4 51                  <1>     push cx
    80 000000E5 52                  <1>     push dx
    81 000000E6 56                  <1>     push si
    82 000000E7 57                  <1>     push di
    83                              <1> 
    84                              <1> 
    85 000000E8 8B4604              <1>     mov ax, [bp + 4]    ; num
    86 000000EB 8B4E08              <1>     mov cx, [bp + 8]    ; size
    87 000000EE 8B7606              <1>     mov si, [bp + 6]    ; buff
    88                              <1> 
    89 000000F1 89F7                <1>     mov di, si
    90 000000F3 01CF                <1>     add di, cx
    91 000000F5 4F                  <1>     dec di              ; di = &si[cx-1]
    92                              <1> 
    93 000000F6 8B5E0C              <1>     mov bx, word [bp + 12]   ; flags
    94                              <1> 
    95                              <1>     ; 符号付き判定
    96 000000F9 F7C30100            <1>     test bx, 0b0001     ; 論理積を計算、0ならZFをセット
    97                              <1> .10Q:
    98 000000FD 7408                <1>     je .10E         ; E=Exit
    99 000000FF 83F800              <1>     cmp ax, 0
   100                              <1> .12Q:
   101 00000102 7D03                <1>     jge .12E
   102 00000104 83CB02              <1>     or bx, 0b0010
   103                              <1> .12E:
   104                              <1> .10E:
   105                              <1> 
   106                              <1>     ; 符号出力判定
   107 00000107 F7C30200            <1>     test bx, 0b0010
   108                              <1> .20Q:
   109 0000010B 7410                <1>     je .20E
   110 0000010D 83F800              <1>     cmp ax, 0
   111                              <1> .22Q:
   112 00000110 7D07                <1>     jge .22F
   113 00000112 F7D8                <1>     neg ax
   114 00000114 C6042D              <1>     mov [si], byte '-'
   115 00000117 EB03                <1>     jmp .22E
   116                              <1> .22F:
   117                              <1>     
   118 00000119 C6042B              <1>     mov [si], byte '+'
   119                              <1> .22E:
   120 0000011C 49                  <1>     dec cx
   121                              <1> .20E:
   122                              <1> 
   123                              <1>     ; ASCII変換
   124 0000011D 8B5E0A              <1>     mov bx, [bp + 10]   ; radix(基数)
   125                              <1> .30L:
   126 00000120 BA0000              <1>     mov dx, 0
   127 00000123 F7F3                <1>     div bx      ; 商：ax, あまり: dx
   128                              <1> 
   129 00000125 89D6                <1>     mov si, dx
   130 00000127 8A94[4F01]          <1>     mov dl, byte [.ascii + si]
   131                              <1> 
   132 0000012B 8815                <1>     mov [di], dl
   133 0000012D 4F                  <1>     dec di
   134                              <1> 
   135 0000012E 83F800              <1>     cmp ax, 0
   136 00000131 E0ED                <1>     loopnz .30L
   137                              <1> .30E:
   138                              <1> 
   139 00000133 83F900              <1>     cmp cx, 0
   140                              <1> .40Q:
   141 00000136 740D                <1>     je .40E
   142 00000138 B020                <1>     mov al, ' '
   143 0000013A 837E0C04            <1>     cmp [bp + 12], word 0b0100
   144                              <1> .42Q:
   145 0000013E 7502                <1>     jne .42E
   146 00000140 B030                <1>     mov al, '0'
   147                              <1> .42E:
   148 00000142 FD                  <1>     std         ; dimention flag = 1(-方向)
   149 00000143 F3AA                <1>     rep stosb   ; while (--cx) *di-- = al;
   150                              <1> .40E:
   151                              <1> 
   152 00000145 5F                  <1>     pop di
   153 00000146 5E                  <1>     pop si
   154 00000147 5A                  <1>     pop dx
   155 00000148 59                  <1>     pop cx
   156 00000149 5B                  <1>     pop bx
   157 0000014A 58                  <1>     pop ax
   158                              <1> 
   159 0000014B 89EC                <1>     mov sp, bp
   160 0000014D 5D                  <1>     pop bp
   161                              <1> 
   162 0000014E C3                  <1>     ret
   163                              <1> 
   164 0000014F 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   164 00000158 39414243444546      <1>
    64                                  %include "../modules/real/reboot.s"
    65                              <1> reboot:
    66 0000015F 68[7B01]E85BFF83C4- <1>     cdecl puts, .s0
    66 00000167 02                  <1>
    67                              <1> 
    68                              <1> .10L:
    69 00000168 B410                <1>     mov ah, 0x10
    70 0000016A CD16                <1>     int 0x16
    71                              <1> 
    72 0000016C 3C20                <1>     cmp al, ' '
    73 0000016E 75F8                <1>     jne .10L
    74                              <1> 
    75 00000170 68[9901]E84AFF83C4- <1>     cdecl puts, .s1
    75 00000178 02                  <1>
    76                              <1> 
    77 00000179 CD19                <1>     int 0x19
    78                              <1> 
    79 0000017B 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    79 00000184 414345206B65792074- <1>
    79 0000018D 6F207265626F6F742E- <1>
    79 00000196 2E2E00              <1>
    80 00000199 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    65                                  %include "../modules/real/read_chs.s"
    66                              <1> read_chs:           ; int read_chs(drive, sect, dst);
    67                              <1> ; drive: drive構造体のアドレス
    68                              <1> ; sect:  読み出しセクタ数
    69                              <1> ; dst:   読み出し先アドレス
    70                              <1> ; 戻り値:読み込んだセクタ数
    71 0000019E 55                  <1>     push bp
    72 0000019F 89E5                <1>     mov bp, sp
    73 000001A1 6A03                <1>     push 3          ; リトライ回数
    74 000001A3 6A00                <1>     push 0          ; 読み込みセクタ数
    75                              <1> 
    76 000001A5 53                  <1>     push bx
    77 000001A6 51                  <1>     push cx
    78 000001A7 52                  <1>     push dx
    79 000001A8 06                  <1>     push es
    80 000001A9 56                  <1>     push si
    81                              <1> 
    82                              <1>     ; 処理開始
    83 000001AA 8B7604              <1>     mov si, [bp + 4]    ; drive パラメータバッファ
    84                              <1>     
    85                              <1>     ; cxレジスタの設定
    86 000001AD 8A6C02              <1>     mov ch, [si + drive.cyln + 0]
    87 000001B0 8A4C03              <1>     mov cl, [si + drive.cyln + 1]
    88 000001B3 C0E106              <1>     shl cl, 6
    89 000001B6 0A4C06              <1>     or cl, [si + drive.sect]
    90                              <1> 
    91                              <1>     ; セクタ読み込み
    92 000001B9 8A7404              <1>     mov dh, [si + drive.head];ヘッド番号
    93 000001BC 8A14                <1>     mov dl, [si + drive.no] ; ドライブ番号
    94 000001BE B80000              <1>     mov ax, 0x0000          ; 初期化
    95 000001C1 8EC0                <1>     mov es, ax              ; セグメント
    96 000001C3 8B5E08              <1>     mov bx, [bp + 8]        ; コピー先
    97                              <1> .10L:
    98                              <1> 
    99 000001C6 B402                <1>     mov ah, 0x02        ; セクタ読み込み
   100 000001C8 8A4606              <1>     mov al, [bp + 6]    ; 読み込みセクタ数
   101 000001CB CD13                <1>     int 0x13
   102 000001CD 7304                <1>     jnc .11E            ; if(success) goto .11E
   103                              <1> 
   104 000001CF B000                <1>     mov al, 0           ; failed, 読み込んだセクタ数=0
   105 000001D1 EB0C                <1>     jmp .10E
   106                              <1> .11E:
   107                              <1>     
   108 000001D3 3C00                <1>     cmp al, 0
   109 000001D5 7508                <1>     jne .10E            ; if(読み込んだセクタ != 0) goto .10E
   110                              <1>     
   111 000001D7 B80000              <1>     mov ax, 0
   112 000001DA FF4EFE              <1>     dec word [bp - 2]   ; retry--
   113 000001DD 75E7                <1>     jnz .10L            ; if(retry != 0) goto .10L
   114                              <1> .10E:
   115 000001DF B400                <1>     mov ah, 0           ; ステータス情報を破棄
   116                              <1> 
   117 000001E1 5E                  <1>     pop si
   118 000001E2 07                  <1>     pop es
   119 000001E3 5A                  <1>     pop dx
   120 000001E4 59                  <1>     pop cx
   121 000001E5 5B                  <1>     pop bx
   122                              <1> 
   123 000001E6 89EC                <1>     mov sp, bp
   124 000001E8 5D                  <1>     pop bp
   125                              <1> 
   126 000001E9 C3                  <1>     ret
    66                                  
    67 000001EA 00<rep 14h>                 times 510 - ($ - $$) db 0x00
    68 000001FE 55AA                        db 0x55, 0xAA
    69                                  
    70                                  
    71                                  
    72                                  
    73                                  ; ブート処理の第２ステージ
    74                                  stage_2:
    75 00000200 68[0B02]E8BAFE83C4-         cdecl puts, .s0
    75 00000208 02                 
    76                                      
    77 00000209 EBFE                        jmp $       ; while(1)
    78                                  
    79                                  ; Data
    80 0000020B 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
    80 00000214 2E2E2E0A0D00       
    81                                  
    82                                  ; パディング(このファイルは8kBとする）
    83 0000021A 00<rep 1DE6h>               times BOOT_SIZE - ($ - $$) db 0 ; 8kB

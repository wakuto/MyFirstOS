     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    27                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
    28                              <1>     SP_TASK_3 equ STACK_BASE + (STACK_SIZE * 4)
    29                              <1> 
    30                              <1>     CR3_BASE equ 0x0010_5000    ; ページ変換テーブル タスク3用
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc rose
    98 00000000 ????????            <1>     .x0         resd 1      ; 左上座標
    99 00000004 ????????            <1>     .y0         resd 1      ; 
   100 00000008 ????????            <1>     .x1         resd 1      ; 右下座標
   101 0000000C ????????            <1>     .y1         resd 1      ;
   102                              <1> 
   103 00000010 ????????            <1>     .n          resd 1      ; 変数n
   104 00000014 ????????            <1>     .d          resd 1      ; 変数d
   105                              <1> 
   106                              <1>     ;描画色
   107 00000018 ????????            <1>     .color_x    resd 1      ; x軸
   108 0000001C ????????            <1>     .color_y    resd 1      ; y軸
   109 00000020 ????????            <1>     .color_z    resd 1      ; 枠
   110 00000024 ????????            <1>     .color_s    resd 1      ; 文字
   111 00000028 ????????            <1>     .color_f    resd 1      ; グラフ描画
   112 0000002C ????????            <1>     .color_b    resd 1      ; グラフ消去
   113                              <1> 
   114 00000030 <res 10h>           <1>     .title      resb 16     ; タイトル
   115                              <1> endstruc
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[18020000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[88020000]        <1>  mov edi, %1
    67 0000001D B8[B6020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[90020000]        <1>  mov edi, %1
    67 00000038 B8[8E030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                      set_desc GDT.tss_2, TSS_2       ; タスク2用TSSの設定
    63 0000004C 50                  <1>  push eax
    64 0000004D 57                  <1>  push edi
    65                              <1> 
    66 0000004E BF[98020000]        <1>  mov edi, %1
    67 00000053 B8[66040000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000058 66894702            <1>  mov [edi + 2], ax
    74 0000005C C1E810              <1>  shr eax, 16
    75 0000005F 884704              <1>  mov [edi + 4], al
    76 00000062 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000065 5F                  <1>  pop edi
    79 00000066 58                  <1>  pop eax
    25                                      set_desc GDT.tss_3, TSS_3       ; タスク3用TSSの設定
    63 00000067 50                  <1>  push eax
    64 00000068 57                  <1>  push edi
    65                              <1> 
    66 00000069 BF[A0020000]        <1>  mov edi, %1
    67 0000006E B8[3E050000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000073 66894702            <1>  mov [edi + 2], ax
    74 00000077 C1E810              <1>  shr eax, 16
    75 0000007A 884704              <1>  mov [edi + 4], al
    76 0000007D 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000080 5F                  <1>  pop edi
    79 00000081 58                  <1>  pop eax
    26                                  
    27                                      ; コールゲートの設定
    28                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 00000082 50                  <1>  push eax
    84 00000083 57                  <1>  push edi
    85                              <1> 
    86 00000084 BF[A8020000]        <1>  mov edi, %1
    87 00000089 B8[14120000]        <1>  mov eax, %2
    88                              <1> 
    89 0000008E 668907              <1>  mov [edi + 0], ax
    90 00000091 C1E810              <1>  shr eax, 16
    91 00000094 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 00000098 5F                  <1>  pop edi
    94 00000099 58                  <1>  pop eax
    29                                  
    30                                      ; LDTの設定
    31                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 0000009A 50                  <1>  push eax
    64 0000009B 57                  <1>  push edi
    65                              <1> 
    66 0000009C BF[80020000]        <1>  mov edi, %1
    67 000000A1 B8[20020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 000000A6 66C7074700          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000AB 66894702            <1>  mov [edi + 2], ax
    74 000000AF C1E810              <1>  shr eax, 16
    75 000000B2 884704              <1>  mov [edi + 4], al
    76 000000B5 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000B8 5F                  <1>  pop edi
    79 000000B9 58                  <1>  pop eax
    32                                  
    33                                      ; GDTをロード(再設定)
    34 000000BA 0F0115[B0020000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    35                                  
    36                                      ; スタックの設定
    37 000000C1 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    38                                  
    39                                      ; タスクレジスタの初期化
    40 000000C6 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    41 000000CA 0F00D8                      ltr ax              ; タスクレジスタの設定
    42                                  
    43                                      ; 初期化
    44 000000CD E83C0F0000                  cdecl init_int                  ; 割り込みベクタの初期化
    45 000000D2 E8860F0000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    46                                  
    47                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 000000D7 50                  <1>  push eax
    31 000000D8 57                  <1>  push edi
    32                              <1> 
    33 000000D9 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000DE B8[3F100000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000E3 668907              <1>  mov [edi + 0], ax
    41 000000E6 C1E810              <1>  shr eax, 16
    42 000000E9 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000ED 5F                  <1>  pop edi
    45 000000EE 58                  <1>  pop eax
    48                                      set_vect 0x07, int_nm           ; 割り込み処理の登録：デバイス使用不可例外
    30 000000EF 50                  <1>  push eax
    31 000000F0 57                  <1>  push edi
    32                              <1> 
    33 000000F1 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000F6 B8[B1120000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000FB 668907              <1>  mov [edi + 0], ax
    41 000000FE C1E810              <1>  shr eax, 16
    42 00000101 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000105 5F                  <1>  pop edi
    45 00000106 58                  <1>  pop eax
    49                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 00000107 50                  <1>  push eax
    31 00000108 57                  <1>  push edi
    32                              <1> 
    33 00000109 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000010E B8[16060000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000113 668907              <1>  mov [edi + 0], ax
    41 00000116 C1E810              <1>  shr eax, 16
    42 00000119 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000011D 5F                  <1>  pop edi
    45 0000011E 58                  <1>  pop eax
    50                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 0000011F 50                  <1>  push eax
    31 00000120 57                  <1>  push edi
    32                              <1> 
    33 00000121 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000126 B8[C5100000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 0000012B 668907              <1>  mov [edi + 0], ax
    41 0000012E C1E810              <1>  shr eax, 16
    42 00000131 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000135 5F                  <1>  pop edi
    45 00000136 58                  <1>  pop eax
    51                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 00000137 50                  <1>  push eax
    31 00000138 57                  <1>  push edi
    32                              <1> 
    33 00000139 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000013E B8[88100000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000143 668907              <1>  mov [edi + 0], ax
    41 00000146 C1E810              <1>  shr eax, 16
    42 00000149 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000014D 5F                  <1>  pop edi
    45 0000014E 58                  <1>  pop eax
    52                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 0000014F 50                  <1>  push eax
    31 00000150 57                  <1>  push edi
    32                              <1> 
    33 00000151 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000156 B8[44120000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 0000015B 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000161 668907              <1>  mov [edi + 0], ax
    41 00000164 C1E810              <1>  shr eax, 16
    42 00000167 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000016B 5F                  <1>  pop edi
    45 0000016C 58                  <1>  pop eax
    53                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 0000016D 50                  <1>  push eax
    31 0000016E 57                  <1>  push edi
    32                              <1> 
    33 0000016F BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000174 B8[52120000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 00000179 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 0000017F 668907              <1>  mov [edi + 0], ax
    41 00000182 C1E810              <1>  shr eax, 16
    42 00000185 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000189 5F                  <1>  pop edi
    45 0000018A 58                  <1>  pop eax
    54                                  
    55                                      ; デバイスの割り込み許可
    56 0000018B 6A10E81F0F00006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    56 00000194 C404               
    57                                  
    58                                      ; IMR（割り込みマスクレジスタ）の設定
    59                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 00000196 B0F8                <1>  mov al, %2
    50 00000198 E621                <1>  out %1, al
    60                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 0000019A B0FE                <1>  mov al, %2
    50 0000019C E6A1                <1>  out %1, al
    61                                  
    62 0000019E FB                          sti                             ; 割り込み許可
    63                                  
    64 0000019F 6A0D6A3FE8FC080000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    64 000001A8 6683C408           
    65 000001AC 6A046A3FE870090000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    65 000001B5 6683C408           
    66 000001B9 68[03020000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    66 000001C1 00006A0E6A19E81B09-
    66 000001CA 00006683C410       
    67                                  
    68                                  
    69                                  
    70                                  .10L:
    71                                      ; 回転する棒の表示
    72 000001D0 E806100000                  cdecl draw_rotation_bar
    73                                  
    74                                      ; キーコードの取得
    75 000001D5 68[14020000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    75 000001DB [EC100000]E8200F00-
    75 000001E3 006683C408         
    76 000001E8 83F800                      cmp eax, 0
    77 000001EB 7414                        je .10E
    78                                  
    79                                      ; キーコードの表示
    80 000001ED 68[EC100000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    80 000001F5 02E86E0F00006683C4-
    80 000001FE 0C                 
    81                                  
    82 000001FF EBCF                        jmp .10L
    83                                  .10E:
    84                                  
    85                                  
    86                                      ; 処理の終了
    87 00000201 EBFE                        jmp $
    88                                  
    89 00000203 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    89 0000020C 65726E656C212000   
    90                                  
    91                                  ALIGN 4, db 0
    92 00000214 00000000                .int_key: dd 0
    93                                  
    94                                  ALIGN 4, db 0
    95 00000218 00000000                FONT_ADR: dd 0
    96 0000021C 00000000                RTC_TIME: dd 0
    97                                  
    98                                  ; タスク
    99                                  %include "descriptor.s"
   100                              <1> ; ローカルディスクリプタテーブル
   101 00000220 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   102 00000228 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   103 00000230 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   104 00000238 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   105 00000240 FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   106 00000248 FFFF000000FACF00    <1> .cs_task_2: dq 0x00CFFA000000FFFF   ; CODE 4G
   107 00000250 FFFF000000F2CF00    <1> .ds_task_2: dq 0x00CFF2000000FFFF   ; DATA 4G
   108 00000258 FFFF000000FACF00    <1> .cs_task_3: dq 0x00CFFA000000FFFF   ; CODE 4G
   109 00000260 FFFF000000F2CF00    <1> .ds_task_3: dq 0x00CFF2000000FFFF   ; DATA 4G
   110                              <1> .end:
   111                              <1> 
   112                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   113                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   114                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   115                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   116                              <1> CS_TASK_2 equ (.cs_task_2 - LDT) | 4 | 3; タスク2用CSセレクタ
   117                              <1> DS_TASK_2 equ (.ds_task_2 - LDT) | 4 | 3; タスク2用DSセレクタ
   118                              <1> CS_TASK_3 equ (.cs_task_3 - LDT) | 4 | 3; タスク3用CSセレクタ
   119                              <1> DS_TASK_3 equ (.ds_task_3 - LDT) | 4 | 3; タスク3用DSセレクタ
   120                              <1> 
   121                              <1> LDT_LIMIT equ .end        - LDT - 1
   122                              <1> 
   123                              <1> ; グローバルディスクリプタテーブル
   124 00000268 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   125 00000270 FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   126 00000278 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   127 00000280 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   128 00000288 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   129 00000290 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   130 00000298 6700000000890000    <1> .tss_2:     dq 0x0000890000000067   ; TSSディスクリプタ
   131 000002A0 6700000000890000    <1> .tss_3:     dq 0x0000890000000067   ; TSSディスクリプタ
   132 000002A8 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   133                              <1> .end:
   134                              <1> 
   135                              <1> CS_KERNEL equ .cs_kernel - GDT
   136                              <1> DS_KERNEL equ .ds_kernel - GDT
   137                              <1> SS_LDT    equ .ldt       - GDT
   138                              <1> SS_TASK_0 equ .tss_0     - GDT
   139                              <1> SS_TASK_1 equ .tss_1     - GDT
   140                              <1> SS_TASK_2 equ .tss_2     - GDT
   141                              <1> SS_TASK_3 equ .tss_3     - GDT
   142                              <1> SS_GATE_0 equ .call_gate - GDT
   143                              <1> 
   144 000002B0 4700                <1> GDTR: dw GDT.end - GDT - 1
   145 000002B2 [68020000]          <1>       dd GDT
   146                              <1> 
   147                              <1> ; TSS
   148                              <1> TSS_0:
   149 000002B6 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   150 000002BA 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   151 000002BE 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   152 000002C2 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   153 000002C6 00000000            <1> .ss1:       dd 0                    ;* 16:
   154 000002CA 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   155 000002CE 00000000            <1> .ss2:       dd 0                    ;* 24:
   156 000002D2 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   157 000002D6 00000000            <1> .eip:       dd 0                    ;  32:EIP
   158 000002DA 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   159 000002DE 00000000            <1> .eax:       dd 0                    ;  40:EAX
   160 000002E2 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   161 000002E6 00000000            <1> .edx:       dd 0                    ;  48:EDX
   162 000002EA 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   163 000002EE 00000000            <1> .esp:       dd 0                    ;  56:ESP
   164 000002F2 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   165 000002F6 00000000            <1> .esi:       dd 0                    ;  64:ESI
   166 000002FA 00000000            <1> .edi:       dd 0                    ;  68:EDI
   167 000002FE 00000000            <1> .es:        dd 0                    ;  72:ES
   168 00000302 00000000            <1> .cs:        dd 0                    ;  76:CS
   169 00000306 00000000            <1> .ss:        dd 0                    ;  80:SS
   170 0000030A 00000000            <1> .ds:        dd 0                    ;  84:DS
   171 0000030E 00000000            <1> .fs:        dd 0                    ;  88:FS
   172 00000312 00000000            <1> .gs:        dd 0                    ;  92:GS
   173 00000316 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   174 0000031A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   175 0000031E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   176                              <1> 
   177                              <1> TSS_1:
   178 0000038E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   179 00000392 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   180 00000396 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   181 0000039A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   182 0000039E 00000000            <1> .ss1:       dd 0                    ;* 16:
   183 000003A2 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   184 000003A6 00000000            <1> .ss2:       dd 0                    ;* 24:
   185 000003AA 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   186 000003AE [74060000]          <1> .eip:       dd task_1               ;  32:EIP
   187 000003B2 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   188 000003B6 00000000            <1> .eax:       dd 0                    ;  40:EAX
   189 000003BA 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   190 000003BE 00000000            <1> .edx:       dd 0                    ;  48:EDX
   191 000003C2 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   192 000003C6 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   193 000003CA 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   194 000003CE 00000000            <1> .esi:       dd 0                    ;  64:ESI
   195 000003D2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   196 000003D6 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   197 000003DA 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   198 000003DE 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   199 000003E2 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   200 000003E6 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   201 000003EA 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   202 000003EE 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   203 000003F2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   204 000003F6 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   205                              <1> 
   206                              <1> TSS_2:
   207 00000466 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   208 0000046A 003A1000            <1> .esp0:      dd SP_TASK_2 - 512      ;*  4:ESP0
   209 0000046E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   210 00000472 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   211 00000476 00000000            <1> .ss1:       dd 0                    ;* 16:
   212 0000047A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   213 0000047E 00000000            <1> .ss2:       dd 0                    ;* 24:
   214 00000482 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   215 00000486 [A9060000]          <1> .eip:       dd task_2               ;  32:EIP
   216 0000048A 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   217 0000048E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   218 00000492 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   219 00000496 00000000            <1> .edx:       dd 0                    ;  48:EDX
   220 0000049A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   221 0000049E 003C1000            <1> .esp:       dd SP_TASK_2            ;  56:ESP
   222 000004A2 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   223 000004A6 00000000            <1> .esi:       dd 0                    ;  64:ESI
   224 000004AA 00000000            <1> .edi:       dd 0                    ;  68:EDI
   225 000004AE 37000000            <1> .es:        dd DS_TASK_2            ;  72:ES
   226 000004B2 2F000000            <1> .cs:        dd CS_TASK_2            ;  76:CS
   227 000004B6 37000000            <1> .ss:        dd DS_TASK_2            ;  80:SS
   228 000004BA 37000000            <1> .ds:        dd DS_TASK_2            ;  84:DS
   229 000004BE 37000000            <1> .fs:        dd DS_TASK_2            ;  88:FS
   230 000004C2 37000000            <1> .gs:        dd DS_TASK_2            ;  92:GS
   231 000004C6 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   232 000004CA 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   233 000004CE 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   234                              <1> 
   235                              <1> TSS_3:
   236 0000053E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   237 00000542 003E1000            <1> .esp0:      dd SP_TASK_3 - 512      ;*  4:ESP0
   238 00000546 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   239 0000054A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   240 0000054E 00000000            <1> .ss1:       dd 0                    ;* 16:
   241 00000552 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   242 00000556 00000000            <1> .ss2:       dd 0                    ;* 24:
   243 0000055A 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   244 0000055E [7C070000]          <1> .eip:       dd task_3               ;  32:EIP
   245 00000562 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   246 00000566 00000000            <1> .eax:       dd 0                    ;  40:EAX
   247 0000056A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   248 0000056E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   249 00000572 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   250 00000576 00401000            <1> .esp:       dd SP_TASK_3            ;  56:ESP
   251 0000057A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   252 0000057E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   253 00000582 00000000            <1> .edi:       dd 0                    ;  68:EDI
   254 00000586 47000000            <1> .es:        dd DS_TASK_3            ;  72:ES
   255 0000058A 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   256 0000058E 47000000            <1> .ss:        dd DS_TASK_3            ;  80:SS
   257 00000592 47000000            <1> .ds:        dd DS_TASK_3            ;  84:DS
   258 00000596 47000000            <1> .fs:        dd DS_TASK_3            ;  88:FS
   259 0000059A 47000000            <1> .gs:        dd DS_TASK_3            ;  92:GS
   260 0000059E 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   261 000005A2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   262 000005A6 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   100                                  %include "modules/int_timer.s"
   101                              <1> int_timer:
   102 00000616 60                  <1>     pushad
   103 00000617 1E                  <1>     push ds
   104 00000618 06                  <1>     push es
   105                              <1> 
   106                              <1>     ; データ用セグメントの設定
   107 00000619 66B81000            <1>     mov ax, 0x0010
   108 0000061D 8ED8                <1>     mov ds, ax
   109 0000061F 8EC0                <1>     mov es, ax
   110                              <1> 
   111                              <1>     ; TICK
   112 00000621 FF05[6C060000]      <1>     inc dword [TIMER_COUNT]
   113                              <1> 
   114                              <1>     ; 割り込みフラグをクリア(EOI)
   115                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 00000627 B020                <2>  mov al, %2
    50 00000629 E620                <2>  out %1, al
   116                              <1> 
   117                              <1>     ; タスクの切り替え(task0 -> task1 -> task2 -> task0 -> ...)
   118 0000062B 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   119 0000062F 6683F820            <1>     cmp ax, SS_TASK_0   ; switch(ax)
   120 00000633 7415                <1>     je .11L
   121 00000635 6683F828            <1>     cmp ax, SS_TASK_1
   122 00000639 7418                <1>     je .12L
   123 0000063B 6683F830            <1>     cmp ax, SS_TASK_2
   124 0000063F 741B                <1>     je .13L
   125                              <1> 
   126 00000641 EA000000002000      <1>     jmp SS_TASK_0:0     ; default:
   127 00000648 EB1B                <1>     jmp .10E
   128                              <1> .11L:                   ; case SS_TASK_0:
   129 0000064A EA000000002800      <1>     jmp SS_TASK_1:0     ; タスク1に切り替え
   130 00000651 EB12                <1>     jmp .10E
   131                              <1> .12L:                   ; case SS_TASK_1:
   132 00000653 EA000000003000      <1>     jmp SS_TASK_2:0     ; タスク2に切り替え
   133 0000065A EB09                <1>     jmp .10E
   134                              <1> .13L:                   ; case SS_TASK_2:
   135 0000065C EA000000003800      <1>     jmp SS_TASK_3:0     ; タスク3に切り替え
   136 00000663 EB00                <1>     jmp .10E
   137                              <1> .10E:
   138                              <1> 
   139 00000665 07                  <1>     pop es
   140 00000666 1F                  <1>     pop ds
   141 00000667 61                  <1>     popad
   142                              <1> 
   143 00000668 CF                  <1>     iret
   144                              <1> 
   145 00000669 00<rep 3h>          <1> ALIGN 4, db 0
   146 0000066C 0000000000000000    <1> TIMER_COUNT: dq 0
   147                              <1> 
   101                                  %include "tasks/task_1.s"
   102                              <1> task_1:
   103                              <1>     ; 文字列の表示(コールゲート)
   104                              <1>     ;cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   105 00000674 68[A2060000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0 ; draw_str();
   105 0000067C 006A3FE86304000066- <1>
   105 00000685 83C410              <1>
   106                              <1> 
   107                              <1> .10L:
   108                              <1>     ; 時刻の表示
   109 00000688 A1[1C020000]        <1>     mov eax, [RTC_TIME]
   110 0000068D 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   110 00000696 48E8BE0700006683C4- <1>
   110 0000069F 10                  <1>
   111                              <1> 
   112 000006A0 EBE6                <1>     jmp .10L
   113                              <1> 
   114                              <1>     ; データ
   115 000006A2 5461736B2D3100      <1> .s0 db "Task-1", 0
   102                                  %include "tasks/task_2.s"
   103                              <1> task_2:
   104 000006A9 68[6E070000]6A076A- <1>     cdecl draw_str, 63, 1, 0x07, .s0
   104 000006B1 016A3FE82E04000066- <1>
   104 000006BA 83C410              <1>
   105                              <1> 
   106 000006BD DB05[5C070000]      <1>     fild dword [.c1000]     ; st0 = [.c1000]
   107 000006C3 D9EB                <1>     fldpi           ; st0 = pi
   108 000006C5 DA35[60070000]      <1>     fidiv dword [.c180]     ; st0 /= [.c180]
   109 000006CB D9EB                <1>     fldpi
   110 000006CD DCC0                <1>     fadd st0, st0   ; st0 += st0
   111 000006CF D9EE                <1>     fldz            ; st0 = 0
   112                              <1>     ; st0   0
   113                              <1>     ; st1   2*pi
   114                              <1>     ; st2   pi/180
   115                              <1>     ; st3   1000
   116                              <1> 
   117                              <1> .10L:
   118 000006D1 D8C2                <1>     fadd st0, st2   ; st0 += st2
   119 000006D3 D9F8                <1>     fprem           ; st0 %= st1
   120 000006D5 D9C0                <1>     fld st0         ; st0をコピー
   121 000006D7 D9FE                <1>     fsin            ; st0 = sin(st0)
   122 000006D9 D8CC                <1>     fmul st0, st4   ; st0 *= 1000
   123 000006DB DF35[64070000]      <1>     fbstp [.bcd]
   124                              <1> 
   125 000006E1 A1[64070000]        <1>     mov eax, [.bcd]
   126 000006E6 89C3                <1>     mov ebx, eax
   127                              <1> 
   128 000006E8 250F0F0000          <1>     and eax, 0x0F0F ; 上位４ビットをマスク
   129 000006ED 0D30300000          <1>     or eax, 0x3030  ; 上位４ビットに0x3に設定
   130                              <1> 
   131 000006F2 C1EB04              <1>     shr ebx, 4
   132 000006F5 81E30F0F0000        <1>     and ebx, 0x0F0F ; 上位４ビットをマスク
   133 000006FB 81CB30300000        <1>     or ebx, 0x3030  ; 上位４ビットに0x3に設定
   134                              <1> 
   135 00000701 883D[76070000]      <1>     mov [.s2 + 0], bh   ; 1桁目
   136 00000707 8825[78070000]      <1>     mov [.s3 + 0], ah   ; 小数1桁目
   137 0000070D 881D[79070000]      <1>     mov [.s3 + 1], bl   ; 小数2桁目
   138 00000713 A2[7A070000]        <1>     mov [.s3 + 2], al   ; 小数3桁目
   139                              <1> 
   140 00000718 B807000000          <1>     mov eax, 7
   141 0000071D 0FA305[6D070000]    <1>     bt [.bcd + 9], eax  ; cf = .bcd+9 から7ビット目
   142 00000724 7209                <1>     jc .10F
   143                              <1> 
   144 00000726 C605[75070000]2B    <1>     mov [.s1 + 0], byte '+'
   145 0000072D EB07                <1>     jmp .10E
   146                              <1> .10F:
   147 0000072F C605[75070000]2D    <1>     mov [.s1 + 0], byte '-'
   148                              <1> .10E:
   149                              <1> 
   150 00000736 68[75070000]6A076A- <1>     cdecl draw_str, 72, 1, 0x07, .s1
   150 0000073E 016A48E8A103000066- <1>
   150 00000747 83C410              <1>
   151                              <1> 
   152                              <1>     ; ウェイト
   153 0000074A 6A14E8BB0B00006683- <1>     cdecl wait_tick, 20
   153 00000753 C404                <1>
   154                              <1> 
   155 00000755 E977FFFFFF          <1>     jmp .10L
   156                              <1> 
   157                              <1> 
   158 0000075A 00<rep 2h>          <1> ALIGN 4, db 0
   159 0000075C E8030000            <1> .c1000: dd 1000
   160 00000760 B4000000            <1> .c180:  dd 180
   161 00000764 00<rep Ah>          <1> .bcd: times 10 db 0x00
   162 0000076E 5461736B2D3200      <1> .s0     db "Task-2", 0
   163 00000775 2D                  <1> .s1:    db "-"
   164 00000776 302E                <1> .s2:    db "0."
   165 00000778 30303000            <1> .s3:    db "000", 0
   103                                  %include "tasks/task_3.s"
   104                              <1> task_3:
   105 0000077C 89E5                <1>     mov ebp, esp
   106                              <1> 
   107 0000077E 6A00                <1>     push dword 0    ; x0    x座標原点
   108 00000780 6A00                <1>     push dword 0    ; y0    y座標原点
   109 00000782 6A00                <1>     push dword 0    ; x     x座標描画
   110 00000784 6A00                <1>     push dword 0    ; y     y座標描画
   111 00000786 6A00                <1>     push dword 0    ; r     角度
   112                              <1> 
   113                              <1>     ; 初期化
   114 00000788 BE[83080000]        <1>     mov esi, DRAW_PARAM ; esi = 描画パラメータ
   115                              <1> 
   116                              <1>     ; タイトル表示
   117 0000078D 8B06                <1>     mov eax, [esi + rose.x0]
   118 0000078F 8B5E04              <1>     mov ebx, [esi + rose.y0]
   119                              <1> 
   120 00000792 C1E803              <1>     shr eax, 3                      ; EAX = EAX /  8 x座標を文字位置に変換
   121 00000795 C1EB04              <1>     shr ebx, 4                      ; EBX = EBX / 16 y座標を文字位置に変換
   122 00000798 4B                  <1>     dec ebx                         ; 1文字分上に移動
   123 00000799 8B4E24              <1>     mov ecx, [esi + rose.color_s]   ; 文字色
   124 0000079C 8D5630              <1>     lea edx, [esi + rose.title]     ; タイトル
   125                              <1> 
   126 0000079F 52515350E83F030000- <1>     cdecl draw_str, eax, ebx, ecx, edx
   126 000007A8 6683C410            <1>
   127                              <1> 
   128                              <1>     ; X軸の中点
   129 000007AC 8B06                <1>     mov eax, [esi + rose.x0]
   130 000007AE 8B5E08              <1>     mov ebx, [esi + rose.x1]
   131 000007B1 29C3                <1>     sub ebx, eax            ; ebx = x0 - x1
   132 000007B3 D1EB                <1>     shr ebx, 1              ; ebx /= 1
   133 000007B5 01C3                <1>     add ebx, eax            ; ebx += x0
   134 000007B7 895DFC              <1>     mov [ebp - 4], ebx      ; x0 = 原点
   135                              <1> 
   136                              <1>     ; Y軸の中点
   137 000007BA 8B4604              <1>     mov eax, [esi + rose.y0]
   138 000007BD 8B5E0C              <1>     mov ebx, [esi + rose.y1]
   139 000007C0 29C3                <1>     sub ebx, eax            ; ebx = y0 - y1
   140 000007C2 D1EB                <1>     shr ebx, 1              ; ebx /= 1
   141 000007C4 01C3                <1>     add ebx, eax            ; ebx += y0
   142 000007C6 895DF8              <1>     mov [ebp - 8], ebx      ; y0 = 原点
   143                              <1> 
   144                              <1>     ; X軸の描画
   145 000007C9 8B06                <1>     mov eax, [esi + rose.x0]
   146 000007CB 8B5DF8              <1>     mov ebx, [ebp - 8]
   147 000007CE 8B4E08              <1>     mov ecx, [esi + rose.x1]
   148                              <1> 
   149 000007D1 FF761853515350E89D- <1>     cdecl draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   149 000007DA 0400006683C414      <1>
   150                              <1> 
   151                              <1>     ; Y軸の描画
   152 000007E1 8B4604              <1>     mov eax, [esi + rose.y0]
   153 000007E4 8B5DFC              <1>     mov ebx, [ebp - 4]
   154 000007E7 8B4E0C              <1>     mov ecx, [esi + rose.y1]
   155                              <1> 
   156 000007EA FF761C51535053E884- <1>     cdecl draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   156 000007F3 0400006683C414      <1>
   157                              <1> 
   158                              <1>     ; 枠の描画
   159 000007FA 8B06                <1>     mov eax, [esi + rose.x0]
   160 000007FC 8B5E04              <1>     mov ebx, [esi + rose.y0]
   161 000007FF 8B4E08              <1>     mov ecx, [esi + rose.x1]
   162 00000802 8B560C              <1>     mov edx, [esi + rose.y1]
   163                              <1> 
   164 00000805 FF762052515350E818- <1>     cdecl draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   164 0000080E 0500006683C414      <1>
   165                              <1> 
   166                              <1>     ; 振幅をX軸の約95%とする
   167 00000815 8B4608              <1>     mov eax, [esi + rose.x1]
   168 00000818 2B06                <1>     sub eax, [esi + rose.x0]
   169 0000081A D1E8                <1>     shr eax, 1                  ; eax = 原点から右端の長さ
   170 0000081C 89C3                <1>     mov ebx, eax
   171 0000081E C1EB04              <1>     shr ebx, 4
   172 00000821 29D8                <1>     sub eax, ebx
   173                              <1> 
   174                              <1>     ; FPUの初期化（バラ曲線の初期化）
   175 00000823 FF7614FF761050E894- <1>     cdecl fpu_rose_init            , eax            , dword [esi + rose.n]            , dword [esi + rose.d]
   175 0000082C 0000006683C40C      <1>
   179                              <1> 
   180                              <1>     ; メインループ
   181                              <1> .10L:
   182                              <1>     ; 座標計算
   183 00000833 8D5DF4              <1>     lea ebx, [ebp -12]  ; EBX = &x;
   184 00000836 8D4DF0              <1>     lea ecx, [ebp -16]  ; ECX = &y;
   185 00000839 8B45EC              <1>     mov eax, [ebp -20]  ; EAX = r;
   186                              <1> 
   187 0000083C 505153E89900000066- <1>     cdecl fpu_rose_update            , ebx            , ecx            , eax
   187 00000845 83C40C              <1>
   191                              <1> 
   192                              <1>     ; 角度更新(r = r % 36000)
   193 00000848 BA00000000          <1>     mov edx, 0
   194 0000084D 40                  <1>     inc eax
   195 0000084E BBA08C0000          <1>     mov ebx, 360 * 100
   196 00000853 F7F3                <1>     div ebx             ; EDX = EDX:EAX % EBX
   197 00000855 8955EC              <1>     mov [ebp -20], edx
   198                              <1> 
   199                              <1>     ; ドット描画
   200 00000858 8B4DF4              <1>     mov ecx, [ebp -12]  ; x座標
   201 0000085B 8B55F0              <1>     mov edx, [ebp -16]  ; y座標
   202                              <1> 
   203 0000085E 034DFC              <1>     add ecx, [ebp - 4]  ; x座標原点
   204 00000861 0355F8              <1>     add edx, [ebp - 8]  ; y座標原点
   205                              <1> 
   206 00000864 8B5E28              <1>     mov ebx, [esi + rose.color_f]   ; 表示色
   207 00000867 CD82                <1>     int 0x82            ; sys_call_82(表示色, X, Y)
   208                              <1> 
   209                              <1>     ; ウェイト
   210 00000869 6A02E89C0A00006683- <1>     cdecl wait_tick, 2
   210 00000872 C404                <1>
   211                              <1> 
   212                              <1>     ; ドット描画(消去)
   213 00000874 8B5E2C              <1>     mov ebx, [esi + rose.color_b]   ; 背景色
   214 00000877 CD82                <1>     int 0x82           ; sys_call_82(表示色, X, Y)
   215                              <1> 
   216 00000879 EBB8                <1>     jmp .10L
   217                              <1> 
   218                              <1> 
   219 0000087B 00                  <1> ALIGN 4, db 0
   220 0000087C 5461736B2D3300      <1> .s0     db "Task-3", 0
   221                              <1> 
   222                              <1> DRAW_PARAM:
   223                              <1>     istruc rose
   224 00000883 10000000            <1>         at rose.x0,         dd  16
   225 00000887 20000000            <1>         at rose.y0,         dd  32
   226 0000088B A0010000            <1>         at rose.x1,         dd 416
   227 0000088F B0010000            <1>         at rose.y1,         dd 432
   228                              <1> 
   229 00000893 02000000            <1>         at rose.n,          dd 2
   230 00000897 01000000            <1>         at rose.d,          dd 1
   231                              <1> 
   232 0000089B 07000000            <1>         at rose.color_x,    dd 0x007
   233 0000089F 07000000            <1>         at rose.color_y,    dd 0x007
   234 000008A3 0F000000            <1>         at rose.color_z,    dd 0x00F
   235 000008A7 0F030000            <1>         at rose.color_s,    dd 0x30F
   236 000008AB 0F000000            <1>         at rose.color_f,    dd 0x00F
   237 000008AF 03000000            <1>         at rose.color_b,    dd 0x003
   238                              <1> 
   239 000008B3 5461736B2D3300      <1>         at rose.title,      db "Task-3", 0
   240 000008BA 00<rep 9h>          <1>     iend
   241                              <1> 
   242                              <1> fpu_rose_init:
   243 000008C3 55                  <1>     push ebp
   244 000008C4 89E5                <1>     mov ebp, esp
   245                              <1> 
   246 000008C6 68B4000000          <1>     push dword 180
   247                              <1> 
   248 000008CB D9EB                <1>     fldpi
   249 000008CD DA75FC              <1>     fidiv dword [ebp - 4]   ; 180
   250 000008D0 DB450C              <1>     fild  dword [ebp +12]   ; n
   251 000008D3 DA7510              <1>     fidiv dword [ebp +16]   ; d
   252 000008D6 DB4508              <1>     fild  dword [ebp + 8]   ; A
   253                              <1> 
   254 000008D9 89EC                <1>     mov esp, ebp
   255 000008DB 5D                  <1>     pop ebp
   256                              <1> 
   257 000008DC C3                  <1>     ret
   258                              <1> 
   259                              <1> fpu_rose_update:
   260                              <1> ; px: 計算したX座標を格納するアドレス
   261                              <1> ; py: 計算したY座標を格納するアドレス
   262                              <1> ; t:  角度
   263                              <1> 
   264 000008DD 55                  <1>     push ebp
   265 000008DE 89E5                <1>     mov ebp, esp
   266                              <1> 
   267 000008E0 50                  <1>     push eax
   268 000008E1 53                  <1>     push ebx
   269                              <1> 
   270 000008E2 8B4508              <1>     mov eax, [ebp +  8] ; eax = px
   271 000008E5 8B5D0C              <1>     mov ebx, [ebp + 12] ; ebx = py
   272                              <1> 
   273 000008E8 DB4510              <1>     fild dword [ebp +16]    ; t
   274 000008EB D8CB                <1>     fmul st0, st3           ; st0 = t * r = θ
   275 000008ED D9C0                <1>     fld st0
   276                              <1> 
   277 000008EF D9FB                <1>     fsincos                 ; st0 = cos(st0)
   278                              <1>                             ; st1 = sin(st0)
   279                              <1>     
   280 000008F1 D9CA                <1>     fxch st2                ; st0 <-> st2
   281 000008F3 D8CC                <1>     fmul st0, st4           ; st0 = kθ
   282 000008F5 D9FE                <1>     fsin                    ; st0 = sin(kθ)
   283 000008F7 D8CB                <1>     fmul st0, st3           ; st0 = Asin(kθ)
   284                              <1> 
   285                              <1>     ; st0 = Asin(kθ)
   286                              <1>     ; st1 = sin(θ)
   287                              <1>     ; st2 = cos(θ)
   288                              <1>     ; st3 = A
   289                              <1>     ; st4 = k
   290                              <1>     ; st5 = r
   291                              <1> 
   292 000008F9 D9CA                <1>     fxch st2                ; cosをst0に
   293 000008FB D8CA                <1>     fmul st0, st2           ; st0 *= Asin(kθ)
   294 000008FD DB18                <1>     fistp dword [eax]       ; st0を[eax]にpop
   295                              <1> 
   296 000008FF DEC9                <1>     fmulp st1, st0          ; st1 *= st0; st0をpop
   297 00000901 D9E0                <1>     fchs                    ; st0 * (-1)
   298 00000903 DB1B                <1>     fistp dword [ebx]       ; st0を[ebx]にpop
   299                              <1> 
   300 00000905 5B                  <1>     pop ebx
   301 00000906 58                  <1>     pop eax
   302 00000907 89EC                <1>     mov esp, ebp
   303 00000909 5D                  <1>     pop ebp
   304                              <1> 
   305 0000090A C3                  <1>     ret
   104                                  
   105                                  ; モジュール
   106                                  %include "../modules/protect/vga.s"
   107                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   108                              <1> ; plane: 読み込みプレーン
   109 0000090B 55                  <1>     push ebp
   110 0000090C 89E5                <1>     mov ebp, esp
   111                              <1> 
   112 0000090E 50                  <1>     push eax
   113 0000090F 52                  <1>     push edx
   114                              <1> 
   115                              <1> 
   116                              <1>     ; 読み込みプレーンの選択
   117 00000910 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   118 00000913 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   119 00000916 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   120 00000918 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   121 0000091C 66EF                <1>     out dx, ax
   122                              <1> 
   123 0000091E 5A                  <1>     pop edx
   124 0000091F 58                  <1>     pop eax
   125                              <1> 
   126 00000920 89EC                <1>     mov esp, ebp
   127 00000922 5D                  <1>     pop ebp
   128                              <1> 
   129 00000923 C3                  <1>     ret
   130                              <1> 
   131                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   132                              <1> ; plane 書き込みプレーン
   133 00000924 55                  <1>     push ebp
   134 00000925 89E5                <1>     mov ebp, esp
   135                              <1> 
   136 00000927 6650                <1>     push ax
   137 00000929 6652                <1>     push dx
   138                              <1> 
   139                              <1> 
   140                              <1>     ; 書き込みプレーンの選択
   141 0000092B 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   142 0000092E 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   143 00000931 B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   144 00000933 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   145 00000937 66EF                <1>     out dx, ax
   146                              <1> 
   147                              <1> 
   148 00000939 665A                <1>     pop dx
   149 0000093B 6658                <1>     pop ax
   150                              <1> 
   151 0000093D 89EC                <1>     mov esp, ebp
   152 0000093F 5D                  <1>     pop ebp
   153                              <1> 
   154 00000940 C3                  <1>     ret
   155                              <1> 
   156                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   157                              <1> ; font FONTアドレス
   158                              <1> ; vram VRAMアドレス
   159                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   160                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   161 00000941 55                  <1>     push ebp
   162 00000942 89E5                <1>     mov ebp, esp
   163                              <1>     
   164 00000944 50                  <1>     push eax
   165 00000945 53                  <1>     push ebx
   166 00000946 51                  <1>     push ecx
   167 00000947 52                  <1>     push edx
   168 00000948 57                  <1>     push edi
   169 00000949 56                  <1>     push esi
   170                              <1> 
   171 0000094A 8B7508              <1>     mov esi, [ebp + 8]          ; font
   172 0000094D 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   173 00000950 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   174 00000954 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   175                              <1>     ; bh = 背景色 bl = 前景色
   176                              <1> 
   177 00000958 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   178 0000095A 0F94C6              <1>     setz dh         ; dh = zf
   179 0000095D FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   180                              <1> 
   181 0000095F 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   182 00000961 0F94C2              <1>     setz dl         ; dl = zf
   183 00000964 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   184                              <1> 
   185                              <1>     ; 16ドットフォントのコピー
   186 00000966 FC                  <1>     cld             ; アドレス加算モード
   187                              <1> 
   188 00000967 B910000000          <1>     mov ecx, 16
   189                              <1> .10L:
   190                              <1>     ; フォントマスクの作成
   191 0000096C AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   192 0000096D 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   193 0000096F F6D4                <1>     not ah
   194                              <1> 
   195                              <1>     ; 前景色
   196 00000971 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   197                              <1> 
   198                              <1>     ; 背景色
   199 00000973 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   200 00000979 7404                <1>     jz .11F
   201                              <1>     ; 透過on
   202 0000097B 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   203 0000097D EB02                <1>     jmp .11E
   204                              <1> .11F:                   ; 透過off
   205 0000097F 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   206                              <1> .11E:
   207                              <1>     
   208                              <1>     ; 前景色と背景色を合成
   209 00000981 08E0                <1>     or al, ah           ; al = 背景 | 前景
   210                              <1> 
   211                              <1>     ; 新しい値を出力
   212 00000983 8807                <1>     mov [edi], al
   213                              <1> 
   214 00000985 83C750              <1>     add edi, 80      ; 1行すすめる
   215 00000988 E2E2                <1>     loop .10L
   216                              <1> .10E:
   217                              <1> 
   218 0000098A 5E                  <1>     pop esi
   219 0000098B 5F                  <1>     pop edi
   220 0000098C 5A                  <1>     pop edx
   221 0000098D 59                  <1>     pop ecx
   222 0000098E 5B                  <1>     pop ebx
   223 0000098F 58                  <1>     pop eax
   224                              <1> 
   225 00000990 89EC                <1>     mov esp, ebp
   226 00000992 5D                  <1>     pop ebp
   227                              <1> 
   228 00000993 C3                  <1>     ret
   229                              <1> 
   230                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   231                              <1> ; bitデータ
   232                              <1> ; vram VRAMアドレス
   233                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   234                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   235 00000994 55                  <1>     push ebp
   236 00000995 89E5                <1>     mov ebp, esp
   237                              <1>     
   238 00000997 50                  <1>     push eax
   239 00000998 53                  <1>     push ebx
   240 00000999 57                  <1>     push edi
   241                              <1> 
   242 0000099A 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   243 0000099D 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   244 000009A1 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   245                              <1>     ; bl = 前景色
   246                              <1> 
   247                              <1>     ; 常に透過モード
   248 000009A5 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   249 000009A7 0F94C3              <1>     setz bl         ; dl = zf
   250 000009AA FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   251                              <1> 
   252                              <1>     ; マスク
   253 000009AC 8A4508              <1>     mov al, [ebp + 8]   ; bit
   254 000009AF 88C4                <1>     mov ah, al      ; ah ~= al
   255 000009B1 F6D4                <1>     not ah
   256                              <1> 
   257 000009B3 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   258 000009B5 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   259 000009B7 08E0                <1>     or al, ah           ; 背景と前景を合成
   260 000009B9 8807                <1>     mov [edi], al       ; プレーンに書き込み
   261                              <1>     
   262                              <1> 
   263 000009BB 5F                  <1>     pop edi
   264 000009BC 5B                  <1>     pop ebx
   265 000009BD 58                  <1>     pop eax
   266                              <1> 
   267 000009BE 89EC                <1>     mov esp, ebp
   268 000009C0 5D                  <1>     pop ebp
   269                              <1> 
   270 000009C1 C3                  <1>     ret
   107                                  %include "../modules/protect/draw_char.s"
   108                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   109                              <1> ; col 列（0～79）
   110                              <1> ; row 行（0～29）
   111                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   112                              <1> ; ch 文字
   113                              <1> 
   114 000009C2 55                  <1>     push ebp
   115 000009C3 89E5                <1>     mov ebp, esp
   116                              <1> 
   117 000009C5 50                  <1>     push eax
   118 000009C6 53                  <1>     push ebx
   119 000009C7 51                  <1>     push ecx
   120 000009C8 52                  <1>     push edx
   121 000009C9 56                  <1>     push esi
   122 000009CA 57                  <1>     push edi
   123                              <1> 
   124                              <1> %ifdef USE_TEST_AND_SET
   125 000009CB 68[A00A0000]E88A08- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   125 000009D3 00006683C404        <1>
   126                              <1> %endif
   127                              <1> 
   128                              <1>     ; コピー元フォントアドレスを設定
   129 000009D9 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   130 000009DD C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   131 000009E0 0335[18020000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   132                              <1> 
   133                              <1>     ; コピー先アドレスを取得
   134                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   135                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   136 000009E6 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   137 000009E9 C1E708              <1>     shl edi, 8
   138 000009EC 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   139 000009F3 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   140                              <1> 
   141                              <1>     ; 1文字分のフォントを出力
   142 000009F6 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   143                              <1> 
   144                              <1>     ; 輝度I
   145 000009FA 6A03E80AFFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   145 00000A03 C404                <1>
   146 00000A05 6A08E818FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   146 00000A0E C404                <1>
   147 00000A10 536A085756E827FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   147 00000A19 FF6683C410          <1>
   148                              <1> 
   149                              <1>     ; 赤R
   150 00000A1E 6A02E8E6FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   150 00000A27 C404                <1>
   151 00000A29 6A04E8F4FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   151 00000A32 C404                <1>
   152 00000A34 536A045756E803FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   152 00000A3D FF6683C410          <1>
   153                              <1> 
   154                              <1>     ; 緑G
   155 00000A42 6A01E8C2FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   155 00000A4B C404                <1>
   156 00000A4D 6A02E8D0FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   156 00000A56 C404                <1>
   157 00000A58 536A025756E8DFFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   157 00000A61 FF6683C410          <1>
   158                              <1> 
   159                              <1>     ; 青B
   160 00000A66 6A00E89EFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   160 00000A6F C404                <1>
   161 00000A71 6A01E8ACFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   161 00000A7A C404                <1>
   162 00000A7C 536A015756E8BBFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   162 00000A85 FF6683C410          <1>
   163                              <1> 
   164                              <1> %ifdef USE_TEST_AND_SET
   165 00000A8A C705[A00A0000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   165 00000A92 0000                <1>
   166                              <1> %endif
   167                              <1> 
   168 00000A94 5F                  <1> 	pop		edi
   169 00000A95 5E                  <1> 	pop		esi
   170 00000A96 5A                  <1> 	pop		edx
   171 00000A97 59                  <1> 	pop		ecx
   172 00000A98 5B                  <1> 	pop		ebx
   173 00000A99 58                  <1> 	pop		eax
   174                              <1> 
   175 00000A9A 89EC                <1>     mov esp, ebp
   176 00000A9C 5D                  <1>     pop ebp
   177                              <1> 
   178 00000A9D C3                  <1>     ret
   179                              <1> 
   180                              <1> %ifdef USE_TEST_AND_SET
   181 00000A9E 00<rep 2h>          <1> ALIGN 4, db 0
   182 00000AA0 00000000            <1> IN_USE:  dd 0
   183                              <1> %endif
   108                                  %include "../modules/protect/draw_font.s"
   109                              <1> draw_font:  ; void draw_font(col, row);
   110                              <1> ; col 列
   111                              <1> ; row 行
   112 00000AA4 55                  <1>     push ebp
   113 00000AA5 89E5                <1>     mov ebp, esp
   114                              <1> 
   115 00000AA7 50                  <1>     push eax
   116 00000AA8 53                  <1>     push ebx
   117 00000AA9 51                  <1>     push ecx
   118 00000AAA 57                  <1>     push edi
   119 00000AAB 56                  <1>     push esi
   120                              <1> 
   121                              <1> 
   122 00000AAC 8B7508              <1>     mov esi, [ebp + 8]  ; x
   123 00000AAF 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   124                              <1> 
   125 00000AB2 B900000000          <1>     mov ecx, 0
   126                              <1> .10L:
   127 00000AB7 81F900010000        <1>     cmp ecx, 256
   128 00000ABD 731F                <1>     jae .10E
   129                              <1> 
   130 00000ABF 89C8                <1>     mov eax, ecx
   131 00000AC1 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   132 00000AC4 01F0                <1>     add eax, esi    ; eax += x
   133                              <1> 
   134 00000AC6 89CB                <1>     mov ebx, ecx
   135 00000AC8 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   136 00000ACB 01FB                <1>     add ebx, edi    ; ebx += y
   137                              <1> 
   138 00000ACD 516A075350E8EBFEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   138 00000AD6 FF6683C410          <1>
   139                              <1> 
   140 00000ADB 41                  <1>     inc ecx
   141 00000ADC EBD9                <1>     jmp .10L
   142                              <1> .10E:
   143                              <1> 
   144 00000ADE 5E                  <1>     pop esi
   145 00000ADF 5F                  <1>     pop edi
   146 00000AE0 59                  <1>     pop ecx
   147 00000AE1 5B                  <1>     pop ebx
   148 00000AE2 58                  <1>     pop eax
   149                              <1> 
   150 00000AE3 89EC                <1>     mov esp, ebp
   151 00000AE5 5D                  <1>     pop ebp
   152                              <1> 
   153 00000AE6 C3                  <1>     ret
   109                                  %include "../modules/protect/draw_str.s"
   110                              <1> draw_str:   ;void draw_str(col, row, color, p);
   111                              <1> ; col: 列
   112                              <1> ; row: 行
   113                              <1> ; color: 描画色
   114                              <1> ; p: 文字列のアドレス
   115 00000AE7 55                  <1>     push ebp
   116 00000AE8 89E5                <1>     mov ebp, esp
   117                              <1> 
   118 00000AEA 50                  <1>     push eax
   119 00000AEB 53                  <1>     push ebx
   120 00000AEC 51                  <1>     push ecx
   121 00000AED 52                  <1>     push edx
   122 00000AEE 56                  <1>     push esi
   123                              <1> 
   124                              <1> 
   125 00000AEF 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   126 00000AF2 8B550C              <1>     mov edx, [ebp +12]  ; row
   127 00000AF5 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   128 00000AF9 8B7514              <1>     mov esi, [ebp +20]  ; p
   129                              <1> 
   130 00000AFC FC                  <1>     cld
   131                              <1> .10L:
   132 00000AFD AC                  <1>     lodsb
   133 00000AFE 3C00                <1>     cmp al, 0
   134 00000B00 741A                <1>     je .10E
   135                              <1> 
   136                              <1> %ifdef USE_SYSTEM_CALL
   137 00000B02 CD81                <1>     int 0x81
   138                              <1> %else
   139                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   140                              <1> %endif
   141                              <1> 
   142 00000B04 41                  <1>     inc ecx
   143 00000B05 83F950              <1>     cmp ecx, 80
   144 00000B08 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   145 00000B0A B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   146 00000B0F 42                  <1>     inc edx
   147 00000B10 83FA1E              <1>     cmp edx, 30
   148 00000B13 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   149 00000B15 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   150                              <1> .12E:
   151 00000B1A EBE1                <1>     jmp .10L
   152                              <1> .10E:
   153                              <1> 
   154 00000B1C 5E                  <1>     pop esi
   155 00000B1D 5A                  <1>     pop edx
   156 00000B1E 59                  <1>     pop ecx
   157 00000B1F 5B                  <1>     pop ebx
   158 00000B20 58                  <1>     pop eax
   159                              <1> 
   160 00000B21 89EC                <1>     mov esp, ebp
   161 00000B23 5D                  <1>     pop ebp
   162                              <1> 
   163 00000B24 C3                  <1>     ret
   110                                  %include "../modules/protect/draw_color_bar.s"
   111                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   112                              <1> ; col: 列
   113                              <1> ; row: 行
   114 00000B25 55                  <1>     push ebp
   115 00000B26 89E5                <1>     mov ebp, esp
   116                              <1> 
   117 00000B28 50                  <1>     push eax
   118 00000B29 53                  <1>     push ebx
   119 00000B2A 51                  <1>     push ecx
   120 00000B2B 52                  <1>     push edx
   121 00000B2C 56                  <1>     push esi
   122 00000B2D 57                  <1>     push edi
   123                              <1> 
   124                              <1> 
   125 00000B2E 8B7508              <1>     mov esi, [ebp + 8]      ; x
   126 00000B31 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   127                              <1> 
   128                              <1>     ; カラーバーを表示
   129 00000B34 B900000000          <1>     mov ecx, 0
   130                              <1> .10L:
   131 00000B39 83F910              <1>     cmp ecx, 16
   132 00000B3C 732E                <1>     jae .10E
   133                              <1> 
   134                              <1>     ; 一回で8文字
   135 00000B3E 89C8                <1>     mov eax, ecx
   136 00000B40 83E001              <1>     and eax, 0x01
   137 00000B43 C1E003              <1>     shl eax, 3
   138 00000B46 01F0                <1>     add eax, esi    ; col
   139                              <1> 
   140                              <1>     ; 2回に1回改行
   141 00000B48 89CB                <1>     mov ebx, ecx
   142 00000B4A D1EB                <1>     shr ebx, 1
   143 00000B4C 01FB                <1>     add ebx, edi    ; row
   144                              <1> 
   145                              <1>     ; 背景色を2色見たら下位次の行
   146 00000B4E 89CA                <1>     mov edx, ecx
   147 00000B50 D1E2                <1>     shl edx, 1
   148 00000B52 8B92[7F0B0000]      <1>     mov edx, [.t0 + edx]    ; color
   149                              <1> 
   150 00000B58 68[760B0000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   150 00000B60 E882FFFFFF6683C410  <1>
   151                              <1> 
   152 00000B69 41                  <1>     inc ecx
   153 00000B6A EBCD                <1>     jmp .10L
   154                              <1> .10E:
   155                              <1> 
   156 00000B6C 5F                  <1>     pop edi
   157 00000B6D 5E                  <1>     pop esi
   158 00000B6E 5A                  <1>     pop edx
   159 00000B6F 59                  <1>     pop ecx
   160 00000B70 5B                  <1>     pop ebx
   161 00000B71 58                  <1>     pop eax
   162                              <1> 
   163 00000B72 89EC                <1>     mov esp, ebp
   164 00000B74 5D                  <1>     pop ebp
   165                              <1> 
   166 00000B75 C3                  <1>     ret
   167                              <1> 
   168                              <1> 
   169 00000B76 202020202020202000  <1> .s0: db '        ', 0
   170                              <1> 
   171                              <1> .t0:
   172 00000B7F 00000008            <1>     dw 0x0000, 0x0800
   173 00000B83 00010009            <1>     dw 0x0100, 0x0900
   174 00000B87 0002000A            <1>     dw 0x0200, 0x0A00
   175 00000B8B 0003000B            <1>     dw 0x0300, 0x0B00
   176 00000B8F 0004000C            <1>     dw 0x0400, 0x0C00
   177 00000B93 0005000D            <1>     dw 0x0500, 0x0D00
   178 00000B97 0006000E            <1>     dw 0x0600, 0x0E00
   179 00000B9B 0007000F            <1>     dw 0x0700, 0x0F00
   111                                  %include "../modules/protect/draw_pixel.s"
   112                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   113                              <1> ; x: X座標
   114                              <1> ; y: Y座標
   115                              <1> ; color: 描画色
   116 00000B9F 55                  <1>     push ebp
   117 00000BA0 89E5                <1>     mov ebp, esp
   118                              <1> 
   119 00000BA2 50                  <1>     push eax
   120 00000BA3 53                  <1>     push ebx
   121 00000BA4 51                  <1>     push ecx
   122 00000BA5 57                  <1>     push edi
   123                              <1> 
   124                              <1> 
   125                              <1> 
   126                              <1>     ; y座標*80->y*(640/8)
   127 00000BA6 8B7D0C              <1>     mov edi, [ebp +12]
   128 00000BA9 C1E704              <1>     shl edi, 4
   129 00000BAC 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   130                              <1> 
   131                              <1>     ; x座標/8  8pixel単位の位置
   132 00000BB3 8B5D08              <1>     mov ebx, [ebp + 8]
   133 00000BB6 89D9                <1>     mov ecx, ebx
   134 00000BB8 C1EB03              <1>     shr ebx, 3
   135 00000BBB 01DF                <1>     add edi, ebx
   136                              <1> 
   137                              <1>     ; x座標を8で割った余りからビット位置を計算
   138                              <1>     ; 8pixel中の位置
   139                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   140 00000BBD 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   141 00000BC0 BB80000000          <1>     mov ebx, 0x80
   142 00000BC5 D3EB                <1>     shr ebx, cl
   143                              <1> 
   144 00000BC7 8B4D10              <1>     mov ecx, [ebp +16]
   145                              <1> 
   146                              <1> %ifdef	USE_TEST_AND_SET
   147 00000BCA 68[A00A0000]E88B06- <1> 	cdecl	test_and_set, IN_USE			    ; TEST_AND_SET(IN_USE); // リソースの空き待ち
   147 00000BD2 00006683C404        <1>
   148                              <1> %endif
   149                              <1> 
   150                              <1>     ; プレーンごとに出力
   151 00000BD8 6A03E82CFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   151 00000BE1 C404                <1>
   152 00000BE3 6A08E83AFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   152 00000BEC C404                <1>
   153 00000BEE 516A085753E89CFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   153 00000BF7 FF6683C410          <1>
   154                              <1> 
   155 00000BFC 6A02E808FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   155 00000C05 C404                <1>
   156 00000C07 6A04E816FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   156 00000C10 C404                <1>
   157 00000C12 516A045753E878FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   157 00000C1B FF6683C410          <1>
   158                              <1> 
   159 00000C20 6A01E8E4FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   159 00000C29 C404                <1>
   160 00000C2B 6A02E8F2FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   160 00000C34 C404                <1>
   161 00000C36 516A025753E854FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   161 00000C3F FF6683C410          <1>
   162                              <1> 
   163 00000C44 6A00E8C0FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   163 00000C4D C404                <1>
   164 00000C4F 6A01E8CEFCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   164 00000C58 C404                <1>
   165 00000C5A 516A015753E830FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   165 00000C63 FF6683C410          <1>
   166                              <1> 
   167                              <1> %ifdef	USE_TEST_AND_SET
   168 00000C68 C705[A00A0000]0000- <1> 	mov		[IN_USE], dword 0				    ; 変数のクリア
   168 00000C70 0000                <1>
   169                              <1> %endif
   170                              <1> 
   171 00000C72 5F                  <1>     pop edi
   172 00000C73 59                  <1>     pop ecx
   173 00000C74 5B                  <1>     pop ebx
   174 00000C75 58                  <1>     pop eax
   175                              <1> 
   176 00000C76 89EC                <1>     mov esp, ebp
   177 00000C78 5D                  <1>     pop ebp
   178                              <1> 
   179 00000C79 C3                  <1>     ret
   112                                  %include "../modules/protect/draw_line.s"
   113                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   114                              <1> ; X0 始点のＸ座標
   115                              <1> ; Y0 始点のＹ座標
   116                              <1> ; X1 終点のX座標
   117                              <1> ; Y1 終点のY座標
   118                              <1> ; color 描画色
   119 00000C7A 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   120 00000C7B 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   121                              <1>                     ; ----------------
   122 00000C7D 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   123 00000C7F 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   124 00000C81 6A00                <1>     push dword 0    ;    -12| dx    = 0
   125 00000C83 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   126 00000C85 6A00                <1>     push dword 0    ;    -20| y0    = 0
   127 00000C87 6A00                <1>     push dword 0    ;    -24| dy    = 0
   128 00000C89 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   129                              <1> 
   130 00000C8B 50                  <1>     push eax        ;    -32| eax
   131 00000C8C 53                  <1>     push ebx        ;    -36| ebx
   132 00000C8D 51                  <1>     push ecx        ;    -40| ecx
   133 00000C8E 52                  <1>     push edx        ;    -44| edx
   134 00000C8F 56                  <1>     push esi        ;    -48| esi
   135 00000C90 57                  <1>     push edi        ;    -52| edi
   136                              <1>     ; espはebp-52?
   137                              <1> 
   138                              <1>     ; x0とx1の距離を計算
   139 00000C91 8B4508              <1>     mov eax, [ebp + 8]
   140 00000C94 8B5D10              <1>     mov ebx, [ebp +16]
   141 00000C97 29C3                <1>     sub ebx, eax
   142 00000C99 7D09                <1>     jge .10F
   143                              <1> 
   144 00000C9B F7DB                <1>     neg ebx
   145 00000C9D BEFFFFFFFF          <1>     mov esi, -1
   146 00000CA2 EB05                <1>     jmp .10E
   147                              <1> .10F:
   148 00000CA4 BE01000000          <1>     mov esi, 1
   149                              <1> .10E:
   150                              <1>     
   151                              <1>     ; y0とy1の距離を計算
   152 00000CA9 8B4D0C              <1>     mov ecx, [ebp +12]
   153 00000CAC 8B5514              <1>     mov edx, [ebp +20]
   154 00000CAF 29CA                <1>     sub edx, ecx
   155 00000CB1 7D09                <1>     jge .20F
   156                              <1> 
   157 00000CB3 F7DA                <1>     neg edx
   158 00000CB5 BFFFFFFFFF          <1>     mov edi, -1
   159 00000CBA EB05                <1>     jmp .20E
   160                              <1> .20F:
   161 00000CBC BF01000000          <1>     mov edi, 1
   162                              <1> .20E:
   163                              <1>     
   164                              <1>     ; x軸
   165 00000CC1 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   166 00000CC4 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   167 00000CC7 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   168                              <1> 
   169                              <1>     ; y軸
   170 00000CCA 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   171 00000CCD 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   172 00000CD0 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   173                              <1> 
   174                              <1> 
   175                              <1>     ; 基準軸を決める
   176 00000CD3 39D3                <1>     cmp ebx, edx
   177 00000CD5 7F08                <1>     jg .22F
   178                              <1>     
   179 00000CD7 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   180 00000CDA 8D7DF8              <1>     lea edi, [ebp - 8]
   181                              <1> 
   182 00000CDD EB06                <1>     jmp .22E
   183                              <1> .22F:
   184                              <1>     
   185 00000CDF 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   186 00000CE2 8D7DEC              <1>     lea edi, [ebp -20]
   187                              <1> .22E:
   188                              <1> 
   189                              <1> ; 基準軸 esi
   190                              <1> ; 相対軸 edi
   191                              <1> 
   192                              <1>     ; 繰り返し回数（基準軸のドット数）
   193 00000CE5 8B4EFC              <1>     mov ecx, [esi - 4]
   194 00000CE8 83F900              <1>     cmp ecx, 0
   195 00000CEB 7505                <1>     jnz .30E
   196 00000CED B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   197                              <1> .30E:
   198                              <1> 
   199                              <1>     ; 線を描画
   200                              <1> .50L:
   201                              <1> 
   202                              <1> %ifdef USE_SYSTEM_CALL
   203 00000CF2 89C8                <1>     mov eax, ecx
   204 00000CF4 8B4DF8              <1>     mov ecx, [ebp - 8]
   205 00000CF7 8B55EC              <1>     mov edx, [ebp -20]
   206 00000CFA 8B5D18              <1>     mov ebx, [ebp +24]
   207 00000CFD CD82                <1>     int 0x82            ; sys_call()
   208 00000CFF 89C1                <1>     mov ecx, eax
   209                              <1> %else
   210                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   213                              <1> %endif
   214                              <1> 
   215                              <1>     ; 座標更新
   216                              <1> 
   217                              <1>     ; 基準軸の更新
   218 00000D01 8B46F8              <1>     mov eax, [esi - 8]
   219 00000D04 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   220                              <1> 
   221                              <1>     ; 相対軸の更新
   222 00000D06 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   223 00000D09 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   224                              <1> 
   225 00000D0C 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   226                              <1> 
   227 00000D0F 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   228 00000D11 7C07                <1>     jl .52E
   229 00000D13 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   230                              <1> 
   231 00000D15 8B5FF8              <1>     mov ebx, [edi - 8]
   232 00000D18 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   233                              <1> .52E:
   234                              <1>     
   235 00000D1A 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   236                              <1> 
   237 00000D1D E2D3                <1>     loop .50L
   238                              <1> .50E:
   239                              <1> 
   240                              <1> 
   241 00000D1F 5F                  <1>     pop edi
   242 00000D20 5E                  <1>     pop esi
   243 00000D21 5A                  <1>     pop edx
   244 00000D22 59                  <1>     pop ecx
   245 00000D23 5B                  <1>     pop ebx
   246 00000D24 58                  <1>     pop eax
   247                              <1> 
   248 00000D25 89EC                <1>     mov esp, ebp
   249 00000D27 5D                  <1>     pop ebp
   250                              <1> 
   251 00000D28 C3                  <1>     ret
   113                                  %include "../modules/protect/draw_rect.s"
   114                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   115 00000D29 55                  <1>     push ebp
   116 00000D2A 89E5                <1>     mov ebp, esp
   117                              <1>     
   118 00000D2C 50                  <1>     push eax
   119 00000D2D 53                  <1>     push ebx
   120 00000D2E 51                  <1>     push ecx
   121 00000D2F 52                  <1>     push edx
   122 00000D30 56                  <1>     push esi
   123                              <1> 
   124 00000D31 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   125 00000D34 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   126 00000D37 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   127 00000D3A 8B5514              <1>     mov edx, [ebp +20]  ; y1
   128 00000D3D 8B7518              <1>     mov esi, [ebp +24]  ; color
   129                              <1> 
   130                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   131 00000D40 39C8                <1>     cmp eax, ecx
   132 00000D42 7C01                <1>     jl .10E
   133 00000D44 91                  <1>     xchg eax, ecx
   134                              <1> .10E:
   135 00000D45 39D3                <1>     cmp ebx, edx
   136 00000D47 7C02                <1>     jl .20E
   137 00000D49 87DA                <1>     xchg ebx, edx
   138                              <1> .20E:
   139                              <1> 
   140                              <1>     ; 矩形を描画
   141 00000D4B 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   141 00000D54 FF6683C414          <1>
   142 00000D59 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   142 00000D62 FF6683C414          <1>
   143                              <1> 
   144 00000D67 4A                  <1>     dec edx
   145 00000D68 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   145 00000D71 FF6683C414          <1>
   146 00000D76 42                  <1>     inc edx
   147                              <1> 
   148 00000D77 49                  <1>     dec ecx
   149 00000D78 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   149 00000D81 FF6683C414          <1>
   150                              <1> 
   151 00000D86 5E                  <1>     pop esi
   152 00000D87 5A                  <1>     pop edx
   153 00000D88 59                  <1>     pop ecx
   154 00000D89 5B                  <1>     pop ebx
   155 00000D8A 58                  <1>     pop eax
   156                              <1>     
   157 00000D8B 89EC                <1>     mov esp, ebp
   158 00000D8D 5D                  <1>     pop ebp
   159                              <1> 
   160 00000D8E C3                  <1>     ret
   114                                  %include "../modules/protect/itoa.s"
   115                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   116                              <1> ; num   変換する値
   117                              <1> ; buff  保存先バッファアドレス
   118                              <1> ; size  保存先バッファサイズ
   119                              <1> ; radix 基数（2, 8, 10, 16)
   120                              <1> ; flags 
   121                              <1> ;   B2: 空白を'0'で埋める
   122                              <1> ;   B1: '+/-'記号を付加する
   123                              <1> ;   B0: 値を符号付き変数として扱う
   124                              <1> 
   125 00000D8F 55                  <1>     push ebp
   126 00000D90 89E5                <1>     mov ebp, esp
   127                              <1> 
   128 00000D92 50                  <1>     push eax
   129 00000D93 53                  <1>     push ebx
   130 00000D94 51                  <1>     push ecx
   131 00000D95 52                  <1>     push edx
   132 00000D96 56                  <1>     push esi
   133 00000D97 57                  <1>     push edi
   134                              <1> 
   135                              <1> 
   136                              <1>     ; 引数取得
   137 00000D98 8B4508              <1>     mov eax, [ebp + 8]    ; num
   138 00000D9B 8B750C              <1>     mov esi, [ebp +12]    ; size
   139 00000D9E 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   140                              <1> 
   141 00000DA1 89F7                <1>     mov edi, esi
   142 00000DA3 01CF                <1>     add edi, ecx
   143 00000DA5 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   144                              <1> 
   145 00000DA6 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   146                              <1> 
   147                              <1>     ; 符号付き判定
   148 00000DA9 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   149                              <1> .10Q:
   150 00000DAF 7408                <1>     je .10E         ; E=Exit
   151 00000DB1 83F800              <1>     cmp eax, 0
   152                              <1> .12Q:
   153 00000DB4 7D03                <1>     jge .12E
   154 00000DB6 83CB02              <1>     or ebx, 0b0010
   155                              <1> .12E:
   156                              <1> .10E:
   157                              <1> 
   158                              <1>     ; 符号出力判定
   159 00000DB9 F7C302000000        <1>     test ebx, 0b0010
   160                              <1> .20Q:
   161 00000DBF 7410                <1>     je .20E
   162 00000DC1 83F800              <1>     cmp eax, 0
   163                              <1> .22Q:
   164 00000DC4 7D07                <1>     jge .22F
   165 00000DC6 F7D8                <1>     neg eax
   166 00000DC8 C6062D              <1>     mov [esi], byte '-'
   167 00000DCB EB03                <1>     jmp .22E
   168                              <1> .22F:
   169                              <1>     
   170 00000DCD C6062B              <1>     mov [esi], byte '+'
   171                              <1> .22E:
   172 00000DD0 49                  <1>     dec ecx
   173                              <1> .20E:
   174                              <1> 
   175                              <1>     ; ASCII変換
   176 00000DD1 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   177                              <1> .30L:
   178 00000DD4 BA00000000          <1>     mov edx, 0
   179 00000DD9 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   180                              <1> 
   181 00000DDB 89D6                <1>     mov esi, edx
   182 00000DDD 8A96[070E0000]      <1>     mov dl, byte [.ascii + esi]
   183                              <1> 
   184 00000DE3 8817                <1>     mov [edi], dl
   185 00000DE5 4F                  <1>     dec edi
   186                              <1> 
   187 00000DE6 83F800              <1>     cmp eax, 0
   188 00000DE9 E0E9                <1>     loopnz .30L
   189                              <1> .30E:
   190                              <1> 
   191                              <1>     ; 空欄を埋める
   192 00000DEB 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   193                              <1> .40Q:
   194 00000DEE 740D                <1>     je .40E
   195 00000DF0 B020                <1>     mov al, ' '
   196 00000DF2 837D1804            <1>     cmp [ebp +24], dword 0b0100
   197                              <1> .42Q:
   198 00000DF6 7502                <1>     jne .42E
   199 00000DF8 B030                <1>     mov al, '0'
   200                              <1> .42E:
   201 00000DFA FD                  <1>     std         ; dimention flag = 1(-方向)
   202 00000DFB F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   203                              <1> .40E:
   204                              <1> 
   205 00000DFD 5F                  <1>     pop edi
   206 00000DFE 5E                  <1>     pop esi
   207 00000DFF 5A                  <1>     pop edx
   208 00000E00 59                  <1>     pop ecx
   209 00000E01 5B                  <1>     pop ebx
   210 00000E02 58                  <1>     pop eax
   211                              <1> 
   212 00000E03 89EC                <1>     mov esp, ebp
   213 00000E05 5D                  <1>     pop ebp
   214                              <1> 
   215 00000E06 C3                  <1>     ret
   216                              <1> 
   217 00000E07 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   217 00000E10 39414243444546      <1>
   115                                  %include "../modules/protect/rtc.s"
   116                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   117                              <1> ; dst: 保存先アドレス
   118                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   119 00000E17 55                  <1>     push ebp
   120 00000E18 89E5                <1>     mov ebp, esp
   121                              <1> 
   122 00000E1A 50                  <1>     push eax
   123 00000E1B 53                  <1>     push ebx
   124                              <1> 
   125 00000E1C B00A                <1>     mov al, 0x0A    ; レジスタA
   126 00000E1E E670                <1>     out 0x70, al
   127 00000E20 E471                <1>     in al, 0x71
   128 00000E22 A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   129 00000E24 7407                <1>     je .10F
   130 00000E26 B801000000          <1>     mov eax, 1      ; 更新中は失敗
   131 00000E2B EB27                <1>     jmp .10E
   132                              <1> .10F:
   133                              <1> 
   134 00000E2D B004                <1>     mov al, 0x04    ; 時
   135 00000E2F E670                <1>     out 0x70, al    ; レジスタ設定
   136 00000E31 E471                <1>     in al, 0x71     ; 時刻読み込み
   137                              <1> 
   138 00000E33 C1E008              <1>     shl eax, 8      ; alをahに退避
   139                              <1> 
   140 00000E36 B002                <1>     mov al, 0x02    ; 分
   141 00000E38 E670                <1>     out 0x70, al    ; レジスタ設定
   142 00000E3A E471                <1>     in al, 0x71     ; 時刻読み込み
   143                              <1> 
   144 00000E3C C1E008              <1>     shl eax, 8      ; alをahに退避
   145                              <1> 
   146 00000E3F B000                <1>     mov al, 0x00    ; 秒
   147 00000E41 E670                <1>     out 0x70, al    ; レジスタ設定
   148 00000E43 E471                <1>     in al, 0x71     ; 時刻読み込み
   149                              <1> 
   150 00000E45 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   151                              <1> 
   152 00000E4A 8B5D08              <1>     mov ebx, [ebp + 8]
   153 00000E4D 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   154                              <1> 
   155 00000E4F B800000000          <1>     mov eax, 0
   156                              <1> .10E:
   157                              <1> 
   158 00000E54 5B                  <1>     pop ebx
   159 00000E55 58                  <1>     pop eax
   160                              <1> 
   161 00000E56 89EC                <1>     mov esp, ebp
   162 00000E58 5D                  <1>     pop ebp
   163                              <1> 
   164 00000E59 C3                  <1>     ret
   116                                  %include "../modules/protect/draw_time.s"
   117                              <1> draw_time:  ; void draw_time(col, row, color, time);
   118                              <1> ; time 時刻データ
   119 00000E5A 55                  <1>     push ebp
   120 00000E5B 89E5                <1>     mov ebp, esp
   121                              <1> 
   122 00000E5D 50                  <1>     push eax
   123 00000E5E 53                  <1>     push ebx
   124                              <1>     
   125 00000E5F 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   126                              <1> 
   127 00000E62 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   128 00000E65 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   128 00000E6C [CC0E0000]53E819FF- <1>
   128 00000E74 FFFF6683C414        <1>
   129                              <1> 
   130 00000E7A 88E3                <1>     mov bl, ah          ; 分だけ
   131 00000E7C 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   131 00000E83 [C90E0000]53E802FF- <1>
   131 00000E8B FFFF6683C414        <1>
   132                              <1>     
   133 00000E91 C1E810              <1>     shr eax, 16         ; 時だけ
   134 00000E94 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   134 00000E9B [C60E0000]50E8EAFE- <1>
   134 00000EA3 FFFF6683C414        <1>
   135                              <1> 
   136 00000EA9 68[C60E0000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   136 00000EB1 FF750CFF7508E82BFC- <1>
   136 00000EBA FFFF6683C410        <1>
   137                              <1> 
   138 00000EC0 5B                  <1>     pop ebx
   139 00000EC1 58                  <1>     pop eax
   140                              <1> 
   141 00000EC2 89EC                <1>     mov esp, ebp
   142 00000EC4 5D                  <1>     pop ebp
   143                              <1> 
   144 00000EC5 C3                  <1>     ret
   145                              <1> 
   146 00000EC6 5A5A3A              <1> .hour: db "ZZ:"
   147 00000EC9 5A5A3A              <1> .min:  db "ZZ:"
   148 00000ECC 5A5A00              <1> .sec:  db "ZZ", 0
   117                                  %include "../modules/protect/interrupt.s"
   118                              <1> int_stop:
   119 00000ECF FB                  <1>     sti ; 割り込みを許可
   120                              <1> 
   121                              <1>     ; EAXで示される文字列を表示
   122 00000ED0 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   122 00000ED9 19E808FCFFFF6683C4- <1>
   122 00000EE2 10                  <1>
   123                              <1> 
   124                              <1>     ; スタックのデータを文字列に変換
   125 00000EE3 8B0424              <1>     mov eax, [esp + 0]
   126 00000EE6 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   126 00000EED [AB0F0000]50E898FE- <1>
   126 00000EF5 FFFF6683C414        <1>
   127                              <1> 
   128 00000EFB 8B442404            <1>     mov eax, [esp + 4]
   129 00000EFF 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   129 00000F06 [BC0F0000]50E87FFE- <1>
   129 00000F0E FFFF6683C414        <1>
   130                              <1> 
   131 00000F14 8B442408            <1>     mov eax, [esp + 8]
   132 00000F18 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   132 00000F1F [CD0F0000]50E866FE- <1>
   132 00000F27 FFFF6683C414        <1>
   133                              <1> 
   134 00000F2D 8B44240C            <1>     mov eax, [esp +12]
   135 00000F31 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   135 00000F38 [DE0F0000]50E84DFE- <1>
   135 00000F40 FFFF6683C414        <1>
   136                              <1> 
   137                              <1>     ; 文字列の表示
   138 00000F46 68[A40F0000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   138 00000F4E 00006A106A19E88EFB- <1>
   138 00000F57 FFFF6683C410        <1>
   139 00000F5D 68[B50F0000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   139 00000F65 00006A116A19E877FB- <1>
   139 00000F6E FFFF6683C410        <1>
   140 00000F74 68[C60F0000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   140 00000F7C 00006A126A19E860FB- <1>
   140 00000F85 FFFF6683C410        <1>
   141 00000F8B 68[D70F0000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   141 00000F93 00006A136A19E849FB- <1>
   141 00000F9C FFFF6683C410        <1>
   142                              <1> 
   143                              <1>     ; 無限ループ
   144 00000FA2 EBFE                <1>     jmp $
   145                              <1> 
   146 00000FA4 4553502B20303A      <1> .s1 db "ESP+ 0:"
   147 00000FAB 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   147 00000FB4 00                  <1>
   148 00000FB5 2020202B20343A      <1> .s2 db "   + 4:"
   149 00000FBC 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   149 00000FC5 00                  <1>
   150 00000FC6 2020202B20383A      <1> .s3 db "   + 8:"
   151 00000FCD 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   151 00000FD6 00                  <1>
   152 00000FD7 2020202B31323A      <1> .s4 db "   +12:"
   153 00000FDE 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   153 00000FE7 00                  <1>
   154                              <1> 
   155                              <1> int_default:
   156 00000FE8 9C                  <1>     pushf       ; EFLAGS(IF==0)
   157 00000FE9 0E                  <1>     push cs
   158 00000FEA 68[CF0E0000]        <1>     push int_stop
   159                              <1> 
   160 00000FEF B8[F50F0000]        <1>     mov eax, .s0
   161 00000FF4 CF                  <1>     iret
   162                              <1> 
   163 00000FF5 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   163 00000FFE 50202020203E2000    <1>
   164                              <1> 
   165                              <1> 
   166                              <1> ; 割り込みベクタの初期化
   167 00001006 90<rep 2h>          <1> ALIGN 4
   168 00001008 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   169 0000100A 00001000            <1>       dd VECT_BASE      ; idt location
   170                              <1> 
   171                              <1> ; 割り込みテーブルを初期化
   172                              <1> init_int:
   173 0000100E 50                  <1>     push eax
   174 0000100F 53                  <1>     push ebx
   175 00001010 51                  <1>     push ecx
   176 00001011 57                  <1>     push edi
   177                              <1> 
   178                              <1>     ; 全ての割り込みにデフォルト処理を設定
   179 00001012 8D05[E80F0000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   180 00001018 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   181 0000101D 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   182                              <1> 
   183 0000101F B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   184 00001024 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   185                              <1> 
   186                              <1>     ; メモリに書き込み
   187                              <1> .10L:
   188 00001029 891F                <1>     mov [edi + 0], ebx
   189 0000102B 894704              <1>     mov [edi + 4], eax
   190 0000102E 83C708              <1>     add edi, 8
   191 00001031 E2F6                <1>     loop .10L
   192                              <1> 
   193                              <1>     ; 割り込みディスクリプタの設定
   194 00001033 0F011D[08100000]    <1>     lidt [IDTR]
   195                              <1> 
   196 0000103A 5F                  <1>     pop edi
   197 0000103B 59                  <1>     pop ecx
   198 0000103C 5B                  <1>     pop ebx
   199 0000103D 58                  <1>     pop eax
   200                              <1> 
   201 0000103E C3                  <1>     ret
   202                              <1> 
   203                              <1> 
   204                              <1> int_zero_div:
   205 0000103F 9C                  <1>     pushf
   206 00001040 0E                  <1>     push cs
   207 00001041 68[CF0E0000]        <1>     push int_stop
   208                              <1> 
   209 00001046 B8[4C100000]        <1>     mov eax, .s0
   210 0000104B CF                  <1>     iret
   211                              <1> 
   212 0000104C 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   212 00001055 44495620203E2000    <1>
   118                                  %include "../modules/protect/pic.s"
   119                              <1> init_pic:
   120 0000105D 50                  <1>     push eax
   121                              <1> 
   122                              <1>     ; outp ポート, データ
   123                              <1> 
   124                              <1>     ; マスタの設定
   125                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 0000105E B011                <2>  mov al, %2
    50 00001060 E620                <2>  out %1, al
   126                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 00001062 B020                <2>  mov al, %2
    50 00001064 E621                <2>  out %1, al
   127                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 00001066 B004                <2>  mov al, %2
    50 00001068 E621                <2>  out %1, al
   128                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 0000106A B001                <2>  mov al, %2
    50 0000106C E621                <2>  out %1, al
   129                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 0000106E B0FF                <2>  mov al, %2
    50 00001070 E621                <2>  out %1, al
   130                              <1> 
   131                              <1>     ; スレーブの設定
   132                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 00001072 B011                <2>  mov al, %2
    50 00001074 E6A0                <2>  out %1, al
   133                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 00001076 B028                <2>  mov al, %2
    50 00001078 E6A1                <2>  out %1, al
   134                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 0000107A B002                <2>  mov al, %2
    50 0000107C E6A1                <2>  out %1, al
   135                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 0000107E B001                <2>  mov al, %2
    50 00001080 E6A1                <2>  out %1, al
   136                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 00001082 B0FF                <2>  mov al, %2
    50 00001084 E6A1                <2>  out %1, al
   137                              <1> 
   138 00001086 58                  <1>     pop eax
   139                              <1> 
   140 00001087 C3                  <1>     ret
   119                                  %include "../modules/protect/int_rtc.s"
   120                              <1> int_rtc:
   121 00001088 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   122 00001089 1E                  <1>     push ds
   123 0000108A 06                  <1>     push es
   124                              <1> 
   125                              <1>     ; データ用セグメントセレクタの設定
   126 0000108B 66B81000            <1>     mov ax, 0x0010
   127 0000108F 8ED8                <1>     mov ds, ax
   128 00001091 8EC0                <1>     mov es, ax
   129                              <1> 
   130                              <1>     ; RTCから時刻を取得
   131 00001093 68[1C020000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   131 0000109B FFFF6683C404        <1>
   132                              <1> 
   133                              <1>     ; RTCの割り込み要因を取得
   134                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 000010A1 B00C                <2>  mov al, %2
    50 000010A3 E670                <2>  out %1, al
   135 000010A5 E471                <1>     in al, 0x71     ; RTCからデータを取得
   136                              <1> 
   137                              <1>     ; 割り込みフラグをクリア(EOI)
   138 000010A7 B020                <1>     mov al, 0x20
   139 000010A9 E6A0                <1>     out 0xA0, al    ; スレーブ
   140 000010AB E620                <1>     out 0x20, al    ; マスタ
   141                              <1> 
   142 000010AD 07                  <1>     pop es
   143 000010AE 1F                  <1>     pop ds
   144 000010AF 61                  <1>     popa
   145                              <1> 
   146 000010B0 CF                  <1>     iret        ; 割り込み処理の終了
   147                              <1> 
   148                              <1> rtc_int_en:
   149 000010B1 55                  <1>     push ebp
   150 000010B2 89E5                <1>     mov ebp, esp
   151 000010B4 50                  <1>     push eax
   152                              <1> 
   153                              <1>     ; 割り込み許可設定
   154                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 000010B5 B00B                <2>  mov al, %2
    50 000010B7 E670                <2>  out %1, al
   155                              <1> 
   156 000010B9 E471                <1>     in al, 0x71     ; RTCからデータを取得
   157 000010BB 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   158                              <1> 
   159 000010BE E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   160                              <1> 
   161 000010C0 58                  <1>     pop eax
   162                              <1> 
   163 000010C1 89EC                <1>     mov esp, ebp
   164 000010C3 5D                  <1>     pop ebp
   165                              <1> 
   166 000010C4 C3                  <1>     ret
   120                                  %include "../modules/protect/int_keyboard.s"
   121                              <1> int_keyboard:
   122 000010C5 60                  <1>     pusha
   123 000010C6 1E                  <1>     push ds
   124 000010C7 06                  <1>     push es
   125                              <1> 
   126                              <1>     ; データ用セグメントの設定
   127 000010C8 66B81000            <1>     mov ax, 0x0010
   128 000010CC 8ED8                <1>     mov ds, ax
   129 000010CE 8EC0                <1>     mov es, ax
   130                              <1> 
   131                              <1>     ; KBCのバッファ読み取り
   132 000010D0 E460                <1>     in al, 0x60
   133                              <1> 
   134                              <1>     ; キーコードの保存
   135 000010D2 5068[EC100000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   135 000010DA 0000006683C408      <1>
   136                              <1> 
   137                              <1>     ; 割り込み終了コマンド送信
   138                              <1>     outp 0x20, 0x20
    49 000010E1 B020                <2>  mov al, %2
    50 000010E3 E620                <2>  out %1, al
   139                              <1> 
   140 000010E5 07                  <1>     pop es
   141 000010E6 1F                  <1>     pop ds
   142 000010E7 61                  <1>     popa
   143                              <1> 
   144 000010E8 CF                  <1>     iret
   145                              <1> 
   146 000010E9 00<rep 3h>          <1> ALIGN 4, db 0
   147 000010EC 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   121                                  %include "../modules/protect/ring_buff.s"
   122                              <1> ring_rd:        ; int ring_rd(buff, data);
   123                              <1> ; buff リングバッファ
   124                              <1> ; data 読み込んだデータの保存先アドレス
   125                              <1> ; 戻り値: データあり(0以外), データなし(0)
   126                              <1> 
   127 00001104 55                  <1>     push ebp
   128 00001105 89E5                <1>     mov ebp, esp
   129                              <1> 
   130 00001107 50                  <1>     push eax
   131 00001108 53                  <1>     push ebx
   132 00001109 56                  <1>     push esi
   133 0000110A 57                  <1>     push edi
   134                              <1> 
   135                              <1>     ; 引数取得
   136 0000110B 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   137 0000110E 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   138                              <1> 
   139                              <1>     ; 読み込み位置を確認
   140 00001111 B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   141 00001116 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   142 00001118 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   143 0000111B 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   144                              <1> 
   145 0000111D 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   146                              <1> 
   147 00001121 8807                <1>     mov [edi], al
   148                              <1> 
   149 00001123 43                  <1>     inc ebx ; 次の読み込み位置
   150 00001124 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   151 00001127 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   152                              <1> 
   153 00001129 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   154                              <1> .10E:
   155                              <1> 
   156 0000112E 5F                  <1>     pop edi
   157 0000112F 5E                  <1>     pop esi
   158 00001130 5B                  <1>     pop ebx
   159 00001131 58                  <1>     pop eax
   160                              <1> 
   161 00001132 89EC                <1>     mov esp, ebp
   162 00001134 5D                  <1>     pop ebp
   163                              <1> 
   164 00001135 C3                  <1>     ret
   165                              <1> 
   166                              <1> 
   167                              <1> ring_wr:    ; int ring_wr(buff, data);
   168                              <1> ; buff シリンダバッファ
   169                              <1> ; data 書き込むデータ
   170                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   171 00001136 55                  <1>     push ebp
   172 00001137 89E5                <1>     mov ebp, esp
   173                              <1> 
   174 00001139 50                  <1>     push eax
   175 0000113A 53                  <1>     push ebx
   176 0000113B 51                  <1>     push ecx
   177 0000113C 56                  <1>     push esi
   178                              <1> 
   179 0000113D 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   180                              <1> 
   181                              <1>     ; 書き込み位置を確認
   182 00001140 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   183 00001145 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   184 00001148 89D9                <1>     mov ecx, ebx
   185 0000114A 41                  <1>     inc ecx                         ; 次の書き込み位置
   186 0000114B 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   187                              <1> 
   188                              <1>     ; バッファフルなら処理しない
   189 0000114E 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   190 00001150 740F                <1>     je .10E
   191                              <1> 
   192 00001152 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   193                              <1> 
   194 00001155 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   195 00001159 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   196 0000115C B801000000          <1>     mov eax, 1  ; 戻り値 成功
   197                              <1> .10E:
   198                              <1> 
   199 00001161 5E                  <1>     pop esi
   200 00001162 59                  <1>     pop ecx
   201 00001163 5B                  <1>     pop ebx
   202 00001164 58                  <1>     pop eax
   203                              <1> 
   204 00001165 89EC                <1>     mov esp, ebp
   205 00001167 5D                  <1>     pop ebp
   206                              <1> 
   207 00001168 C3                  <1>     ret
   208                              <1> 
   209                              <1> draw_key:
   210 00001169 55                  <1>     push ebp
   211 0000116A 89E5                <1>     mov ebp, esp
   212                              <1> 
   213 0000116C 50                  <1>     push eax
   214 0000116D 53                  <1>     push ebx
   215 0000116E 51                  <1>     push ecx
   216 0000116F 52                  <1>     push edx
   217 00001170 56                  <1>     push esi
   218 00001171 57                  <1>     push edi
   219                              <1> 
   220                              <1> 
   221 00001172 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   222 00001175 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   223 00001178 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   224                              <1> 
   225                              <1>     ; リングバッファの情報を取得
   226 0000117B 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   227 0000117D 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   228 00001180 B910000000          <1>     mov ecx, RING_ITEM_SIZE
   229                              <1> 
   230                              <1> .10L:
   231 00001185 4B                  <1>     dec ebx ; 読み込み位置
   232 00001186 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   233 00001189 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   234                              <1> 
   235 0000118C 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   235 00001195 68[C8110000]50E8EF- <1>
   235 0000119D FBFFFF6683C414      <1>
   236 000011A4 68[C8110000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   236 000011AC 52E835F9FFFF6683C4- <1>
   236 000011B5 10                  <1>
   237                              <1> 
   238 000011B6 83C203              <1>     add edx, 3  ; 表示位置更新
   239 000011B9 E2CA                <1>     loop .10L
   240                              <1> .10E:
   241                              <1> 
   242 000011BB 5F                  <1>     pop edi
   243 000011BC 5E                  <1>     pop esi
   244 000011BD 5A                  <1>     pop edx
   245 000011BE 59                  <1>     pop ecx
   246 000011BF 5B                  <1>     pop ebx
   247 000011C0 58                  <1>     pop eax
   248                              <1> 
   249 000011C1 89EC                <1>     mov esp, ebp
   250 000011C3 5D                  <1>     pop ebp
   251                              <1> 
   252 000011C4 C3                  <1>     ret
   253                              <1> 
   254 000011C5 00<rep 3h>          <1> ALIGN 4, db 0
   255 000011C8 2D2D2000            <1> .tmp db "-- ", 0
   122                                  %include "../modules/protect/timer.s"
   123                              <1> int_en_timer0:
   124 000011CC 50                  <1>     push eax
   125                              <1> 
   126                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 000011CD B034                <2>  mov al, %2
    50 000011CF E643                <2>  out %1, al
   127                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 000011D1 B09C                <2>  mov al, %2
    50 000011D3 E640                <2>  out %1, al
   128                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 000011D5 B02E                <2>  mov al, %2
    50 000011D7 E640                <2>  out %1, al
   129                              <1> 
   130 000011D9 58                  <1>     pop eax
   131                              <1> 
   132 000011DA C3                  <1>     ret
   123                                  %include "../modules/protect/draw_rotation_bar.s"
   124                              <1> draw_rotation_bar:
   125 000011DB 50                  <1>     push eax
   126                              <1> 
   127 000011DC A1[6C060000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   128 000011E1 C1E804              <1>     shr eax, 4              ; eax /= 4
   129 000011E4 3B05[0C120000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   130 000011EA 741E                <1>     je .10E
   131                              <1> 
   132 000011EC A3[0C120000]        <1>     mov [.index], eax       ; 前回値設定
   133 000011F1 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   134                              <1> 
   135 000011F4 8A80[10120000]      <1>     mov al, [.table + eax]  ; 文字表示
   136 000011FA 506A0F6A1D6A00E8BC- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   136 00001203 F7FFFF6683C410      <1>
   137                              <1> 
   138                              <1> .10E:
   139                              <1> 
   140 0000120A 58                  <1>     pop eax
   141                              <1> 
   142 0000120B C3                  <1>     ret
   143                              <1> 
   144                              <1> ALIGN 4, db 0
   145 0000120C 00000000            <1> .index: dd 0        ; 前回値
   146 00001210 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   124                                  %include "../modules/protect/call_gate.s"
   125                              <1> call_gate:
   126 00001214 55                  <1>     push ebp
   127 00001215 89E5                <1>     mov ebp, esp
   128                              <1> 
   129 00001217 60                  <1>     pusha
   130 00001218 1E                  <1>     push ds
   131 00001219 06                  <1>     push es
   132                              <1> 
   133                              <1>     ; データ用セグメントの設定
   134 0000121A 66B81000            <1>     mov ax, 0x0010
   135 0000121E 8ED8                <1>     mov ds, ax
   136 00001220 8EC0                <1>     mov es, ax
   137                              <1> 
   138                              <1>     ; 文字を表示
   139 00001222 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   140 00001225 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   141 00001228 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   142 0000122B 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   143 0000122E 52515350E8B0F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   143 00001237 6683C410            <1>
   144                              <1> 
   145 0000123B 07                  <1>     pop es
   146 0000123C 1F                  <1>     pop ds
   147 0000123D 61                  <1>     popa
   148                              <1> 
   149 0000123E 89EC                <1>     mov esp, ebp
   150 00001240 5D                  <1>     pop ebp
   151                              <1> 
   152                              <1>     ; コードセグメントセレクタの復帰と終了
   153 00001241 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   125                                  %include "../modules/protect/trap_gate.s"
   126                              <1> trap_gate_81:
   127                              <1>     ; 1文字出力
   128 00001244 50535251E875F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   128 0000124D 6683C410            <1>
   129                              <1> 
   130 00001251 CF                  <1>     iret
   131                              <1> 
   132                              <1> trap_gate_82:
   133                              <1>     ; 点の描画
   134 00001252 535251E845F9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   134 0000125B 83C40C              <1>
   135                              <1> 
   136 0000125E CF                  <1>     iret
   126                                  %include "../modules/protect/test_and_set.s"
   127                              <1> test_and_set:
   128 0000125F 55                  <1>     push ebp
   129 00001260 89E5                <1>     mov ebp, esp
   130                              <1> 
   131 00001262 50                  <1>     push eax
   132 00001263 53                  <1>     push ebx
   133                              <1> 
   134                              <1>     ; テストアンドセット
   135 00001264 B800000000          <1>     mov eax, 0
   136 00001269 8B5D08              <1>     mov ebx, [ebp + 8]
   137                              <1> 
   138                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   139                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   140                              <1> .10L:
   141 0000126C F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   142 00001270 7307                <1>     jnc .10E
   143                              <1> 
   144                              <1> .12L:
   145 00001272 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   146 00001275 72FB                <1>     jc .12L
   147                              <1>     
   148 00001277 EBF3                <1>     jmp .10L
   149                              <1> .10E:
   150                              <1>     
   151 00001279 5B                  <1>     pop ebx
   152 0000127A 58                  <1>     pop eax
   153                              <1> 
   154 0000127B 89EC                <1>     mov esp, ebp
   155 0000127D 5D                  <1>     pop ebp
   156                              <1> 
   157 0000127E C3                  <1>     ret
   127                                  %include "../modules/protect/int_nm.s"
   128                              <1> get_tss_base:
   129                              <1> ; EBX: TSSセレクタ
   130                              <1>     ; EAX = TSS base address
   131 0000127F 8B83[6A020000]      <1>     mov eax, [GDT + ebx + 2]
   132 00001285 C1E008              <1>     shl eax, 8
   133 00001288 8A83[6F020000]      <1>     mov al, [GDT + ebx + 7]
   134 0000128E C1C808              <1>     ror eax, 8
   135                              <1> 
   136 00001291 C3                  <1>     ret
   137                              <1> 
   138                              <1> save_fpu_context:
   139 00001292 DD7068              <1>     fnsave [eax + 104]
   140 00001295 C780D4000000010000- <1>     mov [eax + 104 + 108], dword 1
   140 0000129E 00                  <1>
   141                              <1> 
   142 0000129F C3                  <1>     ret
   143                              <1> 
   144                              <1> load_fpu_context:
   145 000012A0 83B8D400000000      <1>     cmp [eax + 104 + 108], dword 0
   146 000012A7 7504                <1>     jne .10F    ; if(saved != 0) goto .10F
   147 000012A9 DBE3                <1>     fninit      ; FPU初期化
   148 000012AB EB03                <1>     jmp .10E
   149                              <1> .10F:
   150 000012AD DD6068              <1>     frstor [eax + 104]  ; FPUコンテキストを復帰
   151                              <1> .10E:
   152 000012B0 C3                  <1>     ret
   153                              <1> 
   154                              <1> int_nm:
   155 000012B1 60                  <1>     pusha
   156 000012B2 1E                  <1>     push ds
   157 000012B3 06                  <1>     push es
   158                              <1> 
   159 000012B4 66B81000            <1>     mov ax, DS_KERNEL
   160 000012B8 8ED8                <1>     mov ds, ax
   161 000012BA 8EC0                <1>     mov es, ax
   162                              <1> 
   163                              <1>     ; タスクスイッチフラグをクリア
   164 000012BC 0F06                <1>     clts    ; CR0.TS = 0
   165                              <1> 
   166                              <1>     ; 前回・今回FPUを使用するタスク
   167 000012BE 8B3D[08130000]      <1>     mov edi, [.last_tss]; edi = 前回FPUを使用したタスクのTSS
   168 000012C4 0F00CE              <1>     str esi             ; esi = 今回FPUを使用するタスクのTSS（trレジスタ）
   169 000012C7 83E6F8              <1>     and esi, ~0x0007    ; 特権レベルはいらないのでマスク
   170                              <1> 
   171                              <1>     ; 初回利用チェック
   172 000012CA 83FF00              <1>     cmp edi, 0          ; if(前回のタスク==0) goto .10F
   173 000012CD 7420                <1>     je .10F
   174                              <1> 
   175 000012CF 39FE                <1>     cmp esi, edi        ; if(前回のタスク==今回のタスク) goto .12E
   176 000012D1 741A                <1>     je .12E
   177                              <1> 
   178 000012D3 FA                  <1>     cli
   179                              <1> 
   180                              <1>     ; 前回のFPUコンテキストを保存
   181 000012D4 89FB                <1>     mov ebx, edi
   182 000012D6 E8A4FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   183 000012DB E8B2FFFFFF          <1>     call save_fpu_context   ; void save_fpu_context(eax);
   184                              <1> 
   185                              <1>     ; 今回のFPUコンテキストを復帰
   186 000012E0 89F3                <1>     mov ebx, esi
   187 000012E2 E898FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   188 000012E7 E8B4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   189                              <1> 
   190 000012EC FB                  <1>     sti
   191                              <1> .12E:
   192 000012ED EB0E                <1>     jmp .10E
   193                              <1> .10F:
   194 000012EF FA                  <1>     cli
   195                              <1> 
   196                              <1>     ; 今回のFPUコンテキストを復帰
   197 000012F0 89F3                <1>     mov ebx, esi
   198 000012F2 E888FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   199 000012F7 E8A4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   200                              <1> 
   201 000012FC FB                  <1>     sti
   202                              <1> .10E:
   203                              <1> 
   204 000012FD 8935[08130000]      <1>     mov [.last_tss], esi
   205                              <1> 
   206 00001303 07                  <1>     pop es
   207 00001304 1F                  <1>     pop ds
   208 00001305 61                  <1>     popa
   209                              <1> 
   210 00001306 CF                  <1>     iret
   211                              <1> 
   212 00001307 00                  <1> ALIGN 4, db 0
   213 00001308 00000000            <1> .last_tss: dd 0
   128                                  %include "../modules/protect/wait_tick.s"
   129                              <1> wait_tick:
   130 0000130C 55                  <1>     push ebp
   131 0000130D 89E5                <1>     mov ebp, esp
   132                              <1> 
   133 0000130F 50                  <1>     push eax
   134 00001310 51                  <1>     push ecx
   135                              <1> 
   136                              <1>     ; ウェイト
   137 00001311 8B4D08              <1>     mov ecx, [ebp + 8]      ; ECX = ウェイト回数
   138 00001314 A1[6C060000]        <1>     mov eax, [TIMER_COUNT]  ; EAX = TIMER
   139                              <1> 
   140                              <1> .10L:
   141 00001319 3905[6C060000]      <1>     cmp [TIMER_COUNT], eax  ; for(i=0; i < ecx; i++) while(TIMER == eax);
   142 0000131F 74F8                <1>     je .10L
   143 00001321 40                  <1>     inc eax
   144 00001322 E2F5                <1>     loop .10L
   145                              <1> 
   146 00001324 59                  <1>     pop ecx
   147 00001325 58                  <1>     pop eax
   148                              <1> 
   149 00001326 89EC                <1>     mov esp, ebp
   150 00001328 5D                  <1>     pop ebp
   151                              <1> 
   152 00001329 C3                  <1>     ret
   129                                  
   130                                  ;パディング
   131 0000132A 00<rep CD6h>                times KERNEL_SIZE - ($ - $$) db 0
   132                                  

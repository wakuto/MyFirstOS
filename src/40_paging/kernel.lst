     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    27                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
    28                              <1>     SP_TASK_3 equ STACK_BASE + (STACK_SIZE * 4)
    29                              <1> 
    30                              <1>     CR3_BASE equ 0x0010_5000    ; ページ変換テーブル タスク3用
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc rose
    98 00000000 ????????            <1>     .x0         resd 1      ; 左上座標
    99 00000004 ????????            <1>     .y0         resd 1      ; 
   100 00000008 ????????            <1>     .x1         resd 1      ; 右下座標
   101 0000000C ????????            <1>     .y1         resd 1      ;
   102                              <1> 
   103 00000010 ????????            <1>     .n          resd 1      ; 変数n
   104 00000014 ????????            <1>     .d          resd 1      ; 変数d
   105                              <1> 
   106                              <1>     ;描画色
   107 00000018 ????????            <1>     .color_x    resd 1      ; x軸
   108 0000001C ????????            <1>     .color_y    resd 1      ; y軸
   109 00000020 ????????            <1>     .color_z    resd 1      ; 枠
   110 00000024 ????????            <1>     .color_s    resd 1      ; 文字
   111 00000028 ????????            <1>     .color_f    resd 1      ; グラフ描画
   112 0000002C ????????            <1>     .color_b    resd 1      ; グラフ消去
   113                              <1> 
   114 00000030 <res 10h>           <1>     .title      resb 16     ; タイトル
   115                              <1> endstruc
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[34020000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[A4020000]        <1>  mov edi, %1
    67 0000001D B8[D2020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[AC020000]        <1>  mov edi, %1
    67 00000038 B8[AA030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                      set_desc GDT.tss_2, TSS_2       ; タスク2用TSSの設定
    63 0000004C 50                  <1>  push eax
    64 0000004D 57                  <1>  push edi
    65                              <1> 
    66 0000004E BF[B4020000]        <1>  mov edi, %1
    67 00000053 B8[82040000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000058 66894702            <1>  mov [edi + 2], ax
    74 0000005C C1E810              <1>  shr eax, 16
    75 0000005F 884704              <1>  mov [edi + 4], al
    76 00000062 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000065 5F                  <1>  pop edi
    79 00000066 58                  <1>  pop eax
    25                                      set_desc GDT.tss_3, TSS_3       ; タスク3用TSSの設定
    63 00000067 50                  <1>  push eax
    64 00000068 57                  <1>  push edi
    65                              <1> 
    66 00000069 BF[BC020000]        <1>  mov edi, %1
    67 0000006E B8[5A050000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000073 66894702            <1>  mov [edi + 2], ax
    74 00000077 C1E810              <1>  shr eax, 16
    75 0000007A 884704              <1>  mov [edi + 4], al
    76 0000007D 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000080 5F                  <1>  pop edi
    79 00000081 58                  <1>  pop eax
    26                                  
    27                                      ; コールゲートの設定
    28                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 00000082 50                  <1>  push eax
    84 00000083 57                  <1>  push edi
    85                              <1> 
    86 00000084 BF[C4020000]        <1>  mov edi, %1
    87 00000089 B8[D0110000]        <1>  mov eax, %2
    88                              <1> 
    89 0000008E 668907              <1>  mov [edi + 0], ax
    90 00000091 C1E810              <1>  shr eax, 16
    91 00000094 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 00000098 5F                  <1>  pop edi
    94 00000099 58                  <1>  pop eax
    29                                  
    30                                      ; LDTの設定
    31                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 0000009A 50                  <1>  push eax
    64 0000009B 57                  <1>  push edi
    65                              <1> 
    66 0000009C BF[9C020000]        <1>  mov edi, %1
    67 000000A1 B8[3C020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 000000A6 66C7074700          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000AB 66894702            <1>  mov [edi + 2], ax
    74 000000AF C1E810              <1>  shr eax, 16
    75 000000B2 884704              <1>  mov [edi + 4], al
    76 000000B5 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000B8 5F                  <1>  pop edi
    79 000000B9 58                  <1>  pop eax
    32                                  
    33                                      ; GDTをロード(再設定)
    34 000000BA 0F0115[CC020000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    35                                  
    36                                      ; スタックの設定
    37 000000C1 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    38                                  
    39                                      ; タスクレジスタの初期化
    40 000000C6 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    41 000000CA 0F00D8                      ltr ax              ; タスクレジスタの設定
    42                                  
    43                                      ; 初期化
    44 000000CD E8F80E0000                  cdecl init_int                  ; 割り込みベクタの初期化
    45 000000D2 E8420F0000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    46 000000D7 E8BB120000                  cdecl init_page                 ; ページングの初期化
    47                                  
    48                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 000000DC 50                  <1>  push eax
    31 000000DD 57                  <1>  push edi
    32                              <1> 
    33 000000DE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000E3 B8[FB0F0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000000E8 668907              <1>  mov [edi + 0], ax
    41 000000EB C1E810              <1>  shr eax, 16
    42 000000EE 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000000F2 5F                  <1>  pop edi
    45 000000F3 58                  <1>  pop eax
    49                                      set_vect 0x07, int_nm           ; 割り込み処理の登録：デバイス使用不可例外
    30 000000F4 50                  <1>  push eax
    31 000000F5 57                  <1>  push edi
    32                              <1> 
    33 000000F6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000000FB B8[6D120000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000100 668907              <1>  mov [edi + 0], ax
    41 00000103 C1E810              <1>  shr eax, 16
    42 00000106 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000010A 5F                  <1>  pop edi
    45 0000010B 58                  <1>  pop eax
    50                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 0000010C 50                  <1>  push eax
    31 0000010D 57                  <1>  push edi
    32                              <1> 
    33 0000010E BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000113 B8[FF120000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000118 668907              <1>  mov [edi + 0], ax
    41 0000011B C1E810              <1>  shr eax, 16
    42 0000011E 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000122 5F                  <1>  pop edi
    45 00000123 58                  <1>  pop eax
    51                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 00000124 50                  <1>  push eax
    31 00000125 57                  <1>  push edi
    32                              <1> 
    33 00000126 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000012B B8[81100000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000130 668907              <1>  mov [edi + 0], ax
    41 00000133 C1E810              <1>  shr eax, 16
    42 00000136 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000013A 5F                  <1>  pop edi
    45 0000013B 58                  <1>  pop eax
    52                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 0000013C 50                  <1>  push eax
    31 0000013D 57                  <1>  push edi
    32                              <1> 
    33 0000013E BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000143 B8[44100000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000148 668907              <1>  mov [edi + 0], ax
    41 0000014B C1E810              <1>  shr eax, 16
    42 0000014E 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000152 5F                  <1>  pop edi
    45 00000153 58                  <1>  pop eax
    53                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 00000154 50                  <1>  push eax
    31 00000155 57                  <1>  push edi
    32                              <1> 
    33 00000156 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000015B B8[00120000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 00000160 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000166 668907              <1>  mov [edi + 0], ax
    41 00000169 C1E810              <1>  shr eax, 16
    42 0000016C 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000170 5F                  <1>  pop edi
    45 00000171 58                  <1>  pop eax
    54                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 00000172 50                  <1>  push eax
    31 00000173 57                  <1>  push edi
    32                              <1> 
    33 00000174 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000179 B8[0E120000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 0000017E 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000184 668907              <1>  mov [edi + 0], ax
    41 00000187 C1E810              <1>  shr eax, 16
    42 0000018A 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000018E 5F                  <1>  pop edi
    45 0000018F 58                  <1>  pop eax
    55                                  
    56                                      ; デバイスの割り込み許可
    57 00000190 6A10E8D60E00006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    57 00000199 C404               
    58                                  
    59                                      ; IMR（割り込みマスクレジスタ）の設定
    60                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 0000019B B0F8                <1>  mov al, %2
    50 0000019D E621                <1>  out %1, al
    61                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 0000019F B0FE                <1>  mov al, %2
    50 000001A1 E6A1                <1>  out %1, al
    62                                  
    63                                      ; ページングの有効化
    64 000001A3 B800501000                  mov eax, CR3_BASE
    65 000001A8 0F22D8                      mov cr3, eax                    ; ページテーブルの登録
    66                                  
    67 000001AB 0F20C0                      mov eax, cr0
    68 000001AE 0D00000080                  or eax, (1 << 31)               ; CR0 | PG      ページングを有効化
    69 000001B3 0F22C0                      mov cr0, eax
    70 000001B6 EB00                        jmp $ + 2                       ; パイプラインのクリア
    71                                  
    72 000001B8 FB                          sti                             ; 割り込み許可
    73                                  
    74 000001B9 6A0D6A3FE89E080000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    74 000001C2 6683C408           
    75 000001C6 6A046A3FE812090000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    75 000001CF 6683C408           
    76 000001D3 68[1D020000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    76 000001DB 00006A0E6A19E8BD08-
    76 000001E4 00006683C410       
    77                                  
    78                                  
    79                                  
    80                                  .10L:
    81                                      ; 回転する棒の表示
    82 000001EA E8A80F0000                  cdecl draw_rotation_bar
    83                                  
    84                                      ; キーコードの取得
    85 000001EF 68[30020000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    85 000001F5 [A8100000]E8C20E00-
    85 000001FD 006683C408         
    86 00000202 83F800                      cmp eax, 0
    87 00000205 7414                        je .10E
    88                                  
    89                                      ; キーコードの表示
    90 00000207 68[A8100000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    90 0000020F 02E8100F00006683C4-
    90 00000218 0C                 
    91                                  
    92 00000219 EBCF                        jmp .10L
    93                                  .10E:
    94                                  
    95                                  
    96                                      ; 処理の終了
    97 0000021B EBFE                        jmp $
    98                                  
    99 0000021D 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    99 00000226 65726E656C212000   
   100                                  
   101 0000022E 00<rep 2h>              ALIGN 4, db 0
   102 00000230 00000000                .int_key: dd 0
   103                                  
   104                                  ALIGN 4, db 0
   105 00000234 00000000                FONT_ADR: dd 0
   106 00000238 00000000                RTC_TIME: dd 0
   107                                  
   108                                  ; タスク
   109                                  %include "descriptor.s"
   110                              <1> ; ローカルディスクリプタテーブル
   111 0000023C 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   112 00000244 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   113 0000024C FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   114 00000254 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   115 0000025C FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   116 00000264 FFFF000000FACF00    <1> .cs_task_2: dq 0x00CFFA000000FFFF   ; CODE 4G
   117 0000026C FFFF000000F2CF00    <1> .ds_task_2: dq 0x00CFF2000000FFFF   ; DATA 4G
   118 00000274 FFFF000000FACF00    <1> .cs_task_3: dq 0x00CFFA000000FFFF   ; CODE 4G
   119 0000027C FFFF000000F2CF00    <1> .ds_task_3: dq 0x00CFF2000000FFFF   ; DATA 4G
   120                              <1> .end:
   121                              <1> 
   122                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   123                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   124                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   125                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   126                              <1> CS_TASK_2 equ (.cs_task_2 - LDT) | 4 | 3; タスク2用CSセレクタ
   127                              <1> DS_TASK_2 equ (.ds_task_2 - LDT) | 4 | 3; タスク2用DSセレクタ
   128                              <1> CS_TASK_3 equ (.cs_task_3 - LDT) | 4 | 3; タスク3用CSセレクタ
   129                              <1> DS_TASK_3 equ (.ds_task_3 - LDT) | 4 | 3; タスク3用DSセレクタ
   130                              <1> 
   131                              <1> LDT_LIMIT equ .end        - LDT - 1
   132                              <1> 
   133                              <1> ; グローバルディスクリプタテーブル
   134 00000284 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   135 0000028C FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   136 00000294 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   137 0000029C 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   138 000002A4 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   139 000002AC 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   140 000002B4 6700000000890000    <1> .tss_2:     dq 0x0000890000000067   ; TSSディスクリプタ
   141 000002BC 6700000000890000    <1> .tss_3:     dq 0x0000890000000067   ; TSSディスクリプタ
   142 000002C4 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   143                              <1> .end:
   144                              <1> 
   145                              <1> CS_KERNEL equ .cs_kernel - GDT
   146                              <1> DS_KERNEL equ .ds_kernel - GDT
   147                              <1> SS_LDT    equ .ldt       - GDT
   148                              <1> SS_TASK_0 equ .tss_0     - GDT
   149                              <1> SS_TASK_1 equ .tss_1     - GDT
   150                              <1> SS_TASK_2 equ .tss_2     - GDT
   151                              <1> SS_TASK_3 equ .tss_3     - GDT
   152                              <1> SS_GATE_0 equ .call_gate - GDT
   153                              <1> 
   154 000002CC 4700                <1> GDTR: dw GDT.end - GDT - 1
   155 000002CE [84020000]          <1>       dd GDT
   156                              <1> 
   157                              <1> ; TSS
   158                              <1> TSS_0:
   159 000002D2 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   160 000002D6 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   161 000002DA 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   162 000002DE 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   163 000002E2 00000000            <1> .ss1:       dd 0                    ;* 16:
   164 000002E6 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   165 000002EA 00000000            <1> .ss2:       dd 0                    ;* 24:
   166 000002EE 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   167 000002F2 00000000            <1> .eip:       dd 0                    ;  32:EIP
   168 000002F6 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   169 000002FA 00000000            <1> .eax:       dd 0                    ;  40:EAX
   170 000002FE 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   171 00000302 00000000            <1> .edx:       dd 0                    ;  48:EDX
   172 00000306 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   173 0000030A 00000000            <1> .esp:       dd 0                    ;  56:ESP
   174 0000030E 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   175 00000312 00000000            <1> .esi:       dd 0                    ;  64:ESI
   176 00000316 00000000            <1> .edi:       dd 0                    ;  68:EDI
   177 0000031A 00000000            <1> .es:        dd 0                    ;  72:ES
   178 0000031E 00000000            <1> .cs:        dd 0                    ;  76:CS
   179 00000322 00000000            <1> .ss:        dd 0                    ;  80:SS
   180 00000326 00000000            <1> .ds:        dd 0                    ;  84:DS
   181 0000032A 00000000            <1> .fs:        dd 0                    ;  88:FS
   182 0000032E 00000000            <1> .gs:        dd 0                    ;  92:GS
   183 00000332 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   184 00000336 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   185 0000033A 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   186                              <1> 
   187                              <1> TSS_1:
   188 000003AA 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   189 000003AE 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   190 000003B2 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   191 000003B6 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   192 000003BA 00000000            <1> .ss1:       dd 0                    ;* 16:
   193 000003BE 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   194 000003C2 00000000            <1> .ss2:       dd 0                    ;* 24:
   195 000003C6 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   196 000003CA [32060000]          <1> .eip:       dd task_1               ;  32:EIP
   197 000003CE 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   198 000003D2 00000000            <1> .eax:       dd 0                    ;  40:EAX
   199 000003D6 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   200 000003DA 00000000            <1> .edx:       dd 0                    ;  48:EDX
   201 000003DE 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   202 000003E2 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   203 000003E6 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   204 000003EA 00000000            <1> .esi:       dd 0                    ;  64:ESI
   205 000003EE 00000000            <1> .edi:       dd 0                    ;  68:EDI
   206 000003F2 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   207 000003F6 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   208 000003FA 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   209 000003FE 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   210 00000402 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   211 00000406 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   212 0000040A 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   213 0000040E 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   214 00000412 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   215                              <1> 
   216                              <1> TSS_2:
   217 00000482 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   218 00000486 003A1000            <1> .esp0:      dd SP_TASK_2 - 512      ;*  4:ESP0
   219 0000048A 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   220 0000048E 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   221 00000492 00000000            <1> .ss1:       dd 0                    ;* 16:
   222 00000496 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   223 0000049A 00000000            <1> .ss2:       dd 0                    ;* 24:
   224 0000049E 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   225 000004A2 [67060000]          <1> .eip:       dd task_2               ;  32:EIP
   226 000004A6 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   227 000004AA 00000000            <1> .eax:       dd 0                    ;  40:EAX
   228 000004AE 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   229 000004B2 00000000            <1> .edx:       dd 0                    ;  48:EDX
   230 000004B6 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   231 000004BA 003C1000            <1> .esp:       dd SP_TASK_2            ;  56:ESP
   232 000004BE 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   233 000004C2 00000000            <1> .esi:       dd 0                    ;  64:ESI
   234 000004C6 00000000            <1> .edi:       dd 0                    ;  68:EDI
   235 000004CA 37000000            <1> .es:        dd DS_TASK_2            ;  72:ES
   236 000004CE 2F000000            <1> .cs:        dd CS_TASK_2            ;  76:CS
   237 000004D2 37000000            <1> .ss:        dd DS_TASK_2            ;  80:SS
   238 000004D6 37000000            <1> .ds:        dd DS_TASK_2            ;  84:DS
   239 000004DA 37000000            <1> .fs:        dd DS_TASK_2            ;  88:FS
   240 000004DE 37000000            <1> .gs:        dd DS_TASK_2            ;  92:GS
   241 000004E2 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   242 000004E6 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   243 000004EA 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   244                              <1> 
   245                              <1> TSS_3:
   246 0000055A 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   247 0000055E 003E1000            <1> .esp0:      dd SP_TASK_3 - 512      ;*  4:ESP0
   248 00000562 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   249 00000566 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   250 0000056A 00000000            <1> .ss1:       dd 0                    ;* 16:
   251 0000056E 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   252 00000572 00000000            <1> .ss2:       dd 0                    ;* 24:
   253 00000576 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   254 0000057A [38070000]          <1> .eip:       dd task_3               ;  32:EIP
   255 0000057E 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   256 00000582 00000000            <1> .eax:       dd 0                    ;  40:EAX
   257 00000586 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   258 0000058A 00000000            <1> .edx:       dd 0                    ;  48:EDX
   259 0000058E 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   260 00000592 00401000            <1> .esp:       dd SP_TASK_3            ;  56:ESP
   261 00000596 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   262 0000059A 00000000            <1> .esi:       dd 0                    ;  64:ESI
   263 0000059E 00000000            <1> .edi:       dd 0                    ;  68:EDI
   264 000005A2 47000000            <1> .es:        dd DS_TASK_3            ;  72:ES
   265 000005A6 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   266 000005AA 47000000            <1> .ss:        dd DS_TASK_3            ;  80:SS
   267 000005AE 47000000            <1> .ds:        dd DS_TASK_3            ;  84:DS
   268 000005B2 47000000            <1> .fs:        dd DS_TASK_3            ;  88:FS
   269 000005B6 47000000            <1> .gs:        dd DS_TASK_3            ;  92:GS
   270 000005BA 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   271 000005BE 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   272 000005C2 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   110                                  %include "tasks/task_1.s"
   111                              <1> task_1:
   112                              <1>     ; 文字列の表示(コールゲート)
   113                              <1>     ;cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   114 00000632 68[60060000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0 ; draw_str();
   114 0000063A 006A3FE86104000066- <1>
   114 00000643 83C410              <1>
   115                              <1> 
   116                              <1> .10L:
   117                              <1>     ; 時刻の表示
   118 00000646 A1[38020000]        <1>     mov eax, [RTC_TIME]
   119 0000064B 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   119 00000654 48E8BC0700006683C4- <1>
   119 0000065D 10                  <1>
   120                              <1> 
   121 0000065E EBE6                <1>     jmp .10L
   122                              <1> 
   123                              <1>     ; データ
   124 00000660 5461736B2D3100      <1> .s0 db "Task-1", 0
   111                                  %include "tasks/task_2.s"
   112                              <1> task_2:
   113 00000667 68[2A070000]6A076A- <1>     cdecl draw_str, 63, 1, 0x07, .s0
   113 0000066F 016A3FE82C04000066- <1>
   113 00000678 83C410              <1>
   114                              <1> 
   115 0000067B DB05[18070000]      <1>     fild dword [.c1000]     ; st0 = [.c1000]
   116 00000681 D9EB                <1>     fldpi           ; st0 = pi
   117 00000683 DA35[1C070000]      <1>     fidiv dword [.c180]     ; st0 /= [.c180]
   118 00000689 D9EB                <1>     fldpi
   119 0000068B DCC0                <1>     fadd st0, st0   ; st0 += st0
   120 0000068D D9EE                <1>     fldz            ; st0 = 0
   121                              <1>     ; st0   0
   122                              <1>     ; st1   2*pi
   123                              <1>     ; st2   pi/180
   124                              <1>     ; st3   1000
   125                              <1> 
   126                              <1> .10L:
   127 0000068F D8C2                <1>     fadd st0, st2   ; st0 += st2
   128 00000691 D9F8                <1>     fprem           ; st0 %= st1
   129 00000693 D9C0                <1>     fld st0         ; st0をコピー
   130 00000695 D9FE                <1>     fsin            ; st0 = sin(st0)
   131 00000697 D8CC                <1>     fmul st0, st4   ; st0 *= 1000
   132 00000699 DF35[20070000]      <1>     fbstp [.bcd]
   133                              <1> 
   134 0000069F A1[20070000]        <1>     mov eax, [.bcd]
   135 000006A4 89C3                <1>     mov ebx, eax
   136                              <1> 
   137 000006A6 250F0F0000          <1>     and eax, 0x0F0F ; 上位４ビットをマスク
   138 000006AB 0D30300000          <1>     or eax, 0x3030  ; 上位４ビットに0x3に設定
   139                              <1> 
   140 000006B0 C1EB04              <1>     shr ebx, 4
   141 000006B3 81E30F0F0000        <1>     and ebx, 0x0F0F ; 上位４ビットをマスク
   142 000006B9 81CB30300000        <1>     or ebx, 0x3030  ; 上位４ビットに0x3に設定
   143                              <1> 
   144 000006BF 883D[32070000]      <1>     mov [.s2 + 0], bh   ; 1桁目
   145 000006C5 8825[34070000]      <1>     mov [.s3 + 0], ah   ; 小数1桁目
   146 000006CB 881D[35070000]      <1>     mov [.s3 + 1], bl   ; 小数2桁目
   147 000006D1 A2[36070000]        <1>     mov [.s3 + 2], al   ; 小数3桁目
   148                              <1> 
   149 000006D6 B807000000          <1>     mov eax, 7
   150 000006DB 0FA305[29070000]    <1>     bt [.bcd + 9], eax  ; cf = .bcd+9 から7ビット目
   151 000006E2 7209                <1>     jc .10F
   152                              <1> 
   153 000006E4 C605[31070000]2B    <1>     mov [.s1 + 0], byte '+'
   154 000006EB EB07                <1>     jmp .10E
   155                              <1> .10F:
   156 000006ED C605[31070000]2D    <1>     mov [.s1 + 0], byte '-'
   157                              <1> .10E:
   158                              <1> 
   159 000006F4 68[31070000]6A076A- <1>     cdecl draw_str, 72, 1, 0x07, .s1
   159 000006FC 016A48E89F03000066- <1>
   159 00000705 83C410              <1>
   160                              <1> 
   161                              <1>     ; ウェイト
   162 00000708 6A14E8B90B00006683- <1>     cdecl wait_tick, 20
   162 00000711 C404                <1>
   163                              <1> 
   164 00000713 E977FFFFFF          <1>     jmp .10L
   165                              <1> 
   166                              <1> 
   167                              <1> ALIGN 4, db 0
   168 00000718 E8030000            <1> .c1000: dd 1000
   169 0000071C B4000000            <1> .c180:  dd 180
   170 00000720 00<rep Ah>          <1> .bcd: times 10 db 0x00
   171 0000072A 5461736B2D3200      <1> .s0     db "Task-2", 0
   172 00000731 2D                  <1> .s1:    db "-"
   173 00000732 302E                <1> .s2:    db "0."
   174 00000734 30303000            <1> .s3:    db "000", 0
   112                                  %include "tasks/task_3.s"
   113                              <1> task_3:
   114 00000738 89E5                <1>     mov ebp, esp
   115                              <1> 
   116 0000073A 6A00                <1>     push dword 0    ; x0    x座標原点
   117 0000073C 6A00                <1>     push dword 0    ; y0    y座標原点
   118 0000073E 6A00                <1>     push dword 0    ; x     x座標描画
   119 00000740 6A00                <1>     push dword 0    ; y     y座標描画
   120 00000742 6A00                <1>     push dword 0    ; r     角度
   121                              <1> 
   122                              <1>     ; 初期化
   123 00000744 BE[3F080000]        <1>     mov esi, DRAW_PARAM ; esi = 描画パラメータ
   124                              <1> 
   125                              <1>     ; タイトル表示
   126 00000749 8B06                <1>     mov eax, [esi + rose.x0]
   127 0000074B 8B5E04              <1>     mov ebx, [esi + rose.y0]
   128                              <1> 
   129 0000074E C1E803              <1>     shr eax, 3                      ; EAX = EAX /  8 x座標を文字位置に変換
   130 00000751 C1EB04              <1>     shr ebx, 4                      ; EBX = EBX / 16 y座標を文字位置に変換
   131 00000754 4B                  <1>     dec ebx                         ; 1文字分上に移動
   132 00000755 8B4E24              <1>     mov ecx, [esi + rose.color_s]   ; 文字色
   133 00000758 8D5630              <1>     lea edx, [esi + rose.title]     ; タイトル
   134                              <1> 
   135 0000075B 52515350E83F030000- <1>     cdecl draw_str, eax, ebx, ecx, edx
   135 00000764 6683C410            <1>
   136                              <1> 
   137                              <1>     ; X軸の中点
   138 00000768 8B06                <1>     mov eax, [esi + rose.x0]
   139 0000076A 8B5E08              <1>     mov ebx, [esi + rose.x1]
   140 0000076D 29C3                <1>     sub ebx, eax            ; ebx = x0 - x1
   141 0000076F D1EB                <1>     shr ebx, 1              ; ebx /= 1
   142 00000771 01C3                <1>     add ebx, eax            ; ebx += x0
   143 00000773 895DFC              <1>     mov [ebp - 4], ebx      ; x0 = 原点
   144                              <1> 
   145                              <1>     ; Y軸の中点
   146 00000776 8B4604              <1>     mov eax, [esi + rose.y0]
   147 00000779 8B5E0C              <1>     mov ebx, [esi + rose.y1]
   148 0000077C 29C3                <1>     sub ebx, eax            ; ebx = y0 - y1
   149 0000077E D1EB                <1>     shr ebx, 1              ; ebx /= 1
   150 00000780 01C3                <1>     add ebx, eax            ; ebx += y0
   151 00000782 895DF8              <1>     mov [ebp - 8], ebx      ; y0 = 原点
   152                              <1> 
   153                              <1>     ; X軸の描画
   154 00000785 8B06                <1>     mov eax, [esi + rose.x0]
   155 00000787 8B5DF8              <1>     mov ebx, [ebp - 8]
   156 0000078A 8B4E08              <1>     mov ecx, [esi + rose.x1]
   157                              <1> 
   158 0000078D FF761853515350E89D- <1>     cdecl draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   158 00000796 0400006683C414      <1>
   159                              <1> 
   160                              <1>     ; Y軸の描画
   161 0000079D 8B4604              <1>     mov eax, [esi + rose.y0]
   162 000007A0 8B5DFC              <1>     mov ebx, [ebp - 4]
   163 000007A3 8B4E0C              <1>     mov ecx, [esi + rose.y1]
   164                              <1> 
   165 000007A6 FF761C51535053E884- <1>     cdecl draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   165 000007AF 0400006683C414      <1>
   166                              <1> 
   167                              <1>     ; 枠の描画
   168 000007B6 8B06                <1>     mov eax, [esi + rose.x0]
   169 000007B8 8B5E04              <1>     mov ebx, [esi + rose.y0]
   170 000007BB 8B4E08              <1>     mov ecx, [esi + rose.x1]
   171 000007BE 8B560C              <1>     mov edx, [esi + rose.y1]
   172                              <1> 
   173 000007C1 FF762052515350E818- <1>     cdecl draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   173 000007CA 0500006683C414      <1>
   174                              <1> 
   175                              <1>     ; 振幅をX軸の約95%とする
   176 000007D1 8B4608              <1>     mov eax, [esi + rose.x1]
   177 000007D4 2B06                <1>     sub eax, [esi + rose.x0]
   178 000007D6 D1E8                <1>     shr eax, 1                  ; eax = 原点から右端の長さ
   179 000007D8 89C3                <1>     mov ebx, eax
   180 000007DA C1EB04              <1>     shr ebx, 4
   181 000007DD 29D8                <1>     sub eax, ebx
   182                              <1> 
   183                              <1>     ; FPUの初期化（バラ曲線の初期化）
   184 000007DF FF7614FF761050E894- <1>     cdecl fpu_rose_init            , eax            , dword [esi + rose.n]            , dword [esi + rose.d]
   184 000007E8 0000006683C40C      <1>
   188                              <1> 
   189                              <1>     ; メインループ
   190                              <1> .10L:
   191                              <1>     ; 座標計算
   192 000007EF 8D5DF4              <1>     lea ebx, [ebp -12]  ; EBX = &x;
   193 000007F2 8D4DF0              <1>     lea ecx, [ebp -16]  ; ECX = &y;
   194 000007F5 8B45EC              <1>     mov eax, [ebp -20]  ; EAX = r;
   195                              <1> 
   196 000007F8 505153E89900000066- <1>     cdecl fpu_rose_update            , ebx            , ecx            , eax
   196 00000801 83C40C              <1>
   200                              <1> 
   201                              <1>     ; 角度更新(r = r % 36000)
   202 00000804 BA00000000          <1>     mov edx, 0
   203 00000809 40                  <1>     inc eax
   204 0000080A BBA08C0000          <1>     mov ebx, 360 * 100
   205 0000080F F7F3                <1>     div ebx             ; EDX = EDX:EAX % EBX
   206 00000811 8955EC              <1>     mov [ebp -20], edx
   207                              <1> 
   208                              <1>     ; ドット描画
   209 00000814 8B4DF4              <1>     mov ecx, [ebp -12]  ; x座標
   210 00000817 8B55F0              <1>     mov edx, [ebp -16]  ; y座標
   211                              <1> 
   212 0000081A 034DFC              <1>     add ecx, [ebp - 4]  ; x座標原点
   213 0000081D 0355F8              <1>     add edx, [ebp - 8]  ; y座標原点
   214                              <1> 
   215 00000820 8B5E28              <1>     mov ebx, [esi + rose.color_f]   ; 表示色
   216 00000823 CD82                <1>     int 0x82            ; sys_call_82(表示色, X, Y)
   217                              <1> 
   218                              <1>     ; ウェイト
   219 00000825 6A02E89C0A00006683- <1>     cdecl wait_tick, 2
   219 0000082E C404                <1>
   220                              <1> 
   221                              <1>     ; ドット描画(消去)
   222 00000830 8B5E2C              <1>     mov ebx, [esi + rose.color_b]   ; 背景色
   223 00000833 CD82                <1>     int 0x82           ; sys_call_82(表示色, X, Y)
   224                              <1> 
   225 00000835 EBB8                <1>     jmp .10L
   226                              <1> 
   227                              <1> 
   228 00000837 00                  <1> ALIGN 4, db 0
   229 00000838 5461736B2D3300      <1> .s0     db "Task-3", 0
   230                              <1> 
   231                              <1> DRAW_PARAM:
   232                              <1>     istruc rose
   233 0000083F 10000000            <1>         at rose.x0,         dd  16
   234 00000843 20000000            <1>         at rose.y0,         dd  32
   235 00000847 A0010000            <1>         at rose.x1,         dd 416
   236 0000084B B0010000            <1>         at rose.y1,         dd 432
   237                              <1> 
   238 0000084F 02000000            <1>         at rose.n,          dd 2
   239 00000853 01000000            <1>         at rose.d,          dd 1
   240                              <1> 
   241 00000857 07000000            <1>         at rose.color_x,    dd 0x007
   242 0000085B 07000000            <1>         at rose.color_y,    dd 0x007
   243 0000085F 0F000000            <1>         at rose.color_z,    dd 0x00F
   244 00000863 0F030000            <1>         at rose.color_s,    dd 0x30F
   245 00000867 0F000000            <1>         at rose.color_f,    dd 0x00F
   246 0000086B 03000000            <1>         at rose.color_b,    dd 0x003
   247                              <1> 
   248 0000086F 5461736B2D3300      <1>         at rose.title,      db "Task-3", 0
   249 00000876 00<rep 9h>          <1>     iend
   250                              <1> 
   251                              <1> fpu_rose_init:
   252 0000087F 55                  <1>     push ebp
   253 00000880 89E5                <1>     mov ebp, esp
   254                              <1> 
   255 00000882 68B4000000          <1>     push dword 180
   256                              <1> 
   257 00000887 D9EB                <1>     fldpi
   258 00000889 DA75FC              <1>     fidiv dword [ebp - 4]   ; 180
   259 0000088C DB450C              <1>     fild  dword [ebp +12]   ; n
   260 0000088F DA7510              <1>     fidiv dword [ebp +16]   ; d
   261 00000892 DB4508              <1>     fild  dword [ebp + 8]   ; A
   262                              <1> 
   263 00000895 89EC                <1>     mov esp, ebp
   264 00000897 5D                  <1>     pop ebp
   265                              <1> 
   266 00000898 C3                  <1>     ret
   267                              <1> 
   268                              <1> fpu_rose_update:
   269                              <1> ; px: 計算したX座標を格納するアドレス
   270                              <1> ; py: 計算したY座標を格納するアドレス
   271                              <1> ; t:  角度
   272                              <1> 
   273 00000899 55                  <1>     push ebp
   274 0000089A 89E5                <1>     mov ebp, esp
   275                              <1> 
   276 0000089C 50                  <1>     push eax
   277 0000089D 53                  <1>     push ebx
   278                              <1> 
   279 0000089E 8B4508              <1>     mov eax, [ebp +  8] ; eax = px
   280 000008A1 8B5D0C              <1>     mov ebx, [ebp + 12] ; ebx = py
   281                              <1> 
   282 000008A4 DB4510              <1>     fild dword [ebp +16]    ; t
   283 000008A7 D8CB                <1>     fmul st0, st3           ; st0 = t * r = θ
   284 000008A9 D9C0                <1>     fld st0
   285                              <1> 
   286 000008AB D9FB                <1>     fsincos                 ; st0 = cos(st0)
   287                              <1>                             ; st1 = sin(st0)
   288                              <1>     
   289 000008AD D9CA                <1>     fxch st2                ; st0 <-> st2
   290 000008AF D8CC                <1>     fmul st0, st4           ; st0 = kθ
   291 000008B1 D9FE                <1>     fsin                    ; st0 = sin(kθ)
   292 000008B3 D8CB                <1>     fmul st0, st3           ; st0 = Asin(kθ)
   293                              <1> 
   294                              <1>     ; st0 = Asin(kθ)
   295                              <1>     ; st1 = sin(θ)
   296                              <1>     ; st2 = cos(θ)
   297                              <1>     ; st3 = A
   298                              <1>     ; st4 = k
   299                              <1>     ; st5 = r
   300                              <1> 
   301 000008B5 D9CA                <1>     fxch st2                ; cosをst0に
   302 000008B7 D8CA                <1>     fmul st0, st2           ; st0 *= Asin(kθ)
   303 000008B9 DB18                <1>     fistp dword [eax]       ; st0を[eax]にpop
   304                              <1> 
   305 000008BB DEC9                <1>     fmulp st1, st0          ; st1 *= st0; st0をpop
   306 000008BD D9E0                <1>     fchs                    ; st0 * (-1)
   307 000008BF DB1B                <1>     fistp dword [ebx]       ; st0を[ebx]にpop
   308                              <1> 
   309 000008C1 5B                  <1>     pop ebx
   310 000008C2 58                  <1>     pop eax
   311 000008C3 89EC                <1>     mov esp, ebp
   312 000008C5 5D                  <1>     pop ebp
   313                              <1> 
   314 000008C6 C3                  <1>     ret
   113                                  
   114                                  ; モジュール
   115                                  %include "../modules/protect/vga.s"
   116                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   117                              <1> ; plane: 読み込みプレーン
   118 000008C7 55                  <1>     push ebp
   119 000008C8 89E5                <1>     mov ebp, esp
   120                              <1> 
   121 000008CA 50                  <1>     push eax
   122 000008CB 52                  <1>     push edx
   123                              <1> 
   124                              <1> 
   125                              <1>     ; 読み込みプレーンの選択
   126 000008CC 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   127 000008CF 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   128 000008D2 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   129 000008D4 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   130 000008D8 66EF                <1>     out dx, ax
   131                              <1> 
   132 000008DA 5A                  <1>     pop edx
   133 000008DB 58                  <1>     pop eax
   134                              <1> 
   135 000008DC 89EC                <1>     mov esp, ebp
   136 000008DE 5D                  <1>     pop ebp
   137                              <1> 
   138 000008DF C3                  <1>     ret
   139                              <1> 
   140                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   141                              <1> ; plane 書き込みプレーン
   142 000008E0 55                  <1>     push ebp
   143 000008E1 89E5                <1>     mov ebp, esp
   144                              <1> 
   145 000008E3 6650                <1>     push ax
   146 000008E5 6652                <1>     push dx
   147                              <1> 
   148                              <1> 
   149                              <1>     ; 書き込みプレーンの選択
   150 000008E7 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   151 000008EA 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   152 000008ED B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   153 000008EF 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   154 000008F3 66EF                <1>     out dx, ax
   155                              <1> 
   156                              <1> 
   157 000008F5 665A                <1>     pop dx
   158 000008F7 6658                <1>     pop ax
   159                              <1> 
   160 000008F9 89EC                <1>     mov esp, ebp
   161 000008FB 5D                  <1>     pop ebp
   162                              <1> 
   163 000008FC C3                  <1>     ret
   164                              <1> 
   165                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   166                              <1> ; font FONTアドレス
   167                              <1> ; vram VRAMアドレス
   168                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   169                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   170 000008FD 55                  <1>     push ebp
   171 000008FE 89E5                <1>     mov ebp, esp
   172                              <1>     
   173 00000900 50                  <1>     push eax
   174 00000901 53                  <1>     push ebx
   175 00000902 51                  <1>     push ecx
   176 00000903 52                  <1>     push edx
   177 00000904 57                  <1>     push edi
   178 00000905 56                  <1>     push esi
   179                              <1> 
   180 00000906 8B7508              <1>     mov esi, [ebp + 8]          ; font
   181 00000909 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   182 0000090C 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   183 00000910 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   184                              <1>     ; bh = 背景色 bl = 前景色
   185                              <1> 
   186 00000914 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   187 00000916 0F94C6              <1>     setz dh         ; dh = zf
   188 00000919 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   189                              <1> 
   190 0000091B 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   191 0000091D 0F94C2              <1>     setz dl         ; dl = zf
   192 00000920 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   193                              <1> 
   194                              <1>     ; 16ドットフォントのコピー
   195 00000922 FC                  <1>     cld             ; アドレス加算モード
   196                              <1> 
   197 00000923 B910000000          <1>     mov ecx, 16
   198                              <1> .10L:
   199                              <1>     ; フォントマスクの作成
   200 00000928 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   201 00000929 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   202 0000092B F6D4                <1>     not ah
   203                              <1> 
   204                              <1>     ; 前景色
   205 0000092D 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   206                              <1> 
   207                              <1>     ; 背景色
   208 0000092F F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   209 00000935 7404                <1>     jz .11F
   210                              <1>     ; 透過on
   211 00000937 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   212 00000939 EB02                <1>     jmp .11E
   213                              <1> .11F:                   ; 透過off
   214 0000093B 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   215                              <1> .11E:
   216                              <1>     
   217                              <1>     ; 前景色と背景色を合成
   218 0000093D 08E0                <1>     or al, ah           ; al = 背景 | 前景
   219                              <1> 
   220                              <1>     ; 新しい値を出力
   221 0000093F 8807                <1>     mov [edi], al
   222                              <1> 
   223 00000941 83C750              <1>     add edi, 80      ; 1行すすめる
   224 00000944 E2E2                <1>     loop .10L
   225                              <1> .10E:
   226                              <1> 
   227 00000946 5E                  <1>     pop esi
   228 00000947 5F                  <1>     pop edi
   229 00000948 5A                  <1>     pop edx
   230 00000949 59                  <1>     pop ecx
   231 0000094A 5B                  <1>     pop ebx
   232 0000094B 58                  <1>     pop eax
   233                              <1> 
   234 0000094C 89EC                <1>     mov esp, ebp
   235 0000094E 5D                  <1>     pop ebp
   236                              <1> 
   237 0000094F C3                  <1>     ret
   238                              <1> 
   239                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   240                              <1> ; bitデータ
   241                              <1> ; vram VRAMアドレス
   242                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   243                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   244 00000950 55                  <1>     push ebp
   245 00000951 89E5                <1>     mov ebp, esp
   246                              <1>     
   247 00000953 50                  <1>     push eax
   248 00000954 53                  <1>     push ebx
   249 00000955 57                  <1>     push edi
   250                              <1> 
   251 00000956 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   252 00000959 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   253 0000095D 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   254                              <1>     ; bl = 前景色
   255                              <1> 
   256                              <1>     ; 常に透過モード
   257 00000961 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   258 00000963 0F94C3              <1>     setz bl         ; dl = zf
   259 00000966 FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   260                              <1> 
   261                              <1>     ; マスク
   262 00000968 8A4508              <1>     mov al, [ebp + 8]   ; bit
   263 0000096B 88C4                <1>     mov ah, al      ; ah ~= al
   264 0000096D F6D4                <1>     not ah
   265                              <1> 
   266 0000096F 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   267 00000971 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   268 00000973 08E0                <1>     or al, ah           ; 背景と前景を合成
   269 00000975 8807                <1>     mov [edi], al       ; プレーンに書き込み
   270                              <1>     
   271                              <1> 
   272 00000977 5F                  <1>     pop edi
   273 00000978 5B                  <1>     pop ebx
   274 00000979 58                  <1>     pop eax
   275                              <1> 
   276 0000097A 89EC                <1>     mov esp, ebp
   277 0000097C 5D                  <1>     pop ebp
   278                              <1> 
   279 0000097D C3                  <1>     ret
   116                                  %include "../modules/protect/draw_char.s"
   117                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   118                              <1> ; col 列（0～79）
   119                              <1> ; row 行（0～29）
   120                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   121                              <1> ; ch 文字
   122                              <1> 
   123 0000097E 55                  <1>     push ebp
   124 0000097F 89E5                <1>     mov ebp, esp
   125                              <1> 
   126 00000981 50                  <1>     push eax
   127 00000982 53                  <1>     push ebx
   128 00000983 51                  <1>     push ecx
   129 00000984 52                  <1>     push edx
   130 00000985 56                  <1>     push esi
   131 00000986 57                  <1>     push edi
   132                              <1> 
   133                              <1> %ifdef USE_TEST_AND_SET
   134 00000987 68[5C0A0000]E88A08- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   134 0000098F 00006683C404        <1>
   135                              <1> %endif
   136                              <1> 
   137                              <1>     ; コピー元フォントアドレスを設定
   138 00000995 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   139 00000999 C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   140 0000099C 0335[34020000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   141                              <1> 
   142                              <1>     ; コピー先アドレスを取得
   143                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   144                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   145 000009A2 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   146 000009A5 C1E708              <1>     shl edi, 8
   147 000009A8 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   148 000009AF 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   149                              <1> 
   150                              <1>     ; 1文字分のフォントを出力
   151 000009B2 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   152                              <1> 
   153                              <1>     ; 輝度I
   154 000009B6 6A03E80AFFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   154 000009BF C404                <1>
   155 000009C1 6A08E818FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   155 000009CA C404                <1>
   156 000009CC 536A085756E827FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   156 000009D5 FF6683C410          <1>
   157                              <1> 
   158                              <1>     ; 赤R
   159 000009DA 6A02E8E6FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   159 000009E3 C404                <1>
   160 000009E5 6A04E8F4FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   160 000009EE C404                <1>
   161 000009F0 536A045756E803FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   161 000009F9 FF6683C410          <1>
   162                              <1> 
   163                              <1>     ; 緑G
   164 000009FE 6A01E8C2FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   164 00000A07 C404                <1>
   165 00000A09 6A02E8D0FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   165 00000A12 C404                <1>
   166 00000A14 536A025756E8DFFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   166 00000A1D FF6683C410          <1>
   167                              <1> 
   168                              <1>     ; 青B
   169 00000A22 6A00E89EFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   169 00000A2B C404                <1>
   170 00000A2D 6A01E8ACFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   170 00000A36 C404                <1>
   171 00000A38 536A015756E8BBFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   171 00000A41 FF6683C410          <1>
   172                              <1> 
   173                              <1> %ifdef USE_TEST_AND_SET
   174 00000A46 C705[5C0A0000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   174 00000A4E 0000                <1>
   175                              <1> %endif
   176                              <1> 
   177 00000A50 5F                  <1> 	pop		edi
   178 00000A51 5E                  <1> 	pop		esi
   179 00000A52 5A                  <1> 	pop		edx
   180 00000A53 59                  <1> 	pop		ecx
   181 00000A54 5B                  <1> 	pop		ebx
   182 00000A55 58                  <1> 	pop		eax
   183                              <1> 
   184 00000A56 89EC                <1>     mov esp, ebp
   185 00000A58 5D                  <1>     pop ebp
   186                              <1> 
   187 00000A59 C3                  <1>     ret
   188                              <1> 
   189                              <1> %ifdef USE_TEST_AND_SET
   190 00000A5A 00<rep 2h>          <1> ALIGN 4, db 0
   191 00000A5C 00000000            <1> IN_USE:  dd 0
   192                              <1> %endif
   117                                  %include "../modules/protect/draw_font.s"
   118                              <1> draw_font:  ; void draw_font(col, row);
   119                              <1> ; col 列
   120                              <1> ; row 行
   121 00000A60 55                  <1>     push ebp
   122 00000A61 89E5                <1>     mov ebp, esp
   123                              <1> 
   124 00000A63 50                  <1>     push eax
   125 00000A64 53                  <1>     push ebx
   126 00000A65 51                  <1>     push ecx
   127 00000A66 57                  <1>     push edi
   128 00000A67 56                  <1>     push esi
   129                              <1> 
   130                              <1> 
   131 00000A68 8B7508              <1>     mov esi, [ebp + 8]  ; x
   132 00000A6B 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   133                              <1> 
   134 00000A6E B900000000          <1>     mov ecx, 0
   135                              <1> .10L:
   136 00000A73 81F900010000        <1>     cmp ecx, 256
   137 00000A79 731F                <1>     jae .10E
   138                              <1> 
   139 00000A7B 89C8                <1>     mov eax, ecx
   140 00000A7D 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   141 00000A80 01F0                <1>     add eax, esi    ; eax += x
   142                              <1> 
   143 00000A82 89CB                <1>     mov ebx, ecx
   144 00000A84 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   145 00000A87 01FB                <1>     add ebx, edi    ; ebx += y
   146                              <1> 
   147 00000A89 516A075350E8EBFEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   147 00000A92 FF6683C410          <1>
   148                              <1> 
   149 00000A97 41                  <1>     inc ecx
   150 00000A98 EBD9                <1>     jmp .10L
   151                              <1> .10E:
   152                              <1> 
   153 00000A9A 5E                  <1>     pop esi
   154 00000A9B 5F                  <1>     pop edi
   155 00000A9C 59                  <1>     pop ecx
   156 00000A9D 5B                  <1>     pop ebx
   157 00000A9E 58                  <1>     pop eax
   158                              <1> 
   159 00000A9F 89EC                <1>     mov esp, ebp
   160 00000AA1 5D                  <1>     pop ebp
   161                              <1> 
   162 00000AA2 C3                  <1>     ret
   118                                  %include "../modules/protect/draw_str.s"
   119                              <1> draw_str:   ;void draw_str(col, row, color, p);
   120                              <1> ; col: 列
   121                              <1> ; row: 行
   122                              <1> ; color: 描画色
   123                              <1> ; p: 文字列のアドレス
   124 00000AA3 55                  <1>     push ebp
   125 00000AA4 89E5                <1>     mov ebp, esp
   126                              <1> 
   127 00000AA6 50                  <1>     push eax
   128 00000AA7 53                  <1>     push ebx
   129 00000AA8 51                  <1>     push ecx
   130 00000AA9 52                  <1>     push edx
   131 00000AAA 56                  <1>     push esi
   132                              <1> 
   133                              <1> 
   134 00000AAB 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   135 00000AAE 8B550C              <1>     mov edx, [ebp +12]  ; row
   136 00000AB1 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   137 00000AB5 8B7514              <1>     mov esi, [ebp +20]  ; p
   138                              <1> 
   139 00000AB8 FC                  <1>     cld
   140                              <1> .10L:
   141 00000AB9 AC                  <1>     lodsb
   142 00000ABA 3C00                <1>     cmp al, 0
   143 00000ABC 741A                <1>     je .10E
   144                              <1> 
   145                              <1> %ifdef USE_SYSTEM_CALL
   146 00000ABE CD81                <1>     int 0x81
   147                              <1> %else
   148                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   149                              <1> %endif
   150                              <1> 
   151 00000AC0 41                  <1>     inc ecx
   152 00000AC1 83F950              <1>     cmp ecx, 80
   153 00000AC4 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   154 00000AC6 B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   155 00000ACB 42                  <1>     inc edx
   156 00000ACC 83FA1E              <1>     cmp edx, 30
   157 00000ACF 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   158 00000AD1 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   159                              <1> .12E:
   160 00000AD6 EBE1                <1>     jmp .10L
   161                              <1> .10E:
   162                              <1> 
   163 00000AD8 5E                  <1>     pop esi
   164 00000AD9 5A                  <1>     pop edx
   165 00000ADA 59                  <1>     pop ecx
   166 00000ADB 5B                  <1>     pop ebx
   167 00000ADC 58                  <1>     pop eax
   168                              <1> 
   169 00000ADD 89EC                <1>     mov esp, ebp
   170 00000ADF 5D                  <1>     pop ebp
   171                              <1> 
   172 00000AE0 C3                  <1>     ret
   119                                  %include "../modules/protect/draw_color_bar.s"
   120                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   121                              <1> ; col: 列
   122                              <1> ; row: 行
   123 00000AE1 55                  <1>     push ebp
   124 00000AE2 89E5                <1>     mov ebp, esp
   125                              <1> 
   126 00000AE4 50                  <1>     push eax
   127 00000AE5 53                  <1>     push ebx
   128 00000AE6 51                  <1>     push ecx
   129 00000AE7 52                  <1>     push edx
   130 00000AE8 56                  <1>     push esi
   131 00000AE9 57                  <1>     push edi
   132                              <1> 
   133                              <1> 
   134 00000AEA 8B7508              <1>     mov esi, [ebp + 8]      ; x
   135 00000AED 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   136                              <1> 
   137                              <1>     ; カラーバーを表示
   138 00000AF0 B900000000          <1>     mov ecx, 0
   139                              <1> .10L:
   140 00000AF5 83F910              <1>     cmp ecx, 16
   141 00000AF8 732E                <1>     jae .10E
   142                              <1> 
   143                              <1>     ; 一回で8文字
   144 00000AFA 89C8                <1>     mov eax, ecx
   145 00000AFC 83E001              <1>     and eax, 0x01
   146 00000AFF C1E003              <1>     shl eax, 3
   147 00000B02 01F0                <1>     add eax, esi    ; col
   148                              <1> 
   149                              <1>     ; 2回に1回改行
   150 00000B04 89CB                <1>     mov ebx, ecx
   151 00000B06 D1EB                <1>     shr ebx, 1
   152 00000B08 01FB                <1>     add ebx, edi    ; row
   153                              <1> 
   154                              <1>     ; 背景色を2色見たら下位次の行
   155 00000B0A 89CA                <1>     mov edx, ecx
   156 00000B0C D1E2                <1>     shl edx, 1
   157 00000B0E 8B92[3B0B0000]      <1>     mov edx, [.t0 + edx]    ; color
   158                              <1> 
   159 00000B14 68[320B0000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   159 00000B1C E882FFFFFF6683C410  <1>
   160                              <1> 
   161 00000B25 41                  <1>     inc ecx
   162 00000B26 EBCD                <1>     jmp .10L
   163                              <1> .10E:
   164                              <1> 
   165 00000B28 5F                  <1>     pop edi
   166 00000B29 5E                  <1>     pop esi
   167 00000B2A 5A                  <1>     pop edx
   168 00000B2B 59                  <1>     pop ecx
   169 00000B2C 5B                  <1>     pop ebx
   170 00000B2D 58                  <1>     pop eax
   171                              <1> 
   172 00000B2E 89EC                <1>     mov esp, ebp
   173 00000B30 5D                  <1>     pop ebp
   174                              <1> 
   175 00000B31 C3                  <1>     ret
   176                              <1> 
   177                              <1> 
   178 00000B32 202020202020202000  <1> .s0: db '        ', 0
   179                              <1> 
   180                              <1> .t0:
   181 00000B3B 00000008            <1>     dw 0x0000, 0x0800
   182 00000B3F 00010009            <1>     dw 0x0100, 0x0900
   183 00000B43 0002000A            <1>     dw 0x0200, 0x0A00
   184 00000B47 0003000B            <1>     dw 0x0300, 0x0B00
   185 00000B4B 0004000C            <1>     dw 0x0400, 0x0C00
   186 00000B4F 0005000D            <1>     dw 0x0500, 0x0D00
   187 00000B53 0006000E            <1>     dw 0x0600, 0x0E00
   188 00000B57 0007000F            <1>     dw 0x0700, 0x0F00
   120                                  %include "../modules/protect/draw_pixel.s"
   121                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   122                              <1> ; x: X座標
   123                              <1> ; y: Y座標
   124                              <1> ; color: 描画色
   125 00000B5B 55                  <1>     push ebp
   126 00000B5C 89E5                <1>     mov ebp, esp
   127                              <1> 
   128 00000B5E 50                  <1>     push eax
   129 00000B5F 53                  <1>     push ebx
   130 00000B60 51                  <1>     push ecx
   131 00000B61 57                  <1>     push edi
   132                              <1> 
   133                              <1> 
   134                              <1> 
   135                              <1>     ; y座標*80->y*(640/8)
   136 00000B62 8B7D0C              <1>     mov edi, [ebp +12]
   137 00000B65 C1E704              <1>     shl edi, 4
   138 00000B68 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   139                              <1> 
   140                              <1>     ; x座標/8  8pixel単位の位置
   141 00000B6F 8B5D08              <1>     mov ebx, [ebp + 8]
   142 00000B72 89D9                <1>     mov ecx, ebx
   143 00000B74 C1EB03              <1>     shr ebx, 3
   144 00000B77 01DF                <1>     add edi, ebx
   145                              <1> 
   146                              <1>     ; x座標を8で割った余りからビット位置を計算
   147                              <1>     ; 8pixel中の位置
   148                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   149 00000B79 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   150 00000B7C BB80000000          <1>     mov ebx, 0x80
   151 00000B81 D3EB                <1>     shr ebx, cl
   152                              <1> 
   153 00000B83 8B4D10              <1>     mov ecx, [ebp +16]
   154                              <1> 
   155                              <1> %ifdef	USE_TEST_AND_SET
   156 00000B86 68[5C0A0000]E88B06- <1> 	cdecl	test_and_set, IN_USE			    ; TEST_AND_SET(IN_USE); // リソースの空き待ち
   156 00000B8E 00006683C404        <1>
   157                              <1> %endif
   158                              <1> 
   159                              <1>     ; プレーンごとに出力
   160 00000B94 6A03E82CFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   160 00000B9D C404                <1>
   161 00000B9F 6A08E83AFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   161 00000BA8 C404                <1>
   162 00000BAA 516A085753E89CFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   162 00000BB3 FF6683C410          <1>
   163                              <1> 
   164 00000BB8 6A02E808FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   164 00000BC1 C404                <1>
   165 00000BC3 6A04E816FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   165 00000BCC C404                <1>
   166 00000BCE 516A045753E878FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   166 00000BD7 FF6683C410          <1>
   167                              <1> 
   168 00000BDC 6A01E8E4FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   168 00000BE5 C404                <1>
   169 00000BE7 6A02E8F2FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   169 00000BF0 C404                <1>
   170 00000BF2 516A025753E854FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   170 00000BFB FF6683C410          <1>
   171                              <1> 
   172 00000C00 6A00E8C0FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   172 00000C09 C404                <1>
   173 00000C0B 6A01E8CEFCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   173 00000C14 C404                <1>
   174 00000C16 516A015753E830FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   174 00000C1F FF6683C410          <1>
   175                              <1> 
   176                              <1> %ifdef	USE_TEST_AND_SET
   177 00000C24 C705[5C0A0000]0000- <1> 	mov		[IN_USE], dword 0				    ; 変数のクリア
   177 00000C2C 0000                <1>
   178                              <1> %endif
   179                              <1> 
   180 00000C2E 5F                  <1>     pop edi
   181 00000C2F 59                  <1>     pop ecx
   182 00000C30 5B                  <1>     pop ebx
   183 00000C31 58                  <1>     pop eax
   184                              <1> 
   185 00000C32 89EC                <1>     mov esp, ebp
   186 00000C34 5D                  <1>     pop ebp
   187                              <1> 
   188 00000C35 C3                  <1>     ret
   121                                  %include "../modules/protect/draw_line.s"
   122                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   123                              <1> ; X0 始点のＸ座標
   124                              <1> ; Y0 始点のＹ座標
   125                              <1> ; X1 終点のX座標
   126                              <1> ; Y1 終点のY座標
   127                              <1> ; color 描画色
   128 00000C36 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   129 00000C37 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   130                              <1>                     ; ----------------
   131 00000C39 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   132 00000C3B 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   133 00000C3D 6A00                <1>     push dword 0    ;    -12| dx    = 0
   134 00000C3F 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   135 00000C41 6A00                <1>     push dword 0    ;    -20| y0    = 0
   136 00000C43 6A00                <1>     push dword 0    ;    -24| dy    = 0
   137 00000C45 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   138                              <1> 
   139 00000C47 50                  <1>     push eax        ;    -32| eax
   140 00000C48 53                  <1>     push ebx        ;    -36| ebx
   141 00000C49 51                  <1>     push ecx        ;    -40| ecx
   142 00000C4A 52                  <1>     push edx        ;    -44| edx
   143 00000C4B 56                  <1>     push esi        ;    -48| esi
   144 00000C4C 57                  <1>     push edi        ;    -52| edi
   145                              <1>     ; espはebp-52?
   146                              <1> 
   147                              <1>     ; x0とx1の距離を計算
   148 00000C4D 8B4508              <1>     mov eax, [ebp + 8]
   149 00000C50 8B5D10              <1>     mov ebx, [ebp +16]
   150 00000C53 29C3                <1>     sub ebx, eax
   151 00000C55 7D09                <1>     jge .10F
   152                              <1> 
   153 00000C57 F7DB                <1>     neg ebx
   154 00000C59 BEFFFFFFFF          <1>     mov esi, -1
   155 00000C5E EB05                <1>     jmp .10E
   156                              <1> .10F:
   157 00000C60 BE01000000          <1>     mov esi, 1
   158                              <1> .10E:
   159                              <1>     
   160                              <1>     ; y0とy1の距離を計算
   161 00000C65 8B4D0C              <1>     mov ecx, [ebp +12]
   162 00000C68 8B5514              <1>     mov edx, [ebp +20]
   163 00000C6B 29CA                <1>     sub edx, ecx
   164 00000C6D 7D09                <1>     jge .20F
   165                              <1> 
   166 00000C6F F7DA                <1>     neg edx
   167 00000C71 BFFFFFFFFF          <1>     mov edi, -1
   168 00000C76 EB05                <1>     jmp .20E
   169                              <1> .20F:
   170 00000C78 BF01000000          <1>     mov edi, 1
   171                              <1> .20E:
   172                              <1>     
   173                              <1>     ; x軸
   174 00000C7D 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   175 00000C80 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   176 00000C83 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   177                              <1> 
   178                              <1>     ; y軸
   179 00000C86 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   180 00000C89 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   181 00000C8C 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   182                              <1> 
   183                              <1> 
   184                              <1>     ; 基準軸を決める
   185 00000C8F 39D3                <1>     cmp ebx, edx
   186 00000C91 7F08                <1>     jg .22F
   187                              <1>     
   188 00000C93 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   189 00000C96 8D7DF8              <1>     lea edi, [ebp - 8]
   190                              <1> 
   191 00000C99 EB06                <1>     jmp .22E
   192                              <1> .22F:
   193                              <1>     
   194 00000C9B 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   195 00000C9E 8D7DEC              <1>     lea edi, [ebp -20]
   196                              <1> .22E:
   197                              <1> 
   198                              <1> ; 基準軸 esi
   199                              <1> ; 相対軸 edi
   200                              <1> 
   201                              <1>     ; 繰り返し回数（基準軸のドット数）
   202 00000CA1 8B4EFC              <1>     mov ecx, [esi - 4]
   203 00000CA4 83F900              <1>     cmp ecx, 0
   204 00000CA7 7505                <1>     jnz .30E
   205 00000CA9 B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   206                              <1> .30E:
   207                              <1> 
   208                              <1>     ; 線を描画
   209                              <1> .50L:
   210                              <1> 
   211                              <1> %ifdef USE_SYSTEM_CALL
   212 00000CAE 89C8                <1>     mov eax, ecx
   213 00000CB0 8B4DF8              <1>     mov ecx, [ebp - 8]
   214 00000CB3 8B55EC              <1>     mov edx, [ebp -20]
   215 00000CB6 8B5D18              <1>     mov ebx, [ebp +24]
   216 00000CB9 CD82                <1>     int 0x82            ; sys_call()
   217 00000CBB 89C1                <1>     mov ecx, eax
   218                              <1> %else
   219                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   222                              <1> %endif
   223                              <1> 
   224                              <1>     ; 座標更新
   225                              <1> 
   226                              <1>     ; 基準軸の更新
   227 00000CBD 8B46F8              <1>     mov eax, [esi - 8]
   228 00000CC0 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   229                              <1> 
   230                              <1>     ; 相対軸の更新
   231 00000CC2 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   232 00000CC5 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   233                              <1> 
   234 00000CC8 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   235                              <1> 
   236 00000CCB 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   237 00000CCD 7C07                <1>     jl .52E
   238 00000CCF 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   239                              <1> 
   240 00000CD1 8B5FF8              <1>     mov ebx, [edi - 8]
   241 00000CD4 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   242                              <1> .52E:
   243                              <1>     
   244 00000CD6 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   245                              <1> 
   246 00000CD9 E2D3                <1>     loop .50L
   247                              <1> .50E:
   248                              <1> 
   249                              <1> 
   250 00000CDB 5F                  <1>     pop edi
   251 00000CDC 5E                  <1>     pop esi
   252 00000CDD 5A                  <1>     pop edx
   253 00000CDE 59                  <1>     pop ecx
   254 00000CDF 5B                  <1>     pop ebx
   255 00000CE0 58                  <1>     pop eax
   256                              <1> 
   257 00000CE1 89EC                <1>     mov esp, ebp
   258 00000CE3 5D                  <1>     pop ebp
   259                              <1> 
   260 00000CE4 C3                  <1>     ret
   122                                  %include "../modules/protect/draw_rect.s"
   123                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   124 00000CE5 55                  <1>     push ebp
   125 00000CE6 89E5                <1>     mov ebp, esp
   126                              <1>     
   127 00000CE8 50                  <1>     push eax
   128 00000CE9 53                  <1>     push ebx
   129 00000CEA 51                  <1>     push ecx
   130 00000CEB 52                  <1>     push edx
   131 00000CEC 56                  <1>     push esi
   132                              <1> 
   133 00000CED 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   134 00000CF0 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   135 00000CF3 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   136 00000CF6 8B5514              <1>     mov edx, [ebp +20]  ; y1
   137 00000CF9 8B7518              <1>     mov esi, [ebp +24]  ; color
   138                              <1> 
   139                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   140 00000CFC 39C8                <1>     cmp eax, ecx
   141 00000CFE 7C01                <1>     jl .10E
   142 00000D00 91                  <1>     xchg eax, ecx
   143                              <1> .10E:
   144 00000D01 39D3                <1>     cmp ebx, edx
   145 00000D03 7C02                <1>     jl .20E
   146 00000D05 87DA                <1>     xchg ebx, edx
   147                              <1> .20E:
   148                              <1> 
   149                              <1>     ; 矩形を描画
   150 00000D07 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   150 00000D10 FF6683C414          <1>
   151 00000D15 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   151 00000D1E FF6683C414          <1>
   152                              <1> 
   153 00000D23 4A                  <1>     dec edx
   154 00000D24 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   154 00000D2D FF6683C414          <1>
   155 00000D32 42                  <1>     inc edx
   156                              <1> 
   157 00000D33 49                  <1>     dec ecx
   158 00000D34 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   158 00000D3D FF6683C414          <1>
   159                              <1> 
   160 00000D42 5E                  <1>     pop esi
   161 00000D43 5A                  <1>     pop edx
   162 00000D44 59                  <1>     pop ecx
   163 00000D45 5B                  <1>     pop ebx
   164 00000D46 58                  <1>     pop eax
   165                              <1>     
   166 00000D47 89EC                <1>     mov esp, ebp
   167 00000D49 5D                  <1>     pop ebp
   168                              <1> 
   169 00000D4A C3                  <1>     ret
   123                                  %include "../modules/protect/itoa.s"
   124                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   125                              <1> ; num   変換する値
   126                              <1> ; buff  保存先バッファアドレス
   127                              <1> ; size  保存先バッファサイズ
   128                              <1> ; radix 基数（2, 8, 10, 16)
   129                              <1> ; flags 
   130                              <1> ;   B2: 空白を'0'で埋める
   131                              <1> ;   B1: '+/-'記号を付加する
   132                              <1> ;   B0: 値を符号付き変数として扱う
   133                              <1> 
   134 00000D4B 55                  <1>     push ebp
   135 00000D4C 89E5                <1>     mov ebp, esp
   136                              <1> 
   137 00000D4E 50                  <1>     push eax
   138 00000D4F 53                  <1>     push ebx
   139 00000D50 51                  <1>     push ecx
   140 00000D51 52                  <1>     push edx
   141 00000D52 56                  <1>     push esi
   142 00000D53 57                  <1>     push edi
   143                              <1> 
   144                              <1> 
   145                              <1>     ; 引数取得
   146 00000D54 8B4508              <1>     mov eax, [ebp + 8]    ; num
   147 00000D57 8B750C              <1>     mov esi, [ebp +12]    ; size
   148 00000D5A 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   149                              <1> 
   150 00000D5D 89F7                <1>     mov edi, esi
   151 00000D5F 01CF                <1>     add edi, ecx
   152 00000D61 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   153                              <1> 
   154 00000D62 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   155                              <1> 
   156                              <1>     ; 符号付き判定
   157 00000D65 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   158                              <1> .10Q:
   159 00000D6B 7408                <1>     je .10E         ; E=Exit
   160 00000D6D 83F800              <1>     cmp eax, 0
   161                              <1> .12Q:
   162 00000D70 7D03                <1>     jge .12E
   163 00000D72 83CB02              <1>     or ebx, 0b0010
   164                              <1> .12E:
   165                              <1> .10E:
   166                              <1> 
   167                              <1>     ; 符号出力判定
   168 00000D75 F7C302000000        <1>     test ebx, 0b0010
   169                              <1> .20Q:
   170 00000D7B 7410                <1>     je .20E
   171 00000D7D 83F800              <1>     cmp eax, 0
   172                              <1> .22Q:
   173 00000D80 7D07                <1>     jge .22F
   174 00000D82 F7D8                <1>     neg eax
   175 00000D84 C6062D              <1>     mov [esi], byte '-'
   176 00000D87 EB03                <1>     jmp .22E
   177                              <1> .22F:
   178                              <1>     
   179 00000D89 C6062B              <1>     mov [esi], byte '+'
   180                              <1> .22E:
   181 00000D8C 49                  <1>     dec ecx
   182                              <1> .20E:
   183                              <1> 
   184                              <1>     ; ASCII変換
   185 00000D8D 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   186                              <1> .30L:
   187 00000D90 BA00000000          <1>     mov edx, 0
   188 00000D95 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   189                              <1> 
   190 00000D97 89D6                <1>     mov esi, edx
   191 00000D99 8A96[C30D0000]      <1>     mov dl, byte [.ascii + esi]
   192                              <1> 
   193 00000D9F 8817                <1>     mov [edi], dl
   194 00000DA1 4F                  <1>     dec edi
   195                              <1> 
   196 00000DA2 83F800              <1>     cmp eax, 0
   197 00000DA5 E0E9                <1>     loopnz .30L
   198                              <1> .30E:
   199                              <1> 
   200                              <1>     ; 空欄を埋める
   201 00000DA7 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   202                              <1> .40Q:
   203 00000DAA 740D                <1>     je .40E
   204 00000DAC B020                <1>     mov al, ' '
   205 00000DAE 837D1804            <1>     cmp [ebp +24], dword 0b0100
   206                              <1> .42Q:
   207 00000DB2 7502                <1>     jne .42E
   208 00000DB4 B030                <1>     mov al, '0'
   209                              <1> .42E:
   210 00000DB6 FD                  <1>     std         ; dimention flag = 1(-方向)
   211 00000DB7 F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   212                              <1> .40E:
   213                              <1> 
   214 00000DB9 5F                  <1>     pop edi
   215 00000DBA 5E                  <1>     pop esi
   216 00000DBB 5A                  <1>     pop edx
   217 00000DBC 59                  <1>     pop ecx
   218 00000DBD 5B                  <1>     pop ebx
   219 00000DBE 58                  <1>     pop eax
   220                              <1> 
   221 00000DBF 89EC                <1>     mov esp, ebp
   222 00000DC1 5D                  <1>     pop ebp
   223                              <1> 
   224 00000DC2 C3                  <1>     ret
   225                              <1> 
   226 00000DC3 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   226 00000DCC 39414243444546      <1>
   124                                  %include "../modules/protect/rtc.s"
   125                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   126                              <1> ; dst: 保存先アドレス
   127                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   128 00000DD3 55                  <1>     push ebp
   129 00000DD4 89E5                <1>     mov ebp, esp
   130                              <1> 
   131 00000DD6 50                  <1>     push eax
   132 00000DD7 53                  <1>     push ebx
   133                              <1> 
   134 00000DD8 B00A                <1>     mov al, 0x0A    ; レジスタA
   135 00000DDA E670                <1>     out 0x70, al
   136 00000DDC E471                <1>     in al, 0x71
   137 00000DDE A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   138 00000DE0 7407                <1>     je .10F
   139 00000DE2 B801000000          <1>     mov eax, 1      ; 更新中は失敗
   140 00000DE7 EB27                <1>     jmp .10E
   141                              <1> .10F:
   142                              <1> 
   143 00000DE9 B004                <1>     mov al, 0x04    ; 時
   144 00000DEB E670                <1>     out 0x70, al    ; レジスタ設定
   145 00000DED E471                <1>     in al, 0x71     ; 時刻読み込み
   146                              <1> 
   147 00000DEF C1E008              <1>     shl eax, 8      ; alをahに退避
   148                              <1> 
   149 00000DF2 B002                <1>     mov al, 0x02    ; 分
   150 00000DF4 E670                <1>     out 0x70, al    ; レジスタ設定
   151 00000DF6 E471                <1>     in al, 0x71     ; 時刻読み込み
   152                              <1> 
   153 00000DF8 C1E008              <1>     shl eax, 8      ; alをahに退避
   154                              <1> 
   155 00000DFB B000                <1>     mov al, 0x00    ; 秒
   156 00000DFD E670                <1>     out 0x70, al    ; レジスタ設定
   157 00000DFF E471                <1>     in al, 0x71     ; 時刻読み込み
   158                              <1> 
   159 00000E01 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   160                              <1> 
   161 00000E06 8B5D08              <1>     mov ebx, [ebp + 8]
   162 00000E09 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   163                              <1> 
   164 00000E0B B800000000          <1>     mov eax, 0
   165                              <1> .10E:
   166                              <1> 
   167 00000E10 5B                  <1>     pop ebx
   168 00000E11 58                  <1>     pop eax
   169                              <1> 
   170 00000E12 89EC                <1>     mov esp, ebp
   171 00000E14 5D                  <1>     pop ebp
   172                              <1> 
   173 00000E15 C3                  <1>     ret
   125                                  %include "../modules/protect/draw_time.s"
   126                              <1> draw_time:  ; void draw_time(col, row, color, time);
   127                              <1> ; time 時刻データ
   128 00000E16 55                  <1>     push ebp
   129 00000E17 89E5                <1>     mov ebp, esp
   130                              <1> 
   131 00000E19 50                  <1>     push eax
   132 00000E1A 53                  <1>     push ebx
   133                              <1>     
   134 00000E1B 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   135                              <1> 
   136 00000E1E 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   137 00000E21 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   137 00000E28 [880E0000]53E819FF- <1>
   137 00000E30 FFFF6683C414        <1>
   138                              <1> 
   139 00000E36 88E3                <1>     mov bl, ah          ; 分だけ
   140 00000E38 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   140 00000E3F [850E0000]53E802FF- <1>
   140 00000E47 FFFF6683C414        <1>
   141                              <1>     
   142 00000E4D C1E810              <1>     shr eax, 16         ; 時だけ
   143 00000E50 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   143 00000E57 [820E0000]50E8EAFE- <1>
   143 00000E5F FFFF6683C414        <1>
   144                              <1> 
   145 00000E65 68[820E0000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   145 00000E6D FF750CFF7508E82BFC- <1>
   145 00000E76 FFFF6683C410        <1>
   146                              <1> 
   147 00000E7C 5B                  <1>     pop ebx
   148 00000E7D 58                  <1>     pop eax
   149                              <1> 
   150 00000E7E 89EC                <1>     mov esp, ebp
   151 00000E80 5D                  <1>     pop ebp
   152                              <1> 
   153 00000E81 C3                  <1>     ret
   154                              <1> 
   155 00000E82 5A5A3A              <1> .hour: db "ZZ:"
   156 00000E85 5A5A3A              <1> .min:  db "ZZ:"
   157 00000E88 5A5A00              <1> .sec:  db "ZZ", 0
   126                                  %include "../modules/protect/interrupt.s"
   127                              <1> int_stop:
   128 00000E8B FB                  <1>     sti ; 割り込みを許可
   129                              <1> 
   130                              <1>     ; EAXで示される文字列を表示
   131 00000E8C 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   131 00000E95 19E808FCFFFF6683C4- <1>
   131 00000E9E 10                  <1>
   132                              <1> 
   133                              <1>     ; スタックのデータを文字列に変換
   134 00000E9F 8B0424              <1>     mov eax, [esp + 0]
   135 00000EA2 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   135 00000EA9 [670F0000]50E898FE- <1>
   135 00000EB1 FFFF6683C414        <1>
   136                              <1> 
   137 00000EB7 8B442404            <1>     mov eax, [esp + 4]
   138 00000EBB 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   138 00000EC2 [780F0000]50E87FFE- <1>
   138 00000ECA FFFF6683C414        <1>
   139                              <1> 
   140 00000ED0 8B442408            <1>     mov eax, [esp + 8]
   141 00000ED4 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   141 00000EDB [890F0000]50E866FE- <1>
   141 00000EE3 FFFF6683C414        <1>
   142                              <1> 
   143 00000EE9 8B44240C            <1>     mov eax, [esp +12]
   144 00000EED 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   144 00000EF4 [9A0F0000]50E84DFE- <1>
   144 00000EFC FFFF6683C414        <1>
   145                              <1> 
   146                              <1>     ; 文字列の表示
   147 00000F02 68[600F0000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   147 00000F0A 00006A106A19E88EFB- <1>
   147 00000F13 FFFF6683C410        <1>
   148 00000F19 68[710F0000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   148 00000F21 00006A116A19E877FB- <1>
   148 00000F2A FFFF6683C410        <1>
   149 00000F30 68[820F0000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   149 00000F38 00006A126A19E860FB- <1>
   149 00000F41 FFFF6683C410        <1>
   150 00000F47 68[930F0000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   150 00000F4F 00006A136A19E849FB- <1>
   150 00000F58 FFFF6683C410        <1>
   151                              <1> 
   152                              <1>     ; 無限ループ
   153 00000F5E EBFE                <1>     jmp $
   154                              <1> 
   155 00000F60 4553502B20303A      <1> .s1 db "ESP+ 0:"
   156 00000F67 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   156 00000F70 00                  <1>
   157 00000F71 2020202B20343A      <1> .s2 db "   + 4:"
   158 00000F78 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   158 00000F81 00                  <1>
   159 00000F82 2020202B20383A      <1> .s3 db "   + 8:"
   160 00000F89 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   160 00000F92 00                  <1>
   161 00000F93 2020202B31323A      <1> .s4 db "   +12:"
   162 00000F9A 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   162 00000FA3 00                  <1>
   163                              <1> 
   164                              <1> int_default:
   165 00000FA4 9C                  <1>     pushf       ; EFLAGS(IF==0)
   166 00000FA5 0E                  <1>     push cs
   167 00000FA6 68[8B0E0000]        <1>     push int_stop
   168                              <1> 
   169 00000FAB B8[B10F0000]        <1>     mov eax, .s0
   170 00000FB0 CF                  <1>     iret
   171                              <1> 
   172 00000FB1 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   172 00000FBA 50202020203E2000    <1>
   173                              <1> 
   174                              <1> 
   175                              <1> ; 割り込みベクタの初期化
   176 00000FC2 90<rep 2h>          <1> ALIGN 4
   177 00000FC4 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   178 00000FC6 00001000            <1>       dd VECT_BASE      ; idt location
   179                              <1> 
   180                              <1> ; 割り込みテーブルを初期化
   181                              <1> init_int:
   182 00000FCA 50                  <1>     push eax
   183 00000FCB 53                  <1>     push ebx
   184 00000FCC 51                  <1>     push ecx
   185 00000FCD 57                  <1>     push edi
   186                              <1> 
   187                              <1>     ; 全ての割り込みにデフォルト処理を設定
   188 00000FCE 8D05[A40F0000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   189 00000FD4 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   190 00000FD9 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   191                              <1> 
   192 00000FDB B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   193 00000FE0 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   194                              <1> 
   195                              <1>     ; メモリに書き込み
   196                              <1> .10L:
   197 00000FE5 891F                <1>     mov [edi + 0], ebx
   198 00000FE7 894704              <1>     mov [edi + 4], eax
   199 00000FEA 83C708              <1>     add edi, 8
   200 00000FED E2F6                <1>     loop .10L
   201                              <1> 
   202                              <1>     ; 割り込みディスクリプタの設定
   203 00000FEF 0F011D[C40F0000]    <1>     lidt [IDTR]
   204                              <1> 
   205 00000FF6 5F                  <1>     pop edi
   206 00000FF7 59                  <1>     pop ecx
   207 00000FF8 5B                  <1>     pop ebx
   208 00000FF9 58                  <1>     pop eax
   209                              <1> 
   210 00000FFA C3                  <1>     ret
   211                              <1> 
   212                              <1> 
   213                              <1> int_zero_div:
   214 00000FFB 9C                  <1>     pushf
   215 00000FFC 0E                  <1>     push cs
   216 00000FFD 68[8B0E0000]        <1>     push int_stop
   217                              <1> 
   218 00001002 B8[08100000]        <1>     mov eax, .s0
   219 00001007 CF                  <1>     iret
   220                              <1> 
   221 00001008 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   221 00001011 44495620203E2000    <1>
   127                                  %include "../modules/protect/pic.s"
   128                              <1> init_pic:
   129 00001019 50                  <1>     push eax
   130                              <1> 
   131                              <1>     ; outp ポート, データ
   132                              <1> 
   133                              <1>     ; マスタの設定
   134                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 0000101A B011                <2>  mov al, %2
    50 0000101C E620                <2>  out %1, al
   135                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 0000101E B020                <2>  mov al, %2
    50 00001020 E621                <2>  out %1, al
   136                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 00001022 B004                <2>  mov al, %2
    50 00001024 E621                <2>  out %1, al
   137                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 00001026 B001                <2>  mov al, %2
    50 00001028 E621                <2>  out %1, al
   138                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 0000102A B0FF                <2>  mov al, %2
    50 0000102C E621                <2>  out %1, al
   139                              <1> 
   140                              <1>     ; スレーブの設定
   141                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 0000102E B011                <2>  mov al, %2
    50 00001030 E6A0                <2>  out %1, al
   142                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 00001032 B028                <2>  mov al, %2
    50 00001034 E6A1                <2>  out %1, al
   143                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 00001036 B002                <2>  mov al, %2
    50 00001038 E6A1                <2>  out %1, al
   144                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 0000103A B001                <2>  mov al, %2
    50 0000103C E6A1                <2>  out %1, al
   145                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 0000103E B0FF                <2>  mov al, %2
    50 00001040 E6A1                <2>  out %1, al
   146                              <1> 
   147 00001042 58                  <1>     pop eax
   148                              <1> 
   149 00001043 C3                  <1>     ret
   128                                  %include "../modules/protect/int_rtc.s"
   129                              <1> int_rtc:
   130 00001044 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   131 00001045 1E                  <1>     push ds
   132 00001046 06                  <1>     push es
   133                              <1> 
   134                              <1>     ; データ用セグメントセレクタの設定
   135 00001047 66B81000            <1>     mov ax, 0x0010
   136 0000104B 8ED8                <1>     mov ds, ax
   137 0000104D 8EC0                <1>     mov es, ax
   138                              <1> 
   139                              <1>     ; RTCから時刻を取得
   140 0000104F 68[38020000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   140 00001057 FFFF6683C404        <1>
   141                              <1> 
   142                              <1>     ; RTCの割り込み要因を取得
   143                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 0000105D B00C                <2>  mov al, %2
    50 0000105F E670                <2>  out %1, al
   144 00001061 E471                <1>     in al, 0x71     ; RTCからデータを取得
   145                              <1> 
   146                              <1>     ; 割り込みフラグをクリア(EOI)
   147 00001063 B020                <1>     mov al, 0x20
   148 00001065 E6A0                <1>     out 0xA0, al    ; スレーブ
   149 00001067 E620                <1>     out 0x20, al    ; マスタ
   150                              <1> 
   151 00001069 07                  <1>     pop es
   152 0000106A 1F                  <1>     pop ds
   153 0000106B 61                  <1>     popa
   154                              <1> 
   155 0000106C CF                  <1>     iret        ; 割り込み処理の終了
   156                              <1> 
   157                              <1> rtc_int_en:
   158 0000106D 55                  <1>     push ebp
   159 0000106E 89E5                <1>     mov ebp, esp
   160 00001070 50                  <1>     push eax
   161                              <1> 
   162                              <1>     ; 割り込み許可設定
   163                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 00001071 B00B                <2>  mov al, %2
    50 00001073 E670                <2>  out %1, al
   164                              <1> 
   165 00001075 E471                <1>     in al, 0x71     ; RTCからデータを取得
   166 00001077 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   167                              <1> 
   168 0000107A E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   169                              <1> 
   170 0000107C 58                  <1>     pop eax
   171                              <1> 
   172 0000107D 89EC                <1>     mov esp, ebp
   173 0000107F 5D                  <1>     pop ebp
   174                              <1> 
   175 00001080 C3                  <1>     ret
   129                                  %include "../modules/protect/int_keyboard.s"
   130                              <1> int_keyboard:
   131 00001081 60                  <1>     pusha
   132 00001082 1E                  <1>     push ds
   133 00001083 06                  <1>     push es
   134                              <1> 
   135                              <1>     ; データ用セグメントの設定
   136 00001084 66B81000            <1>     mov ax, 0x0010
   137 00001088 8ED8                <1>     mov ds, ax
   138 0000108A 8EC0                <1>     mov es, ax
   139                              <1> 
   140                              <1>     ; KBCのバッファ読み取り
   141 0000108C E460                <1>     in al, 0x60
   142                              <1> 
   143                              <1>     ; キーコードの保存
   144 0000108E 5068[A8100000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   144 00001096 0000006683C408      <1>
   145                              <1> 
   146                              <1>     ; 割り込み終了コマンド送信
   147                              <1>     outp 0x20, 0x20
    49 0000109D B020                <2>  mov al, %2
    50 0000109F E620                <2>  out %1, al
   148                              <1> 
   149 000010A1 07                  <1>     pop es
   150 000010A2 1F                  <1>     pop ds
   151 000010A3 61                  <1>     popa
   152                              <1> 
   153 000010A4 CF                  <1>     iret
   154                              <1> 
   155 000010A5 00<rep 3h>          <1> ALIGN 4, db 0
   156 000010A8 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   130                                  %include "../modules/protect/ring_buff.s"
   131                              <1> ring_rd:        ; int ring_rd(buff, data);
   132                              <1> ; buff リングバッファ
   133                              <1> ; data 読み込んだデータの保存先アドレス
   134                              <1> ; 戻り値: データあり(0以外), データなし(0)
   135                              <1> 
   136 000010C0 55                  <1>     push ebp
   137 000010C1 89E5                <1>     mov ebp, esp
   138                              <1> 
   139 000010C3 50                  <1>     push eax
   140 000010C4 53                  <1>     push ebx
   141 000010C5 56                  <1>     push esi
   142 000010C6 57                  <1>     push edi
   143                              <1> 
   144                              <1>     ; 引数取得
   145 000010C7 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   146 000010CA 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   147                              <1> 
   148                              <1>     ; 読み込み位置を確認
   149 000010CD B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   150 000010D2 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   151 000010D4 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   152 000010D7 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   153                              <1> 
   154 000010D9 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   155                              <1> 
   156 000010DD 8807                <1>     mov [edi], al
   157                              <1> 
   158 000010DF 43                  <1>     inc ebx ; 次の読み込み位置
   159 000010E0 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   160 000010E3 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   161                              <1> 
   162 000010E5 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   163                              <1> .10E:
   164                              <1> 
   165 000010EA 5F                  <1>     pop edi
   166 000010EB 5E                  <1>     pop esi
   167 000010EC 5B                  <1>     pop ebx
   168 000010ED 58                  <1>     pop eax
   169                              <1> 
   170 000010EE 89EC                <1>     mov esp, ebp
   171 000010F0 5D                  <1>     pop ebp
   172                              <1> 
   173 000010F1 C3                  <1>     ret
   174                              <1> 
   175                              <1> 
   176                              <1> ring_wr:    ; int ring_wr(buff, data);
   177                              <1> ; buff シリンダバッファ
   178                              <1> ; data 書き込むデータ
   179                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   180 000010F2 55                  <1>     push ebp
   181 000010F3 89E5                <1>     mov ebp, esp
   182                              <1> 
   183 000010F5 50                  <1>     push eax
   184 000010F6 53                  <1>     push ebx
   185 000010F7 51                  <1>     push ecx
   186 000010F8 56                  <1>     push esi
   187                              <1> 
   188 000010F9 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   189                              <1> 
   190                              <1>     ; 書き込み位置を確認
   191 000010FC B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   192 00001101 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   193 00001104 89D9                <1>     mov ecx, ebx
   194 00001106 41                  <1>     inc ecx                         ; 次の書き込み位置
   195 00001107 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   196                              <1> 
   197                              <1>     ; バッファフルなら処理しない
   198 0000110A 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   199 0000110C 740F                <1>     je .10E
   200                              <1> 
   201 0000110E 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   202                              <1> 
   203 00001111 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   204 00001115 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   205 00001118 B801000000          <1>     mov eax, 1  ; 戻り値 成功
   206                              <1> .10E:
   207                              <1> 
   208 0000111D 5E                  <1>     pop esi
   209 0000111E 59                  <1>     pop ecx
   210 0000111F 5B                  <1>     pop ebx
   211 00001120 58                  <1>     pop eax
   212                              <1> 
   213 00001121 89EC                <1>     mov esp, ebp
   214 00001123 5D                  <1>     pop ebp
   215                              <1> 
   216 00001124 C3                  <1>     ret
   217                              <1> 
   218                              <1> draw_key:
   219 00001125 55                  <1>     push ebp
   220 00001126 89E5                <1>     mov ebp, esp
   221                              <1> 
   222 00001128 50                  <1>     push eax
   223 00001129 53                  <1>     push ebx
   224 0000112A 51                  <1>     push ecx
   225 0000112B 52                  <1>     push edx
   226 0000112C 56                  <1>     push esi
   227 0000112D 57                  <1>     push edi
   228                              <1> 
   229                              <1> 
   230 0000112E 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   231 00001131 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   232 00001134 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   233                              <1> 
   234                              <1>     ; リングバッファの情報を取得
   235 00001137 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   236 00001139 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   237 0000113C B910000000          <1>     mov ecx, RING_ITEM_SIZE
   238                              <1> 
   239                              <1> .10L:
   240 00001141 4B                  <1>     dec ebx ; 読み込み位置
   241 00001142 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   242 00001145 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   243                              <1> 
   244 00001148 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   244 00001151 68[84110000]50E8EF- <1>
   244 00001159 FBFFFF6683C414      <1>
   245 00001160 68[84110000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   245 00001168 52E835F9FFFF6683C4- <1>
   245 00001171 10                  <1>
   246                              <1> 
   247 00001172 83C203              <1>     add edx, 3  ; 表示位置更新
   248 00001175 E2CA                <1>     loop .10L
   249                              <1> .10E:
   250                              <1> 
   251 00001177 5F                  <1>     pop edi
   252 00001178 5E                  <1>     pop esi
   253 00001179 5A                  <1>     pop edx
   254 0000117A 59                  <1>     pop ecx
   255 0000117B 5B                  <1>     pop ebx
   256 0000117C 58                  <1>     pop eax
   257                              <1> 
   258 0000117D 89EC                <1>     mov esp, ebp
   259 0000117F 5D                  <1>     pop ebp
   260                              <1> 
   261 00001180 C3                  <1>     ret
   262                              <1> 
   263 00001181 00<rep 3h>          <1> ALIGN 4, db 0
   264 00001184 2D2D2000            <1> .tmp db "-- ", 0
   131                                  %include "../modules/protect/timer.s"
   132                              <1> int_en_timer0:
   133 00001188 50                  <1>     push eax
   134                              <1> 
   135                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 00001189 B034                <2>  mov al, %2
    50 0000118B E643                <2>  out %1, al
   136                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 0000118D B09C                <2>  mov al, %2
    50 0000118F E640                <2>  out %1, al
   137                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 00001191 B02E                <2>  mov al, %2
    50 00001193 E640                <2>  out %1, al
   138                              <1> 
   139 00001195 58                  <1>     pop eax
   140                              <1> 
   141 00001196 C3                  <1>     ret
   132                                  %include "../modules/protect/draw_rotation_bar.s"
   133                              <1> draw_rotation_bar:
   134 00001197 50                  <1>     push eax
   135                              <1> 
   136 00001198 A1[54130000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   137 0000119D C1E804              <1>     shr eax, 4              ; eax /= 4
   138 000011A0 3B05[C8110000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   139 000011A6 741E                <1>     je .10E
   140                              <1> 
   141 000011A8 A3[C8110000]        <1>     mov [.index], eax       ; 前回値設定
   142 000011AD 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   143                              <1> 
   144 000011B0 8A80[CC110000]      <1>     mov al, [.table + eax]  ; 文字表示
   145 000011B6 506A0F6A1D6A00E8BC- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   145 000011BF F7FFFF6683C410      <1>
   146                              <1> 
   147                              <1> .10E:
   148                              <1> 
   149 000011C6 58                  <1>     pop eax
   150                              <1> 
   151 000011C7 C3                  <1>     ret
   152                              <1> 
   153                              <1> ALIGN 4, db 0
   154 000011C8 00000000            <1> .index: dd 0        ; 前回値
   155 000011CC 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   133                                  %include "../modules/protect/call_gate.s"
   134                              <1> call_gate:
   135 000011D0 55                  <1>     push ebp
   136 000011D1 89E5                <1>     mov ebp, esp
   137                              <1> 
   138 000011D3 60                  <1>     pusha
   139 000011D4 1E                  <1>     push ds
   140 000011D5 06                  <1>     push es
   141                              <1> 
   142                              <1>     ; データ用セグメントの設定
   143 000011D6 66B81000            <1>     mov ax, 0x0010
   144 000011DA 8ED8                <1>     mov ds, ax
   145 000011DC 8EC0                <1>     mov es, ax
   146                              <1> 
   147                              <1>     ; 文字を表示
   148 000011DE 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   149 000011E1 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   150 000011E4 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   151 000011E7 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   152 000011EA 52515350E8B0F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   152 000011F3 6683C410            <1>
   153                              <1> 
   154 000011F7 07                  <1>     pop es
   155 000011F8 1F                  <1>     pop ds
   156 000011F9 61                  <1>     popa
   157                              <1> 
   158 000011FA 89EC                <1>     mov esp, ebp
   159 000011FC 5D                  <1>     pop ebp
   160                              <1> 
   161                              <1>     ; コードセグメントセレクタの復帰と終了
   162 000011FD CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   134                                  %include "../modules/protect/trap_gate.s"
   135                              <1> trap_gate_81:
   136                              <1>     ; 1文字出力
   137 00001200 50535251E875F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   137 00001209 6683C410            <1>
   138                              <1> 
   139 0000120D CF                  <1>     iret
   140                              <1> 
   141                              <1> trap_gate_82:
   142                              <1>     ; 点の描画
   143 0000120E 535251E845F9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   143 00001217 83C40C              <1>
   144                              <1> 
   145 0000121A CF                  <1>     iret
   135                                  %include "../modules/protect/test_and_set.s"
   136                              <1> test_and_set:
   137 0000121B 55                  <1>     push ebp
   138 0000121C 89E5                <1>     mov ebp, esp
   139                              <1> 
   140 0000121E 50                  <1>     push eax
   141 0000121F 53                  <1>     push ebx
   142                              <1> 
   143                              <1>     ; テストアンドセット
   144 00001220 B800000000          <1>     mov eax, 0
   145 00001225 8B5D08              <1>     mov ebx, [ebp + 8]
   146                              <1> 
   147                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   148                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   149                              <1> .10L:
   150 00001228 F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   151 0000122C 7307                <1>     jnc .10E
   152                              <1> 
   153                              <1> .12L:
   154 0000122E 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   155 00001231 72FB                <1>     jc .12L
   156                              <1>     
   157 00001233 EBF3                <1>     jmp .10L
   158                              <1> .10E:
   159                              <1>     
   160 00001235 5B                  <1>     pop ebx
   161 00001236 58                  <1>     pop eax
   162                              <1> 
   163 00001237 89EC                <1>     mov esp, ebp
   164 00001239 5D                  <1>     pop ebp
   165                              <1> 
   166 0000123A C3                  <1>     ret
   136                                  %include "../modules/protect/int_nm.s"
   137                              <1> get_tss_base:
   138                              <1> ; EBX: TSSセレクタ
   139                              <1>     ; EAX = TSS base address
   140 0000123B 8B83[86020000]      <1>     mov eax, [GDT + ebx + 2]
   141 00001241 C1E008              <1>     shl eax, 8
   142 00001244 8A83[8B020000]      <1>     mov al, [GDT + ebx + 7]
   143 0000124A C1C808              <1>     ror eax, 8
   144                              <1> 
   145 0000124D C3                  <1>     ret
   146                              <1> 
   147                              <1> save_fpu_context:
   148 0000124E DD7068              <1>     fnsave [eax + 104]
   149 00001251 C780D4000000010000- <1>     mov [eax + 104 + 108], dword 1
   149 0000125A 00                  <1>
   150                              <1> 
   151 0000125B C3                  <1>     ret
   152                              <1> 
   153                              <1> load_fpu_context:
   154 0000125C 83B8D400000000      <1>     cmp [eax + 104 + 108], dword 0
   155 00001263 7504                <1>     jne .10F    ; if(saved != 0) goto .10F
   156 00001265 DBE3                <1>     fninit      ; FPU初期化
   157 00001267 EB03                <1>     jmp .10E
   158                              <1> .10F:
   159 00001269 DD6068              <1>     frstor [eax + 104]  ; FPUコンテキストを復帰
   160                              <1> .10E:
   161 0000126C C3                  <1>     ret
   162                              <1> 
   163                              <1> int_nm:
   164 0000126D 60                  <1>     pusha
   165 0000126E 1E                  <1>     push ds
   166 0000126F 06                  <1>     push es
   167                              <1> 
   168 00001270 66B81000            <1>     mov ax, DS_KERNEL
   169 00001274 8ED8                <1>     mov ds, ax
   170 00001276 8EC0                <1>     mov es, ax
   171                              <1> 
   172                              <1>     ; タスクスイッチフラグをクリア
   173 00001278 0F06                <1>     clts    ; CR0.TS = 0
   174                              <1> 
   175                              <1>     ; 前回・今回FPUを使用するタスク
   176 0000127A 8B3D[C4120000]      <1>     mov edi, [.last_tss]; edi = 前回FPUを使用したタスクのTSS
   177 00001280 0F00CE              <1>     str esi             ; esi = 今回FPUを使用するタスクのTSS（trレジスタ）
   178 00001283 83E6F8              <1>     and esi, ~0x0007    ; 特権レベルはいらないのでマスク
   179                              <1> 
   180                              <1>     ; 初回利用チェック
   181 00001286 83FF00              <1>     cmp edi, 0          ; if(前回のタスク==0) goto .10F
   182 00001289 7420                <1>     je .10F
   183                              <1> 
   184 0000128B 39FE                <1>     cmp esi, edi        ; if(前回のタスク==今回のタスク) goto .12E
   185 0000128D 741A                <1>     je .12E
   186                              <1> 
   187 0000128F FA                  <1>     cli
   188                              <1> 
   189                              <1>     ; 前回のFPUコンテキストを保存
   190 00001290 89FB                <1>     mov ebx, edi
   191 00001292 E8A4FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   192 00001297 E8B2FFFFFF          <1>     call save_fpu_context   ; void save_fpu_context(eax);
   193                              <1> 
   194                              <1>     ; 今回のFPUコンテキストを復帰
   195 0000129C 89F3                <1>     mov ebx, esi
   196 0000129E E898FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   197 000012A3 E8B4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   198                              <1> 
   199 000012A8 FB                  <1>     sti
   200                              <1> .12E:
   201 000012A9 EB0E                <1>     jmp .10E
   202                              <1> .10F:
   203 000012AB FA                  <1>     cli
   204                              <1> 
   205                              <1>     ; 今回のFPUコンテキストを復帰
   206 000012AC 89F3                <1>     mov ebx, esi
   207 000012AE E888FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   208 000012B3 E8A4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   209                              <1> 
   210 000012B8 FB                  <1>     sti
   211                              <1> .10E:
   212                              <1> 
   213 000012B9 8935[C4120000]      <1>     mov [.last_tss], esi
   214                              <1> 
   215 000012BF 07                  <1>     pop es
   216 000012C0 1F                  <1>     pop ds
   217 000012C1 61                  <1>     popa
   218                              <1> 
   219 000012C2 CF                  <1>     iret
   220                              <1> 
   221 000012C3 00                  <1> ALIGN 4, db 0
   222 000012C4 00000000            <1> .last_tss: dd 0
   137                                  %include "../modules/protect/wait_tick.s"
   138                              <1> wait_tick:
   139 000012C8 55                  <1>     push ebp
   140 000012C9 89E5                <1>     mov ebp, esp
   141                              <1> 
   142 000012CB 50                  <1>     push eax
   143 000012CC 51                  <1>     push ecx
   144                              <1> 
   145                              <1>     ; ウェイト
   146 000012CD 8B4D08              <1>     mov ecx, [ebp + 8]      ; ECX = ウェイト回数
   147 000012D0 A1[54130000]        <1>     mov eax, [TIMER_COUNT]  ; EAX = TIMER
   148                              <1> 
   149                              <1> .10L:
   150 000012D5 3905[54130000]      <1>     cmp [TIMER_COUNT], eax  ; for(i=0; i < ecx; i++) while(TIMER == eax);
   151 000012DB 74F8                <1>     je .10L
   152 000012DD 40                  <1>     inc eax
   153 000012DE E2F5                <1>     loop .10L
   154                              <1> 
   155 000012E0 59                  <1>     pop ecx
   156 000012E1 58                  <1>     pop eax
   157                              <1> 
   158 000012E2 89EC                <1>     mov esp, ebp
   159 000012E4 5D                  <1>     pop ebp
   160                              <1> 
   161 000012E5 C3                  <1>     ret
   138                                  %include "../modules/protect/memcpy.s"
   139                              <1> memcpy:     ; void memcpy(src, dest, size);
   140 000012E6 55                  <1>     push ebp
   141 000012E7 89E5                <1>     mov ebp, esp
   142                              <1> 
   143 000012E9 51                  <1>     push ecx
   144 000012EA 56                  <1>     push esi
   145 000012EB 57                  <1>     push edi
   146                              <1> 
   147 000012EC FC                  <1>     cld     ; clear direction flag
   148 000012ED 8B7508              <1>     mov esi, [ebp + 8]    ; src
   149 000012F0 8B7D0C              <1>     mov edi, [ebp + 12]    ; dest
   150 000012F3 8B4D10              <1>     mov ecx, [ebp + 16]    ; size
   151                              <1> 
   152 000012F6 F3A4                <1>     rep movsb
   153                              <1> 
   154 000012F8 5F                  <1>     pop edi
   155 000012F9 5E                  <1>     pop esi
   156 000012FA 59                  <1>     pop ecx
   157                              <1> 
   158 000012FB 89EC                <1>     mov esp, ebp
   159 000012FD 5D                  <1>     pop ebp
   160                              <1> 
   161 000012FE C3                  <1>     ret
   139                                  %include "modules/int_timer.s"
   140                              <1> int_timer:
   141 000012FF 60                  <1>     pushad
   142 00001300 1E                  <1>     push ds
   143 00001301 06                  <1>     push es
   144                              <1> 
   145                              <1>     ; データ用セグメントの設定
   146 00001302 66B81000            <1>     mov ax, 0x0010
   147 00001306 8ED8                <1>     mov ds, ax
   148 00001308 8EC0                <1>     mov es, ax
   149                              <1> 
   150                              <1>     ; TICK
   151 0000130A FF05[54130000]      <1>     inc dword [TIMER_COUNT]
   152                              <1> 
   153                              <1>     ; 割り込みフラグをクリア(EOI)
   154                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 00001310 B020                <2>  mov al, %2
    50 00001312 E620                <2>  out %1, al
   155                              <1> 
   156                              <1>     ; タスクの切り替え(task0 -> task1 -> task2 -> task0 -> ...)
   157 00001314 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   158 00001318 6683F820            <1>     cmp ax, SS_TASK_0   ; switch(ax)
   159 0000131C 7415                <1>     je .11L
   160 0000131E 6683F828            <1>     cmp ax, SS_TASK_1
   161 00001322 7418                <1>     je .12L
   162 00001324 6683F830            <1>     cmp ax, SS_TASK_2
   163 00001328 741B                <1>     je .13L
   164                              <1> 
   165 0000132A EA000000002000      <1>     jmp SS_TASK_0:0     ; default:
   166 00001331 EB1B                <1>     jmp .10E
   167                              <1> .11L:                   ; case SS_TASK_0:
   168 00001333 EA000000002800      <1>     jmp SS_TASK_1:0     ; タスク1に切り替え
   169 0000133A EB12                <1>     jmp .10E
   170                              <1> .12L:                   ; case SS_TASK_1:
   171 0000133C EA000000003000      <1>     jmp SS_TASK_2:0     ; タスク2に切り替え
   172 00001343 EB09                <1>     jmp .10E
   173                              <1> .13L:                   ; case SS_TASK_2:
   174 00001345 EA000000003800      <1>     jmp SS_TASK_3:0     ; タスク3に切り替え
   175 0000134C EB00                <1>     jmp .10E
   176                              <1> .10E:
   177                              <1> 
   178 0000134E 07                  <1>     pop es
   179 0000134F 1F                  <1>     pop ds
   180 00001350 61                  <1>     popad
   181                              <1> 
   182 00001351 CF                  <1>     iret
   183                              <1> 
   184 00001352 00<rep 2h>          <1> ALIGN 4, db 0
   185 00001354 0000000000000000    <1> TIMER_COUNT: dq 0
   186                              <1> 
   140                                  %include "modules/paging.s"
   141                              <1> page_set_4m:
   142 0000135C 55                  <1>     push ebp
   143 0000135D 89E5                <1>     mov ebp, esp
   144                              <1> 
   145 0000135F 60                  <1>     pusha
   146                              <1> 
   147                              <1>     ; ページディレクトリの作成
   148 00001360 FC                  <1>     cld                     ; dfをクリア (+方向)
   149 00001361 8B7D08              <1>     mov edi, [ebp + 8]      ; EDI = ページディレクトリの先頭
   150 00001364 B800000000          <1>     mov eax, 0x00000000     ; EAX = 0   P = 0
   151 00001369 B900040000          <1>     mov ecx, 1024           ; count = 1024
   152 0000136E F3AB                <1>     rep stosd               ; while(ecx--) *(edi++) = eax;
   153                              <1> 
   154                              <1>     ; 先頭のエントリを設定
   155 00001370 89F8                <1>     mov eax, edi            ; ページディレクトリの直後
   156 00001372 2500F0FFFF          <1>     and eax, ~0x0000_0FFF   ; 物理アドレスの指定
   157 00001377 83C807              <1>     or eax, 7               ; U/S R/W Pの許可
   158 0000137A 898700F0FFFF        <1>     mov [edi - (1024 * 4)], eax ; 先頭のエントリを設定
   159                              <1> 
   160                              <1>     ; ページングテーブルの設定(リニア)
   161 00001380 B807000000          <1>     mov eax, 0x00000007     ; 物理アドレスの指定とU/S R/W Pの許可
   162 00001385 B900040000          <1>     mov ecx, 1024           ; count = 1024
   163                              <1> .10L:                       ; do {
   164 0000138A AB                  <1>     stosd                   ;   *(edi++) = eax
   165 0000138B 0500100000          <1>     add eax, 0x00001000     ;   eax += 0x1000
   166 00001390 E2F8                <1>     loop .10L               ; } while(--count)
   167                              <1> 
   168 00001392 61                  <1>     popa
   169                              <1> 
   170 00001393 89EC                <1>     mov esp, ebp
   171 00001395 5D                  <1>     pop ebp
   172                              <1> 
   173 00001396 C3                  <1>     ret
   174                              <1> 
   175                              <1> init_page:
   176 00001397 60                  <1>     pusha
   177                              <1> 
   178 00001398 6800501000E8BAFFFF- <1>     cdecl page_set_4m, CR3_BASE ; ページ変換テーブルの作成 タスク3用
   178 000013A1 FF6683C404          <1>
   179                              <1> 
   180 000013A6 61                  <1>     popa
   181                              <1> 
   182 000013A7 C3                  <1>     ret
   141                                  
   142                                  ;パディング
   143 000013A8 00<rep C58h>                times KERNEL_SIZE - ($ - $$) db 0
   144                                  

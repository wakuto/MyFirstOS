     1                                  ; マクロ
     2                                  %include "../include/macro.s"   ; C言語と同等の関数呼び出し
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
     3                                  %include "../include/define.s"  ; 各種定数の宣言
     4                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     5                              <1> 
     6                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     7                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     8                              <1> 
     9                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    10                              <1> 
    11                              <1>     E820_RECORD_SIZE equ 20
    12                              <1> 
    13                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    14                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    15                              <1> 
    16                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    17                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
     4                                  
     5                                      ORG BOOT_LOAD           ; ロードアドレスをアセンブラに指示
     6                                  
     7                                  entry:
     8 00000000 EB58                        jmp ipl      ; jump to ipl
     9                                  
    10                                      ; BPB(BIOS Parameter Block
    11 00000002 90<rep 58h>                 times 90 - ($ - $$) db 0x90
    12                                  
    13                                  
    14                                      ; IPL(Initial Program Loader)
    15                                  ipl:
    16 0000005A FA                          cli         ; clear interrupu flag 割込み禁止
    17                                  
    18                                  
    19 0000005B B80000                      mov ax, 0x0000
    20 0000005E 8ED8                        mov ds, ax
    21 00000060 8EC0                        mov es, ax
    22 00000062 8ED0                        mov ss, ax
    23 00000064 BC007C                      mov sp, BOOT_LOAD
    24                                      
    25 00000067 FB                          sti         ; set interrupt flag 割り込み許可
    26                                  
    27 00000068 8816[B800]                  mov [BOOT + drive.no], dl    ; ブートドライブの番号(DL)を保存
    28                                  
    29 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0
    29 00000074 02                 
    30                                  
    31                                      ; 残りのセクタをすべて読み込む
    32 00000075 BB0F00                      mov bx, BOOT_SECT - 1           ; bx: 残りのブートセクタ数
    33 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; cx: 次のロードアドレス
    34                                  
    35 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx    ; ax = read_chs(BOOT, bx, cx);
    35 00000083 83C406             
    36                                  
    37 00000086 39D8                        cmp ax, bx
    38                                  .10Q:
    39 00000088 740C                        jz .10E                 ; 読み込んだセクタ数==読み込むセクタ数
    40                                  .10T:
    41 0000008A 68[A600]E8300083C4-         cdecl puts, .e0         ; 失敗
    41 00000092 02                 
    42 00000093 E84900                      call reboot             ; 戻ってこない
    43                                  .10E:
    44                                      ; 次のステージへ
    45 00000096 E90B06                      jmp stage_2
    46                                  
    47                                  
    48                                  ; Data
    49 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0x00
    49 000000A2 2E0A0D00           
    50 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    50 000000AF 746F72207265616400 
    51                                  
    52                                  ALIGN 2, db 0
    53                                  BOOT:           ; ブートドライブ関係の情報
    54                                      istruc drive    ; struct driveを宣言
    55 000000B8 0000                            at drive.no, dw 0       ; ドライブ番号
    56 000000BA 0000                            at drive.cyln, dw 0     ; C:シリンダ
    57 000000BC 0000                            at drive.head, dw 0     ; H:ヘッド
    58 000000BE 0200                            at drive.sect, dw 2     ; S:セクタ
    59                                      iend
    60                                  
    61                                  ; モジュール
    62                                  %include "../modules/real/puts.s"
    63                              <1> puts:       ; void puts(str);
    64 000000C0 55                  <1>     push bp
    65 000000C1 89E5                <1>     mov bp, sp
    66                              <1> 
    67 000000C3 50                  <1>     push ax
    68 000000C4 53                  <1>     push bx
    69 000000C5 56                  <1>     push si
    70                              <1> 
    71 000000C6 8B7604              <1>     mov si, [bp + 4]    ; si=文字列のアドレス
    72                              <1> 
    73 000000C9 B40E                <1>     mov ah, 0x0E
    74 000000CB BB0000              <1>     mov bx, 0x0000
    75 000000CE FC                  <1>     cld
    76                              <1> 
    77                              <1> .10L:
    78 000000CF AC                  <1>     lodsb
    79                              <1> 
    80 000000D0 3C00                <1>     cmp al, 0x00
    81 000000D2 7404                <1>     je .10E
    82                              <1> 
    83 000000D4 CD10                <1>     int 0x10
    84 000000D6 EBF7                <1>     jmp .10L
    85                              <1> 
    86                              <1> .10E:
    87 000000D8 5E                  <1>     pop si
    88 000000D9 5B                  <1>     pop bx
    89 000000DA 58                  <1>     pop ax
    90                              <1> 
    91 000000DB 89EC                <1>     mov sp, bp
    92 000000DD 5D                  <1>     pop bp
    93                              <1> 
    94 000000DE C3                  <1>     ret
    63                                  %include "../modules/real/reboot.s"
    64                              <1> reboot:
    65 000000DF 68[FB00]E8DBFF83C4- <1>     cdecl puts, .s0
    65 000000E7 02                  <1>
    66                              <1> 
    67                              <1> .10L:
    68 000000E8 B410                <1>     mov ah, 0x10
    69 000000EA CD16                <1>     int 0x16
    70                              <1> 
    71 000000EC 3C20                <1>     cmp al, ' '
    72 000000EE 75F8                <1>     jne .10L
    73                              <1> 
    74 000000F0 68[1901]E8CAFF83C4- <1>     cdecl puts, .s1
    74 000000F8 02                  <1>
    75                              <1> 
    76 000000F9 CD19                <1>     int 0x19
    77                              <1> 
    78 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    78 00000104 414345206B65792074- <1>
    78 0000010D 6F207265626F6F742E- <1>
    78 00000116 2E2E00              <1>
    79 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    64                                  %include "../modules/real/read_chs.s"
    65                              <1> read_chs:           ; int read_chs(drive, sect, dst);
    66                              <1> ; drive: drive構造体のアドレス
    67                              <1> ; sect:  読み出しセクタ数
    68                              <1> ; dst:   読み出し先アドレス
    69                              <1> ; 戻り値:読み込んだセクタ数
    70 0000011E 55                  <1>     push bp
    71 0000011F 89E5                <1>     mov bp, sp
    72 00000121 6A03                <1>     push 3          ; リトライ回数
    73 00000123 6A00                <1>     push 0          ; 読み込みセクタ数
    74                              <1> 
    75 00000125 53                  <1>     push bx
    76 00000126 51                  <1>     push cx
    77 00000127 52                  <1>     push dx
    78 00000128 06                  <1>     push es
    79 00000129 56                  <1>     push si
    80                              <1> 
    81                              <1>     ; 処理開始
    82 0000012A 8B7604              <1>     mov si, [bp + 4]    ; drive パラメータバッファ
    83                              <1>     
    84                              <1>     ; cxレジスタの設定
    85 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]
    86 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]
    87 00000133 C0E106              <1>     shl cl, 6
    88 00000136 0A4C06              <1>     or cl, [si + drive.sect]
    89                              <1> 
    90                              <1>     ; セクタ読み込み
    91 00000139 8A7404              <1>     mov dh, [si + drive.head];ヘッド番号
    92 0000013C 8A14                <1>     mov dl, [si + drive.no] ; ドライブ番号
    93 0000013E B80000              <1>     mov ax, 0x0000          ; 初期化
    94 00000141 8EC0                <1>     mov es, ax              ; セグメント
    95 00000143 8B5E08              <1>     mov bx, [bp + 8]        ; コピー先
    96                              <1> .10L:
    97                              <1> 
    98 00000146 B402                <1>     mov ah, 0x02        ; セクタ読み込み
    99 00000148 8A4606              <1>     mov al, [bp + 6]    ; 読み込みセクタ数
   100 0000014B CD13                <1>     int 0x13
   101 0000014D 7304                <1>     jnc .11E            ; if(success) goto .11E
   102                              <1> 
   103 0000014F B000                <1>     mov al, 0           ; failed, 読み込んだセクタ数=0
   104 00000151 EB0C                <1>     jmp .10E
   105                              <1> .11E:
   106                              <1>     
   107 00000153 3C00                <1>     cmp al, 0
   108 00000155 7508                <1>     jne .10E            ; if(読み込んだセクタ != 0) goto .10E
   109                              <1>     
   110 00000157 B80000              <1>     mov ax, 0
   111 0000015A FF4EFE              <1>     dec word [bp - 2]   ; retry--
   112 0000015D 75E7                <1>     jnz .10L            ; if(retry != 0) goto .10L
   113                              <1> .10E:
   114 0000015F B400                <1>     mov ah, 0           ; ステータス情報を破棄
   115                              <1> 
   116 00000161 5E                  <1>     pop si
   117 00000162 07                  <1>     pop es
   118 00000163 5A                  <1>     pop dx
   119 00000164 59                  <1>     pop cx
   120 00000165 5B                  <1>     pop bx
   121                              <1> 
   122 00000166 89EC                <1>     mov sp, bp
   123 00000168 5D                  <1>     pop bp
   124                              <1> 
   125 00000169 C3                  <1>     ret
    65                                  
    66 0000016A 00<rep 94h>                 times 510 - ($ - $$) db 0x00
    67 000001FE 55AA                        db 0x55, 0xAA
    68                                  
    69                                  ; リアルモード時に取得した情報
    70                                  FONT:       ; フォントデータ
    71 00000200 0000                    .seg: dw 0
    72 00000202 0000                    .off: dw 0
    73                                  ACPI_DATA:  ; ACPI data
    74 00000204 00000000                .adr: dd 0  ; ACPI data address
    75 00000208 00000000                .len: dd 0  ; ACPI data length
    76                                  
    77                                  ; モジュール（512バイトに入らなかった分）
    78                                  %include "../modules/real/itoa.s"
    79                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
    80                              <1> ; num   変換する値
    81                              <1> ; buff  保存先バッファアドレス
    82                              <1> ; size  保存先バッファサイズ
    83                              <1> ; radix 基数（2, 8, 10, 16)
    84                              <1> ; flags 
    85                              <1> ;   B2: 空白を'0'で埋める
    86                              <1> ;   B1: '+/-'記号を付加する
    87                              <1> ;   B0: 値を符号付き変数として扱う
    88                              <1> 
    89 0000020C 55                  <1>     push bp
    90 0000020D 89E5                <1>     mov bp, sp
    91                              <1> 
    92 0000020F 50                  <1>     push ax
    93 00000210 53                  <1>     push bx
    94 00000211 51                  <1>     push cx
    95 00000212 52                  <1>     push dx
    96 00000213 56                  <1>     push si
    97 00000214 57                  <1>     push di
    98                              <1> 
    99                              <1> 
   100 00000215 8B4604              <1>     mov ax, [bp + 4]    ; num
   101 00000218 8B4E08              <1>     mov cx, [bp + 8]    ; size
   102 0000021B 8B7606              <1>     mov si, [bp + 6]    ; buff
   103                              <1> 
   104 0000021E 89F7                <1>     mov di, si
   105 00000220 01CF                <1>     add di, cx
   106 00000222 4F                  <1>     dec di              ; di = &si[cx-1]
   107                              <1> 
   108 00000223 8B5E0C              <1>     mov bx, word [bp + 12]   ; flags
   109                              <1> 
   110                              <1>     ; 符号付き判定
   111 00000226 F7C30100            <1>     test bx, 0b0001     ; 論理積を計算、0ならZFをセット
   112                              <1> .10Q:
   113 0000022A 7408                <1>     je .10E         ; E=Exit
   114 0000022C 83F800              <1>     cmp ax, 0
   115                              <1> .12Q:
   116 0000022F 7D03                <1>     jge .12E
   117 00000231 83CB02              <1>     or bx, 0b0010
   118                              <1> .12E:
   119                              <1> .10E:
   120                              <1> 
   121                              <1>     ; 符号出力判定
   122 00000234 F7C30200            <1>     test bx, 0b0010
   123                              <1> .20Q:
   124 00000238 7410                <1>     je .20E
   125 0000023A 83F800              <1>     cmp ax, 0
   126                              <1> .22Q:
   127 0000023D 7D07                <1>     jge .22F
   128 0000023F F7D8                <1>     neg ax
   129 00000241 C6042D              <1>     mov [si], byte '-'
   130 00000244 EB03                <1>     jmp .22E
   131                              <1> .22F:
   132                              <1>     
   133 00000246 C6042B              <1>     mov [si], byte '+'
   134                              <1> .22E:
   135 00000249 49                  <1>     dec cx
   136                              <1> .20E:
   137                              <1> 
   138                              <1>     ; ASCII変換
   139 0000024A 8B5E0A              <1>     mov bx, [bp + 10]   ; radix(基数)
   140                              <1> .30L:
   141 0000024D BA0000              <1>     mov dx, 0
   142 00000250 F7F3                <1>     div bx      ; 商：ax, あまり: dx
   143                              <1> 
   144 00000252 89D6                <1>     mov si, dx
   145 00000254 8A94[7C02]          <1>     mov dl, byte [.ascii + si]
   146                              <1> 
   147 00000258 8815                <1>     mov [di], dl
   148 0000025A 4F                  <1>     dec di
   149                              <1> 
   150 0000025B 83F800              <1>     cmp ax, 0
   151 0000025E E0ED                <1>     loopnz .30L
   152                              <1> .30E:
   153                              <1> 
   154 00000260 83F900              <1>     cmp cx, 0
   155                              <1> .40Q:
   156 00000263 740D                <1>     je .40E
   157 00000265 B020                <1>     mov al, ' '
   158 00000267 837E0C04            <1>     cmp [bp + 12], word 0b0100
   159                              <1> .42Q:
   160 0000026B 7502                <1>     jne .42E
   161 0000026D B030                <1>     mov al, '0'
   162                              <1> .42E:
   163 0000026F FD                  <1>     std         ; dimention flag = 1(-方向)
   164 00000270 F3AA                <1>     rep stosb   ; while (--cx) *di-- = al;
   165                              <1> .40E:
   166                              <1> 
   167 00000272 5F                  <1>     pop di
   168 00000273 5E                  <1>     pop si
   169 00000274 5A                  <1>     pop dx
   170 00000275 59                  <1>     pop cx
   171 00000276 5B                  <1>     pop bx
   172 00000277 58                  <1>     pop ax
   173                              <1> 
   174 00000278 89EC                <1>     mov sp, bp
   175 0000027A 5D                  <1>     pop bp
   176                              <1> 
   177 0000027B C3                  <1>     ret
   178                              <1> 
   179 0000027C 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   179 00000285 39414243444546      <1>
    79                                  %include "../modules/real/get_drive_param.s"
    80                              <1> get_drive_param:    ; int get_drive_param(drive);
    81                              <1> ; drive: drive構造体のアドレス
    82                              <1> ;        no 対象となるドライブ番号（BIOSから渡された起動ドライブ）
    83                              <1> ; 戻り値: 成功（0以外） 失敗（0）
    84                              <1> 
    85 0000028C 55                  <1>     push bp
    86 0000028D 89E5                <1>     mov bp, sp
    87                              <1> 
    88 0000028F 53                  <1>     push bx
    89 00000290 51                  <1>     push cx
    90 00000291 06                  <1>     push es
    91 00000292 56                  <1>     push si
    92 00000293 57                  <1>     push di
    93                              <1> 
    94                              <1>     ; 処理開始
    95 00000294 8B7604              <1>     mov si, [bp + 4]        ; si = バッファ
    96                              <1> 
    97 00000297 B80000              <1>     mov ax, 0               ; Disk Base Table Pointerの初期化
    98 0000029A 8EC0                <1>     mov es, ax              ; es = di = 0
    99 0000029C 89C7                <1>     mov di, ax
   100                              <1> 
   101 0000029E B408                <1>     mov ah, 0x08            ; ah = ドライブパラメータの取得
   102 000002A0 8A14                <1>     mov dl, [si + drive.no] ; dl = ドライブ番号
   103 000002A2 CD13                <1>     int 0x13
   104                              <1> 
   105                              <1> .10Q:
   106 000002A4 721B                <1>     jc .10F
   107                              <1> .10T:       ; 成功
   108 000002A6 88C8                <1>     mov al, cl
   109 000002A8 83E03F              <1>     and ax, 0x3f    ; alの下位6ビット セクタ数のみ有効
   110                              <1> 
   111 000002AB C0E906              <1>     shr cl, 6       ; cl = シリンダ上位2ビット
   112                              <1>                     ; ch = シリンダ下位8ビット
   113 000002AE C1C908              <1>     ror cx, 8       ; chとclを交換、cx = シリンダ
   114 000002B1 41                  <1>     inc cx          ; 1始まりに変換
   115                              <1> 
   116 000002B2 0FB6DE              <1>     movzx bx, dh    ; bx = ヘッド数 ゼロ拡張
   117 000002B5 43                  <1>     inc bx          ; 1はじまりに変換
   118                              <1> 
   119                              <1>     ; cx = シリンダ
   120                              <1>     ; bx = ヘッド
   121                              <1>     ; ax = セクタ
   122 000002B6 894C02              <1>     mov [si + drive.cyln], cx
   123 000002B9 895C04              <1>     mov [si + drive.head], bx
   124 000002BC 894406              <1>     mov [si + drive.sect], ax
   125                              <1> 
   126 000002BF EB03                <1>     jmp .10E
   127                              <1> 
   128                              <1> .10F:       ; 失敗
   129 000002C1 B80000              <1>     mov ax, 0
   130                              <1>     
   131                              <1> .10E:
   132                              <1>     
   133 000002C4 5F                  <1>     pop di
   134 000002C5 5E                  <1>     pop si
   135 000002C6 07                  <1>     pop es
   136 000002C7 59                  <1>     pop cx
   137 000002C8 5B                  <1>     pop bx
   138                              <1> 
   139 000002C9 89EC                <1>     mov sp, bp
   140 000002CB 5D                  <1>     pop bp
   141                              <1> 
   142 000002CC C3                  <1>     ret
    80                                  %include "../modules/real/get_font_adr.s"
    81                              <1> get_font_adr:   ; void get_font_adr(adr)
    82                              <1> ; adr: フォントアドレス格納位置
    83 000002CD 55                  <1>     push bp
    84 000002CE 89E5                <1>     mov bp, sp
    85                              <1> 
    86 000002D0 50                  <1>     push ax
    87 000002D1 53                  <1>     push bx
    88 000002D2 51                  <1>     push cx
    89 000002D3 52                  <1>     push dx
    90 000002D4 56                  <1>     push si
    91 000002D5 06                  <1>     push es
    92 000002D6 55                  <1>     push bp
    93                              <1> 
    94 000002D7 8B7604              <1>     mov si, [bp + 4]    ; si = adr
    95                              <1>     
    96 000002DA B83011              <1>     mov ax, 0x1130      ; フォントアドレスの取得
    97 000002DD B706                <1>     mov bh, 0x06        ; 8x16のフォント
    98 000002DF CD10                <1>     int 0x10
    99                              <1> .10Q:
   100 000002E1 7207                <1>     jc .10F
   101                              <1> .10T:   ; 成功
   102 000002E3 8C04                <1>     mov [si + 0], es    ; adr[0] = セグメント
   103 000002E5 896C02              <1>     mov [si + 2], bp    ; adr[1] = オフセット
   104 000002E8 EB0C                <1>     jmp .10E
   105                              <1> .10F:   ; 失敗
   106 000002EA 68[0103]E8D0FD83C4- <1>     cdecl puts, .e0
   106 000002F2 02                  <1>
   107 000002F3 E8E9FD              <1>     call reboot
   108                              <1> .10E:
   109 000002F6 5D                  <1>     pop bp
   110 000002F7 07                  <1>     pop es
   111 000002F8 5E                  <1>     pop si
   112 000002F9 5A                  <1>     pop dx
   113 000002FA 59                  <1>     pop cx
   114 000002FB 5B                  <1>     pop bx
   115 000002FC 58                  <1>     pop ax
   116                              <1> 
   117 000002FD 89EC                <1>     mov sp, bp
   118 000002FF 5D                  <1>     pop bp
   119                              <1> 
   120 00000300 C3                  <1>     ret
   121                              <1> 
   122 00000301 43616E277420676574- <1> .e0 db "Can't get font data.", 0
   122 0000030A 20666F6E7420646174- <1>
   122 00000313 612E00              <1>
    81                                  %include "../modules/real/get_mem_info.s"
    82                              <1> get_mem_info:   ; void get_mem_info(void)
    83                              <1> ; ACPIテーブルが含まれるメモリ領域をグローバルラベルACPI_DATAに保存する
    84 00000316 6650                <1>     push eax
    85 00000318 6653                <1>     push ebx
    86 0000031A 6651                <1>     push ecx
    87 0000031C 6652                <1>     push edx
    88 0000031E 56                  <1>     push si
    89 0000031F 57                  <1>     push di
    90 00000320 55                  <1>     push bp
    91                              <1> 
    92 00000321 BD0000              <1>     mov bp, 0
    93 00000324 66BB00000000        <1>     mov ebx, 0
    94                              <1> 
    95 0000032A 68[4C04]E890FD83C4- <1>     cdecl puts, .s4
    95 00000332 02                  <1>
    96 00000333 68[D403]E887FD83C4- <1>     cdecl puts, .s0
    96 0000033B 02                  <1>
    97                              <1> .10L:
    98 0000033C 66B820E80000        <1>     mov eax, 0x0000E820
    99 00000342 66B914000000        <1>     mov ecx, E820_RECORD_SIZE
   100 00000348 66BA50414D53        <1>     mov edx, 'PAMS'
   101 0000034E BF[C003]            <1>     mov di, .b0
   102 00000351 CD15                <1>     int 0x15
   103                              <1> 
   104 00000353 663D50414D53        <1>     cmp eax, 'PAMS'             ; BIOSが対応しているかの確認
   105 00000359 7402                <1>     je .12E
   106 0000035B EB4C                <1>     jmp .10E
   107                              <1> .12E:   ; 対応してる
   108 0000035D 7302                <1>     jnc .14E
   109 0000035F EB48                <1>     jmp .10E
   110                              <1> .14E:   ; 成功
   111                              <1>     ; 1レコード分のメモリ情報を表示
   112 00000361 57E8FB0083C402      <1>     cdecl put_mem_info, di
   113                              <1> 
   114                              <1>     ; ACPI dataのアドレスを取得
   115 00000368 668B4510            <1>     mov eax, [di + 16]          ; データタイプを参照
   116 0000036C 6683F803            <1>     cmp eax, 3                  ; data type = 3（ACPI)
   117 00000370 750F                <1>     jne .15E
   118                              <1> 
   119 00000372 668B05              <1>     mov eax, [di + 0]           ; レコードのベースアドレス
   120 00000375 66A3[0402]          <1>     mov [ACPI_DATA.adr], eax
   121                              <1> 
   122 00000379 668B4508            <1>     mov eax, [di + 8]           ; Length
   123 0000037D 66A3[0802]          <1>     mov [ACPI_DATA.len], eax
   124                              <1> 
   125                              <1> .15E:
   126                              <1>     
   127 00000381 6683FB00            <1>     cmp ebx, 0                  ; 最終データだったら.16Eへ
   128 00000385 741C                <1>     jz .16E
   129                              <1> 
   130 00000387 45                  <1>     inc bp
   131 00000388 83E507              <1>     and bp, 0x07                ; 表示ライン数が0x07を超えてなければ.16Eへ
   132 0000038B 7516                <1>     jnz .16E
   133                              <1> 
   134                              <1>     ; 中断メッセージ
   135 0000038D 68[3404]E82DFD83C4- <1>     cdecl puts, .s2
   135 00000395 02                  <1>
   136 00000396 B410                <1>     mov ah, 0x10
   137 00000398 CD16                <1>     int 0x16
   138                              <1> 
   139 0000039A 68[3F04]E820FD83C4- <1>     cdecl puts, .s3
   139 000003A2 02                  <1>
   140                              <1> 
   141                              <1> .16E:
   142                              <1> 
   143 000003A3 6683FB00            <1>     cmp ebx, 0                  ; 最終データじゃなかったらループ
   144 000003A7 7593                <1>     jne .10L
   145                              <1> 
   146                              <1> .10E:
   147 000003A9 68[0404]E811FD83C4- <1>     cdecl puts, .s1
   147 000003B1 02                  <1>
   148                              <1> 
   149 000003B2 5D                  <1>     pop bp
   150 000003B3 5F                  <1>     pop di
   151 000003B4 5E                  <1>     pop si
   152 000003B5 665A                <1>     pop edx
   153 000003B7 6659                <1>     pop ecx
   154 000003B9 665B                <1>     pop ebx
   155 000003BB 6658                <1>     pop eax
   156                              <1> 
   157 000003BD C3                  <1>     ret
   158                              <1> 
   159                              <1> 
   160 000003BE 00<rep 2h>          <1> ALIGN 4, db 0
   161 000003C0 00<rep 14h>         <1> .b0: times E820_RECORD_SIZE db 0
   162 000003D4 20426173655F5F5F5F- <1> .s0: db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   162 000003DD 5F5F5F5F5F5F5F5F5F- <1>
   162 000003E6 204C656E6774685F5F- <1>
   162 000003EF 5F5F5F5F5F5F5F5F5F- <1>
   162 000003F8 20547970655F5F5F5F- <1>
   162 00000401 0A0D00              <1>
   163 00000404 205F5F5F5F5F5F5F5F- <1> .s1: db " _________________ _________________ ________", 0x0A, 0x0D, 0
   163 0000040D 5F5F5F5F5F5F5F5F5F- <1>
   163 00000416 205F5F5F5F5F5F5F5F- <1>
   163 0000041F 5F5F5F5F5F5F5F5F5F- <1>
   163 00000428 205F5F5F5F5F5F5F5F- <1>
   163 00000431 0A0D00              <1>
   164 00000434 203C6D6F72652E2E2E- <1> .s2: db " <more...>", 0
   164 0000043D 3E00                <1>
   165 0000043F 0D2020202020202020- <1> .s3: db 0x0D, "          ", 0x0D, 0
   165 00000448 20200D00            <1>
   166 0000044C 2045383230204D656D- <1> .s4: db " E820 Memory Map:", 0x0A, 0x0D, 0
   166 00000455 6F7279204D61703A0A- <1>
   166 0000045E 0D00                <1>
   167                              <1> 
   168                              <1> 
   169                              <1> 
   170                              <1> put_mem_info:   ; void put_mem_info(adr);
   171                              <1> ; adr メモリ情報を参照するアドレス
   172                              <1>     
   173 00000460 55                  <1>     push bp
   174 00000461 89E5                <1>     mov bp, sp
   175                              <1> 
   176 00000463 53                  <1>     push bx
   177 00000464 56                  <1>     push si
   178                              <1> 
   179 00000465 8B7604              <1>     mov si, [bp + 4]
   180                              <1> 
   181                              <1>     ; レコード全20ビットを文字に変換し出力
   182                              <1>     ; Base(64bit)
   183 00000468 6A046A106A0468-     <1>     cdecl itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   183 0000046F [3F05]FF7406E895FD- <1>
   183 00000477 83C40A              <1>
   184 0000047A 6A046A106A0468-     <1>     cdecl itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   184 00000481 [4305]FF7404E883FD- <1>
   184 00000489 83C40A              <1>
   185 0000048C 6A046A106A0468-     <1>     cdecl itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   185 00000493 [4805]FF7402E871FD- <1>
   185 0000049B 83C40A              <1>
   186 0000049E 6A046A106A0468-     <1>     cdecl itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   186 000004A5 [4C05]FF34E860FD83- <1>
   186 000004AD C40A                <1>
   187                              <1> 
   188                              <1>     ; Length(64bit)
   189 000004AF 6A046A106A0468-     <1>     cdecl itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
   189 000004B6 [5105]FF740EE84EFD- <1>
   189 000004BE 83C40A              <1>
   190 000004C1 6A046A106A0468-     <1>     cdecl itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
   190 000004C8 [5505]FF740CE83CFD- <1>
   190 000004D0 83C40A              <1>
   191 000004D3 6A046A106A0468-     <1>     cdecl itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
   191 000004DA [5A05]FF740AE82AFD- <1>
   191 000004E2 83C40A              <1>
   192 000004E5 6A046A106A0468-     <1>     cdecl itoa, word [si +  8], .p5 + 4, 4, 16, 0b0100
   192 000004EC [5E05]FF7408E818FD- <1>
   192 000004F4 83C40A              <1>
   193                              <1> 
   194                              <1>     ; Type(32bit)
   195 000004F7 6A046A106A0468-     <1>     cdecl itoa, word [si + 18], .p6 + 0, 4, 16, 0b0100
   195 000004FE [6305]FF7412E806FD- <1>
   195 00000506 83C40A              <1>
   196 00000509 6A046A106A0468-     <1>     cdecl itoa, word [si + 16], .p6 + 4, 4, 16, 0b0100
   196 00000510 [6705]FF7410E8F4FC- <1>
   196 00000518 83C40A              <1>
   197                              <1> 
   198 0000051B 68[3E05]E89FFB83C4- <1>     cdecl puts, .s1
   198 00000523 02                  <1>
   199                              <1> 
   200                              <1>     ; タイプの情報を文字列で表示
   201 00000524 8B5C10              <1>     mov bx, [si + 16]
   202 00000527 83E307              <1>     and bx, 0x07            ; bxの下位3ビットがタイプ
   203 0000052A D1E3                <1>     shl bx, 1
   204 0000052C 81C3[C005]          <1>     add bx, .t0
   205 00000530 FF37E88BFB83C402    <1>     cdecl puts, word [bx]   ; .t0からのオフセット
   206                              <1> 
   207 00000538 5E                  <1>     pop si
   208 00000539 5B                  <1>     pop bx
   209                              <1>     
   210 0000053A 89EC                <1>     mov sp, bp
   211 0000053C 5D                  <1>     pop bp
   212                              <1> 
   213 0000053D C3                  <1>     ret
   214                              <1> 
   215 0000053E 20                  <1> .s1: db " "
   216 0000053F 5A5A5A5A5A5A5A5A5F  <1> .p2: db "ZZZZZZZZ_"
   217 00000548 5A5A5A5A5A5A5A5A20  <1> .p3: db "ZZZZZZZZ "
   218 00000551 5A5A5A5A5A5A5A5A5F  <1> .p4: db "ZZZZZZZZ_"
   219 0000055A 5A5A5A5A5A5A5A5A20  <1> .p5: db "ZZZZZZZZ "
   220 00000563 5A5A5A5A5A5A5A5A00  <1> .p6: db "ZZZZZZZZ", 0
   221                              <1> 
   222 0000056C 2028556E6B6E6F776E- <1> .s4: db " (Unknown)", 0x0A, 0x0D, 0
   222 00000575 290A0D00            <1>
   223 00000579 2028757361626C6529- <1> .s5: db " (usable)", 0x0A, 0x0D, 0
   223 00000582 0A0D00              <1>
   224 00000585 202872657365727665- <1> .s6: db " (reserved)", 0x0A, 0x0D, 0
   224 0000058E 64290A0D00          <1>
   225 00000593 202841435049206461- <1> .s7: db " (ACPI data)", 0x0A, 0x0D, 0
   225 0000059C 7461290A0D00        <1>
   226 000005A2 202841435049204E56- <1> .s8: db " (ACPI NVS)", 0x0A, 0x0D, 0
   226 000005AB 53290A0D00          <1>
   227 000005B0 2028626164206D656D- <1> .s9: db " (bad memory)", 0x0A, 0x0D, 0
   227 000005B9 6F7279290A0D00      <1>
   228                              <1> 
   229 000005C0 [6C05][7905][8505]- <1> .t0: dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   229 000005C6 [9305][A205][B005]- <1>
   229 000005CC [6C05][6C05]        <1>
    82                                  %include "../modules/real/kbc.s"
    83                              <1> KBC_Data_Write:     ; int KBC_Data_Write(data);
    84                              <1> ; data: 書き込みデータ
    85                              <1> ; 返り値 成功（0以外）失敗（0）
    86 000005D0 55                  <1>     push bp
    87 000005D1 89E5                <1>     mov bp, sp
    88                              <1> 
    89 000005D3 51                  <1>     push cx
    90                              <1> 
    91 000005D4 B90300              <1>     mov cx, 3
    92                              <1> .10L:
    93 000005D7 E464                <1>     in al, 0x64     ; al = input(0x64) KBCステータス
    94 000005D9 A802                <1>     test al, 0x02   ; zf = al & 0x02   書き込み可能か？ zf != 0のときに書き込める
    95 000005DB E0FA                <1>     loopnz .10L
    96                              <1> 
    97 000005DD 83F900              <1>     cmp cx, 0       ; タイムアウトしたらgoto .20E
    98 000005E0 7405                <1>     jz .20E
    99                              <1> 
   100 000005E2 8A4604              <1>     mov al, [bp + 4]    ; 引数をkbcに書き込み
   101 000005E5 E660                <1>     out 0x60, al
   102                              <1> 
   103                              <1> .20E:
   104 000005E7 89C8                <1>     mov ax, cx      ; 残り試行回数が返り値
   105                              <1> 
   106 000005E9 59                  <1>     pop cx
   107                              <1> 
   108 000005EA 89EC                <1>     mov sp, bp
   109 000005EC 5D                  <1>     pop bp
   110                              <1> 
   111 000005ED C3                  <1>     ret
   112                              <1> 
   113                              <1> 
   114                              <1> KBC_Data_Read:      ; int KBC_Data_read(data);
   115                              <1> ; data 読み込みデータ格納アドレス
   116                              <1> ; 返り値 成功（0以外）失敗（0）
   117 000005EE 55                  <1>     push bp
   118 000005EF 89E5                <1>     mov bp, sp
   119                              <1> 
   120 000005F1 50                  <1>     push ax
   121 000005F2 51                  <1>     push cx
   122 000005F3 57                  <1>     push di
   123                              <1> 
   124 000005F4 B90300              <1>     mov cx, 3
   125                              <1> .10L:
   126 000005F7 E464                <1>     in al, 0x64
   127 000005F9 A801                <1>     test al, 0x01       ; 出力バッファフルを確認 zf == 1 のときに読み込める
   128 000005FB E1FA                <1>     loopz .10L
   129                              <1> 
   130 000005FD 83F900              <1>     cmp cx, 0   ; タイム・アウトしたらgoto .20E
   131 00000600 7409                <1>     jz .20E
   132                              <1> 
   133 00000602 B400                <1>     mov ah, 0x00
   134 00000604 E460                <1>     in al, 0x60
   135                              <1> 
   136 00000606 8B7E04              <1>     mov di, [bp + 4]
   137 00000609 8905                <1>     mov [di + 0], ax
   138                              <1> 
   139                              <1> .20E:
   140 0000060B 89C8                <1>     mov ax, cx
   141                              <1> 
   142 0000060D 5F                  <1>     pop di
   143 0000060E 59                  <1>     pop cx
   144 0000060F 58                  <1>     pop ax
   145                              <1> 
   146 00000610 89EC                <1>     mov sp, bp
   147 00000612 5D                  <1>     pop bp
   148                              <1> 
   149 00000613 C3                  <1>     ret
   150                              <1> 
   151                              <1> 
   152                              <1> KBC_Cmd_Write:      ; int KBC_Cmd_Write(cmd);
   153                              <1> ; cmd: 書き込みコマンド
   154                              <1> ; 返り値 成功（0以外）失敗（0）
   155 00000614 55                  <1>     push bp
   156 00000615 89E5                <1>     mov bp, sp
   157                              <1> 
   158 00000617 51                  <1>     push cx
   159                              <1> 
   160 00000618 B90300              <1>     mov cx, 3
   161                              <1> .10L:
   162 0000061B E464                <1>     in al, 0x64     ; al = input(0x64) KBCステータス
   163 0000061D A802                <1>     test al, 0x02   ; zf = al & 0x02   書き込み可能か？ zf != 0のときに書き込める
   164 0000061F E0FA                <1>     loopnz .10L
   165                              <1> 
   166 00000621 83F900              <1>     cmp cx, 0       ; タイムアウトしたらgoto .20E
   167 00000624 7405                <1>     jz .20E
   168                              <1> 
   169 00000626 8A4604              <1>     mov al, [bp + 4]    ; 引数をkbcに書き込み
   170 00000629 E664                <1>     out 0x64, al
   171                              <1> 
   172                              <1> .20E:
   173 0000062B 89C8                <1>     mov ax, cx      ; 残り試行回数が返り値
   174                              <1> 
   175 0000062D 59                  <1>     pop cx
   176                              <1> 
   177 0000062E 89EC                <1>     mov sp, bp
   178 00000630 5D                  <1>     pop bp
   179                              <1> 
   180 00000631 C3                  <1>     ret
    83                                  %include "../modules/real/read_lba.s"
    84                              <1> read_lba:   ; int read_lba(drive, lba, sect, dst);
    85                              <1> ; drive drive構造体のアドレス（ドライブパラメータが格納されている）
    86                              <1> ; lba LBA
    87                              <1> ; sect 読み出しセクタ数
    88                              <1> ; dst 読み出し先アドレス
    89                              <1> ; 戻り値 読み込んだセクタ数
    90                              <1> 
    91 00000632 55                  <1>     push bp
    92 00000633 89E5                <1>     mov bp, sp
    93                              <1> 
    94 00000635 50                  <1>     push ax
    95 00000636 56                  <1>     push si
    96                              <1> 
    97 00000637 8B7604              <1>     mov si, [bp + 4]        ; si = ドライブ情報
    98                              <1> 
    99                              <1>     ; LBA->CHS変換
   100 0000063A 8B4606              <1>     mov ax, [bp + 6]
   101 0000063D 5068[6106]56E82400- <1>     cdecl lba_chs, si, .chs, ax ; lba_chs(drive, .chs, AX);
   101 00000645 83C406              <1>
   102                              <1> 
   103                              <1>     ; ドライブ番号のコピー
   104 00000648 8A04                <1>     mov al, [si + drive.no]
   105 0000064A A2[6106]            <1>     mov [.chs + drive.no], al   ; ドライブ番号保存
   106                              <1> 
   107                              <1>     ; セクタの読み込み
   108 0000064D FF760AFF760868-     <1>     cdecl read_chs, .chs, word [bp + 8], word [bp + 10] ; ax = read_chs(.chs, セクタ数 , ofs);
   108 00000654 [6106]E8C5FA83C406  <1>
   109                              <1> 
   110 0000065C 5E                  <1>     pop si
   111                              <1> 
   112 0000065D 89EC                <1>     mov sp, bp
   113 0000065F 5D                  <1>     pop bp
   114                              <1> 
   115 00000660 C3                  <1>     ret
   116                              <1> 
   117 00000661 00<rep 8h>          <1> .chs: times drive_size  db 0        ; 読み込みセクタに関する情報
    84                                  %include "../modules/real/lba_chs.s"
    85                              <1> lba_chs:    ; lba_chs(drive, drive_chs, lba);
    86                              <1> ; drive drive構造体のアドレス（ドライブパラメータが格納されている）
    87                              <1> ; drv_chs drive構造体のアドレス（変換後のシリンダ番号、ヘッド番号、セクタ番号を保存する）
    88                              <1> ; lba LBA
    89                              <1> ; 戻り値 成功(0以外) 失敗(0)
    90 00000669 55                  <1>     push bp
    91 0000066A 89E5                <1>     mov bp, sp
    92                              <1> 
    93 0000066C 50                  <1>     push ax
    94 0000066D 53                  <1>     push bx
    95 0000066E 52                  <1>     push dx
    96 0000066F 56                  <1>     push si
    97 00000670 57                  <1>     push di
    98                              <1> 
    99                              <1> 
   100 00000671 8B7604              <1>     mov si, [bp + 4]            ; driveバッファ
   101 00000674 8B7E06              <1>     mov di, [bp + 6]            ; drv_chsバッファ
   102                              <1> 
   103 00000677 8A4404              <1>     mov al, [si + drive.head]   ; al = 最大ヘッド数
   104 0000067A F66406              <1>     mul byte [si + drive.sect]  ; ax = 最大ヘッド数 * 最大セクタ数
   105 0000067D 89C3                <1>     mov bx, ax                  ; bx = シリンダあたりのセクタ数
   106                              <1> 
   107 0000067F BA0000              <1>     mov dx, 0                   ; dx = lba(上位2byte)
   108 00000682 8B4608              <1>     mov ax, [bp + 8]            ; ax = lba(下位2byte)
   109 00000685 F7F3                <1>     div bx                      ; dx = dx:ax % bx   あまり
   110                              <1>                                 ; ax = dx:ax / bx   シリンダ番号
   111 00000687 894502              <1>     mov [di + drive.cyln], ax   ; drv_chs.cyln = シリンダ番号
   112                              <1> 
   113 0000068A 89D0                <1>     mov ax, dx                  ; ax = あまり
   114 0000068C F67406              <1>     div byte [si + drive.sect]  ; ah = ax % 最大セクタ数    // セクタ番号
   115                              <1>                                 ; al = ax / 最大セクタ数    // シリンダ番号
   116                              <1> 
   117 0000068F 0FB6D4              <1>     movzx dx, ah                ; dx = セクタ番号
   118 00000692 42                  <1>     inc dx                      ; １始まりにする
   119                              <1> 
   120 00000693 B400                <1>     mov ah, 0x00                ; ax = ヘッド位置(0x00:al)
   121                              <1> 
   122 00000695 894504              <1>     mov [di + drive.head], ax   ; drv_chs.head = ヘッド番号
   123 00000698 895506              <1>     mov [di + drive.sect], dx   ; drv_chs.sect = セクタ番号
   124                              <1> 
   125 0000069B 5F                  <1>     pop di
   126 0000069C 5E                  <1>     pop si
   127 0000069D 5A                  <1>     pop dx
   128 0000069E 5B                  <1>     pop bx
   129 0000069F 58                  <1>     pop ax
   130                              <1> 
   131 000006A0 89EC                <1>     mov sp, bp
   132 000006A2 5D                  <1>     pop bp
   133                              <1> 
   134 000006A3 C3                  <1>     ret
    85                                  
    86                                  ; ブート処理の第２ステージ
    87                                  stage_2:
    88 000006A4 68[6107]E816FA83C4-         cdecl puts, .s0
    88 000006AC 02                 
    89                                  
    90                                      ; ドライブ情報を取得
    91 000006AD 68[B800]E8D9FB83C4-         cdecl get_drive_param, BOOT
    91 000006B5 02                 
    92 000006B6 83F800                      cmp ax, 0
    93                                  .10Q:
    94 000006B9 750C                        jne .10E
    95                                  .10T:   ; 失敗
    96 000006BB 68[4607]E8FFF983C4-         cdecl puts, .e0
    96 000006C3 02                 
    97 000006C4 E818FA                      call reboot
    98                                  
    99                                  .10E:   ; 成功
   100                                      ; ドライブ情報を表示
   101 000006C7 A1[B800]                    mov ax, [BOOT + drive.no]
   102 000006CA 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
   102 000006D1 [2707]50E835FB83C4-
   102 000006D9 0A                 
   103 000006DA A1[BA00]                    mov ax, [BOOT + drive.cyln]
   104 000006DD 6A046A106A0468-             cdecl itoa, ax, .p2, 4, 16, 0b0100
   104 000006E4 [2F07]50E822FB83C4-
   104 000006EC 0A                 
   105 000006ED A1[BC00]                    mov ax, [BOOT + drive.head]
   106 000006F0 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
   106 000006F7 [3907]50E80FFB83C4-
   106 000006FF 0A                 
   107 00000700 A1[BE00]                    mov ax, [BOOT + drive.sect]
   108 00000703 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
   108 0000070A [4107]50E8FCFA83C4-
   108 00000712 0A                 
   109 00000713 68[1E07]E8A7F983C4-         cdecl puts, .s1
   109 0000071B 02                 
   110                                      
   111                                      ; 次のステージへ
   112 0000071C EB52                        jmp stage_3rd
   113                                  
   114 0000071E 2044726976653A3078      .s1 db " Drive:0x"
   115 00000727 20202C20433A3078        .p1 db "  , C:0x"
   116 0000072F 202020202C20483A30-     .p2 db "    , H:0x"
   116 00000738 78                 
   117 00000739 20202C20533A3078        .p3 db "  , S:0x"
   118 00000741 20200A0D00              .p4 db "  ", 0x0A, 0x0D, 0
   119                                  
   120 00000746 43616E277420676574-     .e0 db "Can't get drive parameter.", 0
   120 0000074F 206472697665207061-
   120 00000758 72616D657465722E00 
   121                                  
   122                                  ; Data
   123 00000761 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   123 0000076A 2E2E2E0A0D00       
   124                                  
   125                                  ; ブート処理の第３ステージ
   126                                  stage_3rd:
   127                                      ; 文字列を表示
   128 00000770 68[ED07]E84AF983C4-         cdecl puts, .s0
   128 00000778 02                 
   129                                  
   130 00000779 68[0002]E84EFB83C4-         cdecl get_font_adr, FONT    ; BIOSのフォントアドレスを取得
   130 00000781 02                 
   131                                  
   132                                      ; フォントアドレスの表示
   133 00000782 6A046A106A0468-             cdecl itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   133 00000789 [0A08]FF36[0002]E8-
   133 00000790 7AFA83C40A         
   134 00000795 6A046A106A0468-             cdecl itoa, word [FONT.off], .p2, 4, 16, 0b0100
   134 0000079C [0F08]FF36[0202]E8-
   134 000007A3 67FA83C40A         
   135 000007A8 68[FC07]E812F983C4-         cdecl puts, .s1
   135 000007B0 02                 
   136                                  
   137                                      ; メモリ情報の取得と表示
   138 000007B1 E862FB                      cdecl get_mem_info              ; get_mem_info()
   139                                  
   140 000007B4 66A1[0402]                  mov eax, [ACPI_DATA.adr]
   141 000007B8 6683F800                    cmp eax, 0                      ; if(eax == 0) goto .10E
   142 000007BC 742D                        je .10E
   143                                  
   144 000007BE 6A046A106A0468-             cdecl itoa, ax, .p4, 4, 16, 0b0100  ; 下位１６ビットを変換
   144 000007C5 [2808]50E841FA83C4-
   144 000007CD 0A                 
   145 000007CE 66C1E810                    shr eax, 16
   146 000007D2 6A046A106A0468-             cdecl itoa, ax, .p3, 4, 16, 0b0100  ; 上位１６ビットを変換
   146 000007D9 [2408]50E82DFA83C4-
   146 000007E1 0A                 
   147                                  
   148 000007E2 68[1908]E8D8F883C4-         cdecl puts, .s2
   148 000007EA 02                 
   149                                  .10E:
   150                                      
   151                                      ; 次のステージへ
   152 000007EB EB42                        jmp stage_4
   153                                  
   154                                  
   155                                  ; データ
   156 000007ED 337264207374616765-     .s0 db "3rd stage...", 0x0A, 0x0D, 0
   156 000007F6 2E2E2E0A0D00       
   157 000007FC 20466F6E7420416464-     .s1 db " Font Address="
   157 00000805 726573733D         
   158 0000080A 5A5A5A5A3A              .p1 db "ZZZZ:"
   159 0000080F 5A5A5A5A0A0D00          .p2 db "ZZZZ", 0x0A, 0x0D, 0
   160 00000816 0A0D00                      db 0x0A, 0x0D, 0
   161                                  
   162 00000819 204143504920646174-     .s2 db " ACPI data="
   162 00000822 613D               
   163 00000824 5A5A5A5A                .p3 db "ZZZZ"
   164 00000828 5A5A5A5A0A0D00          .p4 db "ZZZZ", 0x0A, 0x0D, 0
   165                                  
   166                                  
   167                                  ; ブート処理の第４ステージ
   168                                  stage_4:
   169 0000082F 68[0309]E88BF883C4-         cdecl puts, .s0
   169 00000837 02                 
   170                                  
   171                                      ; A20ゲート有効化
   172 00000838 FA                          cli                         ; 割込み禁止
   173 00000839 68AD00E8D5FD83C402          cdecl KBC_Cmd_Write, 0xAD   ; キーボード無効化
   174 00000842 68D000E8CCFD83C402          cdecl KBC_Cmd_Write, 0xD0   ; 出力ポート読み出しコマンド
   175 0000084B 68[4C09]E89DFD83C4-         cdecl KBC_Data_Read, .key   ; 出力ポートデータ
   175 00000853 02                 
   176                                  
   177 00000854 8A1E[4C09]                  mov bl, [.key]
   178 00000858 80CB02                      or bl, 0x02         ; A20ゲート有効化
   179                                  
   180 0000085B 68D100E8B3FD83C402          cdecl KBC_Cmd_Write, 0xD1   ; 出力ポート書き込みコマンド
   181 00000864 53E868FD83C402              cdecl KBC_Data_Write, bx    ; 出力ポートデータ
   182                                  
   183 0000086B 68AE00E8A3FD83C402          cdecl KBC_Cmd_Write, 0xAE   ; キーボード有効化
   184 00000874 FB                          sti                         ; 割り込み許可
   185                                  
   186 00000875 68[1209]E845F883C4-         cdecl puts, .s1
   186 0000087D 02                 
   187                                  
   188                                      ; キーボードLEDのテスト
   189 0000087E 68[2709]E83CF883C4-         cdecl puts, .s2
   189 00000886 02                 
   190                                      
   191 00000887 BB0000                      mov bx, 0
   192                                  .10L: 
   193 0000088A B400                        mov ah, 0x00    ; キー入力
   194 0000088C CD16                        int 0x16        ; al = keyinput()
   195                                  
   196                                      ; 1～3以外のキーを押すとループ終了
   197 0000088E 3C31                        cmp al, '1'
   198 00000890 7266                        jb .10E
   199                                  
   200 00000892 3C33                        cmp al, '3'
   201 00000894 7762                        ja .10E
   202                                  
   203                                      ; 0x31～0x33を 0～2に変換
   204 00000896 88C1                        mov cl, al
   205 00000898 FEC9                        dec cl
   206 0000089A 80E103                      and cl, 0x03
   207 0000089D B80100                      mov ax, 0x0001  ; マスクを0～2ビットシフト
   208 000008A0 D3E0                        shl ax, cl
   209 000008A2 31C3                        xor bx, ax      ; 押されたらLEDの状態を反転
   210                                  
   211                                      ; LEDコマンドの送信
   212 000008A4 FA                          cli             ; 割込み禁止
   213                                  
   214 000008A5 68AD00E869FD83C402          cdecl KBC_Cmd_Write, 0xAD   ; キーボード無効化
   215                                  
   216 000008AE 68ED00E81CFD83C402          cdecl KBC_Data_Write, 0xED  ; LEDコマンド
   217 000008B7 68[4C09]E831FD83C4-         cdecl KBC_Data_Read, .key   ; Ack受信
   217 000008BF 02                 
   218                                  
   219 000008C0 803E[4C09]FA                cmp [.key], byte 0xFA       ; Ack受け取れなかったらgoto .11F
   220 000008C5 7509                        jne .11F
   221                                  
   222 000008C7 53E805FD83C402              cdecl KBC_Data_Write, bx    ; 受け取れたらLEDデータ出力
   223 000008CE EB1C                        jmp .11E
   224                                  .11F:   ; Ack失敗
   225 000008D0 6A046A106A0268-             cdecl itoa, word [.key], .e1, 2, 16, 0b0100
   225 000008D7 [4809]FF36[4C09]E8-
   225 000008DE 2CF983C40A         
   226 000008E3 68[4709]E8D7F783C4-         cdecl puts, .e0
   226 000008EB 02                 
   227                                  .11E:   ; Ack成功
   228 000008EC 68AE00E822FD83C402          cdecl KBC_Cmd_Write, 0xAE   ; キーボード有効化
   229                                  
   230 000008F5 FB                          sti             ; 割り込み許可
   231                                  
   232 000008F6 EB92                        jmp .10L
   233                                  .10E:
   234 000008F8 68[3D09]E8C2F783C4-         cdecl puts, .s3
   234 00000900 02                 
   235                                  
   236                                      ; 次のステージへ移行
   237 00000901 EB4B                        jmp stage_5
   238                                  
   239                                  
   240 00000903 347468207374616765-     .s0: db "4th stage...", 0x0A, 0x0D, 0
   240 0000090C 2E2E2E0A0D00       
   241 00000912 204132302047617465-     .s1: db " A20 Gate Enabled.", 0x0A, 0x0D, 0
   241 0000091B 20456E61626C65642E-
   241 00000924 0A0D00             
   242 00000927 204B6579626F617264-     .s2: db " Keyboard LED Test...", 0
   242 00000930 204C45442054657374-
   242 00000939 2E2E2E00           
   243 0000093D 2028646F6E65290A0D-     .s3: db " (done)", 0x0A, 0x0D, 0
   243 00000946 00                 
   244 00000947 5B                      .e0: db "["
   245 00000948 5A5A5D00                .e1: db "ZZ]", 0
   246                                  
   247 0000094C 0000                    .key: dw 0
   248                                  
   249                                  
   250                                  ; ブート処理の第５ステージ
   251                                  stage_5:
   252 0000094E 68[7A09]E86CF783C4-         cdecl puts, .s0
   252 00000956 02                 
   253                                  
   254                                      ; カーネルを読み込む
   255 00000957 68009C6A106A1068-           cdecl read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   255 0000095F [B800]E8CEFC83C408 
   256 00000967 83F810                      cmp ax, KERNEL_SECT     
   257                                  .10Q:
   258 0000096A 740C                        jz .10E                 ; if(読み込みセクタ数 == 読み込んだセクタ数) goto .10E
   259                                  .10T:
   260 0000096C 68[8909]E84EF783C4-         cdecl puts, .e0
   260 00000974 02                 
   261 00000975 E867F7                      call reboot
   262                                  .10E:
   263                                      ; 処理の終了
   264 00000978 EBFE                        jmp $
   265                                  
   266 0000097A 357468207374616765-     .s0: db "5th stage...", 0x0A, 0x0D, 0
   266 00000983 2E2E2E0A0D00       
   267 00000989 204661696C75726520-     .e0: db " Failure load kernel...", 0x0A, 0x0D, 0
   267 00000992 6C6F6164206B65726E-
   267 0000099B 656C2E2E2E0A0D00   
   268                                  
   269                                  ; パディング(このファイルは8kBとする）
   270 000009A3 00<rep 165Dh>               times BOOT_SIZE - ($ - $$) db 0 ; 8kB

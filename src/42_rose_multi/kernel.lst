     1                                  %define USE_SYSTEM_CALL
     2                                  %define USE_TEST_AND_SET
     3                                  
     4                                  %include "../include/define.s"
     5                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     6                              <1> 
     7                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     8                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     9                              <1> 
    10                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    11                              <1> 
    12                              <1>     E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    15                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    16                              <1> 
    17                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    18                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    19                              <1> 
    20                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    21                              <1> 
    22                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    23                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    24                              <1> 
    25                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    26                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    27                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
    28                              <1>     SP_TASK_3 equ STACK_BASE + (STACK_SIZE * 4)
    29                              <1>     SP_TASK_4 equ STACK_BASE + (STACK_SIZE * 5)
    30                              <1>     SP_TASK_5 equ STACK_BASE + (STACK_SIZE * 6)
    31                              <1>     SP_TASK_6 equ STACK_BASE + (STACK_SIZE * 7)
    32                              <1> 
    33                              <1>     PARAM_TASK_4 equ 0x0010_8000            ; 描画パラメータ：タスク4用
    34                              <1>     PARAM_TASK_5 equ 0x0010_9000            ; 描画パラメータ：タスク5用
    35                              <1>     PARAM_TASK_6 equ 0x0010_A000            ; 描画パラメータ：タスク6用
    36                              <1> 
    37                              <1>     CR3_BASE equ 0x0010_5000    ; ページ変換テーブル タスク3用
    38                              <1> 
    39                              <1>     CR3_TASK_4 equ 0x0020_0000  ; ページ変換テーブル タスク4用
    40                              <1>     CR3_TASK_5 equ 0x0020_2000  ; ページ変換テーブル タスク5用
    41                              <1>     CR3_TASK_6 equ 0x0020_4000  ; ページ変換テーブル タスク6用
     5                                  %include "../include/macro.s"
     6                              <1> ; C言語と同等の関数呼び出し
     7                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     8                              <1> 
     9                              <1>     %rep %0 - 1         ; 引数の数-1回
    10                              <1>         push %{-1:-1}   ; 一番最後の引数
    11                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    12                              <1>     %endrep
    13                              <1>     %rotate -1      ; 回転をもとに戻す
    14                              <1> 
    15                              <1>     call %1         ; 第１引数を呼び出し
    16                              <1> 
    17                              <1>     %if 1 < %0
    18                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    19                              <1>     %endif
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> struc drive
    23 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    24 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    25 00000004 ????                <1>     .head resw 1    ; ヘッド
    26 00000006 ????                <1>     .sect resw 1    ; セクタ
    27                              <1> endstruc
    28                              <1> 
    29                              <1> %macro set_vect 1-*
    30                              <1>         push eax
    31                              <1>         push edi
    32                              <1> 
    33                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    34                              <1>         mov eax, %2
    35                              <1> 
    36                              <1>     %if 3 == %0
    37                              <1>         mov [edi + 4], %3               ; フラグ
    38                              <1>     %endif
    39                              <1> 
    40                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    41                              <1>         shr eax, 16
    42                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    43                              <1> 
    44                              <1>         pop edi
    45                              <1>         pop eax
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro outp 2
    49                              <1>     mov al, %2
    50                              <1>     out %1, al
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %define RING_ITEM_SIZE (1 << 4)
    54                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    55                              <1> 
    56                              <1> struc ring_buff
    57 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    58 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    59 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    60                              <1> endstruc
    61                              <1> 
    62                              <1> %macro set_desc 2-*
    63                              <1>         push eax
    64                              <1>         push edi
    65                              <1> 
    66                              <1>         mov edi, %1     ; ディスクリプタアドレス
    67                              <1>         mov eax, %2     ; ベースアドレス
    68                              <1> 
    69                              <1>     %if 3 == %0
    70                              <1>         mov [edi + 0], %3   ; リミット
    71                              <1>     %endif
    72                              <1> 
    73                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    74                              <1>         shr eax, 16
    75                              <1>         mov [edi + 4], al   ; ベース([23:16])
    76                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    77                              <1> 
    78                              <1>         pop edi
    79                              <1>         pop eax
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro set_gate 2-*
    83                              <1>     push eax
    84                              <1>     push edi
    85                              <1> 
    86                              <1>     mov edi, %1         ; ディスクリプタアドレス
    87                              <1>     mov eax, %2         ; ベースアドレス
    88                              <1> 
    89                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    90                              <1>     shr eax, 16
    91                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    92                              <1> 
    93                              <1>     pop edi
    94                              <1>     pop eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc rose
    98 00000000 ????????            <1>     .x0         resd 1      ; 左上座標
    99 00000004 ????????            <1>     .y0         resd 1      ; 
   100 00000008 ????????            <1>     .x1         resd 1      ; 右下座標
   101 0000000C ????????            <1>     .y1         resd 1      ;
   102                              <1> 
   103 00000010 ????????            <1>     .n          resd 1      ; 変数n
   104 00000014 ????????            <1>     .d          resd 1      ; 変数d
   105                              <1> 
   106                              <1>     ;描画色
   107 00000018 ????????            <1>     .color_x    resd 1      ; x軸
   108 0000001C ????????            <1>     .color_y    resd 1      ; y軸
   109 00000020 ????????            <1>     .color_z    resd 1      ; 枠
   110 00000024 ????????            <1>     .color_s    resd 1      ; 文字
   111 00000028 ????????            <1>     .color_f    resd 1      ; グラフ描画
   112 0000002C ????????            <1>     .color_b    resd 1      ; グラフ消去
   113                              <1> 
   114 00000030 <res 10h>           <1>     .title      resb 16     ; タイトル
   115                              <1> endstruc
     6                                  
     7                                      ORG KERNEL_LOAD
     8                                  
     9                                  [BITS 32]   ; 32bitコードを生成
    10                                  
    11                                  ; エントリポイント
    12                                  kernel:
    13                                      ; フォントアドレスを取得
    14 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    15 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    16 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    17 0000000C C1E004                      shl eax, 4
    18 0000000F 01D8                        add eax, ebx
    19 00000011 A3[A0020000]                mov [FONT_ADR], eax
    20                                  
    21                                      ; TSSディスクリプタの設定
    22                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    63 00000016 50                  <1>  push eax
    64 00000017 57                  <1>  push edi
    65                              <1> 
    66 00000018 BF[28030000]        <1>  mov edi, %1
    67 0000001D B8[6E030000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000022 66894702            <1>  mov [edi + 2], ax
    74 00000026 C1E810              <1>  shr eax, 16
    75 00000029 884704              <1>  mov [edi + 4], al
    76 0000002C 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000002F 5F                  <1>  pop edi
    79 00000030 58                  <1>  pop eax
    23                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    63 00000031 50                  <1>  push eax
    64 00000032 57                  <1>  push edi
    65                              <1> 
    66 00000033 BF[30030000]        <1>  mov edi, %1
    67 00000038 B8[46040000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000003D 66894702            <1>  mov [edi + 2], ax
    74 00000041 C1E810              <1>  shr eax, 16
    75 00000044 884704              <1>  mov [edi + 4], al
    76 00000047 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000004A 5F                  <1>  pop edi
    79 0000004B 58                  <1>  pop eax
    24                                      set_desc GDT.tss_2, TSS_2       ; タスク2用TSSの設定
    63 0000004C 50                  <1>  push eax
    64 0000004D 57                  <1>  push edi
    65                              <1> 
    66 0000004E BF[38030000]        <1>  mov edi, %1
    67 00000053 B8[1E050000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000058 66894702            <1>  mov [edi + 2], ax
    74 0000005C C1E810              <1>  shr eax, 16
    75 0000005F 884704              <1>  mov [edi + 4], al
    76 00000062 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000065 5F                  <1>  pop edi
    79 00000066 58                  <1>  pop eax
    25                                      set_desc GDT.tss_3, TSS_3       ; タスク3用TSSの設定
    63 00000067 50                  <1>  push eax
    64 00000068 57                  <1>  push edi
    65                              <1> 
    66 00000069 BF[40030000]        <1>  mov edi, %1
    67 0000006E B8[F6050000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 00000073 66894702            <1>  mov [edi + 2], ax
    74 00000077 C1E810              <1>  shr eax, 16
    75 0000007A 884704              <1>  mov [edi + 4], al
    76 0000007D 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000080 5F                  <1>  pop edi
    79 00000081 58                  <1>  pop eax
    26                                      set_desc GDT.tss_4, TSS_4       ; タスク4用TSSの設定
    63 00000082 50                  <1>  push eax
    64 00000083 57                  <1>  push edi
    65                              <1> 
    66 00000084 BF[48030000]        <1>  mov edi, %1
    67 00000089 B8[CE060000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 0000008E 66894702            <1>  mov [edi + 2], ax
    74 00000092 C1E810              <1>  shr eax, 16
    75 00000095 884704              <1>  mov [edi + 4], al
    76 00000098 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 0000009B 5F                  <1>  pop edi
    79 0000009C 58                  <1>  pop eax
    27                                      set_desc GDT.tss_5, TSS_5       ; タスク5用TSSの設定
    63 0000009D 50                  <1>  push eax
    64 0000009E 57                  <1>  push edi
    65                              <1> 
    66 0000009F BF[50030000]        <1>  mov edi, %1
    67 000000A4 B8[A6070000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000A9 66894702            <1>  mov [edi + 2], ax
    74 000000AD C1E810              <1>  shr eax, 16
    75 000000B0 884704              <1>  mov [edi + 4], al
    76 000000B3 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000B6 5F                  <1>  pop edi
    79 000000B7 58                  <1>  pop eax
    28                                      set_desc GDT.tss_6, TSS_6       ; タスク6用TSSの設定
    63 000000B8 50                  <1>  push eax
    64 000000B9 57                  <1>  push edi
    65                              <1> 
    66 000000BA BF[58030000]        <1>  mov edi, %1
    67 000000BF B8[7E080000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000C4 66894702            <1>  mov [edi + 2], ax
    74 000000C8 C1E810              <1>  shr eax, 16
    75 000000CB 884704              <1>  mov [edi + 4], al
    76 000000CE 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 000000D1 5F                  <1>  pop edi
    79 000000D2 58                  <1>  pop eax
    29                                  
    30                                      ; コールゲートの設定
    31                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    83 000000D3 50                  <1>  push eax
    84 000000D4 57                  <1>  push edi
    85                              <1> 
    86 000000D5 BF[60030000]        <1>  mov edi, %1
    87 000000DA B8[84170000]        <1>  mov eax, %2
    88                              <1> 
    89 000000DF 668907              <1>  mov [edi + 0], ax
    90 000000E2 C1E810              <1>  shr eax, 16
    91 000000E5 66894706            <1>  mov [edi + 6], ax
    92                              <1> 
    93 000000E9 5F                  <1>  pop edi
    94 000000EA 58                  <1>  pop eax
    32                                  
    33                                      ; LDTの設定
    34                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    63 000000EB 50                  <1>  push eax
    64 000000EC 57                  <1>  push edi
    65                              <1> 
    66 000000ED BF[20030000]        <1>  mov edi, %1
    67 000000F2 B8[A8020000]        <1>  mov eax, %2
    68                              <1> 
    69                              <1>  %if 3 == %0
    70 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    71                              <1>  %endif
    72                              <1> 
    73 000000FC 66894702            <1>  mov [edi + 2], ax
    74 00000100 C1E810              <1>  shr eax, 16
    75 00000103 884704              <1>  mov [edi + 4], al
    76 00000106 886707              <1>  mov [edi + 7], ah
    77                              <1> 
    78 00000109 5F                  <1>  pop edi
    79 0000010A 58                  <1>  pop eax
    35                                  
    36                                      ; GDTをロード(再設定)
    37 0000010B 0F0115[68030000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    38                                  
    39                                      ; スタックの設定
    40 00000112 BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    41                                  
    42                                      ; タスクレジスタの初期化
    43 00000117 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    44 0000011B 0F00D8                      ltr ax              ; タスクレジスタの設定
    45                                  
    46                                      ; 初期化
    47 0000011E E85B140000                  cdecl init_int                  ; 割り込みベクタの初期化
    48 00000123 E8A5140000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    49 00000128 E8B3080000                  cdecl init_page                 ; ページングの初期化
    50                                  
    51                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    30 0000012D 50                  <1>  push eax
    31 0000012E 57                  <1>  push edi
    32                              <1> 
    33 0000012F BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000134 B8[AF150000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000139 668907              <1>  mov [edi + 0], ax
    41 0000013C C1E810              <1>  shr eax, 16
    42 0000013F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000143 5F                  <1>  pop edi
    45 00000144 58                  <1>  pop eax
    52                                      set_vect 0x07, int_nm           ; 割り込み処理の登録：デバイス使用不可例外
    30 00000145 50                  <1>  push eax
    31 00000146 57                  <1>  push edi
    32                              <1> 
    33 00000147 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000014C B8[21180000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000151 668907              <1>  mov [edi + 0], ax
    41 00000154 C1E810              <1>  shr eax, 16
    42 00000157 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000015B 5F                  <1>  pop edi
    45 0000015C 58                  <1>  pop eax
    53                                      set_vect 0x0E, int_pf           ; 割り込み処理の登録：ページフォルト
    30 0000015D 50                  <1>  push eax
    31 0000015E 57                  <1>  push edi
    32                              <1> 
    33 0000015F BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000164 B8[BD0A0000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000169 668907              <1>  mov [edi + 0], ax
    41 0000016C C1E810              <1>  shr eax, 16
    42 0000016F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 00000173 5F                  <1>  pop edi
    45 00000174 58                  <1>  pop eax
    54                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    30 00000175 50                  <1>  push eax
    31 00000176 57                  <1>  push edi
    32                              <1> 
    33 00000177 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 0000017C B8[56090000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000181 668907              <1>  mov [edi + 0], ax
    41 00000184 C1E810              <1>  shr eax, 16
    42 00000187 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 0000018B 5F                  <1>  pop edi
    45 0000018C 58                  <1>  pop eax
    55                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    30 0000018D 50                  <1>  push eax
    31 0000018E 57                  <1>  push edi
    32                              <1> 
    33 0000018F BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 00000194 B8[35160000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 00000199 668907              <1>  mov [edi + 0], ax
    41 0000019C C1E810              <1>  shr eax, 16
    42 0000019F 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001A3 5F                  <1>  pop edi
    45 000001A4 58                  <1>  pop eax
    56                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    30 000001A5 50                  <1>  push eax
    31 000001A6 57                  <1>  push edi
    32                              <1> 
    33 000001A7 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001AC B8[F8150000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001B1 668907              <1>  mov [edi + 0], ax
    41 000001B4 C1E810              <1>  shr eax, 16
    42 000001B7 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001BB 5F                  <1>  pop edi
    45 000001BC 58                  <1>  pop eax
    57                                      set_vect 0x81, trap_gate_81, word 0xEF00    ; トラップゲートの登録:1文字出力
    30 000001BD 50                  <1>  push eax
    31 000001BE 57                  <1>  push edi
    32                              <1> 
    33 000001BF BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001C4 B8[B4170000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 000001C9 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001CF 668907              <1>  mov [edi + 0], ax
    41 000001D2 C1E810              <1>  shr eax, 16
    42 000001D5 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001D9 5F                  <1>  pop edi
    45 000001DA 58                  <1>  pop eax
    58                                      set_vect 0x82, trap_gate_82, word 0xEF00    ; トラップゲートの登録:点の描画
    30 000001DB 50                  <1>  push eax
    31 000001DC 57                  <1>  push edi
    32                              <1> 
    33 000001DD BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    34 000001E2 B8[C2170000]        <1>  mov eax, %2
    35                              <1> 
    36                              <1>  %if 3 == %0
    37 000001E7 66C7470400EF        <1>  mov [edi + 4], %3
    38                              <1>  %endif
    39                              <1> 
    40 000001ED 668907              <1>  mov [edi + 0], ax
    41 000001F0 C1E810              <1>  shr eax, 16
    42 000001F3 66894706            <1>  mov [edi + 6], ax
    43                              <1> 
    44 000001F7 5F                  <1>  pop edi
    45 000001F8 58                  <1>  pop eax
    59                                  
    60                                      ; デバイスの割り込み許可
    61 000001F9 6A10E8211400006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    61 00000202 C404               
    62 00000204 E833150000                  cdecl int_en_timer0             ; タイマー割り込み許可
    63                                  
    64                                      ; IMR（割り込みマスクレジスタ）の設定
    65                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    49 00000209 B0F8                <1>  mov al, %2
    50 0000020B E621                <1>  out %1, al
    66                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    49 0000020D B0FE                <1>  mov al, %2
    50 0000020F E6A1                <1>  out %1, al
    67                                  
    68                                      ; ページングの有効化
    69 00000211 B800501000                  mov eax, CR3_BASE
    70 00000216 0F22D8                      mov cr3, eax                    ; ページテーブルの登録
    71                                  
    72 00000219 0F20C0                      mov eax, cr0
    73 0000021C 0D00000080                  or eax, (1 << 31)               ; CR0 | PG      ページングを有効化
    74 00000221 0F22C0                      mov cr0, eax
    75 00000224 EB00                        jmp $ + 2                       ; パイプラインのクリア
    76                                  
    77 00000226 FB                          sti                             ; 割り込み許可
    78                                  
    79 00000227 6A0D6A3FE8E40D0000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    79 00000230 6683C408           
    80 00000234 6A046A3FE8580E0000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    80 0000023D 6683C408           
    81 00000241 68[89020000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    81 00000249 00006A0E6A19E8030E-
    81 00000252 00006683C410       
    82                                  
    83                                  
    84                                  
    85                                  .10L:
    86                                      ; 回転する棒の表示
    87 00000258 E8EE140000                  cdecl draw_rotation_bar
    88                                  
    89                                      ; キーコードの取得
    90 0000025D 68[9C020000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    90 00000263 [5C160000]E8081400-
    90 0000026B 006683C408         
    91 00000270 83F800                      cmp eax, 0
    92 00000273 7412                        je .10E
    93                                  
    94                                      ; キーコードの表示
    95 00000275 68[5C160000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    95 0000027D 02E8561400006683C4-
    95 00000286 0C                 
    96                                  
    97                                  .10E:
    98 00000287 EBCF                        jmp .10L
    99                                  
   100 00000289 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
   100 00000292 65726E656C212000   
   101                                  
   102 0000029A 00<rep 2h>              ALIGN 4, db 0
   103 0000029C 00000000                .int_key: dd 0
   104                                  
   105                                  ALIGN 4, db 0
   106 000002A0 00000000                FONT_ADR: dd 0
   107 000002A4 00000000                RTC_TIME: dd 0
   108                                  
   109                                  ; タスク
   110                                  %include "descriptor.s"
   111                              <1> ; ローカルディスクリプタテーブル
   112 000002A8 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   113 000002B0 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   114 000002B8 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   115 000002C0 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   116 000002C8 FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   117 000002D0 FFFF000000FACF00    <1> .cs_task_2: dq 0x00CFFA000000FFFF   ; CODE 4G
   118 000002D8 FFFF000000F2CF00    <1> .ds_task_2: dq 0x00CFF2000000FFFF   ; DATA 4G
   119 000002E0 FFFF000000FACF00    <1> .cs_task_3: dq 0x00CFFA000000FFFF   ; CODE 4G
   120 000002E8 FFFF000000F2CF00    <1> .ds_task_3: dq 0x00CFF2000000FFFF   ; DATA 4G
   121 000002F0 FFFF000000F2CF00    <1> .ds_task_4: dq 0x00CFF2000000FFFF   ; DATA 4G
   122 000002F8 FFFF000000F2CF00    <1> .ds_task_5: dq 0x00CFF2000000FFFF   ; DATA 4G
   123 00000300 FFFF000000F2CF00    <1> .ds_task_6: dq 0x00CFF2000000FFFF   ; DATA 4G
   124                              <1> .end:
   125                              <1> 
   126                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   127                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   128                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   129                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   130                              <1> CS_TASK_2 equ (.cs_task_2 - LDT) | 4 | 3; タスク2用CSセレクタ
   131                              <1> DS_TASK_2 equ (.ds_task_2 - LDT) | 4 | 3; タスク2用DSセレクタ
   132                              <1> CS_TASK_3 equ (.cs_task_3 - LDT) | 4 | 3; タスク3用CSセレクタ
   133                              <1> DS_TASK_3 equ (.ds_task_3 - LDT) | 4 | 3; タスク3用DSセレクタ
   134                              <1> DS_TASK_4 equ (.ds_task_4 - LDT) | 4 | 3; タスク4用DSセレクタ
   135                              <1> DS_TASK_5 equ (.ds_task_5 - LDT) | 4 | 3; タスク5用DSセレクタ
   136                              <1> DS_TASK_6 equ (.ds_task_6 - LDT) | 4 | 3; タスク6用DSセレクタ
   137                              <1> 
   138                              <1> LDT_LIMIT equ .end        - LDT - 1
   139                              <1> 
   140                              <1> ; グローバルディスクリプタテーブル
   141 00000308 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   142 00000310 FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   143 00000318 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   144 00000320 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   145 00000328 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   146 00000330 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   147 00000338 6700000000890000    <1> .tss_2:     dq 0x0000890000000067   ; TSSディスクリプタ
   148 00000340 6700000000890000    <1> .tss_3:     dq 0x0000890000000067   ; TSS_3ディスクリプタ
   149 00000348 6700000000890000    <1> .tss_4:     dq 0x0000890000000067   ; TSS_4ディスクリプタ
   150 00000350 6700000000890000    <1> .tss_5:     dq 0x0000890000000067   ; TSS_5ディスクリプタ
   151 00000358 6700000000890000    <1> .tss_6:     dq 0x0000890000000067   ; TSS_6ディスクリプタ
   152 00000360 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   153                              <1> .end:
   154                              <1> 
   155                              <1> CS_KERNEL equ .cs_kernel - GDT
   156                              <1> DS_KERNEL equ .ds_kernel - GDT
   157                              <1> SS_LDT    equ .ldt       - GDT
   158                              <1> SS_TASK_0 equ .tss_0     - GDT
   159                              <1> SS_TASK_1 equ .tss_1     - GDT
   160                              <1> SS_TASK_2 equ .tss_2     - GDT
   161                              <1> SS_TASK_3 equ .tss_3     - GDT
   162                              <1> SS_TASK_4 equ .tss_4     - GDT
   163                              <1> SS_TASK_5 equ .tss_5     - GDT
   164                              <1> SS_TASK_6 equ .tss_6     - GDT
   165                              <1> SS_GATE_0 equ .call_gate - GDT
   166                              <1> 
   167 00000368 5F00                <1> GDTR: dw GDT.end - GDT - 1
   168 0000036A [08030000]          <1>       dd GDT
   169                              <1> 
   170                              <1> ; TSS
   171                              <1> TSS_0:
   172 0000036E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   173 00000372 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   174 00000376 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   175 0000037A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   176 0000037E 00000000            <1> .ss1:       dd 0                    ;* 16:
   177 00000382 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   178 00000386 00000000            <1> .ss2:       dd 0                    ;* 24:
   179 0000038A 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   180 0000038E 00000000            <1> .eip:       dd 0                    ;  32:EIP
   181 00000392 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   182 00000396 00000000            <1> .eax:       dd 0                    ;  40:EAX
   183 0000039A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   184 0000039E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   185 000003A2 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   186 000003A6 00000000            <1> .esp:       dd 0                    ;  56:ESP
   187 000003AA 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   188 000003AE 00000000            <1> .esi:       dd 0                    ;  64:ESI
   189 000003B2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   190 000003B6 00000000            <1> .es:        dd 0                    ;  72:ES
   191 000003BA 00000000            <1> .cs:        dd 0                    ;  76:CS
   192 000003BE 00000000            <1> .ss:        dd 0                    ;  80:SS
   193 000003C2 00000000            <1> .ds:        dd 0                    ;  84:DS
   194 000003C6 00000000            <1> .fs:        dd 0                    ;  88:FS
   195 000003CA 00000000            <1> .gs:        dd 0                    ;  92:GS
   196 000003CE 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   197 000003D2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   198 000003D6 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   199                              <1> 
   200                              <1> TSS_1:
   201 00000446 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   202 0000044A 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   203 0000044E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   204 00000452 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   205 00000456 00000000            <1> .ss1:       dd 0                    ;* 16:
   206 0000045A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   207 0000045E 00000000            <1> .ss2:       dd 0                    ;* 24:
   208 00000462 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   209 00000466 [2E0B0000]          <1> .eip:       dd task_1               ;  32:EIP
   210 0000046A 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   211 0000046E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   212 00000472 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   213 00000476 00000000            <1> .edx:       dd 0                    ;  48:EDX
   214 0000047A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   215 0000047E 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   216 00000482 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   217 00000486 00000000            <1> .esi:       dd 0                    ;  64:ESI
   218 0000048A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   219 0000048E 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   220 00000492 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   221 00000496 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   222 0000049A 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   223 0000049E 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   224 000004A2 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   225 000004A6 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   226 000004AA 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   227 000004AE 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   228                              <1> 
   229                              <1> TSS_2:
   230 0000051E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   231 00000522 003A1000            <1> .esp0:      dd SP_TASK_2 - 512      ;*  4:ESP0
   232 00000526 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   233 0000052A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   234 0000052E 00000000            <1> .ss1:       dd 0                    ;* 16:
   235 00000532 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   236 00000536 00000000            <1> .ss2:       dd 0                    ;* 24:
   237 0000053A 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   238 0000053E [630B0000]          <1> .eip:       dd task_2               ;  32:EIP
   239 00000542 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   240 00000546 00000000            <1> .eax:       dd 0                    ;  40:EAX
   241 0000054A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   242 0000054E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   243 00000552 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   244 00000556 003C1000            <1> .esp:       dd SP_TASK_2            ;  56:ESP
   245 0000055A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   246 0000055E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   247 00000562 00000000            <1> .edi:       dd 0                    ;  68:EDI
   248 00000566 37000000            <1> .es:        dd DS_TASK_2            ;  72:ES
   249 0000056A 2F000000            <1> .cs:        dd CS_TASK_2            ;  76:CS
   250 0000056E 37000000            <1> .ss:        dd DS_TASK_2            ;  80:SS
   251 00000572 37000000            <1> .ds:        dd DS_TASK_2            ;  84:DS
   252 00000576 37000000            <1> .fs:        dd DS_TASK_2            ;  88:FS
   253 0000057A 37000000            <1> .gs:        dd DS_TASK_2            ;  92:GS
   254 0000057E 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   255 00000582 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   256 00000586 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   257                              <1> 
   258                              <1> TSS_3:
   259 000005F6 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   260 000005FA 003E1000            <1> .esp0:      dd SP_TASK_3 - 512      ;*  4:ESP0
   261 000005FE 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   262 00000602 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   263 00000606 00000000            <1> .ss1:       dd 0                    ;* 16:
   264 0000060A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   265 0000060E 00000000            <1> .ss2:       dd 0                    ;* 24:
   266 00000612 00501000            <1> .cr3:       dd CR3_BASE             ;  28:CR3(PDBR)
   267 00000616 [340C0000]          <1> .eip:       dd task_3               ;  32:EIP
   268 0000061A 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   269 0000061E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   270 00000622 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   271 00000626 00000000            <1> .edx:       dd 0                    ;  48:EDX
   272 0000062A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   273 0000062E 00401000            <1> .esp:       dd SP_TASK_3            ;  56:ESP
   274 00000632 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   275 00000636 00000000            <1> .esi:       dd 0                    ;  64:ESI
   276 0000063A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   277 0000063E 47000000            <1> .es:        dd DS_TASK_3            ;  72:ES
   278 00000642 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   279 00000646 47000000            <1> .ss:        dd DS_TASK_3            ;  80:SS
   280 0000064A 47000000            <1> .ds:        dd DS_TASK_3            ;  84:DS
   281 0000064E 47000000            <1> .fs:        dd DS_TASK_3            ;  88:FS
   282 00000652 47000000            <1> .gs:        dd DS_TASK_3            ;  92:GS
   283 00000656 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   284 0000065A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   285 0000065E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   286                              <1> 
   287                              <1> TSS_4:
   288 000006CE 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   289 000006D2 00421000            <1> .esp0:      dd SP_TASK_4 - 512      ;*  4:ESP0
   290 000006D6 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   291 000006DA 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   292 000006DE 00000000            <1> .ss1:       dd 0                    ;* 16:
   293 000006E2 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   294 000006E6 00000000            <1> .ss2:       dd 0                    ;* 24:
   295 000006EA 00002000            <1> .cr3:       dd CR3_TASK_4           ;  28:CR3(PDBR)
   296 000006EE [340C0000]          <1> .eip:       dd task_3               ;  32:EIP
   297 000006F2 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   298 000006F6 00000000            <1> .eax:       dd 0                    ;  40:EAX
   299 000006FA 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   300 000006FE 00000000            <1> .edx:       dd 0                    ;  48:EDX
   301 00000702 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   302 00000706 00441000            <1> .esp:       dd SP_TASK_4            ;  56:ESP
   303 0000070A 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   304 0000070E 00000000            <1> .esi:       dd 0                    ;  64:ESI
   305 00000712 00000000            <1> .edi:       dd 0                    ;  68:EDI
   306 00000716 4F000000            <1> .es:        dd DS_TASK_4            ;  72:ES
   307 0000071A 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   308 0000071E 4F000000            <1> .ss:        dd DS_TASK_4            ;  80:SS
   309 00000722 4F000000            <1> .ds:        dd DS_TASK_4            ;  84:DS
   310 00000726 4F000000            <1> .fs:        dd DS_TASK_4            ;  88:FS
   311 0000072A 4F000000            <1> .gs:        dd DS_TASK_4            ;  92:GS
   312 0000072E 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   313 00000732 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   314 00000736 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   315                              <1> 
   316                              <1> TSS_5:
   317 000007A6 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   318 000007AA 00461000            <1> .esp0:      dd SP_TASK_5 - 512      ;*  4:ESP0
   319 000007AE 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   320 000007B2 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   321 000007B6 00000000            <1> .ss1:       dd 0                    ;* 16:
   322 000007BA 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   323 000007BE 00000000            <1> .ss2:       dd 0                    ;* 24:
   324 000007C2 00202000            <1> .cr3:       dd CR3_TASK_5           ;  28:CR3(PDBR)
   325 000007C6 [340C0000]          <1> .eip:       dd task_3               ;  32:EIP
   326 000007CA 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   327 000007CE 00000000            <1> .eax:       dd 0                    ;  40:EAX
   328 000007D2 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   329 000007D6 00000000            <1> .edx:       dd 0                    ;  48:EDX
   330 000007DA 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   331 000007DE 00481000            <1> .esp:       dd SP_TASK_5            ;  56:ESP
   332 000007E2 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   333 000007E6 00000000            <1> .esi:       dd 0                    ;  64:ESI
   334 000007EA 00000000            <1> .edi:       dd 0                    ;  68:EDI
   335 000007EE 57000000            <1> .es:        dd DS_TASK_5            ;  72:ES
   336 000007F2 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   337 000007F6 57000000            <1> .ss:        dd DS_TASK_5            ;  80:SS
   338 000007FA 57000000            <1> .ds:        dd DS_TASK_5            ;  84:DS
   339 000007FE 57000000            <1> .fs:        dd DS_TASK_5            ;  88:FS
   340 00000802 57000000            <1> .gs:        dd DS_TASK_5            ;  92:GS
   341 00000806 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   342 0000080A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   343 0000080E 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   344                              <1> 
   345                              <1> TSS_6:
   346 0000087E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   347 00000882 004A1000            <1> .esp0:      dd SP_TASK_6 - 512      ;*  4:ESP0
   348 00000886 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   349 0000088A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   350 0000088E 00000000            <1> .ss1:       dd 0                    ;* 16:
   351 00000892 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   352 00000896 00000000            <1> .ss2:       dd 0                    ;* 24:
   353 0000089A 00402000            <1> .cr3:       dd CR3_TASK_6           ;  28:CR3(PDBR)
   354 0000089E [340C0000]          <1> .eip:       dd task_3               ;  32:EIP
   355 000008A2 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   356 000008A6 00000000            <1> .eax:       dd 0                    ;  40:EAX
   357 000008AA 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   358 000008AE 00000000            <1> .edx:       dd 0                    ;  48:EDX
   359 000008B2 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   360 000008B6 004C1000            <1> .esp:       dd SP_TASK_6            ;  56:ESP
   361 000008BA 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   362 000008BE 00000000            <1> .esi:       dd 0                    ;  64:ESI
   363 000008C2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   364 000008C6 5F000000            <1> .es:        dd DS_TASK_6            ;  72:ES
   365 000008CA 3F000000            <1> .cs:        dd CS_TASK_3            ;  76:CS
   366 000008CE 5F000000            <1> .ss:        dd DS_TASK_6            ;  80:SS
   367 000008D2 5F000000            <1> .ds:        dd DS_TASK_6            ;  84:DS
   368 000008D6 5F000000            <1> .fs:        dd DS_TASK_6            ;  88:FS
   369 000008DA 5F000000            <1> .gs:        dd DS_TASK_6            ;  92:GS
   370 000008DE 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   371 000008E2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   372 000008E6 00<rep 70h>         <1> .fp_save:   times 108 + 4 db 0      ; FPUコンテキスト保存領域
   111                                  %include "modules/int_timer.s"
   112                              <1> int_timer:
   113 00000956 60                  <1>     pushad
   114 00000957 1E                  <1>     push ds
   115 00000958 06                  <1>     push es
   116                              <1> 
   117                              <1>     ; データ用セグメントの設定
   118 00000959 66B81000            <1>     mov ax, 0x0010
   119 0000095D 8ED8                <1>     mov ds, ax
   120 0000095F 8EC0                <1>     mov es, ax
   121                              <1> 
   122                              <1>     ; TICK
   123 00000961 FF05[D8090000]      <1>     inc dword [TIMER_COUNT]
   124                              <1> 
   125                              <1>     ; 割り込みフラグをクリア(EOI)
   126                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    49 00000967 B020                <2>  mov al, %2
    50 00000969 E620                <2>  out %1, al
   127                              <1> 
   128                              <1>     ; タスクの切り替え(task0 -> task1 -> task2 -> task0 -> ...)
   129 0000096B 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   130 0000096F 6683F820            <1>     cmp ax, SS_TASK_0   ; switch(ax)
   131 00000973 7427                <1>     je .11L
   132 00000975 6683F828            <1>     cmp ax, SS_TASK_1
   133 00000979 742A                <1>     je .12L
   134 0000097B 6683F830            <1>     cmp ax, SS_TASK_2
   135 0000097F 742D                <1>     je .13L
   136 00000981 6683F838            <1>     cmp ax, SS_TASK_3
   137 00000985 7430                <1>     je .14L
   138 00000987 6683F840            <1>     cmp ax, SS_TASK_4
   139 0000098B 7433                <1>     je .15L
   140 0000098D 6683F848            <1>     cmp ax, SS_TASK_5
   141 00000991 7436                <1>     je .16L
   142                              <1> 
   143 00000993 EA000000002000      <1>     jmp SS_TASK_0:0     ; default:
   144 0000099A EB36                <1>     jmp .10E
   145                              <1> .11L:                   ; case SS_TASK_0:
   146 0000099C EA000000002800      <1>     jmp SS_TASK_1:0     ; タスク1に切り替え
   147 000009A3 EB2D                <1>     jmp .10E
   148                              <1> .12L:                   ; case SS_TASK_1:
   149 000009A5 EA000000003000      <1>     jmp SS_TASK_2:0     ; タスク2に切り替え
   150 000009AC EB24                <1>     jmp .10E
   151                              <1> .13L:                   ; case SS_TASK_2:
   152 000009AE EA000000003800      <1>     jmp SS_TASK_3:0     ; タスク3に切り替え
   153 000009B5 EB1B                <1>     jmp .10E
   154                              <1> .14L:                   ; case SS_TASK_3:
   155 000009B7 EA000000004000      <1>     jmp SS_TASK_4:0     ; タスク4に切り替え
   156 000009BE EB12                <1>     jmp .10E
   157                              <1> .15L:                   ; case SS_TASK_4:
   158 000009C0 EA000000004800      <1>     jmp SS_TASK_5:0     ; タスク5に切り替え
   159 000009C7 EB09                <1>     jmp .10E
   160                              <1> .16L:                   ; case SS_TASK_5:
   161 000009C9 EA000000005000      <1>     jmp SS_TASK_6:0     ; タスク6に切り替え
   162 000009D0 EB00                <1>     jmp .10E
   163                              <1> .10E:
   164                              <1> 
   165 000009D2 07                  <1>     pop es
   166 000009D3 1F                  <1>     pop ds
   167 000009D4 61                  <1>     popad
   168                              <1> 
   169 000009D5 CF                  <1>     iret
   170                              <1> 
   171 000009D6 00<rep 2h>          <1> ALIGN 4, db 0
   172 000009D8 0000000000000000    <1> TIMER_COUNT: dq 0
   173                              <1> 
   112                                  %include "modules/paging.s"
   113                              <1> init_page:
   114 000009E0 60                  <1>     pusha
   115                              <1> 
   116 000009E1 6800501000E8970000- <1>     cdecl page_set_4m, CR3_BASE     ; ページ変換テーブルの作成 タスク3用
   116 000009EA 006683C404          <1>
   117 000009EF 6800002000E8890000- <1>     cdecl page_set_4m, CR3_TASK_4   ; ページ変換テーブルの作成 タスク4用
   117 000009F8 006683C404          <1>
   118 000009FD 6800202000E87B0000- <1>     cdecl page_set_4m, CR3_TASK_5   ; ページ変換テーブルの作成 タスク5用
   118 00000A06 006683C404          <1>
   119 00000A0B 6800402000E86D0000- <1>     cdecl page_set_4m, CR3_TASK_6   ; ページ変換テーブルの作成 タスク5用
   119 00000A14 006683C404          <1>
   120 00000A19 C7051C641000000000- <1>     mov [0x0010_6000 + 0x107 * 4], dword 0   ; 0x0010_7000をページ不在に設定
   120 00000A22 00                  <1>
   121                              <1> 
   122                              <1>     ; アドレス変換設定
   123 00000A23 C7051C142000078010- <1>     mov [0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7   ; タスク4用
   123 00000A2C 00                  <1>
   124 00000A2D C7051C342000079010- <1>     mov [0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7   ; タスク5用
   124 00000A36 00                  <1>
   125 00000A37 C7051C54200007A010- <1>     mov [0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7   ; タスク6用
   125 00000A40 00                  <1>
   126                              <1> 
   127                              <1>     ; 描画パラメータの設定
   128 00000A41 6A4068[740D0000]68- <1>     cdecl memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size    ; タスク4用
   128 00000A49 00801000E8480E0000- <1>
   128 00000A52 6683C40C            <1>
   129 00000A56 6A4068[B40D0000]68- <1>     cdecl memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size    ; タスク5用
   129 00000A5E 00901000E8330E0000- <1>
   129 00000A67 6683C40C            <1>
   130 00000A6B 6A4068[F40D0000]68- <1>     cdecl memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size    ; タスク6用
   130 00000A73 00A01000E81E0E0000- <1>
   130 00000A7C 6683C40C            <1>
   131                              <1> 
   132 00000A80 61                  <1>     popa
   133                              <1> 
   134 00000A81 C3                  <1>     ret
   135                              <1> 
   136                              <1> 
   137                              <1> page_set_4m:
   138 00000A82 55                  <1>     push ebp
   139 00000A83 89E5                <1>     mov ebp, esp
   140                              <1> 
   141 00000A85 60                  <1>     pusha
   142                              <1> 
   143                              <1>     ; ページディレクトリの作成
   144 00000A86 FC                  <1>     cld                     ; dfをクリア (+方向)
   145 00000A87 8B7D08              <1>     mov edi, [ebp + 8]      ; EDI = ページディレクトリの先頭
   146 00000A8A B800000000          <1>     mov eax, 0x00000000     ; EAX = 0   P = 0
   147 00000A8F B900040000          <1>     mov ecx, 1024           ; count = 1024
   148 00000A94 F3AB                <1>     rep stosd               ; while(ecx--) *(edi++) = eax;
   149                              <1> 
   150                              <1>     ; 先頭のエントリを設定
   151 00000A96 89F8                <1>     mov eax, edi            ; ページディレクトリの直後
   152 00000A98 2500F0FFFF          <1>     and eax, ~0x0000_0FFF   ; 物理アドレスの指定
   153 00000A9D 83C807              <1>     or eax, 7               ; U/S R/W Pの許可
   154 00000AA0 898700F0FFFF        <1>     mov [edi - (1024 * 4)], eax ; 先頭のエントリを設定
   155                              <1> 
   156                              <1>     ; ページングテーブルの設定(リニア)
   157 00000AA6 B807000000          <1>     mov eax, 0x00000007     ; 物理アドレスの指定とU/S R/W Pの許可
   158 00000AAB B900040000          <1>     mov ecx, 1024           ; count = 1024
   159                              <1> .10L:                       ; do {
   160 00000AB0 AB                  <1>     stosd                   ;   *(edi++) = eax
   161 00000AB1 0500100000          <1>     add eax, 0x00001000     ;   eax += 0x1000
   162 00000AB6 E2F8                <1>     loop .10L               ; } while(--count)
   163                              <1> 
   164 00000AB8 61                  <1>     popa
   165                              <1> 
   166 00000AB9 89EC                <1>     mov esp, ebp
   167 00000ABB 5D                  <1>     pop ebp
   168                              <1> 
   169 00000ABC C3                  <1>     ret
   113                                  %include "modules/int_pf.s"
   114                              <1> int_pf:
   115 00000ABD 6687DB              <1>     xchg bx, bx
   116 00000AC0 55                  <1>     push ebp
   117 00000AC1 89E5                <1>     mov ebp, esp
   118                              <1> 
   119 00000AC3 60                  <1>     pusha
   120 00000AC4 1E                  <1>     push ds
   121 00000AC5 06                  <1>     push es
   122                              <1> 
   123                              <1>     ; データ用セグメントセレクタの設定
   124 00000AC6 66B81000            <1>     mov ax, 0x0010
   125 00000ACA 8ED8                <1>     mov ds, ax
   126 00000ACC 8EC0                <1>     mov es, ax
   127                              <1> 
   128                              <1>     ; 例外を生成したアドレスの確認
   129 00000ACE 0F20D0              <1>     mov eax, cr2            ; ページフォルトの際アクセスしようとしたアドレス
   130 00000AD1 2500F0FFFF          <1>     and eax, ~0x0FFF        ; 4KB 以内のアクセス
   131 00000AD6 3D00701000          <1>     cmp eax, 0x0010_7000    ; if(アクセスしようとしたアドレス!=0x0010_7000) goto .10F
   132 00000ADB 7521                <1>     jne .10F
   133                              <1> 
   134 00000ADD C7051C641000077010- <1>     mov [0x00106000 + 0x107 * 4], dword 0x00107007  ; ページの有効化
   134 00000AE6 00                  <1>
   135 00000AE7 6A4068[340D0000]68- <1>     cdecl memcpy, 0x0010_7000, DRAW_PARAM, rose_size; 描画パラメータのコピー
   135 00000AEF 00701000E8A20D0000- <1>
   135 00000AF8 6683C40C            <1>
   136 00000AFC EB15                <1>     jmp .10E
   137                              <1> 
   138                              <1> .10F:
   139                              <1>     ; スタックの調整
   140 00000AFE 83C404              <1>     add esp, 4      ; pop es
   141 00000B01 83C404              <1>     add esp, 4      ; pop ds
   142 00000B04 61                  <1>     popa
   143 00000B05 5D                  <1>     pop ebp
   144                              <1> 
   145                              <1>     ; タスク終了処理
   146 00000B06 9C                  <1>     pushf           ; EFLAGS
   147 00000B07 0E                  <1>     push cs         ; CS
   148 00000B08 68[3F140000]        <1>     push int_stop   ; スタック表示処理
   149                              <1> 
   150 00000B0D B8[1D0B0000]        <1>     mov eax, .s0    ; 割り込み種別
   151 00000B12 CF                  <1>     iret
   152                              <1> 
   153                              <1> .10E:
   154                              <1> 
   155 00000B13 07                  <1>     pop es
   156 00000B14 1F                  <1>     pop ds
   157 00000B15 61                  <1>     popa
   158                              <1> 
   159 00000B16 89EC                <1>     mov esp, ebp
   160 00000B18 5D                  <1>     pop ebp
   161                              <1> 
   162 00000B19 83C404              <1>     add esp, 4  ; エラーコードの破棄
   163 00000B1C CF                  <1>     iret
   164                              <1> 
   165 00000B1D 203C20504147452046- <1> .s0 db " < PAGE FAULT > ", 0
   165 00000B26 41554C54203E2000    <1>
   114                                  %include "tasks/task_1.s"
   115                              <1> task_1:
   116                              <1>     ; 文字列の表示(コールゲート)
   117                              <1>     ;cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   118 00000B2E 68[5C0B0000]6A076A- <1>     cdecl draw_str, 63, 0, 0x07, .s0 ; draw_str();
   118 00000B36 006A3FE81905000066- <1>
   118 00000B3F 83C410              <1>
   119                              <1> 
   120                              <1> .10L:
   121                              <1>     ; 時刻の表示
   122 00000B42 A1[A4020000]        <1>     mov eax, [RTC_TIME]
   123 00000B47 5068000700006A006A- <1>     cdecl draw_time, 72, 0, 0x0700, eax
   123 00000B50 48E8740800006683C4- <1>
   123 00000B59 10                  <1>
   124                              <1> 
   125 00000B5A EBE6                <1>     jmp .10L
   126                              <1> 
   127                              <1>     ; データ
   128 00000B5C 5461736B2D3100      <1> .s0 db "Task-1", 0
   115                                  %include "tasks/task_2.s"
   116                              <1> task_2:
   117 00000B63 68[260C0000]6A076A- <1>     cdecl draw_str, 63, 1, 0x07, .s0
   117 00000B6B 016A3FE8E404000066- <1>
   117 00000B74 83C410              <1>
   118                              <1> 
   119 00000B77 DB05[140C0000]      <1>     fild dword [.c1000]     ; st0 = [.c1000]
   120 00000B7D D9EB                <1>     fldpi           ; st0 = pi
   121 00000B7F DA35[180C0000]      <1>     fidiv dword [.c180]     ; st0 /= [.c180]
   122 00000B85 D9EB                <1>     fldpi
   123 00000B87 DCC0                <1>     fadd st0, st0   ; st0 += st0
   124 00000B89 D9EE                <1>     fldz            ; st0 = 0
   125                              <1>     ; st0   0
   126                              <1>     ; st1   2*pi
   127                              <1>     ; st2   pi/180
   128                              <1>     ; st3   1000
   129                              <1> 
   130                              <1> .10L:
   131 00000B8B D8C2                <1>     fadd st0, st2   ; st0 += st2
   132 00000B8D D9F8                <1>     fprem           ; st0 %= st1
   133 00000B8F D9C0                <1>     fld st0         ; st0をコピー
   134 00000B91 D9FE                <1>     fsin            ; st0 = sin(st0)
   135 00000B93 D8CC                <1>     fmul st0, st4   ; st0 *= 1000
   136 00000B95 DF35[1C0C0000]      <1>     fbstp [.bcd]
   137                              <1> 
   138 00000B9B A1[1C0C0000]        <1>     mov eax, [.bcd]
   139 00000BA0 89C3                <1>     mov ebx, eax
   140                              <1> 
   141 00000BA2 250F0F0000          <1>     and eax, 0x0F0F ; 上位４ビットをマスク
   142 00000BA7 0D30300000          <1>     or eax, 0x3030  ; 上位４ビットに0x3に設定
   143                              <1> 
   144 00000BAC C1EB04              <1>     shr ebx, 4
   145 00000BAF 81E30F0F0000        <1>     and ebx, 0x0F0F ; 上位４ビットをマスク
   146 00000BB5 81CB30300000        <1>     or ebx, 0x3030  ; 上位４ビットに0x3に設定
   147                              <1> 
   148 00000BBB 883D[2E0C0000]      <1>     mov [.s2 + 0], bh   ; 1桁目
   149 00000BC1 8825[300C0000]      <1>     mov [.s3 + 0], ah   ; 小数1桁目
   150 00000BC7 881D[310C0000]      <1>     mov [.s3 + 1], bl   ; 小数2桁目
   151 00000BCD A2[320C0000]        <1>     mov [.s3 + 2], al   ; 小数3桁目
   152                              <1> 
   153 00000BD2 B807000000          <1>     mov eax, 7
   154 00000BD7 0FA305[250C0000]    <1>     bt [.bcd + 9], eax  ; cf = .bcd+9 から7ビット目
   155 00000BDE 7209                <1>     jc .10F
   156                              <1> 
   157 00000BE0 C605[2D0C0000]2B    <1>     mov [.s1 + 0], byte '+'
   158 00000BE7 EB07                <1>     jmp .10E
   159                              <1> .10F:
   160 00000BE9 C605[2D0C0000]2D    <1>     mov [.s1 + 0], byte '-'
   161                              <1> .10E:
   162                              <1> 
   163 00000BF0 68[2D0C0000]6A076A- <1>     cdecl draw_str, 72, 1, 0x07, .s1
   163 00000BF8 016A48E85704000066- <1>
   163 00000C01 83C410              <1>
   164                              <1> 
   165                              <1>     ; ウェイト
   166 00000C04 6A14E8710C00006683- <1>     cdecl wait_tick, 20
   166 00000C0D C404                <1>
   167                              <1> 
   168 00000C0F E977FFFFFF          <1>     jmp .10L
   169                              <1> 
   170                              <1> 
   171                              <1> ALIGN 4, db 0
   172 00000C14 E8030000            <1> .c1000: dd 1000
   173 00000C18 B4000000            <1> .c180:  dd 180
   174 00000C1C 00<rep Ah>          <1> .bcd: times 10 db 0x00
   175 00000C26 5461736B2D3200      <1> .s0     db "Task-2", 0
   176 00000C2D 2D                  <1> .s1:    db "-"
   177 00000C2E 302E                <1> .s2:    db "0."
   178 00000C30 30303000            <1> .s3:    db "000", 0
   116                                  %include "tasks/task_3.s"
   117                              <1> task_3:
   118 00000C34 89E5                <1>     mov ebp, esp
   119                              <1> 
   120 00000C36 6A00                <1>     push dword 0    ; x0    x座標原点
   121 00000C38 6A00                <1>     push dword 0    ; y0    y座標原点
   122 00000C3A 6A00                <1>     push dword 0    ; x     x座標描画
   123 00000C3C 6A00                <1>     push dword 0    ; y     y座標描画
   124 00000C3E 6A00                <1>     push dword 0    ; r     角度
   125                              <1> 
   126                              <1>     ; 初期化
   127                              <1>     ;mov esi, DRAW_PARAM ; esi = 描画パラメータ
   128 00000C40 BE00701000          <1>     mov esi, 0x0010_7000
   129                              <1> 
   130                              <1>     ; タイトル表示
   131 00000C45 8B06                <1>     mov eax, [esi + rose.x0]
   132 00000C47 8B5E04              <1>     mov ebx, [esi + rose.y0]
   133                              <1> 
   134 00000C4A C1E803              <1>     shr eax, 3                      ; EAX = EAX /  8 x座標を文字位置に変換
   135 00000C4D C1EB04              <1>     shr ebx, 4                      ; EBX = EBX / 16 y座標を文字位置に変換
   136 00000C50 4B                  <1>     dec ebx                         ; 1文字分上に移動
   137 00000C51 8B4E24              <1>     mov ecx, [esi + rose.color_s]   ; 文字色
   138 00000C54 8D5630              <1>     lea edx, [esi + rose.title]     ; タイトル
   139                              <1> 
   140 00000C57 52515350E8F7030000- <1>     cdecl draw_str, eax, ebx, ecx, edx
   140 00000C60 6683C410            <1>
   141                              <1> 
   142                              <1>     ; X軸の中点
   143 00000C64 8B06                <1>     mov eax, [esi + rose.x0]
   144 00000C66 8B5E08              <1>     mov ebx, [esi + rose.x1]
   145 00000C69 29C3                <1>     sub ebx, eax            ; ebx = x0 - x1
   146 00000C6B D1EB                <1>     shr ebx, 1              ; ebx /= 1
   147 00000C6D 01C3                <1>     add ebx, eax            ; ebx += x0
   148 00000C6F 895DFC              <1>     mov [ebp - 4], ebx      ; x0 = 原点
   149                              <1> 
   150                              <1>     ; Y軸の中点
   151 00000C72 8B4604              <1>     mov eax, [esi + rose.y0]
   152 00000C75 8B5E0C              <1>     mov ebx, [esi + rose.y1]
   153 00000C78 29C3                <1>     sub ebx, eax            ; ebx = y0 - y1
   154 00000C7A D1EB                <1>     shr ebx, 1              ; ebx /= 1
   155 00000C7C 01C3                <1>     add ebx, eax            ; ebx += y0
   156 00000C7E 895DF8              <1>     mov [ebp - 8], ebx      ; y0 = 原点
   157                              <1> 
   158                              <1>     ; X軸の描画
   159 00000C81 8B06                <1>     mov eax, [esi + rose.x0]
   160 00000C83 8B5DF8              <1>     mov ebx, [ebp - 8]
   161 00000C86 8B4E08              <1>     mov ecx, [esi + rose.x1]
   162                              <1> 
   163 00000C89 FF761853515350E855- <1>     cdecl draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]
   163 00000C92 0500006683C414      <1>
   164                              <1> 
   165                              <1>     ; Y軸の描画
   166 00000C99 8B4604              <1>     mov eax, [esi + rose.y0]
   167 00000C9C 8B5DFC              <1>     mov ebx, [ebp - 4]
   168 00000C9F 8B4E0C              <1>     mov ecx, [esi + rose.y1]
   169                              <1> 
   170 00000CA2 FF761C51535053E83C- <1>     cdecl draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]
   170 00000CAB 0500006683C414      <1>
   171                              <1> 
   172                              <1>     ; 枠の描画
   173 00000CB2 8B06                <1>     mov eax, [esi + rose.x0]
   174 00000CB4 8B5E04              <1>     mov ebx, [esi + rose.y0]
   175 00000CB7 8B4E08              <1>     mov ecx, [esi + rose.x1]
   176 00000CBA 8B560C              <1>     mov edx, [esi + rose.y1]
   177                              <1> 
   178 00000CBD FF762052515350E8D0- <1>     cdecl draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]
   178 00000CC6 0500006683C414      <1>
   179                              <1> 
   180                              <1>     ; 振幅をX軸の約95%とする
   181 00000CCD 8B4608              <1>     mov eax, [esi + rose.x1]
   182 00000CD0 2B06                <1>     sub eax, [esi + rose.x0]
   183 00000CD2 D1E8                <1>     shr eax, 1                  ; eax = 原点から右端の長さ
   184 00000CD4 89C3                <1>     mov ebx, eax
   185 00000CD6 C1EB04              <1>     shr ebx, 4
   186 00000CD9 29D8                <1>     sub eax, ebx
   187                              <1> 
   188                              <1>     ; FPUの初期化（バラ曲線の初期化）
   189 00000CDB FF7614FF761050E84D- <1>     cdecl fpu_rose_init            , eax            , dword [esi + rose.n]            , dword [esi + rose.d]
   189 00000CE4 0100006683C40C      <1>
   193                              <1> 
   194                              <1>     ; メインループ
   195                              <1> .10L:
   196                              <1>     ; 座標計算
   197 00000CEB 8D5DF4              <1>     lea ebx, [ebp -12]  ; EBX = &x;
   198 00000CEE 8D4DF0              <1>     lea ecx, [ebp -16]  ; ECX = &y;
   199 00000CF1 8B45EC              <1>     mov eax, [ebp -20]  ; EAX = r;
   200                              <1> 
   201 00000CF4 505153E85201000066- <1>     cdecl fpu_rose_update            , ebx            , ecx            , eax
   201 00000CFD 83C40C              <1>
   205                              <1> 
   206                              <1>     ; 角度更新(r = r % 36000)
   207 00000D00 BA00000000          <1>     mov edx, 0
   208 00000D05 40                  <1>     inc eax
   209 00000D06 BBA08C0000          <1>     mov ebx, 360 * 100
   210 00000D0B F7F3                <1>     div ebx             ; EDX = EDX:EAX % EBX
   211 00000D0D 8955EC              <1>     mov [ebp -20], edx
   212                              <1> 
   213                              <1>     ; ドット描画
   214 00000D10 8B4DF4              <1>     mov ecx, [ebp -12]  ; x座標
   215 00000D13 8B55F0              <1>     mov edx, [ebp -16]  ; y座標
   216                              <1> 
   217 00000D16 034DFC              <1>     add ecx, [ebp - 4]  ; x座標原点
   218 00000D19 0355F8              <1>     add edx, [ebp - 8]  ; y座標原点
   219                              <1> 
   220 00000D1C 8B5E28              <1>     mov ebx, [esi + rose.color_f]   ; 表示色
   221 00000D1F CD82                <1>     int 0x82            ; sys_call_82(表示色, X, Y)
   222                              <1> 
   223                              <1>     ; ウェイト
   224 00000D21 6A02E8540B00006683- <1>     cdecl wait_tick, 2
   224 00000D2A C404                <1>
   225                              <1> 
   226                              <1>     ; ドット描画(消去)
   227 00000D2C 8B5E2C              <1>     mov ebx, [esi + rose.color_b]   ; 背景色
   228 00000D2F CD82                <1>     int 0x82           ; sys_call_82(表示色, X, Y)
   229                              <1> 
   230 00000D31 EBB8                <1>     jmp .10L
   231                              <1> 
   232                              <1> 
   233 00000D33 00                  <1> ALIGN 4, db 0
   234                              <1> DRAW_PARAM:
   235                              <1> .t3:
   236                              <1>     istruc rose
   237 00000D34 20000000            <1>         at rose.x0,         dd  32
   238 00000D38 20000000            <1>         at rose.y0,         dd  32
   239 00000D3C D0000000            <1>         at rose.x1,         dd 208
   240 00000D40 D0000000            <1>         at rose.y1,         dd 208
   241                              <1> 
   242 00000D44 02000000            <1>         at rose.n,          dd 2
   243 00000D48 01000000            <1>         at rose.d,          dd 1
   244                              <1> 
   245 00000D4C 07000000            <1>         at rose.color_x,    dd 0x007
   246 00000D50 07000000            <1>         at rose.color_y,    dd 0x007
   247 00000D54 0F000000            <1>         at rose.color_z,    dd 0x00F
   248 00000D58 0F030000            <1>         at rose.color_s,    dd 0x30F
   249 00000D5C 0F000000            <1>         at rose.color_f,    dd 0x00F
   250 00000D60 03000000            <1>         at rose.color_b,    dd 0x003
   251                              <1> 
   252 00000D64 5461736B2D3300      <1>         at rose.title,      db "Task-3", 0
   253 00000D6B 00<rep 9h>          <1>     iend
   254                              <1> .t4:
   255                              <1>     istruc rose
   256 00000D74 F8000000            <1>         at rose.x0,         dd 248
   257 00000D78 20000000            <1>         at rose.y0,         dd  32
   258 00000D7C A8010000            <1>         at rose.x1,         dd 424
   259 00000D80 D0000000            <1>         at rose.y1,         dd 208
   260                              <1> 
   261 00000D84 03000000            <1>         at rose.n,          dd 3
   262 00000D88 01000000            <1>         at rose.d,          dd 1
   263                              <1> 
   264 00000D8C 07000000            <1>         at rose.color_x,    dd 0x007
   265 00000D90 07000000            <1>         at rose.color_y,    dd 0x007
   266 00000D94 0F000000            <1>         at rose.color_z,    dd 0x00F
   267 00000D98 0F030000            <1>         at rose.color_s,    dd 0x30F
   268 00000D9C 0F000000            <1>         at rose.color_f,    dd 0x00F
   269 00000DA0 03000000            <1>         at rose.color_b,    dd 0x003
   270                              <1> 
   271 00000DA4 5461736B2D3400      <1>         at rose.title,      db "Task-4", 0
   272 00000DAB 00<rep 9h>          <1>     iend
   273                              <1> .t5:
   274                              <1>     istruc rose
   275 00000DB4 20000000            <1>         at rose.x0,         dd  32
   276 00000DB8 10010000            <1>         at rose.y0,         dd 272
   277 00000DBC D0000000            <1>         at rose.x1,         dd 208
   278 00000DC0 C0010000            <1>         at rose.y1,         dd 448
   279                              <1> 
   280 00000DC4 02000000            <1>         at rose.n,          dd 2
   281 00000DC8 06000000            <1>         at rose.d,          dd 6
   282                              <1> 
   283 00000DCC 07000000            <1>         at rose.color_x,    dd 0x007
   284 00000DD0 07000000            <1>         at rose.color_y,    dd 0x007
   285 00000DD4 0F000000            <1>         at rose.color_z,    dd 0x00F
   286 00000DD8 0F030000            <1>         at rose.color_s,    dd 0x30F
   287 00000DDC 0F000000            <1>         at rose.color_f,    dd 0x00F
   288 00000DE0 03000000            <1>         at rose.color_b,    dd 0x003
   289                              <1> 
   290 00000DE4 5461736B2D3500      <1>         at rose.title,      db "Task-5", 0
   291 00000DEB 00<rep 9h>          <1>     iend
   292                              <1> .t6:
   293                              <1>     istruc rose
   294 00000DF4 F8000000            <1>         at rose.x0,         dd 248
   295 00000DF8 10010000            <1>         at rose.y0,         dd 272
   296 00000DFC A8010000            <1>         at rose.x1,         dd 424
   297 00000E00 C0010000            <1>         at rose.y1,         dd 448
   298                              <1> 
   299 00000E04 04000000            <1>         at rose.n,          dd 4
   300 00000E08 06000000            <1>         at rose.d,          dd 6
   301                              <1> 
   302 00000E0C 07000000            <1>         at rose.color_x,    dd 0x007
   303 00000E10 07000000            <1>         at rose.color_y,    dd 0x007
   304 00000E14 0F000000            <1>         at rose.color_z,    dd 0x00F
   305 00000E18 0F030000            <1>         at rose.color_s,    dd 0x30F
   306 00000E1C 0F000000            <1>         at rose.color_f,    dd 0x00F
   307 00000E20 03000000            <1>         at rose.color_b,    dd 0x003
   308                              <1> 
   309 00000E24 5461736B2D3600      <1>         at rose.title,      db "Task-6", 0
   310 00000E2B 00<rep 9h>          <1>     iend
   311                              <1> 
   312                              <1> fpu_rose_init:
   313 00000E34 55                  <1>     push ebp
   314 00000E35 89E5                <1>     mov ebp, esp
   315                              <1> 
   316 00000E37 68B4000000          <1>     push dword 180
   317                              <1> 
   318 00000E3C D9EB                <1>     fldpi
   319 00000E3E DA75FC              <1>     fidiv dword [ebp - 4]   ; 180
   320 00000E41 DB450C              <1>     fild  dword [ebp +12]   ; n
   321 00000E44 DA7510              <1>     fidiv dword [ebp +16]   ; d
   322 00000E47 DB4508              <1>     fild  dword [ebp + 8]   ; A
   323                              <1> 
   324 00000E4A 89EC                <1>     mov esp, ebp
   325 00000E4C 5D                  <1>     pop ebp
   326                              <1> 
   327 00000E4D C3                  <1>     ret
   328                              <1> 
   329                              <1> fpu_rose_update:
   330                              <1> ; px: 計算したX座標を格納するアドレス
   331                              <1> ; py: 計算したY座標を格納するアドレス
   332                              <1> ; t:  角度
   333                              <1> 
   334 00000E4E 55                  <1>     push ebp
   335 00000E4F 89E5                <1>     mov ebp, esp
   336                              <1> 
   337 00000E51 50                  <1>     push eax
   338 00000E52 53                  <1>     push ebx
   339                              <1> 
   340 00000E53 8B4508              <1>     mov eax, [ebp +  8] ; eax = px
   341 00000E56 8B5D0C              <1>     mov ebx, [ebp + 12] ; ebx = py
   342                              <1> 
   343 00000E59 DB4510              <1>     fild dword [ebp +16]    ; t
   344 00000E5C D8CB                <1>     fmul st0, st3           ; st0 = t * r = θ
   345 00000E5E D9C0                <1>     fld st0
   346                              <1> 
   347 00000E60 D9FB                <1>     fsincos                 ; st0 = cos(st0)
   348                              <1>                             ; st1 = sin(st0)
   349                              <1>     
   350 00000E62 D9CA                <1>     fxch st2                ; st0 <-> st2
   351 00000E64 D8CC                <1>     fmul st0, st4           ; st0 = kθ
   352 00000E66 D9FE                <1>     fsin                    ; st0 = sin(kθ)
   353 00000E68 D8CB                <1>     fmul st0, st3           ; st0 = Asin(kθ)
   354                              <1> 
   355                              <1>     ; st0 = Asin(kθ)
   356                              <1>     ; st1 = sin(θ)
   357                              <1>     ; st2 = cos(θ)
   358                              <1>     ; st3 = A
   359                              <1>     ; st4 = k
   360                              <1>     ; st5 = r
   361                              <1> 
   362 00000E6A D9CA                <1>     fxch st2                ; cosをst0に
   363 00000E6C D8CA                <1>     fmul st0, st2           ; st0 *= Asin(kθ)
   364 00000E6E DB18                <1>     fistp dword [eax]       ; st0を[eax]にpop
   365                              <1> 
   366 00000E70 DEC9                <1>     fmulp st1, st0          ; st1 *= st0; st0をpop
   367 00000E72 D9E0                <1>     fchs                    ; st0 * (-1)
   368 00000E74 DB1B                <1>     fistp dword [ebx]       ; st0を[ebx]にpop
   369                              <1> 
   370 00000E76 5B                  <1>     pop ebx
   371 00000E77 58                  <1>     pop eax
   372 00000E78 89EC                <1>     mov esp, ebp
   373 00000E7A 5D                  <1>     pop ebp
   374                              <1> 
   375 00000E7B C3                  <1>     ret
   117                                  
   118                                  ; モジュール
   119                                  %include "../modules/protect/vga.s"
   120                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   121                              <1> ; plane: 読み込みプレーン
   122 00000E7C 55                  <1>     push ebp
   123 00000E7D 89E5                <1>     mov ebp, esp
   124                              <1> 
   125 00000E7F 50                  <1>     push eax
   126 00000E80 52                  <1>     push edx
   127                              <1> 
   128                              <1> 
   129                              <1>     ; 読み込みプレーンの選択
   130 00000E81 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   131 00000E84 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   132 00000E87 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   133 00000E89 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   134 00000E8D 66EF                <1>     out dx, ax
   135                              <1> 
   136 00000E8F 5A                  <1>     pop edx
   137 00000E90 58                  <1>     pop eax
   138                              <1> 
   139 00000E91 89EC                <1>     mov esp, ebp
   140 00000E93 5D                  <1>     pop ebp
   141                              <1> 
   142 00000E94 C3                  <1>     ret
   143                              <1> 
   144                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   145                              <1> ; plane 書き込みプレーン
   146 00000E95 55                  <1>     push ebp
   147 00000E96 89E5                <1>     mov ebp, esp
   148                              <1> 
   149 00000E98 6650                <1>     push ax
   150 00000E9A 6652                <1>     push dx
   151                              <1> 
   152                              <1> 
   153                              <1>     ; 書き込みプレーンの選択
   154 00000E9C 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   155 00000E9F 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   156 00000EA2 B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   157 00000EA4 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   158 00000EA8 66EF                <1>     out dx, ax
   159                              <1> 
   160                              <1> 
   161 00000EAA 665A                <1>     pop dx
   162 00000EAC 6658                <1>     pop ax
   163                              <1> 
   164 00000EAE 89EC                <1>     mov esp, ebp
   165 00000EB0 5D                  <1>     pop ebp
   166                              <1> 
   167 00000EB1 C3                  <1>     ret
   168                              <1> 
   169                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   170                              <1> ; font FONTアドレス
   171                              <1> ; vram VRAMアドレス
   172                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   173                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   174 00000EB2 55                  <1>     push ebp
   175 00000EB3 89E5                <1>     mov ebp, esp
   176                              <1>     
   177 00000EB5 50                  <1>     push eax
   178 00000EB6 53                  <1>     push ebx
   179 00000EB7 51                  <1>     push ecx
   180 00000EB8 52                  <1>     push edx
   181 00000EB9 57                  <1>     push edi
   182 00000EBA 56                  <1>     push esi
   183                              <1> 
   184 00000EBB 8B7508              <1>     mov esi, [ebp + 8]          ; font
   185 00000EBE 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   186 00000EC1 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   187 00000EC5 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   188                              <1>     ; bh = 背景色 bl = 前景色
   189                              <1> 
   190 00000EC9 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   191 00000ECB 0F94C6              <1>     setz dh         ; dh = zf
   192 00000ECE FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   193                              <1> 
   194 00000ED0 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   195 00000ED2 0F94C2              <1>     setz dl         ; dl = zf
   196 00000ED5 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   197                              <1> 
   198                              <1>     ; 16ドットフォントのコピー
   199 00000ED7 FC                  <1>     cld             ; アドレス加算モード
   200                              <1> 
   201 00000ED8 B910000000          <1>     mov ecx, 16
   202                              <1> .10L:
   203                              <1>     ; フォントマスクの作成
   204 00000EDD AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   205 00000EDE 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   206 00000EE0 F6D4                <1>     not ah
   207                              <1> 
   208                              <1>     ; 前景色
   209 00000EE2 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   210                              <1> 
   211                              <1>     ; 背景色
   212 00000EE4 F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   213 00000EEA 7404                <1>     jz .11F
   214                              <1>     ; 透過on
   215 00000EEC 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   216 00000EEE EB02                <1>     jmp .11E
   217                              <1> .11F:                   ; 透過off
   218 00000EF0 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   219                              <1> .11E:
   220                              <1>     
   221                              <1>     ; 前景色と背景色を合成
   222 00000EF2 08E0                <1>     or al, ah           ; al = 背景 | 前景
   223                              <1> 
   224                              <1>     ; 新しい値を出力
   225 00000EF4 8807                <1>     mov [edi], al
   226                              <1> 
   227 00000EF6 83C750              <1>     add edi, 80      ; 1行すすめる
   228 00000EF9 E2E2                <1>     loop .10L
   229                              <1> .10E:
   230                              <1> 
   231 00000EFB 5E                  <1>     pop esi
   232 00000EFC 5F                  <1>     pop edi
   233 00000EFD 5A                  <1>     pop edx
   234 00000EFE 59                  <1>     pop ecx
   235 00000EFF 5B                  <1>     pop ebx
   236 00000F00 58                  <1>     pop eax
   237                              <1> 
   238 00000F01 89EC                <1>     mov esp, ebp
   239 00000F03 5D                  <1>     pop ebp
   240                              <1> 
   241 00000F04 C3                  <1>     ret
   242                              <1> 
   243                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   244                              <1> ; bitデータ
   245                              <1> ; vram VRAMアドレス
   246                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   247                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   248 00000F05 55                  <1>     push ebp
   249 00000F06 89E5                <1>     mov ebp, esp
   250                              <1>     
   251 00000F08 50                  <1>     push eax
   252 00000F09 53                  <1>     push ebx
   253 00000F0A 57                  <1>     push edi
   254                              <1> 
   255 00000F0B 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   256 00000F0E 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   257 00000F12 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   258                              <1>     ; bl = 前景色
   259                              <1> 
   260                              <1>     ; 常に透過モード
   261 00000F16 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   262 00000F18 0F94C3              <1>     setz bl         ; dl = zf
   263 00000F1B FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   264                              <1> 
   265                              <1>     ; マスク
   266 00000F1D 8A4508              <1>     mov al, [ebp + 8]   ; bit
   267 00000F20 88C4                <1>     mov ah, al      ; ah ~= al
   268 00000F22 F6D4                <1>     not ah
   269                              <1> 
   270 00000F24 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   271 00000F26 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   272 00000F28 08E0                <1>     or al, ah           ; 背景と前景を合成
   273 00000F2A 8807                <1>     mov [edi], al       ; プレーンに書き込み
   274                              <1>     
   275                              <1> 
   276 00000F2C 5F                  <1>     pop edi
   277 00000F2D 5B                  <1>     pop ebx
   278 00000F2E 58                  <1>     pop eax
   279                              <1> 
   280 00000F2F 89EC                <1>     mov esp, ebp
   281 00000F31 5D                  <1>     pop ebp
   282                              <1> 
   283 00000F32 C3                  <1>     ret
   120                                  %include "../modules/protect/draw_char.s"
   121                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   122                              <1> ; col 列（0～79）
   123                              <1> ; row 行（0～29）
   124                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   125                              <1> ; ch 文字
   126                              <1> 
   127 00000F33 55                  <1>     push ebp
   128 00000F34 89E5                <1>     mov ebp, esp
   129                              <1> 
   130 00000F36 50                  <1>     push eax
   131 00000F37 53                  <1>     push ebx
   132 00000F38 51                  <1>     push ecx
   133 00000F39 52                  <1>     push edx
   134 00000F3A 56                  <1>     push esi
   135 00000F3B 57                  <1>     push edi
   136                              <1> 
   137                              <1> %ifdef USE_TEST_AND_SET
   138 00000F3C 68[10100000]E88908- <1>     cdecl test_and_set, IN_USE  ; リソースが開くのを待つ
   138 00000F44 00006683C404        <1>
   139                              <1> %endif
   140                              <1> 
   141                              <1>     ; コピー元フォントアドレスを設定
   142 00000F4A 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   143 00000F4E C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   144 00000F51 0335[A0020000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   145                              <1> 
   146                              <1>     ; コピー先アドレスを取得
   147                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   148                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   149 00000F57 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   150 00000F5A C1E708              <1>     shl edi, 8
   151 00000F5D 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   152 00000F64 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   153                              <1> 
   154                              <1>     ; 1文字分のフォントを出力
   155 00000F67 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   156                              <1> 
   157                              <1>     ; 輝度I
   158 00000F6B 6A03E80AFFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   158 00000F74 C404                <1>
   159 00000F76 6A08E818FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   159 00000F7F C404                <1>
   160 00000F81 536A085756E827FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   160 00000F8A FF6683C410          <1>
   161                              <1> 
   162                              <1>     ; 赤R
   163 00000F8F 6A02E8E6FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   163 00000F98 C404                <1>
   164 00000F9A 6A04E8F4FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   164 00000FA3 C404                <1>
   165 00000FA5 536A045756E803FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   165 00000FAE FF6683C410          <1>
   166                              <1> 
   167                              <1>     ; 緑G
   168 00000FB3 6A01E8C2FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   168 00000FBC C404                <1>
   169 00000FBE 6A02E8D0FEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   169 00000FC7 C404                <1>
   170 00000FC9 536A025756E8DFFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   170 00000FD2 FF6683C410          <1>
   171                              <1> 
   172                              <1>     ; 青B
   173 00000FD7 6A00E89EFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   173 00000FE0 C404                <1>
   174 00000FE2 6A01E8ACFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   174 00000FEB C404                <1>
   175 00000FED 536A015756E8BBFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   175 00000FF6 FF6683C410          <1>
   176                              <1> 
   177                              <1> %ifdef USE_TEST_AND_SET
   178 00000FFB C705[10100000]0000- <1>     mov [IN_USE], dword 0   ; 変数のクリア
   178 00001003 0000                <1>
   179                              <1> %endif
   180                              <1> 
   181 00001005 5F                  <1> 	pop		edi
   182 00001006 5E                  <1> 	pop		esi
   183 00001007 5A                  <1> 	pop		edx
   184 00001008 59                  <1> 	pop		ecx
   185 00001009 5B                  <1> 	pop		ebx
   186 0000100A 58                  <1> 	pop		eax
   187                              <1> 
   188 0000100B 89EC                <1>     mov esp, ebp
   189 0000100D 5D                  <1>     pop ebp
   190                              <1> 
   191 0000100E C3                  <1>     ret
   192                              <1> 
   193                              <1> %ifdef USE_TEST_AND_SET
   194 0000100F 00                  <1> ALIGN 4, db 0
   195 00001010 00000000            <1> IN_USE:  dd 0
   196                              <1> %endif
   121                                  %include "../modules/protect/draw_font.s"
   122                              <1> draw_font:  ; void draw_font(col, row);
   123                              <1> ; col 列
   124                              <1> ; row 行
   125 00001014 55                  <1>     push ebp
   126 00001015 89E5                <1>     mov ebp, esp
   127                              <1> 
   128 00001017 50                  <1>     push eax
   129 00001018 53                  <1>     push ebx
   130 00001019 51                  <1>     push ecx
   131 0000101A 57                  <1>     push edi
   132 0000101B 56                  <1>     push esi
   133                              <1> 
   134                              <1> 
   135 0000101C 8B7508              <1>     mov esi, [ebp + 8]  ; x
   136 0000101F 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   137                              <1> 
   138 00001022 B900000000          <1>     mov ecx, 0
   139                              <1> .10L:
   140 00001027 81F900010000        <1>     cmp ecx, 256
   141 0000102D 731F                <1>     jae .10E
   142                              <1> 
   143 0000102F 89C8                <1>     mov eax, ecx
   144 00001031 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   145 00001034 01F0                <1>     add eax, esi    ; eax += x
   146                              <1> 
   147 00001036 89CB                <1>     mov ebx, ecx
   148 00001038 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   149 0000103B 01FB                <1>     add ebx, edi    ; ebx += y
   150                              <1> 
   151 0000103D 516A075350E8ECFEFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   151 00001046 FF6683C410          <1>
   152                              <1> 
   153 0000104B 41                  <1>     inc ecx
   154 0000104C EBD9                <1>     jmp .10L
   155                              <1> .10E:
   156                              <1> 
   157 0000104E 5E                  <1>     pop esi
   158 0000104F 5F                  <1>     pop edi
   159 00001050 59                  <1>     pop ecx
   160 00001051 5B                  <1>     pop ebx
   161 00001052 58                  <1>     pop eax
   162                              <1> 
   163 00001053 89EC                <1>     mov esp, ebp
   164 00001055 5D                  <1>     pop ebp
   165                              <1> 
   166 00001056 C3                  <1>     ret
   122                                  %include "../modules/protect/draw_str.s"
   123                              <1> draw_str:   ;void draw_str(col, row, color, p);
   124                              <1> ; col: 列
   125                              <1> ; row: 行
   126                              <1> ; color: 描画色
   127                              <1> ; p: 文字列のアドレス
   128 00001057 55                  <1>     push ebp
   129 00001058 89E5                <1>     mov ebp, esp
   130                              <1> 
   131 0000105A 50                  <1>     push eax
   132 0000105B 53                  <1>     push ebx
   133 0000105C 51                  <1>     push ecx
   134 0000105D 52                  <1>     push edx
   135 0000105E 56                  <1>     push esi
   136                              <1> 
   137                              <1> 
   138 0000105F 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   139 00001062 8B550C              <1>     mov edx, [ebp +12]  ; row
   140 00001065 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   141 00001069 8B7514              <1>     mov esi, [ebp +20]  ; p
   142                              <1> 
   143 0000106C FC                  <1>     cld
   144                              <1> .10L:
   145 0000106D AC                  <1>     lodsb
   146 0000106E 3C00                <1>     cmp al, 0
   147 00001070 741A                <1>     je .10E
   148                              <1> 
   149                              <1> %ifdef USE_SYSTEM_CALL
   150 00001072 CD81                <1>     int 0x81
   151                              <1> %else
   152                              <1>     cdecl draw_char, ecx, edx, ebx, eax
   153                              <1> %endif
   154                              <1> 
   155 00001074 41                  <1>     inc ecx
   156 00001075 83F950              <1>     cmp ecx, 80
   157 00001078 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   158 0000107A B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   159 0000107F 42                  <1>     inc edx
   160 00001080 83FA1E              <1>     cmp edx, 30
   161 00001083 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   162 00001085 BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   163                              <1> .12E:
   164 0000108A EBE1                <1>     jmp .10L
   165                              <1> .10E:
   166                              <1> 
   167 0000108C 5E                  <1>     pop esi
   168 0000108D 5A                  <1>     pop edx
   169 0000108E 59                  <1>     pop ecx
   170 0000108F 5B                  <1>     pop ebx
   171 00001090 58                  <1>     pop eax
   172                              <1> 
   173 00001091 89EC                <1>     mov esp, ebp
   174 00001093 5D                  <1>     pop ebp
   175                              <1> 
   176 00001094 C3                  <1>     ret
   123                                  %include "../modules/protect/draw_color_bar.s"
   124                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   125                              <1> ; col: 列
   126                              <1> ; row: 行
   127 00001095 55                  <1>     push ebp
   128 00001096 89E5                <1>     mov ebp, esp
   129                              <1> 
   130 00001098 50                  <1>     push eax
   131 00001099 53                  <1>     push ebx
   132 0000109A 51                  <1>     push ecx
   133 0000109B 52                  <1>     push edx
   134 0000109C 56                  <1>     push esi
   135 0000109D 57                  <1>     push edi
   136                              <1> 
   137                              <1> 
   138 0000109E 8B7508              <1>     mov esi, [ebp + 8]      ; x
   139 000010A1 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   140                              <1> 
   141                              <1>     ; カラーバーを表示
   142 000010A4 B900000000          <1>     mov ecx, 0
   143                              <1> .10L:
   144 000010A9 83F910              <1>     cmp ecx, 16
   145 000010AC 732E                <1>     jae .10E
   146                              <1> 
   147                              <1>     ; 一回で8文字
   148 000010AE 89C8                <1>     mov eax, ecx
   149 000010B0 83E001              <1>     and eax, 0x01
   150 000010B3 C1E003              <1>     shl eax, 3
   151 000010B6 01F0                <1>     add eax, esi    ; col
   152                              <1> 
   153                              <1>     ; 2回に1回改行
   154 000010B8 89CB                <1>     mov ebx, ecx
   155 000010BA D1EB                <1>     shr ebx, 1
   156 000010BC 01FB                <1>     add ebx, edi    ; row
   157                              <1> 
   158                              <1>     ; 背景色を2色見たら下位次の行
   159 000010BE 89CA                <1>     mov edx, ecx
   160 000010C0 D1E2                <1>     shl edx, 1
   161 000010C2 8B92[EF100000]      <1>     mov edx, [.t0 + edx]    ; color
   162                              <1> 
   163 000010C8 68[E6100000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   163 000010D0 E882FFFFFF6683C410  <1>
   164                              <1> 
   165 000010D9 41                  <1>     inc ecx
   166 000010DA EBCD                <1>     jmp .10L
   167                              <1> .10E:
   168                              <1> 
   169 000010DC 5F                  <1>     pop edi
   170 000010DD 5E                  <1>     pop esi
   171 000010DE 5A                  <1>     pop edx
   172 000010DF 59                  <1>     pop ecx
   173 000010E0 5B                  <1>     pop ebx
   174 000010E1 58                  <1>     pop eax
   175                              <1> 
   176 000010E2 89EC                <1>     mov esp, ebp
   177 000010E4 5D                  <1>     pop ebp
   178                              <1> 
   179 000010E5 C3                  <1>     ret
   180                              <1> 
   181                              <1> 
   182 000010E6 202020202020202000  <1> .s0: db '        ', 0
   183                              <1> 
   184                              <1> .t0:
   185 000010EF 00000008            <1>     dw 0x0000, 0x0800
   186 000010F3 00010009            <1>     dw 0x0100, 0x0900
   187 000010F7 0002000A            <1>     dw 0x0200, 0x0A00
   188 000010FB 0003000B            <1>     dw 0x0300, 0x0B00
   189 000010FF 0004000C            <1>     dw 0x0400, 0x0C00
   190 00001103 0005000D            <1>     dw 0x0500, 0x0D00
   191 00001107 0006000E            <1>     dw 0x0600, 0x0E00
   192 0000110B 0007000F            <1>     dw 0x0700, 0x0F00
   124                                  %include "../modules/protect/draw_pixel.s"
   125                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   126                              <1> ; x: X座標
   127                              <1> ; y: Y座標
   128                              <1> ; color: 描画色
   129 0000110F 55                  <1>     push ebp
   130 00001110 89E5                <1>     mov ebp, esp
   131                              <1> 
   132 00001112 50                  <1>     push eax
   133 00001113 53                  <1>     push ebx
   134 00001114 51                  <1>     push ecx
   135 00001115 57                  <1>     push edi
   136                              <1> 
   137                              <1> 
   138                              <1> 
   139                              <1>     ; y座標*80->y*(640/8)
   140 00001116 8B7D0C              <1>     mov edi, [ebp +12]
   141 00001119 C1E704              <1>     shl edi, 4
   142 0000111C 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   143                              <1> 
   144                              <1>     ; x座標/8  8pixel単位の位置
   145 00001123 8B5D08              <1>     mov ebx, [ebp + 8]
   146 00001126 89D9                <1>     mov ecx, ebx
   147 00001128 C1EB03              <1>     shr ebx, 3
   148 0000112B 01DF                <1>     add edi, ebx
   149                              <1> 
   150                              <1>     ; x座標を8で割った余りからビット位置を計算
   151                              <1>     ; 8pixel中の位置
   152                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   153 0000112D 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   154 00001130 BB80000000          <1>     mov ebx, 0x80
   155 00001135 D3EB                <1>     shr ebx, cl
   156                              <1> 
   157 00001137 8B4D10              <1>     mov ecx, [ebp +16]
   158                              <1> 
   159                              <1> %ifdef	USE_TEST_AND_SET
   160 0000113A 68[10100000]E88B06- <1> 	cdecl	test_and_set, IN_USE			    ; TEST_AND_SET(IN_USE); // リソースの空き待ち
   160 00001142 00006683C404        <1>
   161                              <1> %endif
   162                              <1> 
   163                              <1>     ; プレーンごとに出力
   164 00001148 6A03E82DFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   164 00001151 C404                <1>
   165 00001153 6A08E83BFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   165 0000115C C404                <1>
   166 0000115E 516A085753E89DFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   166 00001167 FF6683C410          <1>
   167                              <1> 
   168 0000116C 6A02E809FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   168 00001175 C404                <1>
   169 00001177 6A04E817FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   169 00001180 C404                <1>
   170 00001182 516A045753E879FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   170 0000118B FF6683C410          <1>
   171                              <1> 
   172 00001190 6A01E8E5FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   172 00001199 C404                <1>
   173 0000119B 6A02E8F3FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   173 000011A4 C404                <1>
   174 000011A6 516A025753E855FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   174 000011AF FF6683C410          <1>
   175                              <1> 
   176 000011B4 6A00E8C1FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   176 000011BD C404                <1>
   177 000011BF 6A01E8CFFCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   177 000011C8 C404                <1>
   178 000011CA 516A015753E831FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   178 000011D3 FF6683C410          <1>
   179                              <1> 
   180                              <1> %ifdef	USE_TEST_AND_SET
   181 000011D8 C705[10100000]0000- <1> 	mov		[IN_USE], dword 0				    ; 変数のクリア
   181 000011E0 0000                <1>
   182                              <1> %endif
   183                              <1> 
   184 000011E2 5F                  <1>     pop edi
   185 000011E3 59                  <1>     pop ecx
   186 000011E4 5B                  <1>     pop ebx
   187 000011E5 58                  <1>     pop eax
   188                              <1> 
   189 000011E6 89EC                <1>     mov esp, ebp
   190 000011E8 5D                  <1>     pop ebp
   191                              <1> 
   192 000011E9 C3                  <1>     ret
   125                                  %include "../modules/protect/draw_line.s"
   126                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   127                              <1> ; X0 始点のＸ座標
   128                              <1> ; Y0 始点のＹ座標
   129                              <1> ; X1 終点のX座標
   130                              <1> ; Y1 終点のY座標
   131                              <1> ; color 描画色
   132 000011EA 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   133 000011EB 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   134                              <1>                     ; ----------------
   135 000011ED 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   136 000011EF 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   137 000011F1 6A00                <1>     push dword 0    ;    -12| dx    = 0
   138 000011F3 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   139 000011F5 6A00                <1>     push dword 0    ;    -20| y0    = 0
   140 000011F7 6A00                <1>     push dword 0    ;    -24| dy    = 0
   141 000011F9 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   142                              <1> 
   143 000011FB 50                  <1>     push eax        ;    -32| eax
   144 000011FC 53                  <1>     push ebx        ;    -36| ebx
   145 000011FD 51                  <1>     push ecx        ;    -40| ecx
   146 000011FE 52                  <1>     push edx        ;    -44| edx
   147 000011FF 56                  <1>     push esi        ;    -48| esi
   148 00001200 57                  <1>     push edi        ;    -52| edi
   149                              <1>     ; espはebp-52?
   150                              <1> 
   151                              <1>     ; x0とx1の距離を計算
   152 00001201 8B4508              <1>     mov eax, [ebp + 8]
   153 00001204 8B5D10              <1>     mov ebx, [ebp +16]
   154 00001207 29C3                <1>     sub ebx, eax
   155 00001209 7D09                <1>     jge .10F
   156                              <1> 
   157 0000120B F7DB                <1>     neg ebx
   158 0000120D BEFFFFFFFF          <1>     mov esi, -1
   159 00001212 EB05                <1>     jmp .10E
   160                              <1> .10F:
   161 00001214 BE01000000          <1>     mov esi, 1
   162                              <1> .10E:
   163                              <1>     
   164                              <1>     ; y0とy1の距離を計算
   165 00001219 8B4D0C              <1>     mov ecx, [ebp +12]
   166 0000121C 8B5514              <1>     mov edx, [ebp +20]
   167 0000121F 29CA                <1>     sub edx, ecx
   168 00001221 7D09                <1>     jge .20F
   169                              <1> 
   170 00001223 F7DA                <1>     neg edx
   171 00001225 BFFFFFFFFF          <1>     mov edi, -1
   172 0000122A EB05                <1>     jmp .20E
   173                              <1> .20F:
   174 0000122C BF01000000          <1>     mov edi, 1
   175                              <1> .20E:
   176                              <1>     
   177                              <1>     ; x軸
   178 00001231 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   179 00001234 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   180 00001237 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   181                              <1> 
   182                              <1>     ; y軸
   183 0000123A 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   184 0000123D 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   185 00001240 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   186                              <1> 
   187                              <1> 
   188                              <1>     ; 基準軸を決める
   189 00001243 39D3                <1>     cmp ebx, edx
   190 00001245 7F08                <1>     jg .22F
   191                              <1>     
   192 00001247 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   193 0000124A 8D7DF8              <1>     lea edi, [ebp - 8]
   194                              <1> 
   195 0000124D EB06                <1>     jmp .22E
   196                              <1> .22F:
   197                              <1>     
   198 0000124F 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   199 00001252 8D7DEC              <1>     lea edi, [ebp -20]
   200                              <1> .22E:
   201                              <1> 
   202                              <1> ; 基準軸 esi
   203                              <1> ; 相対軸 edi
   204                              <1> 
   205                              <1>     ; 繰り返し回数（基準軸のドット数）
   206 00001255 8B4EFC              <1>     mov ecx, [esi - 4]
   207 00001258 83F900              <1>     cmp ecx, 0
   208 0000125B 7505                <1>     jnz .30E
   209 0000125D B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   210                              <1> .30E:
   211                              <1> 
   212                              <1>     ; 線を描画
   213                              <1> .50L:
   214                              <1> 
   215                              <1> %ifdef USE_SYSTEM_CALL
   216 00001262 89C8                <1>     mov eax, ecx
   217 00001264 8B4DF8              <1>     mov ecx, [ebp - 8]
   218 00001267 8B55EC              <1>     mov edx, [ebp -20]
   219 0000126A 8B5D18              <1>     mov ebx, [ebp +24]
   220 0000126D CD82                <1>     int 0x82            ; sys_call()
   221 0000126F 89C1                <1>     mov ecx, eax
   222                              <1> %else
   223                              <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   226                              <1> %endif
   227                              <1> 
   228                              <1>     ; 座標更新
   229                              <1> 
   230                              <1>     ; 基準軸の更新
   231 00001271 8B46F8              <1>     mov eax, [esi - 8]
   232 00001274 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   233                              <1> 
   234                              <1>     ; 相対軸の更新
   235 00001276 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   236 00001279 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   237                              <1> 
   238 0000127C 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   239                              <1> 
   240 0000127F 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   241 00001281 7C07                <1>     jl .52E
   242 00001283 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   243                              <1> 
   244 00001285 8B5FF8              <1>     mov ebx, [edi - 8]
   245 00001288 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   246                              <1> .52E:
   247                              <1>     
   248 0000128A 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   249                              <1> 
   250 0000128D E2D3                <1>     loop .50L
   251                              <1> .50E:
   252                              <1> 
   253                              <1> 
   254 0000128F 5F                  <1>     pop edi
   255 00001290 5E                  <1>     pop esi
   256 00001291 5A                  <1>     pop edx
   257 00001292 59                  <1>     pop ecx
   258 00001293 5B                  <1>     pop ebx
   259 00001294 58                  <1>     pop eax
   260                              <1> 
   261 00001295 89EC                <1>     mov esp, ebp
   262 00001297 5D                  <1>     pop ebp
   263                              <1> 
   264 00001298 C3                  <1>     ret
   126                                  %include "../modules/protect/draw_rect.s"
   127                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   128 00001299 55                  <1>     push ebp
   129 0000129A 89E5                <1>     mov ebp, esp
   130                              <1>     
   131 0000129C 50                  <1>     push eax
   132 0000129D 53                  <1>     push ebx
   133 0000129E 51                  <1>     push ecx
   134 0000129F 52                  <1>     push edx
   135 000012A0 56                  <1>     push esi
   136                              <1> 
   137 000012A1 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   138 000012A4 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   139 000012A7 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   140 000012AA 8B5514              <1>     mov edx, [ebp +20]  ; y1
   141 000012AD 8B7518              <1>     mov esi, [ebp +24]  ; color
   142                              <1> 
   143                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   144 000012B0 39C8                <1>     cmp eax, ecx
   145 000012B2 7C01                <1>     jl .10E
   146 000012B4 91                  <1>     xchg eax, ecx
   147                              <1> .10E:
   148 000012B5 39D3                <1>     cmp ebx, edx
   149 000012B7 7C02                <1>     jl .20E
   150 000012B9 87DA                <1>     xchg ebx, edx
   151                              <1> .20E:
   152                              <1> 
   153                              <1>     ; 矩形を描画
   154 000012BB 5653515350E825FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   154 000012C4 FF6683C414          <1>
   155 000012C9 5652505350E817FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   155 000012D2 FF6683C414          <1>
   156                              <1> 
   157 000012D7 4A                  <1>     dec edx
   158 000012D8 5652515250E808FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   158 000012E1 FF6683C414          <1>
   159 000012E6 42                  <1>     inc edx
   160                              <1> 
   161 000012E7 49                  <1>     dec ecx
   162 000012E8 5652515351E8F8FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   162 000012F1 FF6683C414          <1>
   163                              <1> 
   164 000012F6 5E                  <1>     pop esi
   165 000012F7 5A                  <1>     pop edx
   166 000012F8 59                  <1>     pop ecx
   167 000012F9 5B                  <1>     pop ebx
   168 000012FA 58                  <1>     pop eax
   169                              <1>     
   170 000012FB 89EC                <1>     mov esp, ebp
   171 000012FD 5D                  <1>     pop ebp
   172                              <1> 
   173 000012FE C3                  <1>     ret
   127                                  %include "../modules/protect/itoa.s"
   128                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   129                              <1> ; num   変換する値
   130                              <1> ; buff  保存先バッファアドレス
   131                              <1> ; size  保存先バッファサイズ
   132                              <1> ; radix 基数（2, 8, 10, 16)
   133                              <1> ; flags 
   134                              <1> ;   B2: 空白を'0'で埋める
   135                              <1> ;   B1: '+/-'記号を付加する
   136                              <1> ;   B0: 値を符号付き変数として扱う
   137                              <1> 
   138 000012FF 55                  <1>     push ebp
   139 00001300 89E5                <1>     mov ebp, esp
   140                              <1> 
   141 00001302 50                  <1>     push eax
   142 00001303 53                  <1>     push ebx
   143 00001304 51                  <1>     push ecx
   144 00001305 52                  <1>     push edx
   145 00001306 56                  <1>     push esi
   146 00001307 57                  <1>     push edi
   147                              <1> 
   148                              <1> 
   149                              <1>     ; 引数取得
   150 00001308 8B4508              <1>     mov eax, [ebp + 8]    ; num
   151 0000130B 8B750C              <1>     mov esi, [ebp +12]    ; size
   152 0000130E 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   153                              <1> 
   154 00001311 89F7                <1>     mov edi, esi
   155 00001313 01CF                <1>     add edi, ecx
   156 00001315 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   157                              <1> 
   158 00001316 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   159                              <1> 
   160                              <1>     ; 符号付き判定
   161 00001319 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   162                              <1> .10Q:
   163 0000131F 7408                <1>     je .10E         ; E=Exit
   164 00001321 83F800              <1>     cmp eax, 0
   165                              <1> .12Q:
   166 00001324 7D03                <1>     jge .12E
   167 00001326 83CB02              <1>     or ebx, 0b0010
   168                              <1> .12E:
   169                              <1> .10E:
   170                              <1> 
   171                              <1>     ; 符号出力判定
   172 00001329 F7C302000000        <1>     test ebx, 0b0010
   173                              <1> .20Q:
   174 0000132F 7410                <1>     je .20E
   175 00001331 83F800              <1>     cmp eax, 0
   176                              <1> .22Q:
   177 00001334 7D07                <1>     jge .22F
   178 00001336 F7D8                <1>     neg eax
   179 00001338 C6062D              <1>     mov [esi], byte '-'
   180 0000133B EB03                <1>     jmp .22E
   181                              <1> .22F:
   182                              <1>     
   183 0000133D C6062B              <1>     mov [esi], byte '+'
   184                              <1> .22E:
   185 00001340 49                  <1>     dec ecx
   186                              <1> .20E:
   187                              <1> 
   188                              <1>     ; ASCII変換
   189 00001341 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   190                              <1> .30L:
   191 00001344 BA00000000          <1>     mov edx, 0
   192 00001349 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   193                              <1> 
   194 0000134B 89D6                <1>     mov esi, edx
   195 0000134D 8A96[77130000]      <1>     mov dl, byte [.ascii + esi]
   196                              <1> 
   197 00001353 8817                <1>     mov [edi], dl
   198 00001355 4F                  <1>     dec edi
   199                              <1> 
   200 00001356 83F800              <1>     cmp eax, 0
   201 00001359 E0E9                <1>     loopnz .30L
   202                              <1> .30E:
   203                              <1> 
   204                              <1>     ; 空欄を埋める
   205 0000135B 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   206                              <1> .40Q:
   207 0000135E 740D                <1>     je .40E
   208 00001360 B020                <1>     mov al, ' '
   209 00001362 837D1804            <1>     cmp [ebp +24], dword 0b0100
   210                              <1> .42Q:
   211 00001366 7502                <1>     jne .42E
   212 00001368 B030                <1>     mov al, '0'
   213                              <1> .42E:
   214 0000136A FD                  <1>     std         ; dimention flag = 1(-方向)
   215 0000136B F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   216                              <1> .40E:
   217                              <1> 
   218 0000136D 5F                  <1>     pop edi
   219 0000136E 5E                  <1>     pop esi
   220 0000136F 5A                  <1>     pop edx
   221 00001370 59                  <1>     pop ecx
   222 00001371 5B                  <1>     pop ebx
   223 00001372 58                  <1>     pop eax
   224                              <1> 
   225 00001373 89EC                <1>     mov esp, ebp
   226 00001375 5D                  <1>     pop ebp
   227                              <1> 
   228 00001376 C3                  <1>     ret
   229                              <1> 
   230 00001377 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   230 00001380 39414243444546      <1>
   128                                  %include "../modules/protect/rtc.s"
   129                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   130                              <1> ; dst: 保存先アドレス
   131                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   132 00001387 55                  <1>     push ebp
   133 00001388 89E5                <1>     mov ebp, esp
   134                              <1> 
   135 0000138A 50                  <1>     push eax
   136 0000138B 53                  <1>     push ebx
   137                              <1> 
   138 0000138C B00A                <1>     mov al, 0x0A    ; レジスタA
   139 0000138E E670                <1>     out 0x70, al
   140 00001390 E471                <1>     in al, 0x71
   141 00001392 A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   142 00001394 7407                <1>     je .10F
   143 00001396 B801000000          <1>     mov eax, 1      ; 更新中は失敗
   144 0000139B EB27                <1>     jmp .10E
   145                              <1> .10F:
   146                              <1> 
   147 0000139D B004                <1>     mov al, 0x04    ; 時
   148 0000139F E670                <1>     out 0x70, al    ; レジスタ設定
   149 000013A1 E471                <1>     in al, 0x71     ; 時刻読み込み
   150                              <1> 
   151 000013A3 C1E008              <1>     shl eax, 8      ; alをahに退避
   152                              <1> 
   153 000013A6 B002                <1>     mov al, 0x02    ; 分
   154 000013A8 E670                <1>     out 0x70, al    ; レジスタ設定
   155 000013AA E471                <1>     in al, 0x71     ; 時刻読み込み
   156                              <1> 
   157 000013AC C1E008              <1>     shl eax, 8      ; alをahに退避
   158                              <1> 
   159 000013AF B000                <1>     mov al, 0x00    ; 秒
   160 000013B1 E670                <1>     out 0x70, al    ; レジスタ設定
   161 000013B3 E471                <1>     in al, 0x71     ; 時刻読み込み
   162                              <1> 
   163 000013B5 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   164                              <1> 
   165 000013BA 8B5D08              <1>     mov ebx, [ebp + 8]
   166 000013BD 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   167                              <1> 
   168 000013BF B800000000          <1>     mov eax, 0
   169                              <1> .10E:
   170                              <1> 
   171 000013C4 5B                  <1>     pop ebx
   172 000013C5 58                  <1>     pop eax
   173                              <1> 
   174 000013C6 89EC                <1>     mov esp, ebp
   175 000013C8 5D                  <1>     pop ebp
   176                              <1> 
   177 000013C9 C3                  <1>     ret
   129                                  %include "../modules/protect/draw_time.s"
   130                              <1> draw_time:  ; void draw_time(col, row, color, time);
   131                              <1> ; time 時刻データ
   132 000013CA 55                  <1>     push ebp
   133 000013CB 89E5                <1>     mov ebp, esp
   134                              <1> 
   135 000013CD 50                  <1>     push eax
   136 000013CE 53                  <1>     push ebx
   137                              <1>     
   138 000013CF 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   139                              <1> 
   140 000013D2 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   141 000013D5 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   141 000013DC [3C140000]53E819FF- <1>
   141 000013E4 FFFF6683C414        <1>
   142                              <1> 
   143 000013EA 88E3                <1>     mov bl, ah          ; 分だけ
   144 000013EC 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   144 000013F3 [39140000]53E802FF- <1>
   144 000013FB FFFF6683C414        <1>
   145                              <1>     
   146 00001401 C1E810              <1>     shr eax, 16         ; 時だけ
   147 00001404 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   147 0000140B [36140000]50E8EAFE- <1>
   147 00001413 FFFF6683C414        <1>
   148                              <1> 
   149 00001419 68[36140000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   149 00001421 FF750CFF7508E82BFC- <1>
   149 0000142A FFFF6683C410        <1>
   150                              <1> 
   151 00001430 5B                  <1>     pop ebx
   152 00001431 58                  <1>     pop eax
   153                              <1> 
   154 00001432 89EC                <1>     mov esp, ebp
   155 00001434 5D                  <1>     pop ebp
   156                              <1> 
   157 00001435 C3                  <1>     ret
   158                              <1> 
   159 00001436 5A5A3A              <1> .hour: db "ZZ:"
   160 00001439 5A5A3A              <1> .min:  db "ZZ:"
   161 0000143C 5A5A00              <1> .sec:  db "ZZ", 0
   130                                  %include "../modules/protect/interrupt.s"
   131                              <1> int_stop:
   132 0000143F FB                  <1>     sti ; 割り込みを許可
   133                              <1> 
   134                              <1>     ; EAXで示される文字列を表示
   135 00001440 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   135 00001449 19E808FCFFFF6683C4- <1>
   135 00001452 10                  <1>
   136                              <1> 
   137                              <1>     ; スタックのデータを文字列に変換
   138 00001453 8B0424              <1>     mov eax, [esp + 0]
   139 00001456 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   139 0000145D [1B150000]50E898FE- <1>
   139 00001465 FFFF6683C414        <1>
   140                              <1> 
   141 0000146B 8B442404            <1>     mov eax, [esp + 4]
   142 0000146F 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   142 00001476 [2C150000]50E87FFE- <1>
   142 0000147E FFFF6683C414        <1>
   143                              <1> 
   144 00001484 8B442408            <1>     mov eax, [esp + 8]
   145 00001488 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   145 0000148F [3D150000]50E866FE- <1>
   145 00001497 FFFF6683C414        <1>
   146                              <1> 
   147 0000149D 8B44240C            <1>     mov eax, [esp +12]
   148 000014A1 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   148 000014A8 [4E150000]50E84DFE- <1>
   148 000014B0 FFFF6683C414        <1>
   149                              <1> 
   150                              <1>     ; 文字列の表示
   151 000014B6 68[14150000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   151 000014BE 00006A106A19E88EFB- <1>
   151 000014C7 FFFF6683C410        <1>
   152 000014CD 68[25150000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   152 000014D5 00006A116A19E877FB- <1>
   152 000014DE FFFF6683C410        <1>
   153 000014E4 68[36150000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   153 000014EC 00006A126A19E860FB- <1>
   153 000014F5 FFFF6683C410        <1>
   154 000014FB 68[47150000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   154 00001503 00006A136A19E849FB- <1>
   154 0000150C FFFF6683C410        <1>
   155                              <1> 
   156                              <1>     ; 無限ループ
   157 00001512 EBFE                <1>     jmp $
   158                              <1> 
   159 00001514 4553502B20303A      <1> .s1 db "ESP+ 0:"
   160 0000151B 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   160 00001524 00                  <1>
   161 00001525 2020202B20343A      <1> .s2 db "   + 4:"
   162 0000152C 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   162 00001535 00                  <1>
   163 00001536 2020202B20383A      <1> .s3 db "   + 8:"
   164 0000153D 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   164 00001546 00                  <1>
   165 00001547 2020202B31323A      <1> .s4 db "   +12:"
   166 0000154E 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   166 00001557 00                  <1>
   167                              <1> 
   168                              <1> int_default:
   169 00001558 9C                  <1>     pushf       ; EFLAGS(IF==0)
   170 00001559 0E                  <1>     push cs
   171 0000155A 68[3F140000]        <1>     push int_stop
   172                              <1> 
   173 0000155F B8[65150000]        <1>     mov eax, .s0
   174 00001564 CF                  <1>     iret
   175                              <1> 
   176 00001565 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   176 0000156E 50202020203E2000    <1>
   177                              <1> 
   178                              <1> 
   179                              <1> ; 割り込みベクタの初期化
   180 00001576 90<rep 2h>          <1> ALIGN 4
   181 00001578 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   182 0000157A 00001000            <1>       dd VECT_BASE      ; idt location
   183                              <1> 
   184                              <1> ; 割り込みテーブルを初期化
   185                              <1> init_int:
   186 0000157E 50                  <1>     push eax
   187 0000157F 53                  <1>     push ebx
   188 00001580 51                  <1>     push ecx
   189 00001581 57                  <1>     push edi
   190                              <1> 
   191                              <1>     ; 全ての割り込みにデフォルト処理を設定
   192 00001582 8D05[58150000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   193 00001588 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   194 0000158D 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   195                              <1> 
   196 0000158F B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   197 00001594 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   198                              <1> 
   199                              <1>     ; メモリに書き込み
   200                              <1> .10L:
   201 00001599 891F                <1>     mov [edi + 0], ebx
   202 0000159B 894704              <1>     mov [edi + 4], eax
   203 0000159E 83C708              <1>     add edi, 8
   204 000015A1 E2F6                <1>     loop .10L
   205                              <1> 
   206                              <1>     ; 割り込みディスクリプタの設定
   207 000015A3 0F011D[78150000]    <1>     lidt [IDTR]
   208                              <1> 
   209 000015AA 5F                  <1>     pop edi
   210 000015AB 59                  <1>     pop ecx
   211 000015AC 5B                  <1>     pop ebx
   212 000015AD 58                  <1>     pop eax
   213                              <1> 
   214 000015AE C3                  <1>     ret
   215                              <1> 
   216                              <1> 
   217                              <1> int_zero_div:
   218 000015AF 9C                  <1>     pushf
   219 000015B0 0E                  <1>     push cs
   220 000015B1 68[3F140000]        <1>     push int_stop
   221                              <1> 
   222 000015B6 B8[BC150000]        <1>     mov eax, .s0
   223 000015BB CF                  <1>     iret
   224                              <1> 
   225 000015BC 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   225 000015C5 44495620203E2000    <1>
   131                                  %include "../modules/protect/pic.s"
   132                              <1> init_pic:
   133 000015CD 50                  <1>     push eax
   134                              <1> 
   135                              <1>     ; outp ポート, データ
   136                              <1> 
   137                              <1>     ; マスタの設定
   138                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    49 000015CE B011                <2>  mov al, %2
    50 000015D0 E620                <2>  out %1, al
   139                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    49 000015D2 B020                <2>  mov al, %2
    50 000015D4 E621                <2>  out %1, al
   140                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    49 000015D6 B004                <2>  mov al, %2
    50 000015D8 E621                <2>  out %1, al
   141                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    49 000015DA B001                <2>  mov al, %2
    50 000015DC E621                <2>  out %1, al
   142                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    49 000015DE B0FF                <2>  mov al, %2
    50 000015E0 E621                <2>  out %1, al
   143                              <1> 
   144                              <1>     ; スレーブの設定
   145                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    49 000015E2 B011                <2>  mov al, %2
    50 000015E4 E6A0                <2>  out %1, al
   146                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    49 000015E6 B028                <2>  mov al, %2
    50 000015E8 E6A1                <2>  out %1, al
   147                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    49 000015EA B002                <2>  mov al, %2
    50 000015EC E6A1                <2>  out %1, al
   148                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    49 000015EE B001                <2>  mov al, %2
    50 000015F0 E6A1                <2>  out %1, al
   149                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    49 000015F2 B0FF                <2>  mov al, %2
    50 000015F4 E6A1                <2>  out %1, al
   150                              <1> 
   151 000015F6 58                  <1>     pop eax
   152                              <1> 
   153 000015F7 C3                  <1>     ret
   132                                  %include "../modules/protect/int_rtc.s"
   133                              <1> int_rtc:
   134 000015F8 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   135 000015F9 1E                  <1>     push ds
   136 000015FA 06                  <1>     push es
   137                              <1> 
   138                              <1>     ; データ用セグメントセレクタの設定
   139 000015FB 66B81000            <1>     mov ax, 0x0010
   140 000015FF 8ED8                <1>     mov ds, ax
   141 00001601 8EC0                <1>     mov es, ax
   142                              <1> 
   143                              <1>     ; RTCから時刻を取得
   144 00001603 68[A4020000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   144 0000160B FFFF6683C404        <1>
   145                              <1> 
   146                              <1>     ; RTCの割り込み要因を取得
   147                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    49 00001611 B00C                <2>  mov al, %2
    50 00001613 E670                <2>  out %1, al
   148 00001615 E471                <1>     in al, 0x71     ; RTCからデータを取得
   149                              <1> 
   150                              <1>     ; 割り込みフラグをクリア(EOI)
   151 00001617 B020                <1>     mov al, 0x20
   152 00001619 E6A0                <1>     out 0xA0, al    ; スレーブ
   153 0000161B E620                <1>     out 0x20, al    ; マスタ
   154                              <1> 
   155 0000161D 07                  <1>     pop es
   156 0000161E 1F                  <1>     pop ds
   157 0000161F 61                  <1>     popa
   158                              <1> 
   159 00001620 CF                  <1>     iret        ; 割り込み処理の終了
   160                              <1> 
   161                              <1> rtc_int_en:
   162 00001621 55                  <1>     push ebp
   163 00001622 89E5                <1>     mov ebp, esp
   164 00001624 50                  <1>     push eax
   165                              <1> 
   166                              <1>     ; 割り込み許可設定
   167                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    49 00001625 B00B                <2>  mov al, %2
    50 00001627 E670                <2>  out %1, al
   168                              <1> 
   169 00001629 E471                <1>     in al, 0x71     ; RTCからデータを取得
   170 0000162B 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   171                              <1> 
   172 0000162E E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   173                              <1> 
   174 00001630 58                  <1>     pop eax
   175                              <1> 
   176 00001631 89EC                <1>     mov esp, ebp
   177 00001633 5D                  <1>     pop ebp
   178                              <1> 
   179 00001634 C3                  <1>     ret
   133                                  %include "../modules/protect/int_keyboard.s"
   134                              <1> int_keyboard:
   135 00001635 60                  <1>     pusha
   136 00001636 1E                  <1>     push ds
   137 00001637 06                  <1>     push es
   138                              <1> 
   139                              <1>     ; データ用セグメントの設定
   140 00001638 66B81000            <1>     mov ax, 0x0010
   141 0000163C 8ED8                <1>     mov ds, ax
   142 0000163E 8EC0                <1>     mov es, ax
   143                              <1> 
   144                              <1>     ; KBCのバッファ読み取り
   145 00001640 E460                <1>     in al, 0x60
   146                              <1> 
   147                              <1>     ; キーコードの保存
   148 00001642 5068[5C160000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   148 0000164A 0000006683C408      <1>
   149                              <1> 
   150                              <1>     ; 割り込み終了コマンド送信
   151                              <1>     outp 0x20, 0x20
    49 00001651 B020                <2>  mov al, %2
    50 00001653 E620                <2>  out %1, al
   152                              <1> 
   153 00001655 07                  <1>     pop es
   154 00001656 1F                  <1>     pop ds
   155 00001657 61                  <1>     popa
   156                              <1> 
   157 00001658 CF                  <1>     iret
   158                              <1> 
   159 00001659 00<rep 3h>          <1> ALIGN 4, db 0
   160 0000165C 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   134                                  %include "../modules/protect/ring_buff.s"
   135                              <1> ring_rd:        ; int ring_rd(buff, data);
   136                              <1> ; buff リングバッファ
   137                              <1> ; data 読み込んだデータの保存先アドレス
   138                              <1> ; 戻り値: データあり(0以外), データなし(0)
   139                              <1> 
   140 00001674 55                  <1>     push ebp
   141 00001675 89E5                <1>     mov ebp, esp
   142                              <1> 
   143 00001677 50                  <1>     push eax
   144 00001678 53                  <1>     push ebx
   145 00001679 56                  <1>     push esi
   146 0000167A 57                  <1>     push edi
   147                              <1> 
   148                              <1>     ; 引数取得
   149 0000167B 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   150 0000167E 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   151                              <1> 
   152                              <1>     ; 読み込み位置を確認
   153 00001681 B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   154 00001686 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   155 00001688 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   156 0000168B 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   157                              <1> 
   158 0000168D 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   159                              <1> 
   160 00001691 8807                <1>     mov [edi], al
   161                              <1> 
   162 00001693 43                  <1>     inc ebx ; 次の読み込み位置
   163 00001694 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   164 00001697 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   165                              <1> 
   166 00001699 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   167                              <1> .10E:
   168                              <1> 
   169 0000169E 5F                  <1>     pop edi
   170 0000169F 5E                  <1>     pop esi
   171 000016A0 5B                  <1>     pop ebx
   172 000016A1 58                  <1>     pop eax
   173                              <1> 
   174 000016A2 89EC                <1>     mov esp, ebp
   175 000016A4 5D                  <1>     pop ebp
   176                              <1> 
   177 000016A5 C3                  <1>     ret
   178                              <1> 
   179                              <1> 
   180                              <1> ring_wr:    ; int ring_wr(buff, data);
   181                              <1> ; buff シリンダバッファ
   182                              <1> ; data 書き込むデータ
   183                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   184 000016A6 55                  <1>     push ebp
   185 000016A7 89E5                <1>     mov ebp, esp
   186                              <1> 
   187 000016A9 50                  <1>     push eax
   188 000016AA 53                  <1>     push ebx
   189 000016AB 51                  <1>     push ecx
   190 000016AC 56                  <1>     push esi
   191                              <1> 
   192 000016AD 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   193                              <1> 
   194                              <1>     ; 書き込み位置を確認
   195 000016B0 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   196 000016B5 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   197 000016B8 89D9                <1>     mov ecx, ebx
   198 000016BA 41                  <1>     inc ecx                         ; 次の書き込み位置
   199 000016BB 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   200                              <1> 
   201                              <1>     ; バッファフルなら処理しない
   202 000016BE 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   203 000016C0 740F                <1>     je .10E
   204                              <1> 
   205 000016C2 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   206                              <1> 
   207 000016C5 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   208 000016C9 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   209 000016CC B801000000          <1>     mov eax, 1  ; 戻り値 成功
   210                              <1> .10E:
   211                              <1> 
   212 000016D1 5E                  <1>     pop esi
   213 000016D2 59                  <1>     pop ecx
   214 000016D3 5B                  <1>     pop ebx
   215 000016D4 58                  <1>     pop eax
   216                              <1> 
   217 000016D5 89EC                <1>     mov esp, ebp
   218 000016D7 5D                  <1>     pop ebp
   219                              <1> 
   220 000016D8 C3                  <1>     ret
   221                              <1> 
   222                              <1> draw_key:
   223 000016D9 55                  <1>     push ebp
   224 000016DA 89E5                <1>     mov ebp, esp
   225                              <1> 
   226 000016DC 50                  <1>     push eax
   227 000016DD 53                  <1>     push ebx
   228 000016DE 51                  <1>     push ecx
   229 000016DF 52                  <1>     push edx
   230 000016E0 56                  <1>     push esi
   231 000016E1 57                  <1>     push edi
   232                              <1> 
   233                              <1> 
   234 000016E2 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   235 000016E5 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   236 000016E8 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   237                              <1> 
   238                              <1>     ; リングバッファの情報を取得
   239 000016EB 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   240 000016ED 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   241 000016F0 B910000000          <1>     mov ecx, RING_ITEM_SIZE
   242                              <1> 
   243                              <1> .10L:
   244 000016F5 4B                  <1>     dec ebx ; 読み込み位置
   245 000016F6 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   246 000016F9 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   247                              <1> 
   248 000016FC 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   248 00001705 68[38170000]50E8EF- <1>
   248 0000170D FBFFFF6683C414      <1>
   249 00001714 68[38170000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   249 0000171C 52E835F9FFFF6683C4- <1>
   249 00001725 10                  <1>
   250                              <1> 
   251 00001726 83C203              <1>     add edx, 3  ; 表示位置更新
   252 00001729 E2CA                <1>     loop .10L
   253                              <1> .10E:
   254                              <1> 
   255 0000172B 5F                  <1>     pop edi
   256 0000172C 5E                  <1>     pop esi
   257 0000172D 5A                  <1>     pop edx
   258 0000172E 59                  <1>     pop ecx
   259 0000172F 5B                  <1>     pop ebx
   260 00001730 58                  <1>     pop eax
   261                              <1> 
   262 00001731 89EC                <1>     mov esp, ebp
   263 00001733 5D                  <1>     pop ebp
   264                              <1> 
   265 00001734 C3                  <1>     ret
   266                              <1> 
   267 00001735 00<rep 3h>          <1> ALIGN 4, db 0
   268 00001738 2D2D2000            <1> .tmp db "-- ", 0
   135                                  %include "../modules/protect/timer.s"
   136                              <1> int_en_timer0:
   137 0000173C 50                  <1>     push eax
   138                              <1> 
   139                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    49 0000173D B034                <2>  mov al, %2
    50 0000173F E643                <2>  out %1, al
   140                              <1>     outp 0x40, 0x9C             ; 下位バイト
    49 00001741 B09C                <2>  mov al, %2
    50 00001743 E640                <2>  out %1, al
   141                              <1>     outp 0x40, 0x2E             ; 上位バイト
    49 00001745 B02E                <2>  mov al, %2
    50 00001747 E640                <2>  out %1, al
   142                              <1> 
   143 00001749 58                  <1>     pop eax
   144                              <1> 
   145 0000174A C3                  <1>     ret
   136                                  %include "../modules/protect/draw_rotation_bar.s"
   137                              <1> draw_rotation_bar:
   138 0000174B 50                  <1>     push eax
   139                              <1> 
   140 0000174C A1[D8090000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   141 00001751 C1E804              <1>     shr eax, 4              ; eax /= 4
   142 00001754 3B05[7C170000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   143 0000175A 741E                <1>     je .10E
   144                              <1> 
   145 0000175C A3[7C170000]        <1>     mov [.index], eax       ; 前回値設定
   146 00001761 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   147                              <1> 
   148 00001764 8A80[80170000]      <1>     mov al, [.table + eax]  ; 文字表示
   149 0000176A 506A0F6A1D6A00E8BD- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   149 00001773 F7FFFF6683C410      <1>
   150                              <1> 
   151                              <1> .10E:
   152                              <1> 
   153 0000177A 58                  <1>     pop eax
   154                              <1> 
   155 0000177B C3                  <1>     ret
   156                              <1> 
   157                              <1> ALIGN 4, db 0
   158 0000177C 00000000            <1> .index: dd 0        ; 前回値
   159 00001780 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   137                                  %include "../modules/protect/call_gate.s"
   138                              <1> call_gate:
   139 00001784 55                  <1>     push ebp
   140 00001785 89E5                <1>     mov ebp, esp
   141                              <1> 
   142 00001787 60                  <1>     pusha
   143 00001788 1E                  <1>     push ds
   144 00001789 06                  <1>     push es
   145                              <1> 
   146                              <1>     ; データ用セグメントの設定
   147 0000178A 66B81000            <1>     mov ax, 0x0010
   148 0000178E 8ED8                <1>     mov ds, ax
   149 00001790 8EC0                <1>     mov es, ax
   150                              <1> 
   151                              <1>     ; 文字を表示
   152 00001792 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   153 00001795 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   154 00001798 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   155 0000179B 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   156 0000179E 52515350E8B0F8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   156 000017A7 6683C410            <1>
   157                              <1> 
   158 000017AB 07                  <1>     pop es
   159 000017AC 1F                  <1>     pop ds
   160 000017AD 61                  <1>     popa
   161                              <1> 
   162 000017AE 89EC                <1>     mov esp, ebp
   163 000017B0 5D                  <1>     pop ebp
   164                              <1> 
   165                              <1>     ; コードセグメントセレクタの復帰と終了
   166 000017B1 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   138                                  %include "../modules/protect/trap_gate.s"
   139                              <1> trap_gate_81:
   140                              <1>     ; 1文字出力
   141 000017B4 50535251E876F7FFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   141 000017BD 6683C410            <1>
   142                              <1> 
   143 000017C1 CF                  <1>     iret
   144                              <1> 
   145                              <1> trap_gate_82:
   146                              <1>     ; 点の描画
   147 000017C2 535251E845F9FFFF66- <1>     cdecl draw_pixel, ecx, edx, ebx
   147 000017CB 83C40C              <1>
   148                              <1> 
   149 000017CE CF                  <1>     iret
   139                                  %include "../modules/protect/test_and_set.s"
   140                              <1> test_and_set:
   141 000017CF 55                  <1>     push ebp
   142 000017D0 89E5                <1>     mov ebp, esp
   143                              <1> 
   144 000017D2 50                  <1>     push eax
   145 000017D3 53                  <1>     push ebx
   146                              <1> 
   147                              <1>     ; テストアンドセット
   148 000017D4 B800000000          <1>     mov eax, 0
   149 000017D9 8B5D08              <1>     mov ebx, [ebp + 8]
   150                              <1> 
   151                              <1>     ; bts命令 第1引数の第2引数ビットを読み込んだあと、そのビットを1にセットする。
   152                              <1>     ; lockプレフィックス 読み込みと書き込みを分割しない
   153                              <1> .10L:
   154 000017DC F00FAB03            <1>     lock bts [ebx], eax ; cf = 書き込む前のビットの状態
   155 000017E0 7307                <1>     jnc .10E
   156                              <1> 
   157                              <1> .12L:
   158 000017E2 0FA303              <1>     bt [ebx], eax       ; cf = 現在のビットの状態
   159 000017E5 72FB                <1>     jc .12L
   160                              <1>     
   161 000017E7 EBF3                <1>     jmp .10L
   162                              <1> .10E:
   163                              <1>     
   164 000017E9 5B                  <1>     pop ebx
   165 000017EA 58                  <1>     pop eax
   166                              <1> 
   167 000017EB 89EC                <1>     mov esp, ebp
   168 000017ED 5D                  <1>     pop ebp
   169                              <1> 
   170 000017EE C3                  <1>     ret
   140                                  %include "../modules/protect/int_nm.s"
   141                              <1> get_tss_base:
   142                              <1> ; EBX: TSSセレクタ
   143                              <1>     ; EAX = TSS base address
   144 000017EF 8B83[0A030000]      <1>     mov eax, [GDT + ebx + 2]
   145 000017F5 C1E008              <1>     shl eax, 8
   146 000017F8 8A83[0F030000]      <1>     mov al, [GDT + ebx + 7]
   147 000017FE C1C808              <1>     ror eax, 8
   148                              <1> 
   149 00001801 C3                  <1>     ret
   150                              <1> 
   151                              <1> save_fpu_context:
   152 00001802 DD7068              <1>     fnsave [eax + 104]
   153 00001805 C780D4000000010000- <1>     mov [eax + 104 + 108], dword 1
   153 0000180E 00                  <1>
   154                              <1> 
   155 0000180F C3                  <1>     ret
   156                              <1> 
   157                              <1> load_fpu_context:
   158 00001810 83B8D400000000      <1>     cmp [eax + 104 + 108], dword 0
   159 00001817 7504                <1>     jne .10F    ; if(saved != 0) goto .10F
   160 00001819 DBE3                <1>     fninit      ; FPU初期化
   161 0000181B EB03                <1>     jmp .10E
   162                              <1> .10F:
   163 0000181D DD6068              <1>     frstor [eax + 104]  ; FPUコンテキストを復帰
   164                              <1> .10E:
   165 00001820 C3                  <1>     ret
   166                              <1> 
   167                              <1> int_nm:
   168 00001821 60                  <1>     pusha
   169 00001822 1E                  <1>     push ds
   170 00001823 06                  <1>     push es
   171                              <1> 
   172 00001824 66B81000            <1>     mov ax, DS_KERNEL
   173 00001828 8ED8                <1>     mov ds, ax
   174 0000182A 8EC0                <1>     mov es, ax
   175                              <1> 
   176                              <1>     ; タスクスイッチフラグをクリア
   177 0000182C 0F06                <1>     clts    ; CR0.TS = 0
   178                              <1> 
   179                              <1>     ; 前回・今回FPUを使用するタスク
   180 0000182E 8B3D[78180000]      <1>     mov edi, [.last_tss]; edi = 前回FPUを使用したタスクのTSS
   181 00001834 0F00CE              <1>     str esi             ; esi = 今回FPUを使用するタスクのTSS（trレジスタ）
   182 00001837 83E6F8              <1>     and esi, ~0x0007    ; 特権レベルはいらないのでマスク
   183                              <1> 
   184                              <1>     ; 初回利用チェック
   185 0000183A 83FF00              <1>     cmp edi, 0          ; if(前回のタスク==0) goto .10F
   186 0000183D 7420                <1>     je .10F
   187                              <1> 
   188 0000183F 39FE                <1>     cmp esi, edi        ; if(前回のタスク==今回のタスク) goto .12E
   189 00001841 741A                <1>     je .12E
   190                              <1> 
   191 00001843 FA                  <1>     cli
   192                              <1> 
   193                              <1>     ; 前回のFPUコンテキストを保存
   194 00001844 89FB                <1>     mov ebx, edi
   195 00001846 E8A4FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   196 0000184B E8B2FFFFFF          <1>     call save_fpu_context   ; void save_fpu_context(eax);
   197                              <1> 
   198                              <1>     ; 今回のFPUコンテキストを復帰
   199 00001850 89F3                <1>     mov ebx, esi
   200 00001852 E898FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   201 00001857 E8B4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   202                              <1> 
   203 0000185C FB                  <1>     sti
   204                              <1> .12E:
   205 0000185D EB0E                <1>     jmp .10E
   206                              <1> .10F:
   207 0000185F FA                  <1>     cli
   208                              <1> 
   209                              <1>     ; 今回のFPUコンテキストを復帰
   210 00001860 89F3                <1>     mov ebx, esi
   211 00001862 E888FFFFFF          <1>     call get_tss_base       ; eax get_tss_base(ebx);
   212 00001867 E8A4FFFFFF          <1>     call load_fpu_context   ; void load_fpu_context(eax);
   213                              <1> 
   214 0000186C FB                  <1>     sti
   215                              <1> .10E:
   216                              <1> 
   217 0000186D 8935[78180000]      <1>     mov [.last_tss], esi
   218                              <1> 
   219 00001873 07                  <1>     pop es
   220 00001874 1F                  <1>     pop ds
   221 00001875 61                  <1>     popa
   222                              <1> 
   223 00001876 CF                  <1>     iret
   224                              <1> 
   225 00001877 00                  <1> ALIGN 4, db 0
   226 00001878 00000000            <1> .last_tss: dd 0
   141                                  %include "../modules/protect/wait_tick.s"
   142                              <1> wait_tick:
   143 0000187C 55                  <1>     push ebp
   144 0000187D 89E5                <1>     mov ebp, esp
   145                              <1> 
   146 0000187F 50                  <1>     push eax
   147 00001880 51                  <1>     push ecx
   148                              <1> 
   149                              <1>     ; ウェイト
   150 00001881 8B4D08              <1>     mov ecx, [ebp + 8]      ; ECX = ウェイト回数
   151 00001884 A1[D8090000]        <1>     mov eax, [TIMER_COUNT]  ; EAX = TIMER
   152                              <1> 
   153                              <1> .10L:
   154 00001889 3905[D8090000]      <1>     cmp [TIMER_COUNT], eax  ; for(i=0; i < ecx; i++) while(TIMER == eax);
   155 0000188F 74F8                <1>     je .10L
   156 00001891 40                  <1>     inc eax
   157 00001892 E2F5                <1>     loop .10L
   158                              <1> 
   159 00001894 59                  <1>     pop ecx
   160 00001895 58                  <1>     pop eax
   161                              <1> 
   162 00001896 89EC                <1>     mov esp, ebp
   163 00001898 5D                  <1>     pop ebp
   164                              <1> 
   165 00001899 C3                  <1>     ret
   142                                  %include "../modules/protect/memcpy.s"
   143                              <1> memcpy:     ; void memcpy(src, dest, size);
   144 0000189A 55                  <1>     push ebp
   145 0000189B 89E5                <1>     mov ebp, esp
   146                              <1> 
   147 0000189D 51                  <1>     push ecx
   148 0000189E 56                  <1>     push esi
   149 0000189F 57                  <1>     push edi
   150                              <1> 
   151 000018A0 FC                  <1>     cld     ; clear direction flag
   152 000018A1 8B7D08              <1>     mov edi, [ebp + 8]     ; src
   153 000018A4 8B750C              <1>     mov esi, [ebp + 12]    ; dest
   154 000018A7 8B4D10              <1>     mov ecx, [ebp + 16]    ; size
   155                              <1> 
   156 000018AA F3A4                <1>     rep movsb
   157                              <1> 
   158 000018AC 5F                  <1>     pop edi
   159 000018AD 5E                  <1>     pop esi
   160 000018AE 59                  <1>     pop ecx
   161                              <1> 
   162 000018AF 89EC                <1>     mov esp, ebp
   163 000018B1 5D                  <1>     pop ebp
   164                              <1> 
   165 000018B2 C3                  <1>     ret
   143                                  
   144                                  ;パディング
   145 000018B3 00<rep 74Dh>                times KERNEL_SIZE - ($ - $$) db 0
   146                                  

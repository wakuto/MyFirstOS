     1                                  %include "../include/define.s"
     2                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
     3                              <1> 
     4                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     5                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
     6                              <1> 
     7                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
     8                              <1> 
     9                              <1>     E820_RECORD_SIZE equ 20
    10                              <1> 
    11                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    12                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    13                              <1> 
    14                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    15                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    16                              <1> 
    17                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    18                              <1> 
    19                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    20                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    21                              <1> 
    22                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    23                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
     2                                  %include "../include/macro.s"
     3                              <1> ; C言語と同等の関数呼び出し
     4                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
     5                              <1> 
     6                              <1>     %rep %0 - 1         ; 引数の数-1回
     7                              <1>         push %{-1:-1}   ; 一番最後の引数
     8                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
     9                              <1>     %endrep
    10                              <1>     %rotate -1      ; 回転をもとに戻す
    11                              <1> 
    12                              <1>     call %1         ; 第１引数を呼び出し
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    16                              <1>     %endif
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    21 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    22 00000004 ????                <1>     .head resw 1    ; ヘッド
    23 00000006 ????                <1>     .sect resw 1    ; セクタ
    24                              <1> endstruc
    25                              <1> 
    26                              <1> %macro set_vect 1-*
    27                              <1>         push eax
    28                              <1>         push edi
    29                              <1> 
    30                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    31                              <1>         mov eax, %2
    32                              <1> 
    33                              <1>     %if 3 == %0
    34                              <1>         mov [edi + 4], %3               ; フラグ
    35                              <1>     %endif
    36                              <1> 
    37                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    38                              <1>         shr eax, 16
    39                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    40                              <1> 
    41                              <1>         pop edi
    42                              <1>         pop eax
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro outp 2
    46                              <1>     mov al, %2
    47                              <1>     out %1, al
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> %define RING_ITEM_SIZE (1 << 4)
    51                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    52                              <1> 
    53                              <1> struc ring_buff
    54 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    55 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    56 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    57                              <1> endstruc
    58                              <1> 
    59                              <1> %macro set_desc 2-*
    60                              <1>         push eax
    61                              <1>         push edi
    62                              <1> 
    63                              <1>         mov edi, %1     ; ディスクリプタアドレス
    64                              <1>         mov eax, %2     ; ベースアドレス
    65                              <1> 
    66                              <1>     %if 3 == %0
    67                              <1>         mov [edi + 0], %3   ; リミット
    68                              <1>     %endif
    69                              <1> 
    70                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    71                              <1>         shr eax, 16
    72                              <1>         mov [edi + 4], al   ; ベース([23:16])
    73                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    74                              <1> 
    75                              <1>         pop edi
    76                              <1>         pop eax
    77                              <1> %endmacro
    78                              <1> 
    79                              <1> %macro set_gate 2-*
    80                              <1>     push eax
    81                              <1>     push edi
    82                              <1> 
    83                              <1>     mov edi, %1         ; ディスクリプタアドレス
    84                              <1>     mov eax, %2         ; ベースアドレス
    85                              <1> 
    86                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    87                              <1>     shr eax, 16
    88                              <1>     mov [edi + 6], ax   ; ベース([31:16])
    89                              <1> 
    90                              <1>     pop edi
    91                              <1>     pop eax
    92                              <1> %endmacro
     3                                  
     4                                      ORG KERNEL_LOAD
     5                                  
     6                                  [BITS 32]   ; 32bitコードを生成
     7                                  
     8                                  ; エントリポイント
     9                                  kernel:
    10                                      ; フォントアドレスを取得
    11 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE  ; 0x7C00 + 512  フォントアドレス
    12 00000005 0FB706                      movzx eax, word [esi + 0]       ; FONT.seg  セグメント
    13 00000008 0FB75E02                    movzx ebx, word [esi + 2]       ; FONT.off  オフセット
    14 0000000C C1E004                      shl eax, 4
    15 0000000F 01D8                        add eax, ebx
    16 00000011 A3[98010000]                mov [FONT_ADR], eax
    17                                  
    18                                      ; TSSディスクリプタの設定
    19                                      set_desc GDT.tss_0, TSS_0       ; タスク0用TSSの設定
    60 00000016 50                  <1>  push eax
    61 00000017 57                  <1>  push edi
    62                              <1> 
    63 00000018 BF[E8010000]        <1>  mov edi, %1
    64 0000001D B8[06020000]        <1>  mov eax, %2
    65                              <1> 
    66                              <1>  %if 3 == %0
    67                              <1>  mov [edi + 0], %3
    68                              <1>  %endif
    69                              <1> 
    70 00000022 66894702            <1>  mov [edi + 2], ax
    71 00000026 C1E810              <1>  shr eax, 16
    72 00000029 884704              <1>  mov [edi + 4], al
    73 0000002C 886707              <1>  mov [edi + 7], ah
    74                              <1> 
    75 0000002F 5F                  <1>  pop edi
    76 00000030 58                  <1>  pop eax
    20                                      set_desc GDT.tss_1, TSS_1       ; タスク1用TSSの設定
    60 00000031 50                  <1>  push eax
    61 00000032 57                  <1>  push edi
    62                              <1> 
    63 00000033 BF[F0010000]        <1>  mov edi, %1
    64 00000038 B8[6E020000]        <1>  mov eax, %2
    65                              <1> 
    66                              <1>  %if 3 == %0
    67                              <1>  mov [edi + 0], %3
    68                              <1>  %endif
    69                              <1> 
    70 0000003D 66894702            <1>  mov [edi + 2], ax
    71 00000041 C1E810              <1>  shr eax, 16
    72 00000044 884704              <1>  mov [edi + 4], al
    73 00000047 886707              <1>  mov [edi + 7], ah
    74                              <1> 
    75 0000004A 5F                  <1>  pop edi
    76 0000004B 58                  <1>  pop eax
    21                                  
    22                                      ; コールゲートの設定
    23                                      set_gate GDT.call_gate, call_gate   ; コールゲートの設定
    80 0000004C 50                  <1>  push eax
    81 0000004D 57                  <1>  push edi
    82                              <1> 
    83 0000004E BF[F8010000]        <1>  mov edi, %1
    84 00000053 B8[140C0000]        <1>  mov eax, %2
    85                              <1> 
    86 00000058 668907              <1>  mov [edi + 0], ax
    87 0000005B C1E810              <1>  shr eax, 16
    88 0000005E 66894706            <1>  mov [edi + 6], ax
    89                              <1> 
    90 00000062 5F                  <1>  pop edi
    91 00000063 58                  <1>  pop eax
    24                                  
    25                                      ; LDTの設定
    26                                      set_desc GDT.ldt, LDT, word LDT_LIMIT
    60 00000064 50                  <1>  push eax
    61 00000065 57                  <1>  push edi
    62                              <1> 
    63 00000066 BF[E0010000]        <1>  mov edi, %1
    64 0000006B B8[A0010000]        <1>  mov eax, %2
    65                              <1> 
    66                              <1>  %if 3 == %0
    67 00000070 66C7072700          <1>  mov [edi + 0], %3
    68                              <1>  %endif
    69                              <1> 
    70 00000075 66894702            <1>  mov [edi + 2], ax
    71 00000079 C1E810              <1>  shr eax, 16
    72 0000007C 884704              <1>  mov [edi + 4], al
    73 0000007F 886707              <1>  mov [edi + 7], ah
    74                              <1> 
    75 00000082 5F                  <1>  pop edi
    76 00000083 58                  <1>  pop eax
    27                                  
    28                                      ; GDTをロード(再設定)
    29 00000084 0F0115[00020000]            lgdt [GDTR]         ; グローバルディスクリプタテーブルをロード
    30                                  
    31                                      ; スタックの設定
    32 0000008B BC00341000                  mov esp, SP_TASK_0  ; タスク0用のスタックを設定
    33                                  
    34                                      ; タスクレジスタの初期化
    35 00000090 66B82000                    mov ax, SS_TASK_0   ; これからタスク0として動作する
    36 00000094 0F00D8                      ltr ax              ; タスクレジスタの設定
    37                                  
    38                                      ; 初期化
    39 00000097 E872090000                  cdecl init_int                  ; 割り込みベクタの初期化
    40 0000009C E8BC090000                  cdecl init_pic                  ; 割り込みコントローラの初期化
    41                                  
    42                                      set_vect 0x00, int_zero_div     ; 割り込み処理の登録：0除算
    27 000000A1 50                  <1>  push eax
    28 000000A2 57                  <1>  push edi
    29                              <1> 
    30 000000A3 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 000000A8 B8[3F0A0000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 000000AD 668907              <1>  mov [edi + 0], ax
    38 000000B0 C1E810              <1>  shr eax, 16
    39 000000B3 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 000000B7 5F                  <1>  pop edi
    42 000000B8 58                  <1>  pop eax
    43                                      set_vect 0x20, int_timer        ; 割り込み処理の登録：タイマー
    27 000000B9 50                  <1>  push eax
    28 000000BA 57                  <1>  push edi
    29                              <1> 
    30 000000BB BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 000000C0 B8[D6020000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 000000C5 668907              <1>  mov [edi + 0], ax
    38 000000C8 C1E810              <1>  shr eax, 16
    39 000000CB 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 000000CF 5F                  <1>  pop edi
    42 000000D0 58                  <1>  pop eax
    44                                      set_vect 0x21, int_keyboard     ; 割り込み処理の登録：KBC
    27 000000D1 50                  <1>  push eax
    28 000000D2 57                  <1>  push edi
    29                              <1> 
    30 000000D3 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 000000D8 B8[C50A0000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 000000DD 668907              <1>  mov [edi + 0], ax
    38 000000E0 C1E810              <1>  shr eax, 16
    39 000000E3 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 000000E7 5F                  <1>  pop edi
    42 000000E8 58                  <1>  pop eax
    45                                      set_vect 0x28, int_rtc          ; 割り込み処理の登録：RTC
    27 000000E9 50                  <1>  push eax
    28 000000EA 57                  <1>  push edi
    29                              <1> 
    30 000000EB BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 000000F0 B8[880A0000]        <1>  mov eax, %2
    32                              <1> 
    33                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 4], %3
    35                              <1>  %endif
    36                              <1> 
    37 000000F5 668907              <1>  mov [edi + 0], ax
    38 000000F8 C1E810              <1>  shr eax, 16
    39 000000FB 66894706            <1>  mov [edi + 6], ax
    40                              <1> 
    41 000000FF 5F                  <1>  pop edi
    42 00000100 58                  <1>  pop eax
    46                                  
    47                                      ; デバイスの割り込み許可
    48 00000101 6A10E8A90900006683-         cdecl rtc_int_en, 0x10          ; rtc_int_en(UIE) 更新サイクル終了前割り込み許可
    48 0000010A C404               
    49                                  
    50                                      ; IMR（割り込みマスクレジスタ）の設定
    51                                      outp 0x21, 0b1111_1000          ; 割り込み有効：スレーブPIC/KBC/タイマー
    46 0000010C B0F8                <1>  mov al, %2
    47 0000010E E621                <1>  out %1, al
    52                                      outp 0xA1, 0b1111_1110          ; 割り込み有効：RTC
    46 00000110 B0FE                <1>  mov al, %2
    47 00000112 E6A1                <1>  out %1, al
    53                                  
    54 00000114 FB                          sti                             ; 割り込み許可
    55                                  
    56 00000115 6A0D6A3FE890030000-         cdecl draw_font, 63, 13         ; フォント一覧表示
    56 0000011E 6683C408           
    57 00000122 6A046A3FE80F040000-         cdecl draw_color_bar, 63, 4     ; カラーバーを表示
    57 0000012B 6683C408           
    58 0000012F 68[80010000]680F01-         cdecl draw_str, 25, 14, 0x010F, .s0 ; 文字の表示
    58 00000137 00006A0E6A19E8AF03-
    58 00000140 00006683C410       
    59                                  
    60                                  
    61                                      ; タスクの呼び出し
    62                                      ;call SS_TASK_1:0
    63                                  
    64                                  
    65                                  .10L:
    66                                      ; タスクの呼び出し
    67 00000146 EA000000002800              jmp SS_TASK_1:0
    68                                  
    69                                      ; 回転する棒の表示
    70 0000014D E8890A0000                  cdecl draw_rotation_bar
    71                                  
    72                                      ; キーコードの取得
    73 00000152 68[94010000]68-             cdecl ring_rd, _KEY_BUFF, .int_key
    73 00000158 [EC0A0000]E8A30900-
    73 00000160 006683C408         
    74 00000165 83F800                      cmp eax, 0
    75 00000168 7414                        je .10E
    76                                  
    77                                      ; キーコードの表示
    78 0000016A 68[EC0A0000]6A1D6A-         cdecl draw_key, 2, 29, _KEY_BUFF
    78 00000172 02E8F10900006683C4-
    78 0000017B 0C                 
    79                                  
    80 0000017C EBC8                        jmp .10L
    81                                  .10E:
    82                                  
    83                                  
    84                                      ; 処理の終了
    85 0000017E EBFE                        jmp $
    86                                  
    87 00000180 2048656C6C6F2C206B-     .s0 db " Hello, kernel! ", 0
    87 00000189 65726E656C212000   
    88                                  
    89 00000191 00<rep 3h>              ALIGN 4, db 0
    90 00000194 00000000                .int_key: dd 0
    91                                  
    92                                  ALIGN 4, db 0
    93 00000198 00000000                FONT_ADR: dd 0
    94 0000019C 00000000                RTC_TIME: dd 0
    95                                  
    96                                  ; タスク
    97                                  %include "descriptor.s"
    98                              <1> ; ローカルディスクリプタテーブル
    99 000001A0 0000000000000000    <1> LDT:        dq 0x0000000000000000   ; NULL
   100 000001A8 FFFF0000009ACF00    <1> .cs_task_0: dq 0x00CF9A000000FFFF   ; CODE 4G
   101 000001B0 FFFF00000092CF00    <1> .ds_task_0: dq 0x00CF92000000FFFF   ; DATA 4G
   102 000001B8 FFFF000000FACF00    <1> .cs_task_1: dq 0x00CFFA000000FFFF   ; CODE 4G
   103 000001C0 FFFF000000F2CF00    <1> .ds_task_1: dq 0x00CFF2000000FFFF   ; DATA 4G
   104                              <1> .end:
   105                              <1> 
   106                              <1> CS_TASK_0 equ (.cs_task_0 - LDT) | 4    ; タスク0用CSセレクタ
   107                              <1> DS_TASK_0 equ (.ds_task_0 - LDT) | 4    ; タスク0用DSセレクタ
   108                              <1> CS_TASK_1 equ (.cs_task_1 - LDT) | 4 | 3; タスク1用CSセレクタ
   109                              <1> DS_TASK_1 equ (.ds_task_1 - LDT) | 4 | 3; タスク1用DSセレクタ
   110                              <1> 
   111                              <1> LDT_LIMIT equ .end        - LDT - 1
   112                              <1> 
   113                              <1> ; グローバルディスクリプタテーブル
   114 000001C8 0000000000000000    <1> GDT:        dq 0x0000000000000000   ; NULL
   115 000001D0 FFFF0000009ACF00    <1> .cs_kernel: dq 0x00CF9A000000FFFF   ; CODE 4G
   116 000001D8 FFFF00000092CF00    <1> .ds_kernel: dq 0x00CF92000000FFFF   ; DATA 4G
   117 000001E0 0000000000820000    <1> .ldt:       dq 0x0000820000000000   ; LDTディスクリプタ
   118 000001E8 6700000000890000    <1> .tss_0:     dq 0x0000890000000067   ; TSSディスクリプタ
   119 000001F0 6700000000890000    <1> .tss_1:     dq 0x0000890000000067   ; TSSディスクリプタ
   120 000001F8 0000080004EC0000    <1> .call_gate: dq 0x0000EC0400080000   ; 386コールゲート(DPL=3, count=4, SEL=8)
   121                              <1> .end:
   122                              <1> 
   123                              <1> CS_KERNEL equ .cs_kernel - GDT
   124                              <1> DS_KERNEL equ .ds_kernel - GDT
   125                              <1> SS_LDT    equ .ldt       - GDT
   126                              <1> SS_TASK_0 equ .tss_0     - GDT
   127                              <1> SS_TASK_1 equ .tss_1     - GDT
   128                              <1> SS_GATE_0 equ .call_gate - GDT
   129                              <1> 
   130 00000200 3700                <1> GDTR: dw GDT.end - GDT - 1
   131 00000202 [C8010000]          <1>       dd GDT
   132                              <1> 
   133                              <1> ; TSS
   134                              <1> TSS_0:
   135 00000206 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   136 0000020A 00321000            <1> .esp0:      dd SP_TASK_0 - 512      ;*  4:ESP0
   137 0000020E 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   138 00000212 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   139 00000216 00000000            <1> .ss1:       dd 0                    ;* 16:
   140 0000021A 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   141 0000021E 00000000            <1> .ss2:       dd 0                    ;* 24:
   142 00000222 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   143 00000226 00000000            <1> .eip:       dd 0                    ;  32:EIP
   144 0000022A 00000000            <1> .eflags:    dd 0                    ;  36:EFLAGS
   145 0000022E 00000000            <1> .eax:       dd 0                    ;  40:EAX
   146 00000232 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   147 00000236 00000000            <1> .edx:       dd 0                    ;  48:EDX
   148 0000023A 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   149 0000023E 00000000            <1> .esp:       dd 0                    ;  56:ESP
   150 00000242 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   151 00000246 00000000            <1> .esi:       dd 0                    ;  64:ESI
   152 0000024A 00000000            <1> .edi:       dd 0                    ;  68:EDI
   153 0000024E 00000000            <1> .es:        dd 0                    ;  72:ES
   154 00000252 00000000            <1> .cs:        dd 0                    ;  76:CS
   155 00000256 00000000            <1> .ss:        dd 0                    ;  80:SS
   156 0000025A 00000000            <1> .ds:        dd 0                    ;  84:DS
   157 0000025E 00000000            <1> .fs:        dd 0                    ;  88:FS
   158 00000262 00000000            <1> .gs:        dd 0                    ;  92:GS
   159 00000266 00000000            <1> .ldt:       dd 0                    ;  96:LDTセグメントセレクタ
   160 0000026A 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
   161                              <1> 
   162                              <1> TSS_1:
   163 0000026E 00000000            <1> .link:      dd 0                    ;   0:前のタスクへのリンク
   164 00000272 00361000            <1> .esp0:      dd SP_TASK_1 - 512      ;*  4:ESP0
   165 00000276 10000000            <1> .ss0:       dd DS_KERNEL            ;*  8:
   166 0000027A 00000000            <1> .esp1:      dd 0                    ;* 12:ESP1
   167 0000027E 00000000            <1> .ss1:       dd 0                    ;* 16:
   168 00000282 00000000            <1> .esp2:      dd 0                    ;* 20:ESP2
   169 00000286 00000000            <1> .ss2:       dd 0                    ;* 24:
   170 0000028A 00000000            <1> .cr3:       dd 0                    ;  28:CR3(PDBR)
   171 0000028E [14030000]          <1> .eip:       dd task_1               ;  32:EIP
   172 00000292 02020000            <1> .eflags:    dd 0x0202               ;  36:EFLAGS
   173 00000296 00000000            <1> .eax:       dd 0                    ;  40:EAX
   174 0000029A 00000000            <1> .ecx:       dd 0                    ;  44:ECX
   175 0000029E 00000000            <1> .edx:       dd 0                    ;  48:EDX
   176 000002A2 00000000            <1> .ebx:       dd 0                    ;  52:EBX
   177 000002A6 00381000            <1> .esp:       dd SP_TASK_1            ;  56:ESP
   178 000002AA 00000000            <1> .ebp:       dd 0                    ;  60:EBP
   179 000002AE 00000000            <1> .esi:       dd 0                    ;  64:ESI
   180 000002B2 00000000            <1> .edi:       dd 0                    ;  68:EDI
   181 000002B6 27000000            <1> .es:        dd DS_TASK_1            ;  72:ES
   182 000002BA 1F000000            <1> .cs:        dd CS_TASK_1            ;  76:CS
   183 000002BE 27000000            <1> .ss:        dd DS_TASK_1            ;  80:SS
   184 000002C2 27000000            <1> .ds:        dd DS_TASK_1            ;  84:DS
   185 000002C6 27000000            <1> .fs:        dd DS_TASK_1            ;  88:FS
   186 000002CA 27000000            <1> .gs:        dd DS_TASK_1            ;  92:GS
   187 000002CE 18000000            <1> .ldt:       dd SS_LDT               ;  96:LDTセグメントセレクタ
   188 000002D2 00000000            <1> .io:        dd 0                    ; 100:I/Oマップベースアドレス
    98                                  %include "modules/int_timer.s"
    99                              <1> int_timer:
   100 000002D6 60                  <1>     pushad
   101 000002D7 1E                  <1>     push ds
   102 000002D8 06                  <1>     push es
   103                              <1> 
   104                              <1>     ; データ用セグメントの設定
   105 000002D9 66B81000            <1>     mov ax, 0x0010
   106 000002DD 8ED8                <1>     mov ds, ax
   107 000002DF 8EC0                <1>     mov es, ax
   108                              <1> 
   109                              <1>     ; TICK
   110 000002E1 FF05[0C030000]      <1>     inc dword [TIMER_COUNT]
   111                              <1> 
   112                              <1>     ; 割り込みフラグをクリア(EOI)
   113                              <1>     outp 0x20, 0x20     ; マスタPIC:EOIコマンド
    46 000002E7 B020                <2>  mov al, %2
    47 000002E9 E620                <2>  out %1, al
   114                              <1> 
   115                              <1>     ; タスクの切り替え
   116 000002EB 660F00C8            <1>     str ax              ; 現在のタスクレジスタをロード
   117 000002EF 6683F828            <1>     cmp ax, SS_TASK_1   ; switch(ax)
   118 000002F3 7409                <1>     je .11L
   119                              <1> 
   120 000002F5 EA000000002800      <1>     jmp SS_TASK_1:0     ; default:
   121 000002FC EB09                <1>     jmp .10E
   122                              <1> .11L:                   ; case SS_TASK_1:
   123 000002FE EA000000002000      <1>     jmp SS_TASK_0:0
   124 00000305 EB00                <1>     jmp .10E
   125                              <1> .10E:
   126                              <1> 
   127 00000307 07                  <1>     pop es
   128 00000308 1F                  <1>     pop ds
   129 00000309 61                  <1>     popad
   130                              <1> 
   131 0000030A CF                  <1>     iret
   132                              <1> 
   133 0000030B 00                  <1> ALIGN 4, db 0
   134 0000030C 0000000000000000    <1> TIMER_COUNT: dq 0
   135                              <1> 
    99                                  %include "tasks/task_1.s"
   100                              <1> task_1:
   101                              <1>     ; 文字列の表示(コールゲート)
   102 00000314 68[2C030000]6A076A- <1>     cdecl SS_GATE_0:0, 63, 0, 0x07, .s0 ; draw_str();
   102 0000031C 006A3F9A0000000030- <1>
   102 00000325 006683C410          <1>
   103                              <1> 
   104                              <1> .10L:
   105                              <1>     ; 時刻の表示
   106                              <1> ;    mov eax, [RTC_TIME]
   107                              <1> ;    cdecl draw_time, 72, 0, 0x0700, eax
   108                              <1> 
   109 0000032A EBFE                <1>     jmp .10L
   110                              <1> 
   111                              <1>     ; データ
   112 0000032C 5461736B2D3100      <1> .s0 db "Task-1", 0
   100                                  
   101                                  ; モジュール
   102                                  %include "../modules/protect/vga.s"
   103                              <1> vga_set_read_plane:     ; void vga_set_read_plane(plane);
   104                              <1> ; plane: 読み込みプレーン
   105 00000333 55                  <1>     push ebp
   106 00000334 89E5                <1>     mov ebp, esp
   107                              <1> 
   108 00000336 6650                <1>     push ax
   109 00000338 6652                <1>     push dx
   110                              <1> 
   111                              <1> 
   112                              <1>     ; 読み込みプレーンの選択
   113 0000033A 8A6508              <1>     mov ah, [ebp + 8]   ; 3=輝度, 2～0=RGB
   114 0000033D 80E403              <1>     and ah, 0x03        ; 余計なビットをマスク
   115 00000340 B004                <1>     mov al, 0x04        ; 読み込みマップ選択レジスタ
   116 00000342 66BACE03            <1>     mov dx, 0x03CE      ; グラフィックス制御ポート
   117 00000346 66EF                <1>     out dx, ax
   118                              <1> 
   119 00000348 665A                <1>     pop dx
   120 0000034A 6658                <1>     pop ax
   121                              <1> 
   122 0000034C 89EC                <1>     mov esp, ebp
   123 0000034E 5D                  <1>     pop ebp
   124                              <1> 
   125 0000034F C3                  <1>     ret
   126                              <1> 
   127                              <1> vga_set_write_plane:    ; void vga_set_write_plane(plane);
   128                              <1> ; plane 書き込みプレーン
   129 00000350 55                  <1>     push ebp
   130 00000351 89E5                <1>     mov ebp, esp
   131                              <1> 
   132 00000353 6650                <1>     push ax
   133 00000355 6652                <1>     push dx
   134                              <1> 
   135                              <1> 
   136                              <1>     ; 書き込みプレーンの選択
   137 00000357 8A6508              <1>     mov ah, [ebp + 8]   ; ah = 書き込みプレーン
   138 0000035A 80E40F              <1>     and ah, 0x0F        ; 余計なビットをマスク
   139 0000035D B002                <1>     mov al, 0x02        ; マップマスクレジスタ（書き込みプレーンを指定）
   140 0000035F 66BAC403            <1>     mov dx, 0x03C4      ; シーケンサ制御ポート
   141 00000363 66EF                <1>     out dx, ax
   142                              <1> 
   143                              <1> 
   144 00000365 665A                <1>     pop dx
   145 00000367 6658                <1>     pop ax
   146                              <1> 
   147 00000369 89EC                <1>     mov esp, ebp
   148 0000036B 5D                  <1>     pop ebp
   149                              <1> 
   150 0000036C C3                  <1>     ret
   151                              <1> 
   152                              <1> vram_font_copy:         ; void vram_font_copy(font, vram, plane, color);
   153                              <1> ; font FONTアドレス
   154                              <1> ; vram VRAMアドレス
   155                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   156                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   157 0000036D 55                  <1>     push ebp
   158 0000036E 89E5                <1>     mov ebp, esp
   159                              <1>     
   160 00000370 50                  <1>     push eax
   161 00000371 53                  <1>     push ebx
   162 00000372 51                  <1>     push ecx
   163 00000373 52                  <1>     push edx
   164 00000374 57                  <1>     push edi
   165 00000375 56                  <1>     push esi
   166                              <1> 
   167 00000376 8B7508              <1>     mov esi, [ebp + 8]          ; font
   168 00000379 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   169 0000037C 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   170 00000380 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   171                              <1>     ; bh = 背景色 bl = 前景色
   172                              <1> 
   173 00000384 84C7                <1>     test bh, al     ; zf = (背景色 & プレーン）
   174 00000386 0F94C6              <1>     setz dh         ; dh = zf
   175 00000389 FECE                <1>     dec dh          ; 背景色が含まれる：dh = 0xFF, 含まれない：dh = 0x00
   176                              <1> 
   177 0000038B 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   178 0000038D 0F94C2              <1>     setz dl         ; dl = zf
   179 00000390 FECA                <1>     dec dl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   180                              <1> 
   181                              <1>     ; 16ドットフォントのコピー
   182 00000392 FC                  <1>     cld             ; アドレス加算モード
   183                              <1> 
   184 00000393 B910000000          <1>     mov ecx, 16
   185                              <1> .10L:
   186                              <1>     ; フォントマスクの作成
   187 00000398 AC                  <1>     lodsb           ; al = *(esi++) // フォントデータ1ビット分
   188 00000399 88C4                <1>     mov ah, al      ; ah ~= al      // !フォントデータ
   189 0000039B F6D4                <1>     not ah
   190                              <1> 
   191                              <1>     ; 前景色
   192 0000039D 20D0                <1>     and al, dl      ; al = プレーン&前景色ありorなし
   193                              <1> 
   194                              <1>     ; 背景色
   195 0000039F F7C310000000        <1>     test ebx, 0x0010    ; if(透過on) zf = 0; else zf = 1;
   196 000003A5 7404                <1>     jz .11F
   197                              <1>     ; 透過on
   198 000003A7 2227                <1>     and ah, [edi]       ; 現在のデータでフォントデータをマスク
   199 000003A9 EB02                <1>     jmp .11E
   200                              <1> .11F:                   ; 透過off
   201 000003AB 20F4                <1>     and ah, dh          ; if(背景色なし) ah = 0;
   202                              <1> .11E:
   203                              <1>     
   204                              <1>     ; 前景色と背景色を合成
   205 000003AD 08E0                <1>     or al, ah           ; al = 背景 | 前景
   206                              <1> 
   207                              <1>     ; 新しい値を出力
   208 000003AF 8807                <1>     mov [edi], al
   209                              <1> 
   210 000003B1 83C750              <1>     add edi, 80      ; 1行すすめる
   211 000003B4 E2E2                <1>     loop .10L
   212                              <1> .10E:
   213                              <1> 
   214 000003B6 5E                  <1>     pop esi
   215 000003B7 5F                  <1>     pop edi
   216 000003B8 5A                  <1>     pop edx
   217 000003B9 59                  <1>     pop ecx
   218 000003BA 5B                  <1>     pop ebx
   219 000003BB 58                  <1>     pop eax
   220                              <1> 
   221 000003BC 89EC                <1>     mov esp, ebp
   222 000003BE 5D                  <1>     pop ebp
   223                              <1> 
   224 000003BF C3                  <1>     ret
   225                              <1> 
   226                              <1> vram_bit_copy:         ; void vram_bit_copy(bit, vram, plane, color);
   227                              <1> ; bitデータ
   228                              <1> ; vram VRAMアドレス
   229                              <1> ; plane 出力プレーン（1つのプレーンのみをビットで指定）
   230                              <1> ; color 描画色 前景色(--------_----IRGB) I=輝度
   231 000003C0 55                  <1>     push ebp
   232 000003C1 89E5                <1>     mov ebp, esp
   233                              <1>     
   234 000003C3 50                  <1>     push eax
   235 000003C4 53                  <1>     push ebx
   236 000003C5 52                  <1>     push edx
   237 000003C6 57                  <1>     push edi
   238                              <1> 
   239 000003C7 8B7D0C              <1>     mov edi, [ebp + 12]         ; vram
   240 000003CA 0FB64510            <1>     movzx eax, byte [ebp + 16]  ; plane
   241 000003CE 0FB75D14            <1>     movzx ebx, word [ebp + 20]  ; color
   242                              <1>     ; bl = 前景色
   243                              <1> 
   244                              <1>     ; 常に透過モード
   245 000003D2 84C3                <1>     test bl, al     ; zf = （前景色 & プレーン）
   246 000003D4 0F94C3              <1>     setz bl         ; dl = zf
   247 000003D7 FECB                <1>     dec bl          ; 前景色が含まれる：dl = 0xFF, 含まれない：dl = 0x00
   248                              <1> 
   249                              <1>     ; マスク
   250 000003D9 8A4508              <1>     mov al, [ebp + 8]   ; bit
   251 000003DC 88C4                <1>     mov ah, al      ; ah ~= al
   252 000003DE F6D4                <1>     not ah
   253                              <1> 
   254 000003E0 2227                <1>     and ah, [edi]       ; !出力ビットパターン & 現在値 出力ビットだけ0 背景
   255 000003E2 20D8                <1>     and al, bl          ;  出力ビットパターン & 表示色 前景
   256 000003E4 08E0                <1>     or al, ah           ; 背景と前景を合成
   257 000003E6 8807                <1>     mov [edi], al       ; プレーンに書き込み
   258                              <1>     
   259                              <1> 
   260 000003E8 5F                  <1>     pop edi
   261 000003E9 5A                  <1>     pop edx
   262 000003EA 5B                  <1>     pop ebx
   263 000003EB 58                  <1>     pop eax
   264                              <1> 
   265 000003EC 89EC                <1>     mov esp, ebp
   266 000003EE 5D                  <1>     pop ebp
   267                              <1> 
   268 000003EF C3                  <1>     ret
   103                                  %include "../modules/protect/draw_char.s"
   104                              <1> draw_char:      ; void draw_char(col, row, color, ch);
   105                              <1> ; col 列（0～79）
   106                              <1> ; row 行（0～29）
   107                              <1> ; color 描画色 背景色(----IRGB):前景色(---TIRGB) T=透過, I=輝度
   108                              <1> ; ch 文字
   109                              <1> 
   110 000003F0 55                  <1>     push ebp
   111 000003F1 89E5                <1>     mov ebp, esp
   112                              <1> 
   113 000003F3 53                  <1>     push ebx
   114 000003F4 56                  <1>     push esi
   115 000003F5 57                  <1>     push edi
   116                              <1> 
   117                              <1>     ; コピー元フォントアドレスを設定
   118 000003F6 0FB67514            <1>     movzx esi, byte [ebp +20]  ; esi = ch
   119 000003FA C1E604              <1>     shl esi, 4                  ; ch * 16   1文字16バイト
   120 000003FD 0335[98010000]      <1>     add esi, [FONT_ADR]         ; ESI = フォントアドレス
   121                              <1> 
   122                              <1>     ; コピー先アドレスを取得
   123                              <1>     ; adr = 0xA0000 + (640 / 8 * 16) * y + x
   124                              <1>     ;               16行(1文字の高さ）  *  縦位置 + 横位置
   125 00000403 8B7D0C              <1>     mov edi, [ebp +12]                  ; Y
   126 00000406 C1E708              <1>     shl edi, 8
   127 00000409 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0xA0000]  ; Y * 16行
   128 00000410 037D08              <1>     add edi, [ebp + 8]                  ; edi += X
   129                              <1> 
   130                              <1>     ; 1文字分のフォントを出力
   131 00000413 0FB75D10            <1>     movzx ebx, word [ebp +16]           ; 表示色
   132                              <1> 
   133                              <1>     ; 輝度I
   134 00000417 6A03E815FFFFFF6683- <1>     cdecl vga_set_read_plane, 0x03      ; 輝度プレーン
   134 00000420 C404                <1>
   135 00000422 6A08E827FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x08     ; 輝度プレーン
   135 0000042B C404                <1>
   136 0000042D 536A085756E836FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x08, ebx
   136 00000436 FF6683C410          <1>
   137                              <1> 
   138                              <1>     ; 赤R
   139 0000043B 6A02E8F1FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x02      ; 赤プレーン
   139 00000444 C404                <1>
   140 00000446 6A04E803FFFFFF6683- <1>     cdecl vga_set_write_plane, 0x04     ; 赤輝度プレーン
   140 0000044F C404                <1>
   141 00000451 536A045756E812FFFF- <1>     cdecl vram_font_copy, esi, edi, 0x04, ebx
   141 0000045A FF6683C410          <1>
   142                              <1> 
   143                              <1>     ; 緑G
   144 0000045F 6A01E8CDFEFFFF6683- <1>     cdecl vga_set_read_plane, 0x01      ; 緑プレーン
   144 00000468 C404                <1>
   145 0000046A 6A02E8DFFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x02     ; 緑プレーン
   145 00000473 C404                <1>
   146 00000475 536A025756E8EEFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x02, ebx
   146 0000047E FF6683C410          <1>
   147                              <1> 
   148                              <1>     ; 青B
   149 00000483 6A00E8A9FEFFFF6683- <1>     cdecl vga_set_read_plane, 0x00      ; 青プレーン
   149 0000048C C404                <1>
   150 0000048E 6A01E8BBFEFFFF6683- <1>     cdecl vga_set_write_plane, 0x01     ; 青プレーン
   150 00000497 C404                <1>
   151 00000499 536A015756E8CAFEFF- <1>     cdecl vram_font_copy, esi, edi, 0x01, ebx
   151 000004A2 FF6683C410          <1>
   152                              <1> 
   153 000004A7 5F                  <1>     pop edi
   154 000004A8 5E                  <1>     pop esi
   155 000004A9 5B                  <1>     pop ebx
   156                              <1> 
   157 000004AA 89EC                <1>     mov esp, ebp
   158 000004AC 5D                  <1>     pop ebp
   159                              <1> 
   160 000004AD C3                  <1>     ret
   104                                  %include "../modules/protect/draw_font.s"
   105                              <1> draw_font:  ; void draw_font(col, row);
   106                              <1> ; col 列
   107                              <1> ; row 行
   108 000004AE 55                  <1>     push ebp
   109 000004AF 89E5                <1>     mov ebp, esp
   110                              <1> 
   111 000004B1 50                  <1>     push eax
   112 000004B2 53                  <1>     push ebx
   113 000004B3 51                  <1>     push ecx
   114 000004B4 57                  <1>     push edi
   115 000004B5 56                  <1>     push esi
   116                              <1> 
   117                              <1> 
   118 000004B6 8B7508              <1>     mov esi, [ebp + 8]  ; x
   119 000004B9 8B7D0C              <1>     mov edi, [ebp +12]  ; y
   120                              <1> 
   121 000004BC B900000000          <1>     mov ecx, 0
   122                              <1> .10L:
   123 000004C1 81F900010000        <1>     cmp ecx, 256
   124 000004C7 731F                <1>     jae .10E
   125                              <1> 
   126 000004C9 89C8                <1>     mov eax, ecx
   127 000004CB 83E00F              <1>     and eax, 0x0F   ; eax = 繰り返し回数の下位4ビット
   128 000004CE 01F0                <1>     add eax, esi    ; eax += x
   129                              <1> 
   130 000004D0 89CB                <1>     mov ebx, ecx
   131 000004D2 C1EB04              <1>     shr ebx, 4      ; eax = 繰り返し回数/16
   132 000004D5 01FB                <1>     add ebx, edi    ; ebx += y
   133                              <1> 
   134 000004D7 516A075350E80FFFFF- <1>     cdecl draw_char, eax, ebx, 0x07, ecx
   134 000004E0 FF6683C410          <1>
   135                              <1> 
   136 000004E5 41                  <1>     inc ecx
   137 000004E6 EBD9                <1>     jmp .10L
   138                              <1> .10E:
   139                              <1> 
   140 000004E8 5E                  <1>     pop esi
   141 000004E9 5F                  <1>     pop edi
   142 000004EA 59                  <1>     pop ecx
   143 000004EB 5B                  <1>     pop ebx
   144 000004EC 58                  <1>     pop eax
   145                              <1> 
   146 000004ED 89EC                <1>     mov esp, ebp
   147 000004EF 5D                  <1>     pop ebp
   148                              <1> 
   149 000004F0 C3                  <1>     ret
   105                                  %include "../modules/protect/draw_str.s"
   106                              <1> draw_str:   ;void draw_str(col, row, color, p);
   107                              <1> ; col: 列
   108                              <1> ; row: 行
   109                              <1> ; color: 描画色
   110                              <1> ; p: 文字列のアドレス
   111 000004F1 55                  <1>     push ebp
   112 000004F2 89E5                <1>     mov ebp, esp
   113                              <1> 
   114 000004F4 50                  <1>     push eax
   115 000004F5 53                  <1>     push ebx
   116 000004F6 51                  <1>     push ecx
   117 000004F7 52                  <1>     push edx
   118 000004F8 56                  <1>     push esi
   119                              <1> 
   120                              <1> 
   121 000004F9 8B4D08              <1>     mov ecx, [ebp + 8]  ; col
   122 000004FC 8B550C              <1>     mov edx, [ebp +12]  ; row
   123 000004FF 0FB75D10            <1>     movzx ebx, word [ebp + 16] ; color
   124 00000503 8B7514              <1>     mov esi, [ebp +20]  ; p
   125                              <1> 
   126 00000506 FC                  <1>     cld
   127                              <1> .10L:
   128 00000507 AC                  <1>     lodsb
   129 00000508 3C00                <1>     cmp al, 0
   130 0000050A 7425                <1>     je .10E
   131                              <1> 
   132                              <1> %ifdef USE_SYSTEM_CALL
   133                              <1>     int 0x81
   134                              <1> %else
   135 0000050C 50535251E8DBFEFFFF- <1>     cdecl draw_char, ecx, edx, ebx, eax
   135 00000515 6683C410            <1>
   136                              <1> %endif
   137                              <1> 
   138 00000519 41                  <1>     inc ecx
   139 0000051A 83F950              <1>     cmp ecx, 80
   140 0000051D 7C10                <1>     jl .12E         ; 横はみ出してなければgoto .12E
   141 0000051F B900000000          <1>     mov ecx, 0      ; はみ出してれば次の行へ
   142 00000524 42                  <1>     inc edx
   143 00000525 83FA1E              <1>     cmp edx, 30
   144 00000528 7C05                <1>     jl .12E         ; 縦はみ出してなければgoto .12E
   145 0000052A BA00000000          <1>     mov edx, 0      ; はみ出してれば左上に戻る
   146                              <1> .12E:
   147 0000052F EBD6                <1>     jmp .10L
   148                              <1> .10E:
   149                              <1> 
   150 00000531 5E                  <1>     pop esi
   151 00000532 5A                  <1>     pop edx
   152 00000533 59                  <1>     pop ecx
   153 00000534 5B                  <1>     pop ebx
   154 00000535 58                  <1>     pop eax
   155                              <1> 
   156 00000536 89EC                <1>     mov esp, ebp
   157 00000538 5D                  <1>     pop ebp
   158                              <1> 
   159 00000539 C3                  <1>     ret
   106                                  %include "../modules/protect/draw_color_bar.s"
   107                              <1> draw_color_bar:     ; void draw_color_bar(col, row);
   108                              <1> ; col: 列
   109                              <1> ; row: 行
   110 0000053A 55                  <1>     push ebp
   111 0000053B 89E5                <1>     mov ebp, esp
   112                              <1> 
   113 0000053D 50                  <1>     push eax
   114 0000053E 53                  <1>     push ebx
   115 0000053F 51                  <1>     push ecx
   116 00000540 52                  <1>     push edx
   117 00000541 56                  <1>     push esi
   118 00000542 57                  <1>     push edi
   119                              <1> 
   120                              <1> 
   121 00000543 8B7508              <1>     mov esi, [ebp + 8]      ; x
   122 00000546 8B7D0C              <1>     mov edi, [ebp +12]      ; y
   123                              <1> 
   124                              <1>     ; カラーバーを表示
   125 00000549 B900000000          <1>     mov ecx, 0
   126                              <1> .10L:
   127 0000054E 83F910              <1>     cmp ecx, 16
   128 00000551 732E                <1>     jae .10E
   129                              <1> 
   130                              <1>     ; 一回で8文字
   131 00000553 89C8                <1>     mov eax, ecx
   132 00000555 83E001              <1>     and eax, 0x01
   133 00000558 C1E003              <1>     shl eax, 3
   134 0000055B 01F0                <1>     add eax, esi    ; col
   135                              <1> 
   136                              <1>     ; 2回に1回改行
   137 0000055D 89CB                <1>     mov ebx, ecx
   138 0000055F D1EB                <1>     shr ebx, 1
   139 00000561 01FB                <1>     add ebx, edi    ; row
   140                              <1> 
   141                              <1>     ; 背景色を2色見たら下位次の行
   142 00000563 89CA                <1>     mov edx, ecx
   143 00000565 D1E2                <1>     shl edx, 1
   144 00000567 8B92[94050000]      <1>     mov edx, [.t0 + edx]    ; color
   145                              <1> 
   146 0000056D 68[8B050000]525350- <1>     cdecl draw_str, eax, ebx, edx, .s0
   146 00000575 E877FFFFFF6683C410  <1>
   147                              <1> 
   148 0000057E 41                  <1>     inc ecx
   149 0000057F EBCD                <1>     jmp .10L
   150                              <1> .10E:
   151                              <1> 
   152 00000581 5F                  <1>     pop edi
   153 00000582 5E                  <1>     pop esi
   154 00000583 5A                  <1>     pop edx
   155 00000584 59                  <1>     pop ecx
   156 00000585 5B                  <1>     pop ebx
   157 00000586 58                  <1>     pop eax
   158                              <1> 
   159 00000587 89EC                <1>     mov esp, ebp
   160 00000589 5D                  <1>     pop ebp
   161                              <1> 
   162 0000058A C3                  <1>     ret
   163                              <1> 
   164                              <1> 
   165 0000058B 202020202020202000  <1> .s0: db '        ', 0
   166                              <1> 
   167                              <1> .t0:
   168 00000594 00000008            <1>     dw 0x0000, 0x0800
   169 00000598 00010009            <1>     dw 0x0100, 0x0900
   170 0000059C 0002000A            <1>     dw 0x0200, 0x0A00
   171 000005A0 0003000B            <1>     dw 0x0300, 0x0B00
   172 000005A4 0004000C            <1>     dw 0x0400, 0x0C00
   173 000005A8 0005000D            <1>     dw 0x0500, 0x0D00
   174 000005AC 0006000E            <1>     dw 0x0600, 0x0E00
   175 000005B0 0007000F            <1>     dw 0x0700, 0x0F00
   107                                  %include "../modules/protect/draw_pixel.s"
   108                              <1> draw_pixel:     ; void draw_pixel(x, y, color);
   109                              <1> ; x: X座標
   110                              <1> ; y: Y座標
   111                              <1> ; color: 描画色
   112 000005B4 55                  <1>     push ebp
   113 000005B5 89E5                <1>     mov ebp, esp
   114                              <1> 
   115 000005B7 50                  <1>     push eax
   116 000005B8 53                  <1>     push ebx
   117 000005B9 51                  <1>     push ecx
   118 000005BA 57                  <1>     push edi
   119                              <1> 
   120                              <1> 
   121                              <1> 
   122                              <1>     ; y座標*80->y*(640/8)
   123 000005BB 8B7D0C              <1>     mov edi, [ebp +12]
   124 000005BE C1E704              <1>     shl edi, 4
   125 000005C1 8DBCBF00000A00      <1>     lea edi, [edi * 4 + edi + 0x0A_0000]
   126                              <1> 
   127                              <1>     ; x座標/8  8pixel単位の位置
   128 000005C8 8B5D08              <1>     mov ebx, [ebp + 8]
   129 000005CB 89D9                <1>     mov ecx, ebx
   130 000005CD C1EB03              <1>     shr ebx, 3
   131 000005D0 01DF                <1>     add edi, ebx
   132                              <1> 
   133                              <1>     ; x座標を8で割った余りからビット位置を計算
   134                              <1>     ; 8pixel中の位置
   135                              <1>     ; 0=0b1000_0000, 1=0b0100_0000, ... , 7=0b0000_0001
   136 000005D2 83E107              <1>     and ecx, 0x07   ; 下位3ビットは8で割ったときの余り
   137 000005D5 BB80000000          <1>     mov ebx, 0x80
   138 000005DA D3EB                <1>     shr ebx, cl
   139                              <1> 
   140 000005DC 8B4D10              <1>     mov ecx, [ebp +16]
   141                              <1> 
   142                              <1>     ; プレーンごとに出力
   143 000005DF 6A03E84DFDFFFF6683- <1>     cdecl vga_set_read_plane, 0x03              ; 輝度（I）プレーンを選択
   143 000005E8 C404                <1>
   144 000005EA 6A08E85FFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x08             ; 輝度（I）プレーンを選択
   144 000005F3 C404                <1>
   145 000005F5 516A085753E8C1FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x08, ecx 
   145 000005FE FF6683C410          <1>
   146                              <1> 
   147 00000603 6A02E829FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x02              ; Rプレーンを選択
   147 0000060C C404                <1>
   148 0000060E 6A04E83BFDFFFF6683- <1>     cdecl vga_set_write_plane, 0x04             ; Rプレーンを選択
   148 00000617 C404                <1>
   149 00000619 516A045753E89DFDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x04, ecx 
   149 00000622 FF6683C410          <1>
   150                              <1> 
   151 00000627 6A01E805FDFFFF6683- <1>     cdecl vga_set_read_plane, 0x01              ; Gプレーンを選択
   151 00000630 C404                <1>
   152 00000632 6A02E817FDFFFF6683- <1>     cdecl vga_set_write_plane, 0x02             ; Gプレーンを選択
   152 0000063B C404                <1>
   153 0000063D 516A025753E879FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x02, ecx 
   153 00000646 FF6683C410          <1>
   154                              <1> 
   155 0000064B 6A00E8E1FCFFFF6683- <1>     cdecl vga_set_read_plane, 0x00              ; Bプレーンを選択
   155 00000654 C404                <1>
   156 00000656 6A01E8F3FCFFFF6683- <1>     cdecl vga_set_write_plane, 0x01             ; Bプレーンを選択
   156 0000065F C404                <1>
   157 00000661 516A015753E855FDFF- <1>     cdecl vram_bit_copy, ebx, edi, 0x01, ecx 
   157 0000066A FF6683C410          <1>
   158                              <1> 
   159 0000066F 5F                  <1>     pop edi
   160 00000670 59                  <1>     pop ecx
   161 00000671 5B                  <1>     pop ebx
   162 00000672 58                  <1>     pop eax
   163                              <1> 
   164 00000673 89EC                <1>     mov esp, ebp
   165 00000675 5D                  <1>     pop ebp
   166                              <1> 
   167 00000676 C3                  <1>     ret
   108                                  %include "../modules/protect/draw_line.s"
   109                              <1> draw_line:  ; void draw_line(X0, Y0, X1, Y1, color);
   110                              <1> ; X0 始点のＸ座標
   111                              <1> ; Y0 始点のＹ座標
   112                              <1> ; X1 終点のX座標
   113                              <1> ; Y1 終点のY座標
   114                              <1> ; color 描画色
   115 00000677 55                  <1>     push ebp        ; EBP+ 4| EIP(戻り番地)
   116 00000678 89E5                <1>     mov ebp, esp    ; EBP+ 0| EBP(元の値)
   117                              <1>                     ; ----------------
   118 0000067A 6A00                <1>     push dword 0    ;    - 4| sum   = 0
   119 0000067C 6A00                <1>     push dword 0    ;    - 8| x0    = 0
   120 0000067E 6A00                <1>     push dword 0    ;    -12| dx    = 0
   121 00000680 6A00                <1>     push dword 0    ;    -16| inc_x = 0
   122 00000682 6A00                <1>     push dword 0    ;    -20| y0    = 0
   123 00000684 6A00                <1>     push dword 0    ;    -24| dy    = 0
   124 00000686 6A00                <1>     push dword 0    ;    -28| inc_y = 0
   125                              <1> 
   126 00000688 50                  <1>     push eax        ;    -32| eax
   127 00000689 53                  <1>     push ebx        ;    -36| ebx
   128 0000068A 51                  <1>     push ecx        ;    -40| ecx
   129 0000068B 52                  <1>     push edx        ;    -44| edx
   130 0000068C 56                  <1>     push esi        ;    -48| esi
   131 0000068D 57                  <1>     push edi        ;    -52| edi
   132                              <1>     ; espはebp-52?
   133                              <1> 
   134                              <1>     ; x0とx1の距離を計算
   135 0000068E 8B4508              <1>     mov eax, [ebp + 8]
   136 00000691 8B5D10              <1>     mov ebx, [ebp +16]
   137 00000694 29C3                <1>     sub ebx, eax
   138 00000696 7D09                <1>     jge .10F
   139                              <1> 
   140 00000698 F7DB                <1>     neg ebx
   141 0000069A BEFFFFFFFF          <1>     mov esi, -1
   142 0000069F EB05                <1>     jmp .10E
   143                              <1> .10F:
   144 000006A1 BE01000000          <1>     mov esi, 1
   145                              <1> .10E:
   146                              <1>     
   147                              <1>     ; y0とy1の距離を計算
   148 000006A6 8B4D0C              <1>     mov ecx, [ebp +12]
   149 000006A9 8B5514              <1>     mov edx, [ebp +20]
   150 000006AC 29CA                <1>     sub edx, ecx
   151 000006AE 7D09                <1>     jge .20F
   152                              <1> 
   153 000006B0 F7DA                <1>     neg edx
   154 000006B2 BFFFFFFFFF          <1>     mov edi, -1
   155 000006B7 EB05                <1>     jmp .20E
   156                              <1> .20F:
   157 000006B9 BF01000000          <1>     mov edi, 1
   158                              <1> .20E:
   159                              <1>     
   160                              <1>     ; x軸
   161 000006BE 8945F8              <1>     mov [ebp - 8], eax  ; 開始座標
   162 000006C1 895DF4              <1>     mov [ebp -12], ebx  ; 描画幅
   163 000006C4 8975F0              <1>     mov [ebp -16], esi  ; 増分(基準軸:1 or -1)
   164                              <1> 
   165                              <1>     ; y軸
   166 000006C7 894DEC              <1>     mov [ebp -20], ecx  ; 開始座標
   167 000006CA 8955E8              <1>     mov [ebp -24], edx  ; 描画幅
   168 000006CD 897DE4              <1>     mov [ebp -28], edi  ; 増分(基準軸:1 or -1)
   169                              <1> 
   170                              <1> 
   171                              <1>     ; 基準軸を決める
   172 000006D0 39D3                <1>     cmp ebx, edx
   173 000006D2 7F08                <1>     jg .22F
   174                              <1>     
   175 000006D4 8D75EC              <1>     lea esi, [ebp -20]  ; Yが基準軸
   176 000006D7 8D7DF8              <1>     lea edi, [ebp - 8]
   177                              <1> 
   178 000006DA EB06                <1>     jmp .22E
   179                              <1> .22F:
   180                              <1>     
   181 000006DC 8D75F8              <1>     lea esi, [ebp - 8]  ; Xが基準軸
   182 000006DF 8D7DEC              <1>     lea edi, [ebp -20]
   183                              <1> .22E:
   184                              <1> 
   185                              <1> ; 基準軸 esi
   186                              <1> ; 相対軸 edi
   187                              <1> 
   188                              <1>     ; 繰り返し回数（基準軸のドット数）
   189 000006E2 8B4EFC              <1>     mov ecx, [esi - 4]
   190 000006E5 83F900              <1>     cmp ecx, 0
   191 000006E8 7505                <1>     jnz .30E
   192 000006EA B901000000          <1>     mov ecx, 1          ; if(基準軸の描画幅 == 0) 基準軸の描画幅 = 1
   193                              <1> .30E:
   194                              <1> 
   195                              <1>     ; 線を描画
   196                              <1> .50L:
   197                              <1> 
   198 000006EF FF7518FF75ECFF75F8- <1>     cdecl draw_pixel, dword [ebp - 8],                       dword [ebp -20],                       dword [ebp +24]
   198 000006F8 E8B7FEFFFF6683C40C  <1>
   201                              <1> 
   202                              <1>     ; 座標更新
   203                              <1> 
   204                              <1>     ; 基準軸の更新
   205 00000701 8B46F8              <1>     mov eax, [esi - 8]
   206 00000704 0106                <1>     add [esi - 0], eax  ; 基準軸開始座標 += 基準軸増分(1 or -1)
   207                              <1> 
   208                              <1>     ; 相対軸の更新
   209 00000706 8B45FC              <1>     mov eax, [ebp - 4]  ; 相対軸の今まで描画したピクセル数
   210 00000709 0347FC              <1>     add eax, [edi - 4]  ;           += 増分
   211                              <1> 
   212 0000070C 8B5EFC              <1>     mov ebx, [esi - 4]  ; 基準軸の描画幅
   213                              <1> 
   214 0000070F 39D8                <1>     cmp eax, ebx        ; if(積算 < 基準軸の描画幅) goto .52E
   215 00000711 7C07                <1>     jl .52E
   216 00000713 29D8                <1>     sub eax, ebx        ; 積算 -= 描画幅
   217                              <1> 
   218 00000715 8B5FF8              <1>     mov ebx, [edi - 8]
   219 00000718 011F                <1>     add [edi - 0], ebx  ; 相対軸の座標 += 相対軸増分
   220                              <1> .52E:
   221                              <1>     
   222 0000071A 8945FC              <1>     mov [ebp - 4], eax  ; 積算値を更新
   223                              <1> 
   224 0000071D E2D0                <1>     loop .50L
   225                              <1> .50E:
   226                              <1> 
   227                              <1> 
   228 0000071F 5F                  <1>     pop edi
   229 00000720 5E                  <1>     pop esi
   230 00000721 5A                  <1>     pop edx
   231 00000722 59                  <1>     pop ecx
   232 00000723 5B                  <1>     pop ebx
   233 00000724 58                  <1>     pop eax
   234                              <1>     ; espはebp-28?
   235                              <1> 
   236                              <1>     ; ↓これいらないの？
   237                              <1>     ; pop (tmp_reg)
   238                              <1>     ; pop (tmp_reg)
   239                              <1>     ; pop (tmp_reg)
   240                              <1>     ; pop (tmp_reg)
   241                              <1>     ; pop (tmp_reg)
   242                              <1>     ; pop (tmp_reg)
   243                              <1>     ; pop (tmp_reg)
   244                              <1>     ; もしくはsub esp, 56とか？
   245                              <1> 
   246                              <1>     ; espはebp?
   247 00000725 89EC                <1>     mov esp, ebp
   248 00000727 5D                  <1>     pop ebp
   249                              <1> 
   250 00000728 C3                  <1>     ret
   109                                  %include "../modules/protect/draw_rect.s"
   110                              <1> draw_rect:  ; void draw_rect(x0, y0, x1, y1, color);
   111 00000729 55                  <1>     push ebp
   112 0000072A 89E5                <1>     mov ebp, esp
   113                              <1>     
   114 0000072C 50                  <1>     push eax
   115 0000072D 53                  <1>     push ebx
   116 0000072E 51                  <1>     push ecx
   117 0000072F 52                  <1>     push edx
   118 00000730 56                  <1>     push esi
   119                              <1> 
   120 00000731 8B4508              <1>     mov eax, [ebp + 8]  ; x0
   121 00000734 8B5D0C              <1>     mov ebx, [ebp +12]  ; y0
   122 00000737 8B4D10              <1>     mov ecx, [ebp +16]  ; x1
   123 0000073A 8B5514              <1>     mov edx, [ebp +20]  ; y1
   124 0000073D 8B7518              <1>     mov esi, [ebp +24]  ; color
   125                              <1> 
   126                              <1>     ; 左上(x0, y0) 右下(x1, y1)にする
   127 00000740 39C8                <1>     cmp eax, ecx
   128 00000742 7C01                <1>     jl .10E
   129 00000744 91                  <1>     xchg eax, ecx
   130                              <1> .10E:
   131 00000745 39D3                <1>     cmp ebx, edx
   132 00000747 7C02                <1>     jl .20E
   133 00000749 87DA                <1>     xchg ebx, edx
   134                              <1> .20E:
   135                              <1> 
   136                              <1>     ; 矩形を描画
   137 0000074B 5653515350E822FFFF- <1>     cdecl draw_line, eax, ebx, ecx, ebx, esi    ; 上線
   137 00000754 FF6683C414          <1>
   138 00000759 5652505350E814FFFF- <1>     cdecl draw_line, eax, ebx, eax, edx, esi    ; 左線
   138 00000762 FF6683C414          <1>
   139                              <1> 
   140 00000767 4A                  <1>     dec edx
   141 00000768 5652515250E805FFFF- <1>     cdecl draw_line, eax, edx, ecx, edx, esi    ; 下線（1ドット上）
   141 00000771 FF6683C414          <1>
   142 00000776 42                  <1>     inc edx
   143                              <1> 
   144 00000777 49                  <1>     dec ecx
   145 00000778 5652515351E8F5FEFF- <1>     cdecl draw_line, ecx, ebx, ecx, edx, esi    ; 右線（1ドット左）
   145 00000781 FF6683C414          <1>
   146                              <1> 
   147 00000786 5E                  <1>     pop esi
   148 00000787 5A                  <1>     pop edx
   149 00000788 59                  <1>     pop ecx
   150 00000789 5B                  <1>     pop ebx
   151 0000078A 58                  <1>     pop eax
   152                              <1>     
   153 0000078B 89EC                <1>     mov esp, ebp
   154 0000078D 5D                  <1>     pop ebp
   155                              <1> 
   156 0000078E C3                  <1>     ret
   110                                  %include "../modules/protect/itoa.s"
   111                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   112                              <1> ; num   変換する値
   113                              <1> ; buff  保存先バッファアドレス
   114                              <1> ; size  保存先バッファサイズ
   115                              <1> ; radix 基数（2, 8, 10, 16)
   116                              <1> ; flags 
   117                              <1> ;   B2: 空白を'0'で埋める
   118                              <1> ;   B1: '+/-'記号を付加する
   119                              <1> ;   B0: 値を符号付き変数として扱う
   120                              <1> 
   121 0000078F 55                  <1>     push ebp
   122 00000790 89E5                <1>     mov ebp, esp
   123                              <1> 
   124 00000792 50                  <1>     push eax
   125 00000793 53                  <1>     push ebx
   126 00000794 51                  <1>     push ecx
   127 00000795 52                  <1>     push edx
   128 00000796 56                  <1>     push esi
   129 00000797 57                  <1>     push edi
   130                              <1> 
   131                              <1> 
   132                              <1>     ; 引数取得
   133 00000798 8B4508              <1>     mov eax, [ebp + 8]    ; num
   134 0000079B 8B750C              <1>     mov esi, [ebp +12]    ; size
   135 0000079E 8B4D10              <1>     mov ecx, [ebp +16]    ; buff
   136                              <1> 
   137 000007A1 89F7                <1>     mov edi, esi
   138 000007A3 01CF                <1>     add edi, ecx
   139 000007A5 4F                  <1>     dec edi              ; edi = &esi[ecx-1]
   140                              <1> 
   141 000007A6 8B5D18              <1>     mov ebx, [ebp +24]   ; flags
   142                              <1> 
   143                              <1>     ; 符号付き判定
   144 000007A9 F7C301000000        <1>     test ebx, 0b0001     ; 論理積を計算、0ならZFをセット
   145                              <1> .10Q:
   146 000007AF 7408                <1>     je .10E         ; E=Exit
   147 000007B1 83F800              <1>     cmp eax, 0
   148                              <1> .12Q:
   149 000007B4 7D03                <1>     jge .12E
   150 000007B6 83CB02              <1>     or ebx, 0b0010
   151                              <1> .12E:
   152                              <1> .10E:
   153                              <1> 
   154                              <1>     ; 符号出力判定
   155 000007B9 F7C302000000        <1>     test ebx, 0b0010
   156                              <1> .20Q:
   157 000007BF 7410                <1>     je .20E
   158 000007C1 83F800              <1>     cmp eax, 0
   159                              <1> .22Q:
   160 000007C4 7D07                <1>     jge .22F
   161 000007C6 F7D8                <1>     neg eax
   162 000007C8 C6062D              <1>     mov [esi], byte '-'
   163 000007CB EB03                <1>     jmp .22E
   164                              <1> .22F:
   165                              <1>     
   166 000007CD C6062B              <1>     mov [esi], byte '+'
   167                              <1> .22E:
   168 000007D0 49                  <1>     dec ecx
   169                              <1> .20E:
   170                              <1> 
   171                              <1>     ; ASCII変換
   172 000007D1 8B5D14              <1>     mov ebx, [ebp +20]   ; radix(基数)
   173                              <1> .30L:
   174 000007D4 BA00000000          <1>     mov edx, 0
   175 000007D9 F7F3                <1>     div ebx      ; 商：ax, あまり: dx
   176                              <1> 
   177 000007DB 89D6                <1>     mov esi, edx
   178 000007DD 8A96[07080000]      <1>     mov dl, byte [.ascii + esi]
   179                              <1> 
   180 000007E3 8817                <1>     mov [edi], dl
   181 000007E5 4F                  <1>     dec edi
   182                              <1> 
   183 000007E6 83F800              <1>     cmp eax, 0
   184 000007E9 E0E9                <1>     loopnz .30L
   185                              <1> .30E:
   186                              <1> 
   187                              <1>     ; 空欄を埋める
   188 000007EB 83F900              <1>     cmp ecx, 0  ; 空白なしならgoto .40E
   189                              <1> .40Q:
   190 000007EE 740D                <1>     je .40E
   191 000007F0 B020                <1>     mov al, ' '
   192 000007F2 837D1804            <1>     cmp [ebp +24], dword 0b0100
   193                              <1> .42Q:
   194 000007F6 7502                <1>     jne .42E
   195 000007F8 B030                <1>     mov al, '0'
   196                              <1> .42E:
   197 000007FA FD                  <1>     std         ; dimention flag = 1(-方向)
   198 000007FB F3AA                <1>     rep stosb   ; while (--ecx) *edi-- = al;
   199                              <1> .40E:
   200                              <1> 
   201 000007FD 5F                  <1>     pop edi
   202 000007FE 5E                  <1>     pop esi
   203 000007FF 5A                  <1>     pop edx
   204 00000800 59                  <1>     pop ecx
   205 00000801 5B                  <1>     pop ebx
   206 00000802 58                  <1>     pop eax
   207                              <1> 
   208 00000803 89EC                <1>     mov esp, ebp
   209 00000805 5D                  <1>     pop ebp
   210                              <1> 
   211 00000806 C3                  <1>     ret
   212                              <1> 
   213 00000807 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   213 00000810 39414243444546      <1>
   111                                  %include "../modules/protect/rtc.s"
   112                              <1> rtc_get_time:   ; int rtc_get_time(dst);
   113                              <1> ; dst: 保存先アドレス
   114                              <1> ; 戻り値: 成功(0以外)、失敗(0)
   115 00000817 55                  <1>     push ebp
   116 00000818 89E5                <1>     mov ebp, esp
   117                              <1> 
   118 0000081A 50                  <1>     push eax
   119 0000081B 53                  <1>     push ebx
   120                              <1> 
   121 0000081C B00A                <1>     mov al, 0x0A    ; レジスタA
   122 0000081E E670                <1>     out 0x70, al
   123 00000820 E471                <1>     in al, 0x71
   124 00000822 A880                <1>     test al, 0x80   ; if(!更新中) goto .10F
   125 00000824 7407                <1>     je .10F
   126 00000826 B801000000          <1>     mov eax, 1      ; 更新中は失敗
   127 0000082B EB27                <1>     jmp .10E
   128                              <1> .10F:
   129                              <1> 
   130 0000082D B004                <1>     mov al, 0x04    ; 時
   131 0000082F E670                <1>     out 0x70, al    ; レジスタ設定
   132 00000831 E471                <1>     in al, 0x71     ; 時刻読み込み
   133                              <1> 
   134 00000833 C1E008              <1>     shl eax, 8      ; alをahに退避
   135                              <1> 
   136 00000836 B002                <1>     mov al, 0x02    ; 分
   137 00000838 E670                <1>     out 0x70, al    ; レジスタ設定
   138 0000083A E471                <1>     in al, 0x71     ; 時刻読み込み
   139                              <1> 
   140 0000083C C1E008              <1>     shl eax, 8      ; alをahに退避
   141                              <1> 
   142 0000083F B000                <1>     mov al, 0x00    ; 秒
   143 00000841 E670                <1>     out 0x70, al    ; レジスタ設定
   144 00000843 E471                <1>     in al, 0x71     ; 時刻読み込み
   145                              <1> 
   146 00000845 25FFFFFF00          <1>     and eax, 0x00_FF_FF_FF  ; 時:分:秒のみ有効
   147                              <1> 
   148 0000084A 8B5D08              <1>     mov ebx, [ebp + 8]
   149 0000084D 8903                <1>     mov [ebx], eax  ; [dst] = 時刻
   150                              <1> 
   151 0000084F B800000000          <1>     mov eax, 0
   152                              <1> .10E:
   153                              <1> 
   154 00000854 5B                  <1>     pop ebx
   155 00000855 58                  <1>     pop eax
   156                              <1> 
   157 00000856 89EC                <1>     mov esp, ebp
   158 00000858 5D                  <1>     pop ebp
   159                              <1> 
   160 00000859 C3                  <1>     ret
   112                                  %include "../modules/protect/draw_time.s"
   113                              <1> draw_time:  ; void draw_time(col, row, color, time);
   114                              <1> ; time 時刻データ
   115 0000085A 55                  <1>     push ebp
   116 0000085B 89E5                <1>     mov ebp, esp
   117                              <1> 
   118 0000085D 50                  <1>     push eax
   119 0000085E 53                  <1>     push ebx
   120                              <1>     
   121 0000085F 8B4514              <1>     mov eax, [ebp +20]  ; 時:分:秒
   122                              <1> 
   123 00000862 0FB6D8              <1>     movzx ebx, al       ; 秒だけ
   124 00000865 6A046A106A0268-     <1>     cdecl itoa, ebx, .sec, 2, 16, 0b0100
   124 0000086C [CC080000]53E819FF- <1>
   124 00000874 FFFF6683C414        <1>
   125                              <1> 
   126 0000087A 88E3                <1>     mov bl, ah          ; 分だけ
   127 0000087C 6A046A106A0268-     <1>     cdecl itoa, ebx, .min, 2, 16, 0b0100
   127 00000883 [C9080000]53E802FF- <1>
   127 0000088B FFFF6683C414        <1>
   128                              <1>     
   129 00000891 C1E810              <1>     shr eax, 16         ; 時だけ
   130 00000894 6A046A106A0268-     <1>     cdecl itoa, eax, .hour, 2, 16, 0b0100
   130 0000089B [C6080000]50E8EAFE- <1>
   130 000008A3 FFFF6683C414        <1>
   131                              <1> 
   132 000008A9 68[C6080000]FF7510- <1>     cdecl draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour ; 文字の表示
   132 000008B1 FF750CFF7508E835FC- <1>
   132 000008BA FFFF6683C410        <1>
   133                              <1> 
   134 000008C0 5B                  <1>     pop ebx
   135 000008C1 58                  <1>     pop eax
   136                              <1> 
   137 000008C2 89EC                <1>     mov esp, ebp
   138 000008C4 5D                  <1>     pop ebp
   139                              <1> 
   140 000008C5 C3                  <1>     ret
   141                              <1> 
   142 000008C6 5A5A3A              <1> .hour: db "ZZ:"
   143 000008C9 5A5A3A              <1> .min:  db "ZZ:"
   144 000008CC 5A5A00              <1> .sec:  db "ZZ", 0
   113                                  %include "../modules/protect/interrupt.s"
   114                              <1> int_stop:
   115 000008CF FB                  <1>     sti ; 割り込みを許可
   116                              <1> 
   117                              <1>     ; EAXで示される文字列を表示
   118 000008D0 50680F0600006A0F6A- <1>     cdecl draw_str, 25, 15, 0x060F, eax
   118 000008D9 19E812FCFFFF6683C4- <1>
   118 000008E2 10                  <1>
   119                              <1> 
   120                              <1>     ; スタックのデータを文字列に変換
   121 000008E3 8B0424              <1>     mov eax, [esp + 0]
   122 000008E6 6A046A106A0868-     <1>     cdecl itoa, eax, .p1, 8, 16, 0b0100
   122 000008ED [AB090000]50E898FE- <1>
   122 000008F5 FFFF6683C414        <1>
   123                              <1> 
   124 000008FB 8B442404            <1>     mov eax, [esp + 4]
   125 000008FF 6A046A106A0868-     <1>     cdecl itoa, eax, .p2, 8, 16, 0b0100
   125 00000906 [BC090000]50E87FFE- <1>
   125 0000090E FFFF6683C414        <1>
   126                              <1> 
   127 00000914 8B442408            <1>     mov eax, [esp + 8]
   128 00000918 6A046A106A0868-     <1>     cdecl itoa, eax, .p3, 8, 16, 0b0100
   128 0000091F [CD090000]50E866FE- <1>
   128 00000927 FFFF6683C414        <1>
   129                              <1> 
   130 0000092D 8B44240C            <1>     mov eax, [esp +12]
   131 00000931 6A046A106A0868-     <1>     cdecl itoa, eax, .p4, 8, 16, 0b0100
   131 00000938 [DE090000]50E84DFE- <1>
   131 00000940 FFFF6683C414        <1>
   132                              <1> 
   133                              <1>     ; 文字列の表示
   134 00000946 68[A4090000]68040F- <1>     cdecl draw_str, 25, 16, 0x0F04, .s1
   134 0000094E 00006A106A19E898FB- <1>
   134 00000957 FFFF6683C410        <1>
   135 0000095D 68[B5090000]68040F- <1>     cdecl draw_str, 25, 17, 0x0F04, .s2
   135 00000965 00006A116A19E881FB- <1>
   135 0000096E FFFF6683C410        <1>
   136 00000974 68[C6090000]68040F- <1>     cdecl draw_str, 25, 18, 0x0F04, .s3
   136 0000097C 00006A126A19E86AFB- <1>
   136 00000985 FFFF6683C410        <1>
   137 0000098B 68[D7090000]68040F- <1>     cdecl draw_str, 25, 19, 0x0F04, .s4
   137 00000993 00006A136A19E853FB- <1>
   137 0000099C FFFF6683C410        <1>
   138                              <1> 
   139                              <1>     ; 無限ループ
   140 000009A2 EBFE                <1>     jmp $
   141                              <1> 
   142 000009A4 4553502B20303A      <1> .s1 db "ESP+ 0:"
   143 000009AB 5F5F5F5F5F5F5F5F20- <1> .p1 db "________ ", 0
   143 000009B4 00                  <1>
   144 000009B5 2020202B20343A      <1> .s2 db "   + 4:"
   145 000009BC 5F5F5F5F5F5F5F5F20- <1> .p2 db "________ ", 0
   145 000009C5 00                  <1>
   146 000009C6 2020202B20383A      <1> .s3 db "   + 8:"
   147 000009CD 5F5F5F5F5F5F5F5F20- <1> .p3 db "________ ", 0
   147 000009D6 00                  <1>
   148 000009D7 2020202B31323A      <1> .s4 db "   +12:"
   149 000009DE 5F5F5F5F5F5F5F5F20- <1> .p4 db "________ ", 0
   149 000009E7 00                  <1>
   150                              <1> 
   151                              <1> int_default:
   152 000009E8 9C                  <1>     pushf       ; EFLAGS(IF==0)
   153 000009E9 0E                  <1>     push cs
   154 000009EA 68[CF080000]        <1>     push int_stop
   155                              <1> 
   156 000009EF B8[F5090000]        <1>     mov eax, .s0
   157 000009F4 CF                  <1>     iret
   158                              <1> 
   159 000009F5 203C2020202053544F- <1> .s0 db " <    STOP    > ", 0
   159 000009FE 50202020203E2000    <1>
   160                              <1> 
   161                              <1> 
   162                              <1> ; 割り込みベクタの初期化
   163 00000A06 90<rep 2h>          <1> ALIGN 4
   164 00000A08 FF07                <1> IDTR: dw 8 * 256 - 1    ; idt_limit
   165 00000A0A 00001000            <1>       dd VECT_BASE      ; idt location
   166                              <1> 
   167                              <1> ; 割り込みテーブルを初期化
   168                              <1> init_int:
   169 00000A0E 50                  <1>     push eax
   170 00000A0F 53                  <1>     push ebx
   171 00000A10 51                  <1>     push ecx
   172 00000A11 57                  <1>     push edi
   173                              <1> 
   174                              <1>     ; 全ての割り込みにデフォルト処理を設定
   175 00000A12 8D05[E8090000]      <1>     lea eax, [int_default]  ; 割り込み処理アドレス
   176 00000A18 BB008E0800          <1>     mov ebx, 0x0008_8E00    ; セグメントセレクタ
   177 00000A1D 6693                <1>     xchg ax, bx             ; 下位ワードを交換（指定の書式に整形）
   178                              <1> 
   179 00000A1F B900010000          <1>     mov ecx, 256            ; 割り込みベクタ数
   180 00000A24 BF00001000          <1>     mov edi, VECT_BASE      ; 割り込みベクタテーブル
   181                              <1> 
   182                              <1>     ; メモリに書き込み
   183                              <1> .10L:
   184 00000A29 891F                <1>     mov [edi + 0], ebx
   185 00000A2B 894704              <1>     mov [edi + 4], eax
   186 00000A2E 83C708              <1>     add edi, 8
   187 00000A31 E2F6                <1>     loop .10L
   188                              <1> 
   189                              <1>     ; 割り込みディスクリプタの設定
   190 00000A33 0F011D[080A0000]    <1>     lidt [IDTR]
   191                              <1> 
   192 00000A3A 5F                  <1>     pop edi
   193 00000A3B 59                  <1>     pop ecx
   194 00000A3C 5B                  <1>     pop ebx
   195 00000A3D 58                  <1>     pop eax
   196                              <1> 
   197 00000A3E C3                  <1>     ret
   198                              <1> 
   199                              <1> 
   200                              <1> int_zero_div:
   201 00000A3F 9C                  <1>     pushf
   202 00000A40 0E                  <1>     push cs
   203 00000A41 68[CF080000]        <1>     push int_stop
   204                              <1> 
   205 00000A46 B8[4C0A0000]        <1>     mov eax, .s0
   206 00000A4B CF                  <1>     iret
   207                              <1> 
   208 00000A4C 203C20205A45524F20- <1> .s0 db " <  ZERO DIV  > ", 0
   208 00000A55 44495620203E2000    <1>
   114                                  %include "../modules/protect/pic.s"
   115                              <1> init_pic:
   116 00000A5D 50                  <1>     push eax
   117                              <1> 
   118                              <1>     ; outp ポート, データ
   119                              <1> 
   120                              <1>     ; マスタの設定
   121                              <1>     outp 0x20, 0x11 ; MASTER.ICW1 = 0x11
    46 00000A5E B011                <2>  mov al, %2
    47 00000A60 E620                <2>  out %1, al
   122                              <1>     outp 0x21, 0x20 ; MASTER.ICW2 = 0x20
    46 00000A62 B020                <2>  mov al, %2
    47 00000A64 E621                <2>  out %1, al
   123                              <1>     outp 0x21, 0x04 ; MASTER.ICW3 = 0x04
    46 00000A66 B004                <2>  mov al, %2
    47 00000A68 E621                <2>  out %1, al
   124                              <1>     outp 0x21, 0x01 ; MASTER.ICW4 = 0x01
    46 00000A6A B001                <2>  mov al, %2
    47 00000A6C E621                <2>  out %1, al
   125                              <1>     outp 0x21, 0xFF ; マスタ割り込みマスク
    46 00000A6E B0FF                <2>  mov al, %2
    47 00000A70 E621                <2>  out %1, al
   126                              <1> 
   127                              <1>     ; スレーブの設定
   128                              <1>     outp 0xA0, 0x11 ; SLAVE.ICW1 = 0x11
    46 00000A72 B011                <2>  mov al, %2
    47 00000A74 E6A0                <2>  out %1, al
   129                              <1>     outp 0xA1, 0x28 ; SLAVE.ICW1 = 0x28
    46 00000A76 B028                <2>  mov al, %2
    47 00000A78 E6A1                <2>  out %1, al
   130                              <1>     outp 0xA1, 0x02 ; SLAVE.ICW1 = 0x02
    46 00000A7A B002                <2>  mov al, %2
    47 00000A7C E6A1                <2>  out %1, al
   131                              <1>     outp 0xA1, 0x01 ; SLAVE.ICW1 = 0x01
    46 00000A7E B001                <2>  mov al, %2
    47 00000A80 E6A1                <2>  out %1, al
   132                              <1>     outp 0xA1, 0xFF ; スレーブ割り込みマスク
    46 00000A82 B0FF                <2>  mov al, %2
    47 00000A84 E6A1                <2>  out %1, al
   133                              <1> 
   134 00000A86 58                  <1>     pop eax
   135                              <1> 
   136 00000A87 C3                  <1>     ret
   115                                  %include "../modules/protect/int_rtc.s"
   116                              <1> int_rtc:
   117 00000A88 60                  <1>     pusha   ; ax, bx, cx, dx, sp, bp, si, diをまとめてpush
   118 00000A89 1E                  <1>     push ds
   119 00000A8A 06                  <1>     push es
   120                              <1> 
   121                              <1>     ; データ用セグメントセレクタの設定
   122 00000A8B 66B81000            <1>     mov ax, 0x0010
   123 00000A8F 8ED8                <1>     mov ds, ax
   124 00000A91 8EC0                <1>     mov es, ax
   125                              <1> 
   126                              <1>     ; RTCから時刻を取得
   127 00000A93 68[9C010000]E87AFD- <1>     cdecl rtc_get_time, RTC_TIME
   127 00000A9B FFFF6683C404        <1>
   128                              <1> 
   129                              <1>     ; RTCの割り込み要因を取得
   130                              <1>     outp 0x70, 0x0C ; RTCのレジスタCを選択
    46 00000AA1 B00C                <2>  mov al, %2
    47 00000AA3 E670                <2>  out %1, al
   131 00000AA5 E471                <1>     in al, 0x71     ; RTCからデータを取得
   132                              <1> 
   133                              <1>     ; 割り込みフラグをクリア(EOI)
   134 00000AA7 B020                <1>     mov al, 0x20
   135 00000AA9 E6A0                <1>     out 0xA0, al    ; スレーブ
   136 00000AAB E620                <1>     out 0x20, al    ; マスタ
   137                              <1> 
   138 00000AAD 07                  <1>     pop es
   139 00000AAE 1F                  <1>     pop ds
   140 00000AAF 61                  <1>     popa
   141                              <1> 
   142 00000AB0 CF                  <1>     iret        ; 割り込み処理の終了
   143                              <1> 
   144                              <1> rtc_int_en:
   145 00000AB1 55                  <1>     push ebp
   146 00000AB2 89E5                <1>     mov ebp, esp
   147 00000AB4 50                  <1>     push eax
   148                              <1> 
   149                              <1>     ; 割り込み許可設定
   150                              <1>     outp 0x70, 0x0B ; RTCのレジスタBを選択
    46 00000AB5 B00B                <2>  mov al, %2
    47 00000AB7 E670                <2>  out %1, al
   151                              <1> 
   152 00000AB9 E471                <1>     in al, 0x71     ; RTCからデータを取得
   153 00000ABB 0A4508              <1>     or al, [ebp + 8]; 指定したビットをセット
   154                              <1> 
   155 00000ABE E671                <1>     out 0x71, al    ; RTCのレジスタBに書き込み
   156                              <1> 
   157 00000AC0 58                  <1>     pop eax
   158                              <1> 
   159 00000AC1 89EC                <1>     mov esp, ebp
   160 00000AC3 5D                  <1>     pop ebp
   161                              <1> 
   162 00000AC4 C3                  <1>     ret
   116                                  %include "../modules/protect/int_keyboard.s"
   117                              <1> int_keyboard:
   118 00000AC5 60                  <1>     pusha
   119 00000AC6 1E                  <1>     push ds
   120 00000AC7 06                  <1>     push es
   121                              <1> 
   122                              <1>     ; データ用セグメントの設定
   123 00000AC8 66B81000            <1>     mov ax, 0x0010
   124 00000ACC 8ED8                <1>     mov ds, ax
   125 00000ACE 8EC0                <1>     mov es, ax
   126                              <1> 
   127                              <1>     ; KBCのバッファ読み取り
   128 00000AD0 E460                <1>     in al, 0x60
   129                              <1> 
   130                              <1>     ; キーコードの保存
   131 00000AD2 5068[EC0A0000]E859- <1>     cdecl ring_wr, _KEY_BUFF, eax
   131 00000ADA 0000006683C408      <1>
   132                              <1> 
   133                              <1>     ; 割り込み終了コマンド送信
   134                              <1>     outp 0x20, 0x20
    46 00000AE1 B020                <2>  mov al, %2
    47 00000AE3 E620                <2>  out %1, al
   135                              <1> 
   136 00000AE5 07                  <1>     pop es
   137 00000AE6 1F                  <1>     pop ds
   138 00000AE7 61                  <1>     popa
   139                              <1> 
   140 00000AE8 CF                  <1>     iret
   141                              <1> 
   142 00000AE9 00<rep 3h>          <1> ALIGN 4, db 0
   143 00000AEC 00<rep 18h>         <1> _KEY_BUFF: times ring_buff_size db 0
   117                                  %include "../modules/protect/ring_buff.s"
   118                              <1> ring_rd:        ; int ring_rd(buff, data);
   119                              <1> ; buff リングバッファ
   120                              <1> ; data 読み込んだデータの保存先アドレス
   121                              <1> ; 戻り値: データあり(0以外), データなし(0)
   122                              <1> 
   123 00000B04 55                  <1>     push ebp
   124 00000B05 89E5                <1>     mov ebp, esp
   125                              <1> 
   126 00000B07 50                  <1>     push eax
   127 00000B08 53                  <1>     push ebx
   128 00000B09 56                  <1>     push esi
   129 00000B0A 57                  <1>     push edi
   130                              <1> 
   131                              <1>     ; 引数取得
   132 00000B0B 8B7508              <1>     mov esi, [ebp + 8]  ; リングバッファ
   133 00000B0E 8B7D0C              <1>     mov edi, [ebp +12]  ; データアドレス
   134                              <1> 
   135                              <1>     ; 読み込み位置を確認
   136 00000B11 B800000000          <1>     mov eax, 0                      ; 戻り値データなし
   137 00000B16 8B1E                <1>     mov ebx, [esi + ring_buff.rp]
   138 00000B18 3B5E04              <1>     cmp ebx, [esi + ring_buff.wp]
   139 00000B1B 7411                <1>     je .10E                         ; if(rp == wp) goto .10E
   140                              <1> 
   141 00000B1D 8A441E08            <1>     mov al, [esi + ring_buff.item + ebx]    ; データを保存
   142                              <1> 
   143 00000B21 8807                <1>     mov [edi], al
   144                              <1> 
   145 00000B23 43                  <1>     inc ebx ; 次の読み込み位置
   146 00000B24 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   147 00000B27 891E                <1>     mov [esi + ring_buff.rp], ebx   ; 読み込み位置を保存
   148                              <1> 
   149 00000B29 B801000000          <1>     mov eax, 1                      ; 戻り値データあり
   150                              <1> .10E:
   151                              <1> 
   152 00000B2E 5F                  <1>     pop edi
   153 00000B2F 5E                  <1>     pop esi
   154 00000B30 5B                  <1>     pop ebx
   155 00000B31 58                  <1>     pop eax
   156                              <1> 
   157 00000B32 89EC                <1>     mov esp, ebp
   158 00000B34 5D                  <1>     pop ebp
   159                              <1> 
   160 00000B35 C3                  <1>     ret
   161                              <1> 
   162                              <1> 
   163                              <1> ring_wr:    ; int ring_wr(buff, data);
   164                              <1> ; buff シリンダバッファ
   165                              <1> ; data 書き込むデータ
   166                              <1> ; 戻り値: 成功(0以外), 失敗(0)
   167 00000B36 55                  <1>     push ebp
   168 00000B37 89E5                <1>     mov ebp, esp
   169                              <1> 
   170 00000B39 50                  <1>     push eax
   171 00000B3A 53                  <1>     push ebx
   172 00000B3B 51                  <1>     push ecx
   173 00000B3C 56                  <1>     push esi
   174                              <1> 
   175 00000B3D 8B7508              <1>     mov esi, [ebp + 8]  ; esi = リングバッファ
   176                              <1> 
   177                              <1>     ; 書き込み位置を確認
   178 00000B40 B800000000          <1>     mov eax, 0      ; 戻り値 失敗
   179 00000B45 8B5E04              <1>     mov ebx, [esi + ring_buff.wp]   ; 書き込み位置
   180 00000B48 89D9                <1>     mov ecx, ebx
   181 00000B4A 41                  <1>     inc ecx                         ; 次の書き込み位置
   182 00000B4B 83E10F              <1>     and ecx, RING_INDEX_MASK        ; サイズの制限
   183                              <1> 
   184                              <1>     ; バッファフルなら処理しない
   185 00000B4E 3B0E                <1>     cmp ecx, [esi + ring_buff.rp]   ; if(次の書き込み位置==読み込み位置) goto .10E
   186 00000B50 740F                <1>     je .10E
   187                              <1> 
   188 00000B52 8A450C              <1>     mov al, [ebp +12]   ; al = キーコード
   189                              <1> 
   190 00000B55 88441E08            <1>     mov [esi + ring_buff.item + ebx], al    ; キーコード保存
   191 00000B59 894E04              <1>     mov [esi + ring_buff.wp], ecx           ; 書き込み位置保存
   192 00000B5C B801000000          <1>     mov eax, 1  ; 戻り値 成功
   193                              <1> .10E:
   194                              <1> 
   195 00000B61 5E                  <1>     pop esi
   196 00000B62 59                  <1>     pop ecx
   197 00000B63 5B                  <1>     pop ebx
   198 00000B64 58                  <1>     pop eax
   199                              <1> 
   200 00000B65 89EC                <1>     mov esp, ebp
   201 00000B67 5D                  <1>     pop ebp
   202                              <1> 
   203 00000B68 C3                  <1>     ret
   204                              <1> 
   205                              <1> draw_key:
   206 00000B69 55                  <1>     push ebp
   207 00000B6A 89E5                <1>     mov ebp, esp
   208                              <1> 
   209 00000B6C 50                  <1>     push eax
   210 00000B6D 53                  <1>     push ebx
   211 00000B6E 51                  <1>     push ecx
   212 00000B6F 52                  <1>     push edx
   213 00000B70 56                  <1>     push esi
   214 00000B71 57                  <1>     push edi
   215                              <1> 
   216                              <1> 
   217 00000B72 8B5508              <1>     mov edx, [ebp + 8]  ; edx = x列
   218 00000B75 8B7D0C              <1>     mov edi, [ebp +12]  ; edi = y行
   219 00000B78 8B7510              <1>     mov esi, [ebp +16]  ; esi = リングバッファ
   220                              <1> 
   221                              <1>     ; リングバッファの情報を取得
   222 00000B7B 8B1E                <1>     mov ebx, [esi + ring_buff.rp]   ; rp 読み込み位置
   223 00000B7D 8D7608              <1>     lea esi, [esi + ring_buff.item] ; &KEY_BUFF[EBX]
   224 00000B80 B910000000          <1>     mov ecx, RING_ITEM_SIZE
   225                              <1> 
   226                              <1> .10L:
   227 00000B85 4B                  <1>     dec ebx ; 読み込み位置
   228 00000B86 83E30F              <1>     and ebx, RING_INDEX_MASK    ; サイズの制限
   229 00000B89 8A041E              <1>     mov al, [esi + ebx]         ; バッファ取り出し
   230                              <1> 
   231 00000B8C 68000100006A106A02- <1>     cdecl itoa, eax, .tmp, 2, 16, 0x0100    ; キーコード->文字列
   231 00000B95 68[C80B0000]50E8EF- <1>
   231 00000B9D FBFFFF6683C414      <1>
   232 00000BA4 68[C80B0000]6A0257- <1>     cdecl draw_str, edx, edi, 0x02, .tmp    ; 文字列表示
   232 00000BAC 52E83FF9FFFF6683C4- <1>
   232 00000BB5 10                  <1>
   233                              <1> 
   234 00000BB6 83C203              <1>     add edx, 3  ; 表示位置更新
   235 00000BB9 E2CA                <1>     loop .10L
   236                              <1> .10E:
   237                              <1> 
   238 00000BBB 5F                  <1>     pop edi
   239 00000BBC 5E                  <1>     pop esi
   240 00000BBD 5A                  <1>     pop edx
   241 00000BBE 59                  <1>     pop ecx
   242 00000BBF 5B                  <1>     pop ebx
   243 00000BC0 58                  <1>     pop eax
   244                              <1> 
   245 00000BC1 89EC                <1>     mov esp, ebp
   246 00000BC3 5D                  <1>     pop ebp
   247                              <1> 
   248 00000BC4 C3                  <1>     ret
   249                              <1> 
   250 00000BC5 00<rep 3h>          <1> ALIGN 4, db 0
   251 00000BC8 2D2D2000            <1> .tmp db "-- ", 0
   118                                  %include "../modules/protect/timer.s"
   119                              <1> int_en_timer0:
   120 00000BCC 50                  <1>     push eax
   121                              <1> 
   122                              <1>     outp 0x43, 0b_00_11_010_0   ; カウンタ0 下位/上位で書き込み, モード2, バイナリ
    46 00000BCD B034                <2>  mov al, %2
    47 00000BCF E643                <2>  out %1, al
   123                              <1>     outp 0x40, 0x9C             ; 下位バイト
    46 00000BD1 B09C                <2>  mov al, %2
    47 00000BD3 E640                <2>  out %1, al
   124                              <1>     outp 0x40, 0x2E             ; 上位バイト
    46 00000BD5 B02E                <2>  mov al, %2
    47 00000BD7 E640                <2>  out %1, al
   125                              <1> 
   126 00000BD9 58                  <1>     pop eax
   127                              <1> 
   128 00000BDA C3                  <1>     ret
   119                                  %include "../modules/protect/draw_rotation_bar.s"
   120                              <1> draw_rotation_bar:
   121 00000BDB 50                  <1>     push eax
   122                              <1> 
   123 00000BDC A1[0C030000]        <1>     mov eax, [TIMER_COUNT]  ; タイマー割り込みカウンタ
   124 00000BE1 C1E804              <1>     shr eax, 4              ; eax /= 4
   125 00000BE4 3B05[0C0C0000]      <1>     cmp eax, [.index]       ; if(eax == 前回値) goto .10E
   126 00000BEA 741E                <1>     je .10E
   127                              <1> 
   128 00000BEC A3[0C0C0000]        <1>     mov [.index], eax       ; 前回値設定
   129 00000BF1 83E003              <1>     and eax, 0x03           ; 前回値を0~3に正規化
   130                              <1> 
   131 00000BF4 8A80[100C0000]      <1>     mov al, [.table + eax]  ; 文字表示
   132 00000BFA 506A0F6A1D6A00E8EA- <1>     cdecl draw_char, 0, 29, 0x000F, eax
   132 00000C03 F7FFFF6683C410      <1>
   133                              <1> 
   134                              <1> .10E:
   135                              <1> 
   136 00000C0A 58                  <1>     pop eax
   137                              <1> 
   138 00000C0B C3                  <1>     ret
   139                              <1> 
   140                              <1> ALIGN 4, db 0
   141 00000C0C 00000000            <1> .index: dd 0        ; 前回値
   142 00000C10 7C2F2D5C            <1> .table: db "|/-\"   ; 表示キャラクタ
   120                                  %include "../modules/protect/call_gate.s"
   121                              <1> call_gate:
   122 00000C14 55                  <1>     push ebp
   123 00000C15 89E5                <1>     mov ebp, esp
   124                              <1> 
   125 00000C17 60                  <1>     pusha
   126 00000C18 1E                  <1>     push ds
   127 00000C19 06                  <1>     push es
   128                              <1> 
   129                              <1>     ; データ用セグメントの設定
   130 00000C1A 66B81000            <1>     mov ax, 0x0010
   131 00000C1E 8ED8                <1>     mov ds, ax
   132 00000C20 8EC0                <1>     mov es, ax
   133                              <1> 
   134                              <1>     ; 文字を表示
   135 00000C22 8B450C              <1>     mov eax, dword [ebp +12]    ; x
   136 00000C25 8B5D10              <1>     mov ebx, dword [ebp +16]    ; y
   137 00000C28 8B4D14              <1>     mov ecx, dword [ebp +20]    ; color
   138 00000C2B 8B5518              <1>     mov edx, dword [ebp +24]    ; 文字
   139 00000C2E 52515350E8BAF8FFFF- <1>     cdecl draw_str, eax, ebx, ecx, edx  ; draw_str()
   139 00000C37 6683C410            <1>
   140                              <1> 
   141 00000C3B 07                  <1>     pop es
   142 00000C3C 1F                  <1>     pop ds
   143 00000C3D 61                  <1>     popa
   144                              <1> 
   145 00000C3E 89EC                <1>     mov esp, ebp
   146 00000C40 5D                  <1>     pop ebp
   147                              <1> 
   148                              <1>     ; コードセグメントセレクタの復帰と終了
   149 00000C41 CA1000              <1>     retf 4 * 4  ; 4byte * 4引数分スタックの調整
   121                                  
   122                                  ;パディング
   123 00000C44 00<rep 13BCh>               times KERNEL_SIZE - ($ - $$) db 0
   124                                  

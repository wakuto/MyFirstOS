     1                                  ; mem map
     2                                  ; ------------+-------------------------
     3                                  ; 0x0000_0000 | システム領域
     4                                  ; ------------+-------------------------
     5                                  ; 0x0000_7C00 | ブートコード
     6                                  ; ------------+-------------------------
     7                                  ; 0x0000_9C00 | カーネル（一次読み込み）
     8                                  ; ------------+-------------------------
     9                                  ; 0x0010_1000 | カーネル（最終読み込み）
    10                                  ; ------------+-------------------------
    11                                  
    12                                  ; マクロ
    13                                  %include "../include/macro.s"   ; C言語と同等の関数呼び出し
    14                              <1> ; C言語と同等の関数呼び出し
    15                              <1> %macro cdecl 1-*.nolist ; 可変引数, リスト出力の抑止
    16                              <1> 
    17                              <1>     %rep %0 - 1         ; 引数の数-1回
    18                              <1>         push %{-1:-1}   ; 一番最後の引数
    19                              <1>         %rotate -1      ; 一番最後の引数を先頭に移動
    20                              <1>     %endrep
    21                              <1>     %rotate -1      ; 回転をもとに戻す
    22                              <1> 
    23                              <1>     call %1         ; 第１引数を呼び出し
    24                              <1> 
    25                              <1>     %if 1 < %0
    26                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)  ; cpuのbyte数(bit数/8) * 引数の数-1
    27                              <1>     %endif
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> struc drive
    31 00000000 ????                <1>     .no resw 1      ; ドライブ番号
    32 00000002 ????                <1>     .cyln resw 1    ; シリンダ
    33 00000004 ????                <1>     .head resw 1    ; ヘッド
    34 00000006 ????                <1>     .sect resw 1    ; セクタ
    35                              <1> endstruc
    36                              <1> 
    37                              <1> %macro set_vect 1-*
    38                              <1>         push eax
    39                              <1>         push edi
    40                              <1> 
    41                              <1>         mov edi, VECT_BASE + (%1 * 8)   ; ベクタアドレス
    42                              <1>         mov eax, %2
    43                              <1> 
    44                              <1>     %if 3 == %0
    45                              <1>         mov [edi + 4], %3               ; フラグ
    46                              <1>     %endif
    47                              <1> 
    48                              <1>         mov [edi + 0], ax       ; 例外アドレス[15: 0]
    49                              <1>         shr eax, 16
    50                              <1>         mov [edi + 6], ax       ; 例外アドレス[31:16]
    51                              <1> 
    52                              <1>         pop edi
    53                              <1>         pop eax
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro outp 2
    57                              <1>     mov al, %2
    58                              <1>     out %1, al
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %define RING_ITEM_SIZE (1 << 4)
    62                              <1> %define RING_INDEX_MASK (RING_ITEM_SIZE - 1)
    63                              <1> 
    64                              <1> struc ring_buff
    65 00000000 ????????            <1>     .rp resd 1                  ; RP:書き込み位置
    66 00000004 ????????            <1>     .wp resd 1                  ; WP:読み込み位置
    67 00000008 <res 10h>           <1>     .item resb RING_ITEM_SIZE   ; バッファ
    68                              <1> endstruc
    69                              <1> 
    70                              <1> %macro set_desc 2-*
    71                              <1>         push eax
    72                              <1>         push edi
    73                              <1> 
    74                              <1>         mov edi, %1     ; ディスクリプタアドレス
    75                              <1>         mov eax, %2     ; ベースアドレス
    76                              <1> 
    77                              <1>     %if 3 == %0
    78                              <1>         mov [edi + 0], %3   ; リミット
    79                              <1>     %endif
    80                              <1> 
    81                              <1>         mov [edi + 2], ax   ; ベース([15: 0])
    82                              <1>         shr eax, 16
    83                              <1>         mov [edi + 4], al   ; ベース([23:16])
    84                              <1>         mov [edi + 7], ah   ; ベース([31:24])
    85                              <1> 
    86                              <1>         pop edi
    87                              <1>         pop eax
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro set_gate 2-*
    91                              <1>     push eax
    92                              <1>     push edi
    93                              <1> 
    94                              <1>     mov edi, %1         ; ディスクリプタアドレス
    95                              <1>     mov eax, %2         ; ベースアドレス
    96                              <1> 
    97                              <1>     mov [edi + 0], ax   ; ベース([15: 0])
    98                              <1>     shr eax, 16
    99                              <1>     mov [edi + 6], ax   ; ベース([31:16])
   100                              <1> 
   101                              <1>     pop edi
   102                              <1>     pop eax
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> struc rose
   106 00000000 ????????            <1>     .x0         resd 1      ; 左上座標
   107 00000004 ????????            <1>     .y0         resd 1      ; 
   108 00000008 ????????            <1>     .x1         resd 1      ; 右下座標
   109 0000000C ????????            <1>     .y1         resd 1      ;
   110                              <1> 
   111 00000010 ????????            <1>     .n          resd 1      ; 変数n
   112 00000014 ????????            <1>     .d          resd 1      ; 変数d
   113                              <1> 
   114                              <1>     ;描画色
   115 00000018 ????????            <1>     .color_x    resd 1      ; x軸
   116 0000001C ????????            <1>     .color_y    resd 1      ; y軸
   117 00000020 ????????            <1>     .color_z    resd 1      ; 枠
   118 00000024 ????????            <1>     .color_s    resd 1      ; 文字
   119 00000028 ????????            <1>     .color_f    resd 1      ; グラフ描画
   120 0000002C ????????            <1>     .color_b    resd 1      ; グラフ消去
   121                              <1> 
   122 00000030 <res 10h>           <1>     .title      resb 16     ; タイトル
   123                              <1> endstruc
    14                                  %include "../include/define.s"  ; 各種定数の宣言
    15                              <1>     SECT_SIZE equ (512)                     ; セクタサイズ
    16                              <1> 
    17                              <1>     BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
    18                              <1>     KERNEL_SIZE equ (1024 * 8)              ; カーネルサイズ
    19                              <1> 
    20                              <1>     KERNEL_LOAD equ 0x0010_1000             ; カーネルのロード位置
    21                              <1> 
    22                              <1>     E820_RECORD_SIZE equ 20
    23                              <1> 
    24                              <1>     BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
    25                              <1>     BOOT_END equ (BOOT_LOAD + BOOT_SIZE)    ; ブートコードの終了位置
    26                              <1> 
    27                              <1>     BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートコードのセクタ数
    28                              <1>     KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)   ; カーネルのセクタ数
    29                              <1> 
    30                              <1>     VECT_BASE equ 0x0010_0000    ; 0010_0000:0010_07FF
    31                              <1> 
    32                              <1>     STACK_BASE equ 0x0010_3000              ; タスク用スタックエリア
    33                              <1>     STACK_SIZE equ 1024                     ; スタックサイズ
    34                              <1> 
    35                              <1>     SP_TASK_0 equ STACK_BASE + (STACK_SIZE * 1)
    36                              <1>     SP_TASK_1 equ STACK_BASE + (STACK_SIZE * 2)
    37                              <1>     SP_TASK_2 equ STACK_BASE + (STACK_SIZE * 3)
    38                              <1>     SP_TASK_3 equ STACK_BASE + (STACK_SIZE * 4)
    39                              <1>     SP_TASK_4 equ STACK_BASE + (STACK_SIZE * 5)
    40                              <1>     SP_TASK_5 equ STACK_BASE + (STACK_SIZE * 6)
    41                              <1>     SP_TASK_6 equ STACK_BASE + (STACK_SIZE * 7)
    42                              <1> 
    43                              <1>     PARAM_TASK_4 equ 0x0010_8000            ; 描画パラメータ：タスク4用
    44                              <1>     PARAM_TASK_5 equ 0x0010_9000            ; 描画パラメータ：タスク5用
    45                              <1>     PARAM_TASK_6 equ 0x0010_A000            ; 描画パラメータ：タスク6用
    46                              <1> 
    47                              <1>     CR3_BASE equ 0x0010_5000    ; ページ変換テーブル タスク3用
    48                              <1> 
    49                              <1>     CR3_TASK_4 equ 0x0020_0000  ; ページ変換テーブル タスク4用
    50                              <1>     CR3_TASK_5 equ 0x0020_2000  ; ページ変換テーブル タスク5用
    51                              <1>     CR3_TASK_6 equ 0x0020_4000  ; ページ変換テーブル タスク6用
    52                              <1> 
    53                              <1> 
    54                              <1>     FAT_SIZE equ (1024 * 128)   ; FAT-1/2
    55                              <1>     ROOT_SIZE equ (1024 *  16)  ; ルートディレクトリ領域
    56                              <1> 
    57                              <1>     ENTRY_SIZE equ 32           ; エントリサイズ
    58                              <1> 
    59                              <1>     ; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
    60                              <1>     FAT_OFFSET equ (BOOT_SIZE + KERNEL_SIZE)
    61                              <1>     FAT1_START equ (KERNEL_SIZE)
    62                              <1>     FAT2_START equ (FAT1_START + FAT_SIZE)
    63                              <1>     ROOT_START equ (FAT2_START + FAT_SIZE)
    64                              <1>     FILE_START equ (ROOT_START + ROOT_SIZE)
    65                              <1> 
    66                              <1>     ; ファイル属性
    67                              <1>     ATTR_READ_ONLY equ 0x01
    68                              <1>     ATTR_HIDDEN equ 0x02
    69                              <1>     ATTR_SYSTEM equ 0x04
    70                              <1>     ATTR_VOLUME_ID equ 0x08
    71                              <1>     ATTR_DIRECTORY equ 0x10
    72                              <1>     ATTR_ARCHIVE equ 0x20
    15                                  
    16                                      ORG BOOT_LOAD           ; ロードアドレスをアセンブラに指示
    17                                  
    18                                  entry:
    19 00000000 EB3C                        jmp ipl      ; jump to ipl
    20                                  
    21                                      ; BPB(BIOS Parameter Block
    22 00000002 90                          times 3 - ($ - $$) db 0x90
    23 00000003 4F454D2D4E414D45            db 'OEM-NAME'   ; OEM名
    24                                  
    25 0000000B 0002                        dw 512          ; セクタのバイト数
    26 0000000D 01                          db 1            ; クラスタのセクタ数
    27 0000000E 2000                        dw 32           ; 予約セクタ数
    28 00000010 02                          db 2            ; FAT数
    29 00000011 0002                        dw 512          ; ルートエントリ数
    30 00000013 F0FF                        dw 0xFFF0       ; 総セクタ数16
    31 00000015 F8                          db 0xF8         ; メディアタイプ
    32 00000016 0001                        dw 256          ; FATのセクタ数
    33 00000018 1000                        dw 0x10         ; トラックのセクタ数
    34 0000001A 0200                        dw 2            ; ヘッド数
    35 0000001C 00000000                    dd 0            ; 隠されたセクタ数
    36                                  
    37 00000020 00000000                    dd 0            ; 総セクタ数32
    38 00000024 80                          db 0x80         ; ドライブ番号
    39 00000025 00                          db 0            ; 予約
    40 00000026 29                          db 0x29         ; ブートフラグ
    41 00000027 EFBE0000                    dd 0xbeef       ; シリアルナンバー
    42 0000002B 424F4F5441424C4520-         db 'BOOTABLE   '; ボリュームラベル
    42 00000034 2020               
    43 00000036 4641543136202020            db 'FAT16   '   ; FATタイプ
    44                                  
    45                                  
    46                                      ; IPL(Initial Program Loader)
    47                                  ipl:
    48 0000003E FA                          cli         ; clear interrupu flag 割込み禁止
    49                                  
    50                                  
    51 0000003F B80000                      mov ax, 0x0000
    52 00000042 8ED8                        mov ds, ax
    53 00000044 8EC0                        mov es, ax
    54 00000046 8ED0                        mov ss, ax
    55 00000048 BC007C                      mov sp, BOOT_LOAD
    56                                      
    57 0000004B FB                          sti         ; set interrupt flag 割り込み許可
    58                                  
    59 0000004C 8816[9C00]                  mov [BOOT + drive.no], dl    ; ブートドライブの番号(DL)を保存
    60                                  
    61 00000050 68[7D00]E84E0083C4-         cdecl puts, .s0
    61 00000058 02                 
    62                                  
    63                                      ; 残りのセクタをすべて読み込む
    64 00000059 BB0F00                      mov bx, BOOT_SECT - 1           ; bx: 残りのブートセクタ数
    65 0000005C B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; cx: 次のロードアドレス
    66                                  
    67 0000005F 515368[9C00]E89B00-         cdecl read_chs, BOOT, bx, cx    ; ax = read_chs(BOOT, bx, cx);
    67 00000067 83C406             
    68                                  
    69 0000006A 39D8                        cmp ax, bx
    70                                  .10Q:
    71 0000006C 740C                        jz .10E                 ; 読み込んだセクタ数==読み込むセクタ数
    72                                  .10T:
    73 0000006E 68[8A00]E8300083C4-         cdecl puts, .e0         ; 失敗
    73 00000076 02                 
    74 00000077 E84900                      call reboot             ; 戻ってこない
    75                                  .10E:
    76                                      ; 次のステージへ
    77 0000007A E92506                      jmp stage_2
    78                                  
    79                                  
    80                                  ; Data
    81 0000007D 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0x00
    81 00000086 2E0A0D00           
    82 0000008A 4572726F723A736563-     .e0 db "Error:sector read", 0
    82 00000093 746F72207265616400 
    83                                  
    84                                  ALIGN 2, db 0
    85                                  BOOT:           ; ブートドライブ関係の情報
    86                                      istruc drive    ; struct driveを宣言
    87 0000009C 0000                            at drive.no, dw 0       ; ドライブ番号
    88 0000009E 0000                            at drive.cyln, dw 0     ; C:シリンダ
    89 000000A0 0000                            at drive.head, dw 0     ; H:ヘッド
    90 000000A2 0200                            at drive.sect, dw 2     ; S:セクタ
    91                                      iend
    92                                  
    93                                  ; モジュール
    94                                  %include "../modules/real/puts.s"
    95                              <1> puts:       ; void puts(str);
    96 000000A4 55                  <1>     push bp
    97 000000A5 89E5                <1>     mov bp, sp
    98                              <1> 
    99 000000A7 50                  <1>     push ax
   100 000000A8 53                  <1>     push bx
   101 000000A9 56                  <1>     push si
   102                              <1> 
   103 000000AA 8B7604              <1>     mov si, [bp + 4]    ; si=文字列のアドレス
   104                              <1> 
   105 000000AD B40E                <1>     mov ah, 0x0E
   106 000000AF BB0000              <1>     mov bx, 0x0000
   107 000000B2 FC                  <1>     cld
   108                              <1> 
   109                              <1> .10L:
   110 000000B3 AC                  <1>     lodsb
   111                              <1> 
   112 000000B4 3C00                <1>     cmp al, 0x00
   113 000000B6 7404                <1>     je .10E
   114                              <1> 
   115 000000B8 CD10                <1>     int 0x10
   116 000000BA EBF7                <1>     jmp .10L
   117                              <1> 
   118                              <1> .10E:
   119 000000BC 5E                  <1>     pop si
   120 000000BD 5B                  <1>     pop bx
   121 000000BE 58                  <1>     pop ax
   122                              <1> 
   123 000000BF 89EC                <1>     mov sp, bp
   124 000000C1 5D                  <1>     pop bp
   125                              <1> 
   126 000000C2 C3                  <1>     ret
    95                                  %include "../modules/real/reboot.s"
    96                              <1> reboot:
    97 000000C3 68[DF00]E8DBFF83C4- <1>     cdecl puts, .s0
    97 000000CB 02                  <1>
    98                              <1> 
    99                              <1> .10L:
   100 000000CC B410                <1>     mov ah, 0x10
   101 000000CE CD16                <1>     int 0x16
   102                              <1> 
   103 000000D0 3C20                <1>     cmp al, ' '
   104 000000D2 75F8                <1>     jne .10L
   105                              <1> 
   106 000000D4 68[FD00]E8CAFF83C4- <1>     cdecl puts, .s1
   106 000000DC 02                  <1>
   107                              <1> 
   108 000000DD CD19                <1>     int 0x19
   109                              <1> 
   110 000000DF 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
   110 000000E8 414345206B65792074- <1>
   110 000000F1 6F207265626F6F742E- <1>
   110 000000FA 2E2E00              <1>
   111 000000FD 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    96                                  %include "../modules/real/read_chs.s"
    97                              <1> read_chs:           ; int read_chs(drive, sect, dst);
    98                              <1> ; drive: drive構造体のアドレス
    99                              <1> ; sect:  読み出しセクタ数
   100                              <1> ; dst:   読み出し先アドレス
   101                              <1> ; 戻り値:読み込んだセクタ数
   102 00000102 55                  <1>     push bp
   103 00000103 89E5                <1>     mov bp, sp
   104 00000105 6A03                <1>     push 3          ; リトライ回数
   105 00000107 6A00                <1>     push 0          ; 読み込みセクタ数
   106                              <1> 
   107 00000109 53                  <1>     push bx
   108 0000010A 51                  <1>     push cx
   109 0000010B 52                  <1>     push dx
   110 0000010C 06                  <1>     push es
   111 0000010D 56                  <1>     push si
   112                              <1> 
   113                              <1>     ; 処理開始
   114 0000010E 8B7604              <1>     mov si, [bp + 4]    ; drive パラメータバッファ
   115                              <1>     
   116                              <1>     ; cxレジスタの設定
   117 00000111 8A6C02              <1>     mov ch, [si + drive.cyln + 0]
   118 00000114 8A4C03              <1>     mov cl, [si + drive.cyln + 1]
   119 00000117 C0E106              <1>     shl cl, 6
   120 0000011A 0A4C06              <1>     or cl, [si + drive.sect]
   121                              <1> 
   122                              <1>     ; セクタ読み込み
   123 0000011D 8A7404              <1>     mov dh, [si + drive.head];ヘッド番号
   124 00000120 8A14                <1>     mov dl, [si + drive.no] ; ドライブ番号
   125 00000122 B80000              <1>     mov ax, 0x0000          ; 初期化
   126 00000125 8EC0                <1>     mov es, ax              ; セグメント
   127 00000127 8B5E08              <1>     mov bx, [bp + 8]        ; コピー先
   128                              <1> .10L:
   129                              <1> 
   130 0000012A B402                <1>     mov ah, 0x02        ; セクタ読み込み
   131 0000012C 8A4606              <1>     mov al, [bp + 6]    ; 読み込みセクタ数
   132 0000012F CD13                <1>     int 0x13
   133 00000131 7304                <1>     jnc .11E            ; if(success) goto .11E
   134                              <1> 
   135 00000133 B000                <1>     mov al, 0           ; failed, 読み込んだセクタ数=0
   136 00000135 EB0C                <1>     jmp .10E
   137                              <1> .11E:
   138                              <1>     
   139 00000137 3C00                <1>     cmp al, 0
   140 00000139 7508                <1>     jne .10E            ; if(読み込んだセクタ != 0) goto .10E
   141                              <1>     
   142 0000013B B80000              <1>     mov ax, 0
   143 0000013E FF4EFE              <1>     dec word [bp - 2]   ; retry--
   144 00000141 75E7                <1>     jnz .10L            ; if(retry != 0) goto .10L
   145                              <1> .10E:
   146 00000143 B400                <1>     mov ah, 0           ; ステータス情報を破棄
   147                              <1> 
   148 00000145 5E                  <1>     pop si
   149 00000146 07                  <1>     pop es
   150 00000147 5A                  <1>     pop dx
   151 00000148 59                  <1>     pop cx
   152 00000149 5B                  <1>     pop bx
   153                              <1> 
   154 0000014A 89EC                <1>     mov sp, bp
   155 0000014C 5D                  <1>     pop bp
   156                              <1> 
   157 0000014D C3                  <1>     ret
    97                                  
    98 0000014E 00<rep B0h>                 times 510 - ($ - $$) db 0x00
    99 000001FE 55AA                        db 0x55, 0xAA
   100                                  
   101                                  ; リアルモード時に取得した情報
   102                                  FONT:       ; フォントデータ
   103 00000200 0000                    .seg: dw 0
   104 00000202 0000                    .off: dw 0
   105                                  ACPI_DATA:  ; ACPI data
   106 00000204 00000000                .adr: dd 0  ; ACPI data address
   107 00000208 00000000                .len: dd 0  ; ACPI data length
   108                                  
   109                                  ; モジュール（512バイトに入らなかった分）
   110                                  %include "../modules/real/itoa.s"
   111                              <1> itoa:       ; void itoa(num, buff, size, radix, flag);
   112                              <1> ; num   変換する値
   113                              <1> ; buff  保存先バッファアドレス
   114                              <1> ; size  保存先バッファサイズ
   115                              <1> ; radix 基数（2, 8, 10, 16)
   116                              <1> ; flags 
   117                              <1> ;   B2: 空白を'0'で埋める
   118                              <1> ;   B1: '+/-'記号を付加する
   119                              <1> ;   B0: 値を符号付き変数として扱う
   120                              <1> 
   121 0000020C 55                  <1>     push bp
   122 0000020D 89E5                <1>     mov bp, sp
   123                              <1> 
   124 0000020F 50                  <1>     push ax
   125 00000210 53                  <1>     push bx
   126 00000211 51                  <1>     push cx
   127 00000212 52                  <1>     push dx
   128 00000213 56                  <1>     push si
   129 00000214 57                  <1>     push di
   130                              <1> 
   131                              <1> 
   132 00000215 8B4604              <1>     mov ax, [bp + 4]    ; num
   133 00000218 8B4E08              <1>     mov cx, [bp + 8]    ; size
   134 0000021B 8B7606              <1>     mov si, [bp + 6]    ; buff
   135                              <1> 
   136 0000021E 89F7                <1>     mov di, si
   137 00000220 01CF                <1>     add di, cx
   138 00000222 4F                  <1>     dec di              ; di = &si[cx-1]
   139                              <1> 
   140 00000223 8B5E0C              <1>     mov bx, word [bp + 12]   ; flags
   141                              <1> 
   142                              <1>     ; 符号付き判定
   143 00000226 F7C30100            <1>     test bx, 0b0001     ; 論理積を計算、0ならZFをセット
   144                              <1> .10Q:
   145 0000022A 7408                <1>     je .10E         ; E=Exit
   146 0000022C 83F800              <1>     cmp ax, 0
   147                              <1> .12Q:
   148 0000022F 7D03                <1>     jge .12E
   149 00000231 83CB02              <1>     or bx, 0b0010
   150                              <1> .12E:
   151                              <1> .10E:
   152                              <1> 
   153                              <1>     ; 符号出力判定
   154 00000234 F7C30200            <1>     test bx, 0b0010
   155                              <1> .20Q:
   156 00000238 7410                <1>     je .20E
   157 0000023A 83F800              <1>     cmp ax, 0
   158                              <1> .22Q:
   159 0000023D 7D07                <1>     jge .22F
   160 0000023F F7D8                <1>     neg ax
   161 00000241 C6042D              <1>     mov [si], byte '-'
   162 00000244 EB03                <1>     jmp .22E
   163                              <1> .22F:
   164                              <1>     
   165 00000246 C6042B              <1>     mov [si], byte '+'
   166                              <1> .22E:
   167 00000249 49                  <1>     dec cx
   168                              <1> .20E:
   169                              <1> 
   170                              <1>     ; ASCII変換
   171 0000024A 8B5E0A              <1>     mov bx, [bp + 10]   ; radix(基数)
   172                              <1> .30L:
   173 0000024D BA0000              <1>     mov dx, 0
   174 00000250 F7F3                <1>     div bx      ; 商：ax, あまり: dx
   175                              <1> 
   176 00000252 89D6                <1>     mov si, dx
   177 00000254 8A94[7C02]          <1>     mov dl, byte [.ascii + si]
   178                              <1> 
   179 00000258 8815                <1>     mov [di], dl
   180 0000025A 4F                  <1>     dec di
   181                              <1> 
   182 0000025B 83F800              <1>     cmp ax, 0
   183 0000025E E0ED                <1>     loopnz .30L
   184                              <1> .30E:
   185                              <1> 
   186 00000260 83F900              <1>     cmp cx, 0
   187                              <1> .40Q:
   188 00000263 740D                <1>     je .40E
   189 00000265 B020                <1>     mov al, ' '
   190 00000267 837E0C04            <1>     cmp [bp + 12], word 0b0100
   191                              <1> .42Q:
   192 0000026B 7502                <1>     jne .42E
   193 0000026D B030                <1>     mov al, '0'
   194                              <1> .42E:
   195 0000026F FD                  <1>     std         ; dimention flag = 1(-方向)
   196 00000270 F3AA                <1>     rep stosb   ; while (--cx) *di-- = al;
   197                              <1> .40E:
   198                              <1> 
   199 00000272 5F                  <1>     pop di
   200 00000273 5E                  <1>     pop si
   201 00000274 5A                  <1>     pop dx
   202 00000275 59                  <1>     pop cx
   203 00000276 5B                  <1>     pop bx
   204 00000277 58                  <1>     pop ax
   205                              <1> 
   206 00000278 89EC                <1>     mov sp, bp
   207 0000027A 5D                  <1>     pop bp
   208                              <1> 
   209 0000027B C3                  <1>     ret
   210                              <1> 
   211 0000027C 303132333435363738- <1> .ascii db "0123456789ABCDEF"    ; 変換テーブル
   211 00000285 39414243444546      <1>
   111                                  %include "../modules/real/get_drive_param.s"
   112                              <1> get_drive_param:    ; int get_drive_param(drive);
   113                              <1> ; drive: drive構造体のアドレス
   114                              <1> ;        no 対象となるドライブ番号（BIOSから渡された起動ドライブ）
   115                              <1> ; 戻り値: 成功（0以外） 失敗（0）
   116                              <1> 
   117 0000028C 55                  <1>     push bp
   118 0000028D 89E5                <1>     mov bp, sp
   119                              <1> 
   120 0000028F 53                  <1>     push bx
   121 00000290 51                  <1>     push cx
   122 00000291 06                  <1>     push es
   123 00000292 56                  <1>     push si
   124 00000293 57                  <1>     push di
   125                              <1> 
   126                              <1>     ; 処理開始
   127 00000294 8B7604              <1>     mov si, [bp + 4]        ; si = バッファ
   128                              <1> 
   129 00000297 B80000              <1>     mov ax, 0               ; Disk Base Table Pointerの初期化
   130 0000029A 8EC0                <1>     mov es, ax              ; es = di = 0
   131 0000029C 89C7                <1>     mov di, ax
   132                              <1> 
   133 0000029E B408                <1>     mov ah, 0x08            ; ah = ドライブパラメータの取得
   134 000002A0 8A14                <1>     mov dl, [si + drive.no] ; dl = ドライブ番号
   135 000002A2 CD13                <1>     int 0x13
   136                              <1> 
   137                              <1> .10Q:
   138 000002A4 721B                <1>     jc .10F
   139                              <1> .10T:       ; 成功
   140 000002A6 88C8                <1>     mov al, cl
   141 000002A8 83E03F              <1>     and ax, 0x3f    ; alの下位6ビット セクタ数のみ有効
   142                              <1> 
   143 000002AB C0E906              <1>     shr cl, 6       ; cl = シリンダ上位2ビット
   144                              <1>                     ; ch = シリンダ下位8ビット
   145 000002AE C1C908              <1>     ror cx, 8       ; chとclを交換、cx = シリンダ
   146 000002B1 41                  <1>     inc cx          ; 1始まりに変換
   147                              <1> 
   148 000002B2 0FB6DE              <1>     movzx bx, dh    ; bx = ヘッド数 ゼロ拡張
   149 000002B5 43                  <1>     inc bx          ; 1はじまりに変換
   150                              <1> 
   151                              <1>     ; cx = シリンダ
   152                              <1>     ; bx = ヘッド
   153                              <1>     ; ax = セクタ
   154 000002B6 894C02              <1>     mov [si + drive.cyln], cx
   155 000002B9 895C04              <1>     mov [si + drive.head], bx
   156 000002BC 894406              <1>     mov [si + drive.sect], ax
   157                              <1> 
   158 000002BF EB03                <1>     jmp .10E
   159                              <1> 
   160                              <1> .10F:       ; 失敗
   161 000002C1 B80000              <1>     mov ax, 0
   162                              <1>     
   163                              <1> .10E:
   164                              <1>     
   165 000002C4 5F                  <1>     pop di
   166 000002C5 5E                  <1>     pop si
   167 000002C6 07                  <1>     pop es
   168 000002C7 59                  <1>     pop cx
   169 000002C8 5B                  <1>     pop bx
   170                              <1> 
   171 000002C9 89EC                <1>     mov sp, bp
   172 000002CB 5D                  <1>     pop bp
   173                              <1> 
   174 000002CC C3                  <1>     ret
   112                                  %include "../modules/real/get_font_adr.s"
   113                              <1> get_font_adr:   ; void get_font_adr(adr)
   114                              <1> ; adr: フォントアドレス格納位置
   115 000002CD 55                  <1>     push bp
   116 000002CE 89E5                <1>     mov bp, sp
   117                              <1> 
   118 000002D0 50                  <1>     push ax
   119 000002D1 53                  <1>     push bx
   120 000002D2 51                  <1>     push cx
   121 000002D3 52                  <1>     push dx
   122 000002D4 56                  <1>     push si
   123 000002D5 06                  <1>     push es
   124 000002D6 55                  <1>     push bp
   125                              <1> 
   126 000002D7 8B7604              <1>     mov si, [bp + 4]    ; si = adr
   127                              <1>     
   128 000002DA B83011              <1>     mov ax, 0x1130      ; フォントアドレスの取得
   129 000002DD B706                <1>     mov bh, 0x06        ; 8x16のフォント
   130 000002DF CD10                <1>     int 0x10
   131                              <1> .10Q:
   132 000002E1 7207                <1>     jc .10F
   133                              <1> .10T:   ; 成功
   134 000002E3 8C04                <1>     mov [si + 0], es    ; adr[0] = セグメント
   135 000002E5 896C02              <1>     mov [si + 2], bp    ; adr[1] = オフセット
   136 000002E8 EB0C                <1>     jmp .10E
   137                              <1> .10F:   ; 失敗
   138 000002EA 68[0103]E8B4FD83C4- <1>     cdecl puts, .e0
   138 000002F2 02                  <1>
   139 000002F3 E8CDFD              <1>     call reboot
   140                              <1> .10E:
   141 000002F6 5D                  <1>     pop bp
   142 000002F7 07                  <1>     pop es
   143 000002F8 5E                  <1>     pop si
   144 000002F9 5A                  <1>     pop dx
   145 000002FA 59                  <1>     pop cx
   146 000002FB 5B                  <1>     pop bx
   147 000002FC 58                  <1>     pop ax
   148                              <1> 
   149 000002FD 89EC                <1>     mov sp, bp
   150 000002FF 5D                  <1>     pop bp
   151                              <1> 
   152 00000300 C3                  <1>     ret
   153                              <1> 
   154 00000301 43616E277420676574- <1> .e0 db "Can't get font data.", 0
   154 0000030A 20666F6E7420646174- <1>
   154 00000313 612E00              <1>
   113                                  %include "../modules/real/get_mem_info.s"
   114                              <1> get_mem_info:   ; void get_mem_info(void)
   115                              <1> ; ACPIテーブルが含まれるメモリ領域をグローバルラベルACPI_DATAに保存する
   116 00000316 6650                <1>     push eax
   117 00000318 6653                <1>     push ebx
   118 0000031A 6651                <1>     push ecx
   119 0000031C 6652                <1>     push edx
   120 0000031E 56                  <1>     push si
   121 0000031F 57                  <1>     push di
   122 00000320 55                  <1>     push bp
   123                              <1> 
   124 00000321 BD0000              <1>     mov bp, 0
   125 00000324 66BB00000000        <1>     mov ebx, 0
   126                              <1> 
   127 0000032A 68[4C04]E874FD83C4- <1>     cdecl puts, .s4
   127 00000332 02                  <1>
   128 00000333 68[D403]E86BFD83C4- <1>     cdecl puts, .s0
   128 0000033B 02                  <1>
   129                              <1> .10L:
   130 0000033C 66B820E80000        <1>     mov eax, 0x0000E820
   131 00000342 66B914000000        <1>     mov ecx, E820_RECORD_SIZE
   132 00000348 66BA50414D53        <1>     mov edx, 'PAMS'
   133 0000034E BF[C003]            <1>     mov di, .b0
   134 00000351 CD15                <1>     int 0x15
   135                              <1> 
   136 00000353 663D50414D53        <1>     cmp eax, 'PAMS'             ; BIOSが対応しているかの確認
   137 00000359 7402                <1>     je .12E
   138 0000035B EB4C                <1>     jmp .10E
   139                              <1> .12E:   ; 対応してる
   140 0000035D 7302                <1>     jnc .14E
   141 0000035F EB48                <1>     jmp .10E
   142                              <1> .14E:   ; 成功
   143                              <1>     ; 1レコード分のメモリ情報を表示
   144 00000361 57E8FB0083C402      <1>     cdecl put_mem_info, di
   145                              <1> 
   146                              <1>     ; ACPI dataのアドレスを取得
   147 00000368 668B4510            <1>     mov eax, [di + 16]          ; データタイプを参照
   148 0000036C 6683F803            <1>     cmp eax, 3                  ; data type = 3（ACPI)
   149 00000370 750F                <1>     jne .15E
   150                              <1> 
   151 00000372 668B05              <1>     mov eax, [di + 0]           ; レコードのベースアドレス
   152 00000375 66A3[0402]          <1>     mov [ACPI_DATA.adr], eax
   153                              <1> 
   154 00000379 668B4508            <1>     mov eax, [di + 8]           ; Length
   155 0000037D 66A3[0802]          <1>     mov [ACPI_DATA.len], eax
   156                              <1> 
   157                              <1> .15E:
   158                              <1>     
   159 00000381 6683FB00            <1>     cmp ebx, 0                  ; 最終データだったら.16Eへ
   160 00000385 741C                <1>     jz .16E
   161                              <1> 
   162 00000387 45                  <1>     inc bp
   163 00000388 83E507              <1>     and bp, 0x07                ; 表示ライン数が0x07を超えてなければ.16Eへ
   164 0000038B 7516                <1>     jnz .16E
   165                              <1> 
   166                              <1>     ; 中断メッセージ
   167 0000038D 68[3404]E811FD83C4- <1>     cdecl puts, .s2
   167 00000395 02                  <1>
   168 00000396 B410                <1>     mov ah, 0x10
   169 00000398 CD16                <1>     int 0x16
   170                              <1> 
   171 0000039A 68[3F04]E804FD83C4- <1>     cdecl puts, .s3
   171 000003A2 02                  <1>
   172                              <1> 
   173                              <1> .16E:
   174                              <1> 
   175 000003A3 6683FB00            <1>     cmp ebx, 0                  ; 最終データじゃなかったらループ
   176 000003A7 7593                <1>     jne .10L
   177                              <1> 
   178                              <1> .10E:
   179 000003A9 68[0404]E8F5FC83C4- <1>     cdecl puts, .s1
   179 000003B1 02                  <1>
   180                              <1> 
   181 000003B2 5D                  <1>     pop bp
   182 000003B3 5F                  <1>     pop di
   183 000003B4 5E                  <1>     pop si
   184 000003B5 665A                <1>     pop edx
   185 000003B7 6659                <1>     pop ecx
   186 000003B9 665B                <1>     pop ebx
   187 000003BB 6658                <1>     pop eax
   188                              <1> 
   189 000003BD C3                  <1>     ret
   190                              <1> 
   191                              <1> 
   192 000003BE 00<rep 2h>          <1> ALIGN 4, db 0
   193 000003C0 00<rep 14h>         <1> .b0: times E820_RECORD_SIZE db 0
   194 000003D4 20426173655F5F5F5F- <1> .s0: db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   194 000003DD 5F5F5F5F5F5F5F5F5F- <1>
   194 000003E6 204C656E6774685F5F- <1>
   194 000003EF 5F5F5F5F5F5F5F5F5F- <1>
   194 000003F8 20547970655F5F5F5F- <1>
   194 00000401 0A0D00              <1>
   195 00000404 205F5F5F5F5F5F5F5F- <1> .s1: db " _________________ _________________ ________", 0x0A, 0x0D, 0
   195 0000040D 5F5F5F5F5F5F5F5F5F- <1>
   195 00000416 205F5F5F5F5F5F5F5F- <1>
   195 0000041F 5F5F5F5F5F5F5F5F5F- <1>
   195 00000428 205F5F5F5F5F5F5F5F- <1>
   195 00000431 0A0D00              <1>
   196 00000434 203C6D6F72652E2E2E- <1> .s2: db " <more...>", 0
   196 0000043D 3E00                <1>
   197 0000043F 0D2020202020202020- <1> .s3: db 0x0D, "          ", 0x0D, 0
   197 00000448 20200D00            <1>
   198 0000044C 2045383230204D656D- <1> .s4: db " E820 Memory Map:", 0x0A, 0x0D, 0
   198 00000455 6F7279204D61703A0A- <1>
   198 0000045E 0D00                <1>
   199                              <1> 
   200                              <1> 
   201                              <1> 
   202                              <1> put_mem_info:   ; void put_mem_info(adr);
   203                              <1> ; adr メモリ情報を参照するアドレス
   204                              <1>     
   205 00000460 55                  <1>     push bp
   206 00000461 89E5                <1>     mov bp, sp
   207                              <1> 
   208 00000463 53                  <1>     push bx
   209 00000464 56                  <1>     push si
   210                              <1> 
   211 00000465 8B7604              <1>     mov si, [bp + 4]
   212                              <1> 
   213                              <1>     ; レコード全20ビットを文字に変換し出力
   214                              <1>     ; Base(64bit)
   215 00000468 6A046A106A0468-     <1>     cdecl itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   215 0000046F [3F05]FF7406E895FD- <1>
   215 00000477 83C40A              <1>
   216 0000047A 6A046A106A0468-     <1>     cdecl itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   216 00000481 [4305]FF7404E883FD- <1>
   216 00000489 83C40A              <1>
   217 0000048C 6A046A106A0468-     <1>     cdecl itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   217 00000493 [4805]FF7402E871FD- <1>
   217 0000049B 83C40A              <1>
   218 0000049E 6A046A106A0468-     <1>     cdecl itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   218 000004A5 [4C05]FF34E860FD83- <1>
   218 000004AD C40A                <1>
   219                              <1> 
   220                              <1>     ; Length(64bit)
   221 000004AF 6A046A106A0468-     <1>     cdecl itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
   221 000004B6 [5105]FF740EE84EFD- <1>
   221 000004BE 83C40A              <1>
   222 000004C1 6A046A106A0468-     <1>     cdecl itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
   222 000004C8 [5505]FF740CE83CFD- <1>
   222 000004D0 83C40A              <1>
   223 000004D3 6A046A106A0468-     <1>     cdecl itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
   223 000004DA [5A05]FF740AE82AFD- <1>
   223 000004E2 83C40A              <1>
   224 000004E5 6A046A106A0468-     <1>     cdecl itoa, word [si +  8], .p5 + 4, 4, 16, 0b0100
   224 000004EC [5E05]FF7408E818FD- <1>
   224 000004F4 83C40A              <1>
   225                              <1> 
   226                              <1>     ; Type(32bit)
   227 000004F7 6A046A106A0468-     <1>     cdecl itoa, word [si + 18], .p6 + 0, 4, 16, 0b0100
   227 000004FE [6305]FF7412E806FD- <1>
   227 00000506 83C40A              <1>
   228 00000509 6A046A106A0468-     <1>     cdecl itoa, word [si + 16], .p6 + 4, 4, 16, 0b0100
   228 00000510 [6705]FF7410E8F4FC- <1>
   228 00000518 83C40A              <1>
   229                              <1> 
   230 0000051B 68[3E05]E883FB83C4- <1>     cdecl puts, .s1
   230 00000523 02                  <1>
   231                              <1> 
   232                              <1>     ; タイプの情報を文字列で表示
   233 00000524 8B5C10              <1>     mov bx, [si + 16]
   234 00000527 83E307              <1>     and bx, 0x07            ; bxの下位3ビットがタイプ
   235 0000052A D1E3                <1>     shl bx, 1
   236 0000052C 81C3[C005]          <1>     add bx, .t0
   237 00000530 FF37E86FFB83C402    <1>     cdecl puts, word [bx]   ; .t0からのオフセット
   238                              <1> 
   239 00000538 5E                  <1>     pop si
   240 00000539 5B                  <1>     pop bx
   241                              <1>     
   242 0000053A 89EC                <1>     mov sp, bp
   243 0000053C 5D                  <1>     pop bp
   244                              <1> 
   245 0000053D C3                  <1>     ret
   246                              <1> 
   247 0000053E 20                  <1> .s1: db " "
   248 0000053F 5A5A5A5A5A5A5A5A5F  <1> .p2: db "ZZZZZZZZ_"
   249 00000548 5A5A5A5A5A5A5A5A20  <1> .p3: db "ZZZZZZZZ "
   250 00000551 5A5A5A5A5A5A5A5A5F  <1> .p4: db "ZZZZZZZZ_"
   251 0000055A 5A5A5A5A5A5A5A5A20  <1> .p5: db "ZZZZZZZZ "
   252 00000563 5A5A5A5A5A5A5A5A00  <1> .p6: db "ZZZZZZZZ", 0
   253                              <1> 
   254 0000056C 2028556E6B6E6F776E- <1> .s4: db " (Unknown)", 0x0A, 0x0D, 0
   254 00000575 290A0D00            <1>
   255 00000579 2028757361626C6529- <1> .s5: db " (usable)", 0x0A, 0x0D, 0
   255 00000582 0A0D00              <1>
   256 00000585 202872657365727665- <1> .s6: db " (reserved)", 0x0A, 0x0D, 0
   256 0000058E 64290A0D00          <1>
   257 00000593 202841435049206461- <1> .s7: db " (ACPI data)", 0x0A, 0x0D, 0
   257 0000059C 7461290A0D00        <1>
   258 000005A2 202841435049204E56- <1> .s8: db " (ACPI NVS)", 0x0A, 0x0D, 0
   258 000005AB 53290A0D00          <1>
   259 000005B0 2028626164206D656D- <1> .s9: db " (bad memory)", 0x0A, 0x0D, 0
   259 000005B9 6F7279290A0D00      <1>
   260                              <1> 
   261 000005C0 [6C05][7905][8505]- <1> .t0: dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   261 000005C6 [9305][A205][B005]- <1>
   261 000005CC [6C05][6C05]        <1>
   114                                  %include "../modules/real/kbc.s"
   115                              <1> KBC_Data_Write:     ; int KBC_Data_Write(data);
   116                              <1> ; data: 書き込みデータ
   117                              <1> ; 返り値 成功（0以外）失敗（0）
   118 000005D0 55                  <1>     push bp
   119 000005D1 89E5                <1>     mov bp, sp
   120                              <1> 
   121 000005D3 51                  <1>     push cx
   122                              <1> 
   123 000005D4 B90300              <1>     mov cx, 3
   124                              <1> .10L:
   125 000005D7 E464                <1>     in al, 0x64     ; al = input(0x64) KBCステータス
   126 000005D9 A802                <1>     test al, 0x02   ; zf = al & 0x02   書き込み可能か？ zf != 0のときに書き込める
   127 000005DB E0FA                <1>     loopnz .10L
   128                              <1> 
   129 000005DD 83F900              <1>     cmp cx, 0       ; タイムアウトしたらgoto .20E
   130 000005E0 7405                <1>     jz .20E
   131                              <1> 
   132 000005E2 8A4604              <1>     mov al, [bp + 4]    ; 引数をkbcに書き込み
   133 000005E5 E660                <1>     out 0x60, al
   134                              <1> 
   135                              <1> .20E:
   136 000005E7 89C8                <1>     mov ax, cx      ; 残り試行回数が返り値
   137                              <1> 
   138 000005E9 59                  <1>     pop cx
   139                              <1> 
   140 000005EA 89EC                <1>     mov sp, bp
   141 000005EC 5D                  <1>     pop bp
   142                              <1> 
   143 000005ED C3                  <1>     ret
   144                              <1> 
   145                              <1> 
   146                              <1> KBC_Data_Read:      ; int KBC_Data_read(data);
   147                              <1> ; data 読み込みデータ格納アドレス
   148                              <1> ; 返り値 成功（0以外）失敗（0）
   149 000005EE 55                  <1>     push bp
   150 000005EF 89E5                <1>     mov bp, sp
   151                              <1> 
   152 000005F1 50                  <1>     push ax
   153 000005F2 51                  <1>     push cx
   154 000005F3 57                  <1>     push di
   155                              <1> 
   156 000005F4 B90300              <1>     mov cx, 3
   157                              <1> .10L:
   158 000005F7 E464                <1>     in al, 0x64
   159 000005F9 A801                <1>     test al, 0x01       ; 出力バッファフルを確認 zf == 1 のときに読み込める
   160 000005FB E1FA                <1>     loopz .10L
   161                              <1> 
   162 000005FD 83F900              <1>     cmp cx, 0   ; タイム・アウトしたらgoto .20E
   163 00000600 7409                <1>     jz .20E
   164                              <1> 
   165 00000602 B400                <1>     mov ah, 0x00
   166 00000604 E460                <1>     in al, 0x60
   167                              <1> 
   168 00000606 8B7E04              <1>     mov di, [bp + 4]
   169 00000609 8905                <1>     mov [di + 0], ax
   170                              <1> 
   171                              <1> .20E:
   172 0000060B 89C8                <1>     mov ax, cx
   173                              <1> 
   174 0000060D 5F                  <1>     pop di
   175 0000060E 59                  <1>     pop cx
   176 0000060F 58                  <1>     pop ax
   177                              <1> 
   178 00000610 89EC                <1>     mov sp, bp
   179 00000612 5D                  <1>     pop bp
   180                              <1> 
   181 00000613 C3                  <1>     ret
   182                              <1> 
   183                              <1> 
   184                              <1> KBC_Cmd_Write:      ; int KBC_Cmd_Write(cmd);
   185                              <1> ; cmd: 書き込みコマンド
   186                              <1> ; 返り値 成功（0以外）失敗（0）
   187 00000614 55                  <1>     push bp
   188 00000615 89E5                <1>     mov bp, sp
   189                              <1> 
   190 00000617 51                  <1>     push cx
   191                              <1> 
   192 00000618 B90300              <1>     mov cx, 3
   193                              <1> .10L:
   194 0000061B E464                <1>     in al, 0x64     ; al = input(0x64) KBCステータス
   195 0000061D A802                <1>     test al, 0x02   ; zf = al & 0x02   書き込み可能か？ zf != 0のときに書き込める
   196 0000061F E0FA                <1>     loopnz .10L
   197                              <1> 
   198 00000621 83F900              <1>     cmp cx, 0       ; タイムアウトしたらgoto .20E
   199 00000624 7405                <1>     jz .20E
   200                              <1> 
   201 00000626 8A4604              <1>     mov al, [bp + 4]    ; 引数をkbcに書き込み
   202 00000629 E664                <1>     out 0x64, al
   203                              <1> 
   204                              <1> .20E:
   205 0000062B 89C8                <1>     mov ax, cx      ; 残り試行回数が返り値
   206                              <1> 
   207 0000062D 59                  <1>     pop cx
   208                              <1> 
   209 0000062E 89EC                <1>     mov sp, bp
   210 00000630 5D                  <1>     pop bp
   211                              <1> 
   212 00000631 C3                  <1>     ret
   115                                  %include "../modules/real/read_lba.s"
   116                              <1> read_lba:   ; int read_lba(drive, lba, sect, dst);
   117                              <1> ; drive drive構造体のアドレス（ドライブパラメータが格納されている）
   118                              <1> ; lba LBA
   119                              <1> ; sect 読み出しセクタ数
   120                              <1> ; dst 読み出し先アドレス
   121                              <1> ; 戻り値 読み込んだセクタ数
   122                              <1> 
   123 00000632 55                  <1>     push bp
   124 00000633 89E5                <1>     mov bp, sp
   125                              <1> 
   126 00000635 50                  <1>     push ax
   127 00000636 56                  <1>     push si
   128                              <1> 
   129 00000637 8B7604              <1>     mov si, [bp + 4]        ; si = ドライブ情報
   130                              <1> 
   131                              <1>     ; LBA->CHS変換
   132 0000063A 8B4606              <1>     mov ax, [bp + 6]
   133 0000063D 5068[6106]56E82400- <1>     cdecl lba_chs, si, .chs, ax ; lba_chs(drive, .chs, AX);
   133 00000645 83C406              <1>
   134                              <1> 
   135                              <1>     ; ドライブ番号のコピー
   136 00000648 8A04                <1>     mov al, [si + drive.no]
   137 0000064A A2[6106]            <1>     mov [.chs + drive.no], al   ; ドライブ番号保存
   138                              <1> 
   139                              <1>     ; セクタの読み込み
   140 0000064D FF760AFF760868-     <1>     cdecl read_chs, .chs, word [bp + 8], word [bp + 10] ; ax = read_chs(.chs, セクタ数 , ofs);
   140 00000654 [6106]E8A9FA83C406  <1>
   141                              <1> 
   142 0000065C 5E                  <1>     pop si
   143                              <1> 
   144 0000065D 89EC                <1>     mov sp, bp
   145 0000065F 5D                  <1>     pop bp
   146                              <1> 
   147 00000660 C3                  <1>     ret
   148                              <1> 
   149 00000661 00<rep 8h>          <1> .chs: times drive_size  db 0        ; 読み込みセクタに関する情報
   116                                  %include "../modules/real/lba_chs.s"
   117                              <1> lba_chs:    ; lba_chs(drive, drive_chs, lba);
   118                              <1> ; drive drive構造体のアドレス（ドライブパラメータが格納されている）
   119                              <1> ; drv_chs drive構造体のアドレス（変換後のシリンダ番号、ヘッド番号、セクタ番号を保存する）
   120                              <1> ; lba LBA
   121                              <1> ; 戻り値 成功(0以外) 失敗(0)
   122 00000669 55                  <1>     push bp
   123 0000066A 89E5                <1>     mov bp, sp
   124                              <1> 
   125 0000066C 53                  <1>     push bx
   126 0000066D 52                  <1>     push dx
   127 0000066E 56                  <1>     push si
   128 0000066F 57                  <1>     push di
   129                              <1> 
   130                              <1> 
   131 00000670 8B7604              <1>     mov si, [bp + 4]            ; driveバッファ
   132 00000673 8B7E06              <1>     mov di, [bp + 6]            ; drv_chsバッファ
   133                              <1> 
   134 00000676 8A4404              <1>     mov al, [si + drive.head]   ; al = 最大ヘッド数
   135 00000679 F66406              <1>     mul byte [si + drive.sect]  ; ax = 最大ヘッド数 * 最大セクタ数
   136 0000067C 89C3                <1>     mov bx, ax                  ; bx = シリンダあたりのセクタ数
   137                              <1> 
   138 0000067E BA0000              <1>     mov dx, 0                   ; dx = lba(上位2byte)
   139 00000681 8B4608              <1>     mov ax, [bp + 8]            ; ax = lba(下位2byte)
   140 00000684 F7F3                <1>     div bx                      ; dx = dx:ax % bx   あまり
   141                              <1>                                 ; ax = dx:ax / bx   シリンダ番号
   142 00000686 894502              <1>     mov [di + drive.cyln], ax   ; drv_chs.cyln = シリンダ番号
   143                              <1> 
   144 00000689 89D0                <1>     mov ax, dx                  ; ax = あまり
   145 0000068B F67406              <1>     div byte [si + drive.sect]  ; ah = ax % 最大セクタ数    // セクタ番号
   146                              <1>                                 ; al = ax / 最大セクタ数    // シリンダ番号
   147                              <1> 
   148 0000068E 0FB6D4              <1>     movzx dx, ah                ; dx = セクタ番号
   149 00000691 42                  <1>     inc dx                      ; １始まりにする
   150                              <1> 
   151 00000692 B400                <1>     mov ah, 0x00                ; ax = ヘッド位置(0x00:al)
   152                              <1> 
   153 00000694 894504              <1>     mov [di + drive.head], ax   ; drv_chs.head = ヘッド番号
   154 00000697 895506              <1>     mov [di + drive.sect], dx   ; drv_chs.sect = セクタ番号
   155                              <1> 
   156 0000069A 5F                  <1>     pop di
   157 0000069B 5E                  <1>     pop si
   158 0000069C 5A                  <1>     pop dx
   159 0000069D 5B                  <1>     pop bx
   160                              <1> 
   161 0000069E 89EC                <1>     mov sp, bp
   162 000006A0 5D                  <1>     pop bp
   163                              <1> 
   164 000006A1 C3                  <1>     ret
   117                                  
   118                                  ; ブート処理の第２ステージ
   119                                  stage_2:
   120 000006A2 68[5F07]E8FCF983C4-         cdecl puts, .s0
   120 000006AA 02                 
   121                                  
   122                                      ; ドライブ情報を取得
   123 000006AB 68[9C00]E8DBFB83C4-         cdecl get_drive_param, BOOT
   123 000006B3 02                 
   124 000006B4 83F800                      cmp ax, 0
   125                                  .10Q:
   126 000006B7 750C                        jne .10E
   127                                  .10T:   ; 失敗
   128 000006B9 68[4407]E8E5F983C4-         cdecl puts, .e0
   128 000006C1 02                 
   129 000006C2 E8FEF9                      call reboot
   130                                  
   131                                  .10E:   ; 成功
   132                                      ; ドライブ情報を表示
   133 000006C5 A1[9C00]                    mov ax, [BOOT + drive.no]
   134 000006C8 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
   134 000006CF [2507]50E837FB83C4-
   134 000006D7 0A                 
   135 000006D8 A1[9E00]                    mov ax, [BOOT + drive.cyln]
   136 000006DB 6A046A106A0468-             cdecl itoa, ax, .p2, 4, 16, 0b0100
   136 000006E2 [2D07]50E824FB83C4-
   136 000006EA 0A                 
   137 000006EB A1[A000]                    mov ax, [BOOT + drive.head]
   138 000006EE 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
   138 000006F5 [3707]50E811FB83C4-
   138 000006FD 0A                 
   139 000006FE A1[A200]                    mov ax, [BOOT + drive.sect]
   140 00000701 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
   140 00000708 [3F07]50E8FEFA83C4-
   140 00000710 0A                 
   141 00000711 68[1C07]E88DF983C4-         cdecl puts, .s1
   141 00000719 02                 
   142                                      
   143                                      ; 次のステージへ
   144 0000071A EB52                        jmp stage_3rd
   145                                  
   146 0000071C 2044726976653A3078      .s1 db " Drive:0x"
   147 00000725 20202C20433A3078        .p1 db "  , C:0x"
   148 0000072D 202020202C20483A30-     .p2 db "    , H:0x"
   148 00000736 78                 
   149 00000737 20202C20533A3078        .p3 db "  , S:0x"
   150 0000073F 20200A0D00              .p4 db "  ", 0x0A, 0x0D, 0
   151                                  
   152 00000744 43616E277420676574-     .e0 db "Can't get drive parameter.", 0
   152 0000074D 206472697665207061-
   152 00000756 72616D657465722E00 
   153                                  
   154                                  ; Data
   155 0000075F 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   155 00000768 2E2E2E0A0D00       
   156                                  
   157                                  ; ブート処理の第３ステージ
   158                                  stage_3rd:
   159                                      ; 文字列を表示
   160 0000076E 68[EB07]E830F983C4-         cdecl puts, .s0
   160 00000776 02                 
   161                                  
   162 00000777 68[0002]E850FB83C4-         cdecl get_font_adr, FONT    ; BIOSのフォントアドレスを取得
   162 0000077F 02                 
   163                                  
   164                                      ; フォントアドレスの表示
   165 00000780 6A046A106A0468-             cdecl itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   165 00000787 [0808]FF36[0002]E8-
   165 0000078E 7CFA83C40A         
   166 00000793 6A046A106A0468-             cdecl itoa, word [FONT.off], .p2, 4, 16, 0b0100
   166 0000079A [0D08]FF36[0202]E8-
   166 000007A1 69FA83C40A         
   167 000007A6 68[FA07]E8F8F883C4-         cdecl puts, .s1
   167 000007AE 02                 
   168                                  
   169                                      ; メモリ情報の取得と表示
   170 000007AF E864FB                      cdecl get_mem_info              ; get_mem_info()
   171                                  
   172 000007B2 66A1[0402]                  mov eax, [ACPI_DATA.adr]
   173 000007B6 6683F800                    cmp eax, 0                      ; if(eax == 0) goto .10E
   174 000007BA 742D                        je .10E
   175                                  
   176 000007BC 6A046A106A0468-             cdecl itoa, ax, .p4, 4, 16, 0b0100  ; 下位１６ビットを変換
   176 000007C3 [2608]50E843FA83C4-
   176 000007CB 0A                 
   177 000007CC 66C1E810                    shr eax, 16
   178 000007D0 6A046A106A0468-             cdecl itoa, ax, .p3, 4, 16, 0b0100  ; 上位１６ビットを変換
   178 000007D7 [2208]50E82FFA83C4-
   178 000007DF 0A                 
   179                                  
   180 000007E0 68[1708]E8BEF883C4-         cdecl puts, .s2
   180 000007E8 02                 
   181                                  .10E:
   182                                      
   183                                      ; 次のステージへ
   184 000007E9 EB42                        jmp stage_4
   185                                  
   186                                  
   187                                  ; データ
   188 000007EB 337264207374616765-     .s0 db "3rd stage...", 0x0A, 0x0D, 0
   188 000007F4 2E2E2E0A0D00       
   189 000007FA 20466F6E7420416464-     .s1 db " Font Address="
   189 00000803 726573733D         
   190 00000808 5A5A5A5A3A              .p1 db "ZZZZ:"
   191 0000080D 5A5A5A5A0A0D00          .p2 db "ZZZZ", 0x0A, 0x0D, 0
   192 00000814 0A0D00                      db 0x0A, 0x0D, 0
   193                                  
   194 00000817 204143504920646174-     .s2 db " ACPI data="
   194 00000820 613D               
   195 00000822 5A5A5A5A                .p3 db "ZZZZ"
   196 00000826 5A5A5A5A0A0D00          .p4 db "ZZZZ", 0x0A, 0x0D, 0
   197                                  
   198                                  
   199                                  ; ブート処理の第４ステージ
   200                                  stage_4:
   201 0000082D 68[0109]E871F883C4-         cdecl puts, .s0
   201 00000835 02                 
   202                                  
   203                                      ; A20ゲート有効化
   204 00000836 FA                          cli                         ; 割込み禁止
   205 00000837 68AD00E8D7FD83C402          cdecl KBC_Cmd_Write, 0xAD   ; キーボード無効化
   206 00000840 68D000E8CEFD83C402          cdecl KBC_Cmd_Write, 0xD0   ; 出力ポート読み出しコマンド
   207 00000849 68[4A09]E89FFD83C4-         cdecl KBC_Data_Read, .key   ; 出力ポートデータ
   207 00000851 02                 
   208                                  
   209 00000852 8A1E[4A09]                  mov bl, [.key]
   210 00000856 80CB02                      or bl, 0x02         ; A20ゲート有効化
   211                                  
   212 00000859 68D100E8B5FD83C402          cdecl KBC_Cmd_Write, 0xD1   ; 出力ポート書き込みコマンド
   213 00000862 53E86AFD83C402              cdecl KBC_Data_Write, bx    ; 出力ポートデータ
   214                                  
   215 00000869 68AE00E8A5FD83C402          cdecl KBC_Cmd_Write, 0xAE   ; キーボード有効化
   216 00000872 FB                          sti                         ; 割り込み許可
   217                                  
   218 00000873 68[1009]E82BF883C4-         cdecl puts, .s1
   218 0000087B 02                 
   219                                  
   220                                      ; キーボードLEDのテスト
   221 0000087C 68[2509]E822F883C4-         cdecl puts, .s2
   221 00000884 02                 
   222                                      
   223 00000885 BB0000                      mov bx, 0
   224                                  .10L: 
   225 00000888 B400                        mov ah, 0x00    ; キー入力
   226 0000088A CD16                        int 0x16        ; al = keyinput()
   227                                  
   228                                      ; 1～3以外のキーを押すとループ終了
   229 0000088C 3C31                        cmp al, '1'
   230 0000088E 7266                        jb .10E
   231                                  
   232 00000890 3C33                        cmp al, '3'
   233 00000892 7762                        ja .10E
   234                                  
   235                                      ; 0x31～0x33を 0～2に変換
   236 00000894 88C1                        mov cl, al
   237 00000896 FEC9                        dec cl
   238 00000898 80E103                      and cl, 0x03
   239 0000089B B80100                      mov ax, 0x0001  ; マスクを0～2ビットシフト
   240 0000089E D3E0                        shl ax, cl
   241 000008A0 31C3                        xor bx, ax      ; 押されたらLEDの状態を反転
   242                                  
   243                                      ; LEDコマンドの送信
   244 000008A2 FA                          cli             ; 割込み禁止
   245                                  
   246 000008A3 68AD00E86BFD83C402          cdecl KBC_Cmd_Write, 0xAD   ; キーボード無効化
   247                                  
   248 000008AC 68ED00E81EFD83C402          cdecl KBC_Data_Write, 0xED  ; LEDコマンド
   249 000008B5 68[4A09]E833FD83C4-         cdecl KBC_Data_Read, .key   ; Ack受信
   249 000008BD 02                 
   250                                  
   251 000008BE 803E[4A09]FA                cmp [.key], byte 0xFA       ; Ack受け取れなかったらgoto .11F
   252 000008C3 7509                        jne .11F
   253                                  
   254 000008C5 53E807FD83C402              cdecl KBC_Data_Write, bx    ; 受け取れたらLEDデータ出力
   255 000008CC EB1C                        jmp .11E
   256                                  .11F:   ; Ack失敗
   257 000008CE 6A046A106A0268-             cdecl itoa, word [.key], .e1, 2, 16, 0b0100
   257 000008D5 [4609]FF36[4A09]E8-
   257 000008DC 2EF983C40A         
   258 000008E1 68[4509]E8BDF783C4-         cdecl puts, .e0
   258 000008E9 02                 
   259                                  .11E:   ; Ack成功
   260 000008EA 68AE00E824FD83C402          cdecl KBC_Cmd_Write, 0xAE   ; キーボード有効化
   261                                  
   262 000008F3 FB                          sti             ; 割り込み許可
   263                                  
   264 000008F4 EB92                        jmp .10L
   265                                  .10E:
   266 000008F6 68[3B09]E8A8F783C4-         cdecl puts, .s3
   266 000008FE 02                 
   267                                  
   268                                      ; 次のステージへ移行
   269 000008FF EB4B                        jmp stage_5
   270                                  
   271                                  
   272 00000901 347468207374616765-     .s0: db "4th stage...", 0x0A, 0x0D, 0
   272 0000090A 2E2E2E0A0D00       
   273 00000910 204132302047617465-     .s1: db " A20 Gate Enabled.", 0x0A, 0x0D, 0
   273 00000919 20456E61626C65642E-
   273 00000922 0A0D00             
   274 00000925 204B6579626F617264-     .s2: db " Keyboard LED Test...", 0
   274 0000092E 204C45442054657374-
   274 00000937 2E2E2E00           
   275 0000093B 2028646F6E65290A0D-     .s3: db " (done)", 0x0A, 0x0D, 0
   275 00000944 00                 
   276 00000945 5B                      .e0: db "["
   277 00000946 5A5A5D00                .e1: db "ZZ]", 0
   278                                  
   279 0000094A 0000                    .key: dw 0
   280                                  
   281                                  
   282                                  ; ブート処理の第５ステージ
   283                                  stage_5:
   284 0000094C 68[7809]E852F783C4-         cdecl puts, .s0
   284 00000954 02                 
   285                                  
   286                                      ; カーネルを読み込む
   287 00000955 68009C6A106A1068-           cdecl read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   287 0000095D [9C00]E8D0FC83C408 
   288 00000965 83F810                      cmp ax, KERNEL_SECT     
   289                                  .10Q:
   290 00000968 740C                        jz .10E                 ; if(読み込みセクタ数 == 読み込んだセクタ数) goto .10E
   291                                  .10T:
   292 0000096A 68[8709]E834F783C4-         cdecl puts, .e0
   292 00000972 02                 
   293 00000973 E84DF7                      call reboot
   294                                  .10E:
   295                                      ; 次のステージへ
   296 00000976 EB29                        jmp stage_6
   297                                  
   298 00000978 357468207374616765-     .s0: db "5th stage...", 0x0A, 0x0D, 0
   298 00000981 2E2E2E0A0D00       
   299 00000987 204661696C75726520-     .e0: db " Failure load kernel...", 0x0A, 0x0D, 0
   299 00000990 6C6F6164206B65726E-
   299 00000999 656C2E2E2E0A0D00   
   300                                  
   301                                  ; ブート処理の第６ステージ
   302                                  stage_6:
   303 000009A1 68[B909]E8FDF683C4-         cdecl puts, .s0
   303 000009A9 02                 
   304                                  
   305                                      ; ユーザーからの入力待ち
   306                                  .10L:
   307 000009AA B400                        mov ah, 0x00        ; キー入力待ち
   308 000009AC CD16                        int 0x16
   309 000009AE 3C20                        cmp al, ' '         ; if(input != ' ') goto .10L
   310 000009B0 75F8                        jne .10L
   311                                  
   312                                      ; ビデオモードの設定
   313 000009B2 B81200                      mov ax, 0x0012
   314 000009B5 CD10                        int 0x10
   315                                  
   316                                      ; 次のステージへ
   317 000009B7 EB5B                        jmp stage_7
   318                                  
   319 000009B9 367468207374616765-     .s0: db "6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   319 000009C2 2E2E2E0A0D0A0D     
   320 000009C9 205B50757368205350-          db " [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0
   320 000009D2 414345206B65792074-
   320 000009DB 6F2070726F74656374-
   320 000009E4 206D6F64652E2E2E5D-
   320 000009ED 0A0D00             
   321                                  
   322                                  
   323                                  ; GLOBAL DESCRIPTOR TABLE
   324                                  ; セグメントディスクリプタの配列
   325                                  ALIGN 4, db 0
   326 000009F0 0000000000000000        GDT: dq 0x00_0_0_0_0_000000_0000   ; NULL
   327 000009F8 FFFF0000009ACF00        .cs: dq 0x00_C_F_9_A_000000_FFFF   ; CODE 4G
   328 00000A00 FFFF00000092CF00        .ds: dq 0x00_C_F_9_2_000000_FFFF   ; DATA 4G
   329                                  .gdt_end:
   330                                  
   331                                  ; セレクタ
   332                                  SEL_CODE equ .cs - GDT       ; コード用セレクタ
   333                                  SEL_DATA equ .ds - GDT       ; データ用セレクタ
   334                                  
   335                                  ; GDT(Global Descriptor Table)
   336 00000A08 1700                    GDTR: dw GDT.gdt_end - GDT - 1  ; ディスクリプタテーブルのリミット
   337 00000A0A [F0090000]                    dd GDT                    ; ディスクリプタテーブルのアドレス
   338                                  
   339                                  ; IDT(Interrupt Descriptor Table) 割込み禁止のため
   340 00000A0E 0000                    IDTR: dw 0          ; IDTリミット
   341 00000A10 00000000                      dd 0          ; IDTアドレス
   342                                  
   343                                  
   344                                  ; ブート処理の第７ステージ
   345                                  stage_7:
   346 00000A14 FA                          cli
   347                                  
   348                                      ; ディスクリプタテーブルをロード
   349 00000A15 0F0116[080A]                lgdt [GDTR]                 ; gdtレジスタにグローバルディスクリプタテーブルをロード
   350 00000A1A 0F011E[0E0A]                lidt [IDTR]                 ; ldtレジスタに割り込みディスクリプタテーブルをロード
   351                                  
   352                                      ; プロテクトモードに移行
   353 00000A1F 0F20C0                      mov eax, cr0
   354 00000A22 83C801                      or ax, 1                     ; cr0レジスタのpe(protect enable)をセット
   355 00000A25 0F22C0                      mov cr0, eax
   356                                  
   357                                      ; プロテクトモードに移行したのでパイプラインの命令は破棄したい
   358 00000A28 EB00                        jmp $ + 2                   ; パイプラインのクリア
   359                                  
   360                                      ; セグメント間ジャンプ
   361                                  [BITS 32]                       ; これ移行32ビットコードを生成
   362 00000A2A 66                          DB 0x66                     ; セグメントサイズオーバーライドプレフィックス！！！（かっこいい）
   363 00000A2B EA[320A0000]0800            jmp SEL_CODE:CODE_32
   364                                  
   365                                  
   366                                  ; 32ビットコード開始
   367                                  CODE_32:        
   368                                      ; セレクタを初期化
   369                                      ; 各種セグメントレジスタにデータセグメントディスクリプタのオフセットを設定
   370 00000A32 66B81000                    mov ax, SEL_DATA
   371 00000A36 8ED8                        mov ds, ax
   372 00000A38 8EC0                        mov es, ax
   373 00000A3A 8EE0                        mov fs, ax
   374 00000A3C 8EE8                        mov gs, ax
   375 00000A3E 8ED0                        mov ss, ax
   376                                  
   377                                      ; カーネル部をコピー
   378 00000A40 B900080000                  mov ecx, (KERNEL_SIZE) / 4      ; 4バイトずつコピー
   379 00000A45 BE009C0000                  mov esi, BOOT_END               ; カーネル部の先頭アドレス(0x0000_9C00)
   380 00000A4A BF00101000                  mov edi, KERNEL_LOAD            ; カーネルのロード位置(0x0010_1000)
   381 00000A4F FC                          cld                             ; DFクリア（＋方向）
   382 00000A50 F3A5                        rep movsd                       ; while(--ecx) *edi++ = *esi++;
   383                                  
   384                                      ; カーネル処理に移行
   385 00000A52 E9(00101000)                jmp KERNEL_LOAD                 ; カーネルの先頭にジャンプ
   386                                  
   387                                  ; パディング(このファイルは8kBとする）
   388 00000A57 00<rep 15A9h>               times BOOT_SIZE - ($ - $$) db 0 ; 8kB
